
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095e8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  080097c8  080097c8  0000a7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a38  08009a38  0000b13c  2**0
                  CONTENTS
  4 .ARM          00000008  08009a38  08009a38  0000aa38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a40  08009a40  0000b13c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a40  08009a40  0000aa40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a44  08009a44  0000aa44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08009a48  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  2000013c  08009b84  0000b13c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000650  08009b84  0000b650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b13c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a9a3  00000000  00000000  0000b16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003682  00000000  00000000  00025b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  00029198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001123  00000000  00000000  0002a7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a277  00000000  00000000  0002b8e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ac32  00000000  00000000  00055b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001149f6  00000000  00000000  0007078c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00185182  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069b0  00000000  00000000  001851c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  0018bb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000013c 	.word	0x2000013c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080097b0 	.word	0x080097b0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000140 	.word	0x20000140
 800021c:	080097b0 	.word	0x080097b0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2220      	movs	r2, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f008 f843 	bl	8008684 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005fe:	4b32      	ldr	r3, [pc, #200]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000600:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000604:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000606:	4b30      	ldr	r3, [pc, #192]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000608:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800060c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060e:	4b2e      	ldr	r3, [pc, #184]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000614:	4b2c      	ldr	r3, [pc, #176]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800061a:	4b2b      	ldr	r3, [pc, #172]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000620:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000626:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000628:	2204      	movs	r2, #4
 800062a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800062c:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800062e:	2200      	movs	r2, #0
 8000630:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000632:	4b25      	ldr	r3, [pc, #148]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000634:	2200      	movs	r2, #0
 8000636:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000638:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800063a:	2201      	movs	r2, #1
 800063c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b22      	ldr	r3, [pc, #136]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800064c:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800064e:	2200      	movs	r2, #0
 8000650:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000652:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065a:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800065c:	2200      	movs	r2, #0
 800065e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4817      	ldr	r0, [pc, #92]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800066a:	f001 fb8d 	bl	8001d88 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000674:	f000 faa8 	bl	8000bc8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000680:	4619      	mov	r1, r3
 8000682:	4811      	ldr	r0, [pc, #68]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000684:	f002 f9a2 	bl	80029cc <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800068e:	f000 fa9b 	bl	8000bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <MX_ADC1_Init+0xec>)
 8000694:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	237f      	movs	r3, #127	@ 0x7f
 80006a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a2:	2304      	movs	r3, #4
 80006a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	4806      	ldr	r0, [pc, #24]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 80006b0:	f001 fd26 	bl	8002100 <HAL_ADC_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ba:	f000 fa85 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	3730      	adds	r7, #48	@ 0x30
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000158 	.word	0x20000158
 80006cc:	21800100 	.word	0x21800100

080006d0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2220      	movs	r2, #32
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f007 ffd1 	bl	8008684 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006e4:	4a2b      	ldr	r2, [pc, #172]	@ (8000794 <MX_ADC2_Init+0xc4>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e8:	4b29      	ldr	r3, [pc, #164]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006ea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006ee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006f0:	4b27      	ldr	r3, [pc, #156]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f6:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006fc:	4b24      	ldr	r3, [pc, #144]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000702:	4b23      	ldr	r3, [pc, #140]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000708:	4b21      	ldr	r3, [pc, #132]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800070a:	2204      	movs	r2, #4
 800070c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800070e:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000714:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000716:	2200      	movs	r2, #0
 8000718:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800071c:	2201      	movs	r2, #1
 800071e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000720:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000728:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800072a:	2200      	movs	r2, #0
 800072c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000730:	2200      	movs	r2, #0
 8000732:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000734:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800073e:	2200      	movs	r2, #0
 8000740:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000742:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800074a:	4811      	ldr	r0, [pc, #68]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800074c:	f001 fb1c 	bl	8001d88 <HAL_ADC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000756:	f000 fa37 	bl	8000bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_ADC2_Init+0xc8>)
 800075c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800075e:	2306      	movs	r3, #6
 8000760:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000766:	237f      	movs	r3, #127	@ 0x7f
 8000768:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076a:	2304      	movs	r3, #4
 800076c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	4619      	mov	r1, r3
 8000776:	4806      	ldr	r0, [pc, #24]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000778:	f001 fcc2 	bl	8002100 <HAL_ADC_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000782:	f000 fa21 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	3720      	adds	r7, #32
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200001c4 	.word	0x200001c4
 8000794:	50000100 	.word	0x50000100
 8000798:	19200040 	.word	0x19200040

0800079c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0a4      	sub	sp, #144	@ 0x90
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007b8:	2254      	movs	r2, #84	@ 0x54
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f007 ff61 	bl	8008684 <memset>
  if(adcHandle->Instance==ADC1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80007ca:	d174      	bne.n	80008b6 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007d2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 fb6f 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007e8:	f000 f9ee 	bl	8000bc8 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007ec:	4b63      	ldr	r3, [pc, #396]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	4a62      	ldr	r2, [pc, #392]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007f6:	4b61      	ldr	r3, [pc, #388]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d10b      	bne.n	8000816 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007fe:	4b60      	ldr	r3, [pc, #384]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a5f      	ldr	r2, [pc, #380]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000804:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b5d      	ldr	r3, [pc, #372]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
 8000814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b5a      	ldr	r3, [pc, #360]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a59      	ldr	r2, [pc, #356]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b57      	ldr	r3, [pc, #348]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	623b      	str	r3, [r7, #32]
 800082c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b54      	ldr	r3, [pc, #336]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a53      	ldr	r2, [pc, #332]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b51      	ldr	r3, [pc, #324]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	61fb      	str	r3, [r7, #28]
 8000844:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b4e      	ldr	r3, [pc, #312]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a4d      	ldr	r2, [pc, #308]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b4b      	ldr	r3, [pc, #300]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800085e:	2304      	movs	r3, #4
 8000860:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000862:	2303      	movs	r3, #3
 8000864:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000872:	4619      	mov	r1, r3
 8000874:	4843      	ldr	r0, [pc, #268]	@ (8000984 <HAL_ADC_MspInit+0x1e8>)
 8000876:	f002 fb51 	bl	8002f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 800087a:	2302      	movs	r3, #2
 800087c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087e:	2303      	movs	r3, #3
 8000880:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000894:	f002 fb42 	bl	8002f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000898:	2303      	movs	r3, #3
 800089a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089c:	2303      	movs	r3, #3
 800089e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008ac:	4619      	mov	r1, r3
 80008ae:	4836      	ldr	r0, [pc, #216]	@ (8000988 <HAL_ADC_MspInit+0x1ec>)
 80008b0:	f002 fb34 	bl	8002f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008b4:	e05e      	b.n	8000974 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a34      	ldr	r2, [pc, #208]	@ (800098c <HAL_ADC_MspInit+0x1f0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d159      	bne.n	8000974 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008c6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80008ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008d0:	4618      	mov	r0, r3
 80008d2:	f003 faf5 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80008dc:	f000 f974 	bl	8000bc8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008e0:	4b26      	ldr	r3, [pc, #152]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	4a25      	ldr	r2, [pc, #148]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008ea:	4b24      	ldr	r3, [pc, #144]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d10b      	bne.n	800090a <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008f2:	4b23      	ldr	r3, [pc, #140]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	4a22      	ldr	r2, [pc, #136]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 80008f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fe:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	4a1c      	ldr	r2, [pc, #112]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	4a16      	ldr	r2, [pc, #88]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092e:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800093a:	230b      	movs	r3, #11
 800093c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093e:	2303      	movs	r3, #3
 8000940:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800094e:	4619      	mov	r1, r3
 8000950:	480c      	ldr	r0, [pc, #48]	@ (8000984 <HAL_ADC_MspInit+0x1e8>)
 8000952:	f002 fae3 	bl	8002f1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000956:	2301      	movs	r3, #1
 8000958:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095a:	2303      	movs	r3, #3
 800095c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800096a:	4619      	mov	r1, r3
 800096c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000970:	f002 fad4 	bl	8002f1c <HAL_GPIO_Init>
}
 8000974:	bf00      	nop
 8000976:	3790      	adds	r7, #144	@ 0x90
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000230 	.word	0x20000230
 8000980:	40021000 	.word	0x40021000
 8000984:	48000800 	.word	0x48000800
 8000988:	48000400 	.word	0x48000400
 800098c:	50000100 	.word	0x50000100

08000990 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b3f      	ldr	r3, [pc, #252]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	4a3e      	ldr	r2, [pc, #248]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b2:	4b3c      	ldr	r3, [pc, #240]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009be:	4b39      	ldr	r3, [pc, #228]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	4a38      	ldr	r2, [pc, #224]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009c4:	f043 0320 	orr.w	r3, r3, #32
 80009c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ca:	4b36      	ldr	r3, [pc, #216]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	f003 0320 	and.w	r3, r3, #32
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b33      	ldr	r3, [pc, #204]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	4a32      	ldr	r2, [pc, #200]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e2:	4b30      	ldr	r3, [pc, #192]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	4a2c      	ldr	r2, [pc, #176]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fa:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	4b27      	ldr	r3, [pc, #156]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	4a26      	ldr	r2, [pc, #152]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a12:	4b24      	ldr	r3, [pc, #144]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2120      	movs	r1, #32
 8000a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a26:	f002 fbfb 	bl	8003220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	481e      	ldr	r0, [pc, #120]	@ (8000aa8 <MX_GPIO_Init+0x118>)
 8000a30:	f002 fbf6 	bl	8003220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000a34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4818      	ldr	r0, [pc, #96]	@ (8000aac <MX_GPIO_Init+0x11c>)
 8000a4c:	f002 fa66 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000a50:	2320      	movs	r3, #32
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6a:	f002 fa57 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4808      	ldr	r0, [pc, #32]	@ (8000aa8 <MX_GPIO_Init+0x118>)
 8000a86:	f002 fa49 	bl	8002f1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2028      	movs	r0, #40	@ 0x28
 8000a90:	f002 f95c 	bl	8002d4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a94:	2028      	movs	r0, #40	@ 0x28
 8000a96:	f002 f973 	bl	8002d80 <HAL_NVIC_EnableIRQ>

}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	@ 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	48000c00 	.word	0x48000c00
 8000aac:	48000800 	.word	0x48000800

08000ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab4:	f000 ff5b 	bl	800196e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab8:	f000 f82a 	bl	8000b10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000abc:	f7ff ff68 	bl	8000990 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000ac0:	f7ff fe06 	bl	80006d0 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000ac4:	f7ff fd8c 	bl	80005e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000ac8:	f000 fa42 	bl	8000f50 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000acc:	f000 fb10 	bl	80010f0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000ad0:	f000 fc68 	bl	80013a4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000ad4:	f000 fcb2 	bl	800143c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	Shell_Init();
 8000ad8:	f000 fda4 	bl	8001624 <Shell_Init>
	HAL_TIM_Base_Start(&htim1);
 8000adc:	480b      	ldr	r0, [pc, #44]	@ (8000b0c <main+0x5c>)
 8000ade:	f003 fc95 	bl	800440c <HAL_TIM_Base_Start>

	//Channel 1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4809      	ldr	r0, [pc, #36]	@ (8000b0c <main+0x5c>)
 8000ae6:	f003 fddb 	bl	80046a0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000aea:	2100      	movs	r1, #0
 8000aec:	4807      	ldr	r0, [pc, #28]	@ (8000b0c <main+0x5c>)
 8000aee:	f005 f84d 	bl	8005b8c <HAL_TIMEx_PWMN_Start>

	//Channel 2
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000af2:	2104      	movs	r1, #4
 8000af4:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <main+0x5c>)
 8000af6:	f003 fdd3 	bl	80046a0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000afa:	2104      	movs	r1, #4
 8000afc:	4803      	ldr	r0, [pc, #12]	@ (8000b0c <main+0x5c>)
 8000afe:	f005 f845 	bl	8005b8c <HAL_TIMEx_PWMN_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 8000b02:	f000 fdcf 	bl	80016a4 <Shell_Loop>
	{
 8000b06:	bf00      	nop
 8000b08:	e7fb      	b.n	8000b02 <main+0x52>
 8000b0a:	bf00      	nop
 8000b0c:	20000284 	.word	0x20000284

08000b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b094      	sub	sp, #80	@ 0x50
 8000b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b16:	f107 0318 	add.w	r3, r7, #24
 8000b1a:	2238      	movs	r2, #56	@ 0x38
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f007 fdb0 	bl	8008684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b32:	2000      	movs	r0, #0
 8000b34:	f002 fbb0 	bl	8003298 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b40:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b42:	2302      	movs	r3, #2
 8000b44:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b46:	2303      	movs	r3, #3
 8000b48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000b4e:	2355      	movs	r3, #85	@ 0x55
 8000b50:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b52:	2302      	movs	r3, #2
 8000b54:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b56:	2302      	movs	r3, #2
 8000b58:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5e:	f107 0318 	add.w	r3, r7, #24
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 fc4c 	bl	8003400 <HAL_RCC_OscConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000b6e:	f000 f82b 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b72:	230f      	movs	r3, #15
 8000b74:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b76:	2303      	movs	r3, #3
 8000b78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2104      	movs	r1, #4
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 ff4a 	bl	8003a24 <HAL_RCC_ClockConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000b96:	f000 f817 	bl	8000bc8 <Error_Handler>
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	3750      	adds	r7, #80	@ 0x50
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a04      	ldr	r2, [pc, #16]	@ (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d101      	bne.n	8000bba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bb6:	f000 fef3 	bl	80019a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40001000 	.word	0x40001000

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <Error_Handler+0x8>

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	4b0f      	ldr	r3, [pc, #60]	@ (8000c18 <HAL_MspInit+0x44>)
 8000bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bde:	4a0e      	ldr	r2, [pc, #56]	@ (8000c18 <HAL_MspInit+0x44>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000be6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <HAL_MspInit+0x44>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <HAL_MspInit+0x44>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf6:	4a08      	ldr	r2, [pc, #32]	@ (8000c18 <HAL_MspInit+0x44>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bfe:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <HAL_MspInit+0x44>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c0a:	f002 fbe9 	bl	80033e0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40021000 	.word	0x40021000

08000c1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08c      	sub	sp, #48	@ 0x30
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce0 <HAL_InitTick+0xc4>)
 8000c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c30:	4a2b      	ldr	r2, [pc, #172]	@ (8000ce0 <HAL_InitTick+0xc4>)
 8000c32:	f043 0310 	orr.w	r3, r3, #16
 8000c36:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c38:	4b29      	ldr	r3, [pc, #164]	@ (8000ce0 <HAL_InitTick+0xc4>)
 8000c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c3c:	f003 0310 	and.w	r3, r3, #16
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c44:	f107 020c 	add.w	r2, r7, #12
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f003 f8be 	bl	8003dd0 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c54:	f003 f890 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
 8000c58:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c5c:	4a21      	ldr	r2, [pc, #132]	@ (8000ce4 <HAL_InitTick+0xc8>)
 8000c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c62:	0c9b      	lsrs	r3, r3, #18
 8000c64:	3b01      	subs	r3, #1
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce8 <HAL_InitTick+0xcc>)
 8000c6a:	4a20      	ldr	r2, [pc, #128]	@ (8000cec <HAL_InitTick+0xd0>)
 8000c6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <HAL_InitTick+0xcc>)
 8000c70:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c74:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c76:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce8 <HAL_InitTick+0xcc>)
 8000c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c7a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <HAL_InitTick+0xcc>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c82:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <HAL_InitTick+0xcc>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000c88:	4817      	ldr	r0, [pc, #92]	@ (8000ce8 <HAL_InitTick+0xcc>)
 8000c8a:	f003 fb67 	bl	800435c <HAL_TIM_Base_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000c94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d11b      	bne.n	8000cd4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c9c:	4812      	ldr	r0, [pc, #72]	@ (8000ce8 <HAL_InitTick+0xcc>)
 8000c9e:	f003 fc25 	bl	80044ec <HAL_TIM_Base_Start_IT>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000ca8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d111      	bne.n	8000cd4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cb0:	2036      	movs	r0, #54	@ 0x36
 8000cb2:	f002 f865 	bl	8002d80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d808      	bhi.n	8000cce <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2036      	movs	r0, #54	@ 0x36
 8000cc2:	f002 f843 	bl	8002d4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf0 <HAL_InitTick+0xd4>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	e002      	b.n	8000cd4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cd4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3730      	adds	r7, #48	@ 0x30
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	431bde83 	.word	0x431bde83
 8000ce8:	20000234 	.word	0x20000234
 8000cec:	40001000 	.word	0x40001000
 8000cf0:	200000d8 	.word	0x200000d8

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <BusFault_Handler+0x4>

08000d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <UsageFault_Handler+0x4>

08000d1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d58:	4802      	ldr	r0, [pc, #8]	@ (8000d64 <USART2_IRQHandler+0x10>)
 8000d5a:	f005 fa99 	bl	8006290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2000031c 	.word	0x2000031c

08000d68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d6c:	4802      	ldr	r0, [pc, #8]	@ (8000d78 <USART3_IRQHandler+0x10>)
 8000d6e:	f005 fa8f 	bl	8006290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200003b0 	.word	0x200003b0

08000d7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000d80:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d84:	f002 fa64 	bl	8003250 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d90:	4802      	ldr	r0, [pc, #8]	@ (8000d9c <TIM6_DAC_IRQHandler+0x10>)
 8000d92:	f003 fd97 	bl	80048c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000234 	.word	0x20000234

08000da0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return 1;
 8000da4:	2301      	movs	r3, #1
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <_kill>:

int _kill(int pid, int sig)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000dba:	f007 fc6b 	bl	8008694 <__errno>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2216      	movs	r2, #22
 8000dc2:	601a      	str	r2, [r3, #0]
  return -1;
 8000dc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_exit>:

void _exit (int status)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ffe7 	bl	8000db0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000de2:	bf00      	nop
 8000de4:	e7fd      	b.n	8000de2 <_exit+0x12>

08000de6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	e00a      	b.n	8000e0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000df8:	f3af 8000 	nop.w
 8000dfc:	4601      	mov	r1, r0
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	1c5a      	adds	r2, r3, #1
 8000e02:	60ba      	str	r2, [r7, #8]
 8000e04:	b2ca      	uxtb	r2, r1
 8000e06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	dbf0      	blt.n	8000df8 <_read+0x12>
  }

  return len;
 8000e16:	687b      	ldr	r3, [r7, #4]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	e009      	b.n	8000e46 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	1c5a      	adds	r2, r3, #1
 8000e36:	60ba      	str	r2, [r7, #8]
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	3301      	adds	r3, #1
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	dbf1      	blt.n	8000e32 <_write+0x12>
  }
  return len;
 8000e4e:	687b      	ldr	r3, [r7, #4]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <_close>:

int _close(int file)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e80:	605a      	str	r2, [r3, #4]
  return 0;
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <_isatty>:

int _isatty(int file)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e98:	2301      	movs	r3, #1
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b085      	sub	sp, #20
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	60f8      	str	r0, [r7, #12]
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eb2:	2300      	movs	r3, #0
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec8:	4a14      	ldr	r2, [pc, #80]	@ (8000f1c <_sbrk+0x5c>)
 8000eca:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <_sbrk+0x60>)
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed4:	4b13      	ldr	r3, [pc, #76]	@ (8000f24 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000edc:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <_sbrk+0x64>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	@ (8000f28 <_sbrk+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee2:	4b10      	ldr	r3, [pc, #64]	@ (8000f24 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d207      	bcs.n	8000f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef0:	f007 fbd0 	bl	8008694 <__errno>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000efe:	e009      	b.n	8000f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f00:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f06:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4a05      	ldr	r2, [pc, #20]	@ (8000f24 <_sbrk+0x64>)
 8000f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f12:	68fb      	ldr	r3, [r7, #12]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20020000 	.word	0x20020000
 8000f20:	00000400 	.word	0x00000400
 8000f24:	20000280 	.word	0x20000280
 8000f28:	20000650 	.word	0x20000650

08000f2c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f30:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <SystemInit+0x20>)
 8000f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f36:	4a05      	ldr	r2, [pc, #20]	@ (8000f4c <SystemInit+0x20>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b09c      	sub	sp, #112	@ 0x70
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f56:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f64:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f70:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
 8000f80:	615a      	str	r2, [r3, #20]
 8000f82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2234      	movs	r2, #52	@ 0x34
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f007 fb7a 	bl	8008684 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f90:	4b55      	ldr	r3, [pc, #340]	@ (80010e8 <MX_TIM1_Init+0x198>)
 8000f92:	4a56      	ldr	r2, [pc, #344]	@ (80010ec <MX_TIM1_Init+0x19c>)
 8000f94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f96:	4b54      	ldr	r3, [pc, #336]	@ (80010e8 <MX_TIM1_Init+0x198>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000f9c:	4b52      	ldr	r3, [pc, #328]	@ (80010e8 <MX_TIM1_Init+0x198>)
 8000f9e:	2220      	movs	r2, #32
 8000fa0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8000fa2:	4b51      	ldr	r3, [pc, #324]	@ (80010e8 <MX_TIM1_Init+0x198>)
 8000fa4:	f242 1233 	movw	r2, #8499	@ 0x2133
 8000fa8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000faa:	4b4f      	ldr	r3, [pc, #316]	@ (80010e8 <MX_TIM1_Init+0x198>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fb0:	4b4d      	ldr	r3, [pc, #308]	@ (80010e8 <MX_TIM1_Init+0x198>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fb6:	4b4c      	ldr	r3, [pc, #304]	@ (80010e8 <MX_TIM1_Init+0x198>)
 8000fb8:	2280      	movs	r2, #128	@ 0x80
 8000fba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fbc:	484a      	ldr	r0, [pc, #296]	@ (80010e8 <MX_TIM1_Init+0x198>)
 8000fbe:	f003 f9cd 	bl	800435c <HAL_TIM_Base_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000fc8:	f7ff fdfe 	bl	8000bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fd2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4843      	ldr	r0, [pc, #268]	@ (80010e8 <MX_TIM1_Init+0x198>)
 8000fda:	f003 fed7 	bl	8004d8c <HAL_TIM_ConfigClockSource>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000fe4:	f7ff fdf0 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fe8:	483f      	ldr	r0, [pc, #252]	@ (80010e8 <MX_TIM1_Init+0x198>)
 8000fea:	f003 faf7 	bl	80045dc <HAL_TIM_PWM_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ff4:	f7ff fde8 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001004:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001008:	4619      	mov	r1, r3
 800100a:	4837      	ldr	r0, [pc, #220]	@ (80010e8 <MX_TIM1_Init+0x198>)
 800100c:	f004 fe80 	bl	8005d10 <HAL_TIMEx_MasterConfigSynchronization>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001016:	f7ff fdd7 	bl	8000bc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800101a:	2360      	movs	r3, #96	@ 0x60
 800101c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5099;
 800101e:	f241 33eb 	movw	r3, #5099	@ 0x13eb
 8001022:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001024:	2300      	movs	r3, #0
 8001026:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001028:	2300      	movs	r3, #0
 800102a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001030:	2300      	movs	r3, #0
 8001032:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001034:	2300      	movs	r3, #0
 8001036:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001038:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800103c:	2200      	movs	r2, #0
 800103e:	4619      	mov	r1, r3
 8001040:	4829      	ldr	r0, [pc, #164]	@ (80010e8 <MX_TIM1_Init+0x198>)
 8001042:	f003 fd8f 	bl	8004b64 <HAL_TIM_PWM_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800104c:	f7ff fdbc 	bl	8000bc8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8001050:	4b25      	ldr	r3, [pc, #148]	@ (80010e8 <MX_TIM1_Init+0x198>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	699a      	ldr	r2, [r3, #24]
 8001056:	4b24      	ldr	r3, [pc, #144]	@ (80010e8 <MX_TIM1_Init+0x198>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0208 	bic.w	r2, r2, #8
 800105e:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 3400;
 8001060:	f640 5348 	movw	r3, #3400	@ 0xd48
 8001064:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001066:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800106a:	2204      	movs	r2, #4
 800106c:	4619      	mov	r1, r3
 800106e:	481e      	ldr	r0, [pc, #120]	@ (80010e8 <MX_TIM1_Init+0x198>)
 8001070:	f003 fd78 	bl	8004b64 <HAL_TIM_PWM_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800107a:	f7ff fda5 	bl	8000bc8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 800107e:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <MX_TIM1_Init+0x198>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	699a      	ldr	r2, [r3, #24]
 8001084:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <MX_TIM1_Init+0x198>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800108c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 17;
 800109a:	2311      	movs	r3, #17
 800109c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80010be:	2300      	movs	r3, #0
 80010c0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	4807      	ldr	r0, [pc, #28]	@ (80010e8 <MX_TIM1_Init+0x198>)
 80010cc:	f004 feb6 	bl	8005e3c <HAL_TIMEx_ConfigBreakDeadTime>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 80010d6:	f7ff fd77 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010da:	4803      	ldr	r0, [pc, #12]	@ (80010e8 <MX_TIM1_Init+0x198>)
 80010dc:	f000 f8fa 	bl	80012d4 <HAL_TIM_MspPostInit>

}
 80010e0:	bf00      	nop
 80010e2:	3770      	adds	r7, #112	@ 0x70
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000284 	.word	0x20000284
 80010ec:	40012c00 	.word	0x40012c00

080010f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800110e:	4b1c      	ldr	r3, [pc, #112]	@ (8001180 <MX_TIM3_Init+0x90>)
 8001110:	4a1c      	ldr	r2, [pc, #112]	@ (8001184 <MX_TIM3_Init+0x94>)
 8001112:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001114:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <MX_TIM3_Init+0x90>)
 8001116:	2200      	movs	r2, #0
 8001118:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111a:	4b19      	ldr	r3, [pc, #100]	@ (8001180 <MX_TIM3_Init+0x90>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001120:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <MX_TIM3_Init+0x90>)
 8001122:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001126:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001128:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <MX_TIM3_Init+0x90>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112e:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <MX_TIM3_Init+0x90>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	4619      	mov	r1, r3
 800114a:	480d      	ldr	r0, [pc, #52]	@ (8001180 <MX_TIM3_Init+0x90>)
 800114c:	f004 fc6f 	bl	8005a2e <HAL_TIMEx_HallSensor_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001156:	f7ff fd37 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800115a:	2350      	movs	r3, #80	@ 0x50
 800115c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	4619      	mov	r1, r3
 8001166:	4806      	ldr	r0, [pc, #24]	@ (8001180 <MX_TIM3_Init+0x90>)
 8001168:	f004 fdd2 	bl	8005d10 <HAL_TIMEx_MasterConfigSynchronization>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001172:	f7ff fd29 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	3720      	adds	r7, #32
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200002d0 	.word	0x200002d0
 8001184:	40000400 	.word	0x40000400

08001188 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	@ 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a18      	ldr	r2, [pc, #96]	@ (8001208 <HAL_TIM_Base_MspInit+0x80>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d129      	bne.n	80011fe <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011aa:	4b18      	ldr	r3, [pc, #96]	@ (800120c <HAL_TIM_Base_MspInit+0x84>)
 80011ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ae:	4a17      	ldr	r2, [pc, #92]	@ (800120c <HAL_TIM_Base_MspInit+0x84>)
 80011b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <HAL_TIM_Base_MspInit+0x84>)
 80011b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b12      	ldr	r3, [pc, #72]	@ (800120c <HAL_TIM_Base_MspInit+0x84>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	4a11      	ldr	r2, [pc, #68]	@ (800120c <HAL_TIM_Base_MspInit+0x84>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ce:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <HAL_TIM_Base_MspInit+0x84>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = W_PWM_H_Pin;
 80011da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80011ec:	2306      	movs	r3, #6
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_H_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011fa:	f001 fe8f 	bl	8002f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	@ 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40012c00 	.word	0x40012c00
 800120c:	40021000 	.word	0x40021000

08001210 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	@ 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a26      	ldr	r2, [pc, #152]	@ (80012c8 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d145      	bne.n	80012be <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001232:	4b26      	ldr	r3, [pc, #152]	@ (80012cc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001236:	4a25      	ldr	r2, [pc, #148]	@ (80012cc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6593      	str	r3, [r2, #88]	@ 0x58
 800123e:	4b23      	ldr	r3, [pc, #140]	@ (80012cc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b20      	ldr	r3, [pc, #128]	@ (80012cc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124e:	4a1f      	ldr	r2, [pc, #124]	@ (80012cc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001256:	4b1d      	ldr	r3, [pc, #116]	@ (80012cc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001262:	4b1a      	ldr	r3, [pc, #104]	@ (80012cc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	4a19      	ldr	r2, [pc, #100]	@ (80012cc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126e:	4b17      	ldr	r3, [pc, #92]	@ (80012cc <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800127a:	2350      	movs	r3, #80	@ 0x50
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800128a:	2302      	movs	r3, #2
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001298:	f001 fe40 	bl	8002f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800129c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012ae:	2302      	movs	r3, #2
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 80012ba:	f001 fe2f 	bl	8002f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80012be:	bf00      	nop
 80012c0:	3728      	adds	r7, #40	@ 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40000400 	.word	0x40000400
 80012cc:	40021000 	.word	0x40021000
 80012d0:	48000800 	.word	0x48000800

080012d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	@ 0x28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a29      	ldr	r2, [pc, #164]	@ (8001398 <HAL_TIM_MspPostInit+0xc4>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d14b      	bne.n	800138e <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	4b29      	ldr	r3, [pc, #164]	@ (800139c <HAL_TIM_MspPostInit+0xc8>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fa:	4a28      	ldr	r2, [pc, #160]	@ (800139c <HAL_TIM_MspPostInit+0xc8>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001302:	4b26      	ldr	r3, [pc, #152]	@ (800139c <HAL_TIM_MspPostInit+0xc8>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	4b23      	ldr	r3, [pc, #140]	@ (800139c <HAL_TIM_MspPostInit+0xc8>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001312:	4a22      	ldr	r2, [pc, #136]	@ (800139c <HAL_TIM_MspPostInit+0xc8>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131a:	4b20      	ldr	r3, [pc, #128]	@ (800139c <HAL_TIM_MspPostInit+0xc8>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001326:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800132a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001338:	2306      	movs	r3, #6
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	4817      	ldr	r0, [pc, #92]	@ (80013a0 <HAL_TIM_MspPostInit+0xcc>)
 8001344:	f001 fdea 	bl	8002f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001348:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800134c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800135a:	2304      	movs	r3, #4
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	480e      	ldr	r0, [pc, #56]	@ (80013a0 <HAL_TIM_MspPostInit+0xcc>)
 8001366:	f001 fdd9 	bl	8002f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin;
 800136a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800136e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800137c:	2306      	movs	r3, #6
 800137e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800138a:	f001 fdc7 	bl	8002f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800138e:	bf00      	nop
 8001390:	3728      	adds	r7, #40	@ 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40012c00 	.word	0x40012c00
 800139c:	40021000 	.word	0x40021000
 80013a0:	48000400 	.word	0x48000400

080013a4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a8:	4b22      	ldr	r3, [pc, #136]	@ (8001434 <MX_USART2_UART_Init+0x90>)
 80013aa:	4a23      	ldr	r2, [pc, #140]	@ (8001438 <MX_USART2_UART_Init+0x94>)
 80013ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ae:	4b21      	ldr	r3, [pc, #132]	@ (8001434 <MX_USART2_UART_Init+0x90>)
 80013b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001434 <MX_USART2_UART_Init+0x90>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001434 <MX_USART2_UART_Init+0x90>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001434 <MX_USART2_UART_Init+0x90>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001434 <MX_USART2_UART_Init+0x90>)
 80013ca:	220c      	movs	r2, #12
 80013cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ce:	4b19      	ldr	r3, [pc, #100]	@ (8001434 <MX_USART2_UART_Init+0x90>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d4:	4b17      	ldr	r3, [pc, #92]	@ (8001434 <MX_USART2_UART_Init+0x90>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013da:	4b16      	ldr	r3, [pc, #88]	@ (8001434 <MX_USART2_UART_Init+0x90>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013e0:	4b14      	ldr	r3, [pc, #80]	@ (8001434 <MX_USART2_UART_Init+0x90>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013e6:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <MX_USART2_UART_Init+0x90>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ec:	4811      	ldr	r0, [pc, #68]	@ (8001434 <MX_USART2_UART_Init+0x90>)
 80013ee:	f004 fe24 	bl	800603a <HAL_UART_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013f8:	f7ff fbe6 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013fc:	2100      	movs	r1, #0
 80013fe:	480d      	ldr	r0, [pc, #52]	@ (8001434 <MX_USART2_UART_Init+0x90>)
 8001400:	f006 fe9b 	bl	800813a <HAL_UARTEx_SetTxFifoThreshold>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800140a:	f7ff fbdd 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800140e:	2100      	movs	r1, #0
 8001410:	4808      	ldr	r0, [pc, #32]	@ (8001434 <MX_USART2_UART_Init+0x90>)
 8001412:	f006 fed0 	bl	80081b6 <HAL_UARTEx_SetRxFifoThreshold>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800141c:	f7ff fbd4 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001420:	4804      	ldr	r0, [pc, #16]	@ (8001434 <MX_USART2_UART_Init+0x90>)
 8001422:	f006 fe51 	bl	80080c8 <HAL_UARTEx_DisableFifoMode>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800142c:	f7ff fbcc 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	2000031c 	.word	0x2000031c
 8001438:	40004400 	.word	0x40004400

0800143c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001440:	4b22      	ldr	r3, [pc, #136]	@ (80014cc <MX_USART3_UART_Init+0x90>)
 8001442:	4a23      	ldr	r2, [pc, #140]	@ (80014d0 <MX_USART3_UART_Init+0x94>)
 8001444:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001446:	4b21      	ldr	r3, [pc, #132]	@ (80014cc <MX_USART3_UART_Init+0x90>)
 8001448:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800144c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800144e:	4b1f      	ldr	r3, [pc, #124]	@ (80014cc <MX_USART3_UART_Init+0x90>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001454:	4b1d      	ldr	r3, [pc, #116]	@ (80014cc <MX_USART3_UART_Init+0x90>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800145a:	4b1c      	ldr	r3, [pc, #112]	@ (80014cc <MX_USART3_UART_Init+0x90>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001460:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <MX_USART3_UART_Init+0x90>)
 8001462:	220c      	movs	r2, #12
 8001464:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001466:	4b19      	ldr	r3, [pc, #100]	@ (80014cc <MX_USART3_UART_Init+0x90>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800146c:	4b17      	ldr	r3, [pc, #92]	@ (80014cc <MX_USART3_UART_Init+0x90>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001472:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <MX_USART3_UART_Init+0x90>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001478:	4b14      	ldr	r3, [pc, #80]	@ (80014cc <MX_USART3_UART_Init+0x90>)
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800147e:	4b13      	ldr	r3, [pc, #76]	@ (80014cc <MX_USART3_UART_Init+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001484:	4811      	ldr	r0, [pc, #68]	@ (80014cc <MX_USART3_UART_Init+0x90>)
 8001486:	f004 fdd8 	bl	800603a <HAL_UART_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001490:	f7ff fb9a 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001494:	2100      	movs	r1, #0
 8001496:	480d      	ldr	r0, [pc, #52]	@ (80014cc <MX_USART3_UART_Init+0x90>)
 8001498:	f006 fe4f 	bl	800813a <HAL_UARTEx_SetTxFifoThreshold>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014a2:	f7ff fb91 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014a6:	2100      	movs	r1, #0
 80014a8:	4808      	ldr	r0, [pc, #32]	@ (80014cc <MX_USART3_UART_Init+0x90>)
 80014aa:	f006 fe84 	bl	80081b6 <HAL_UARTEx_SetRxFifoThreshold>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014b4:	f7ff fb88 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014b8:	4804      	ldr	r0, [pc, #16]	@ (80014cc <MX_USART3_UART_Init+0x90>)
 80014ba:	f006 fe05 	bl	80080c8 <HAL_UARTEx_DisableFifoMode>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014c4:	f7ff fb80 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200003b0 	.word	0x200003b0
 80014d0:	40004800 	.word	0x40004800

080014d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b0a0      	sub	sp, #128	@ 0x80
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014ec:	f107 0318 	add.w	r3, r7, #24
 80014f0:	2254      	movs	r2, #84	@ 0x54
 80014f2:	2100      	movs	r1, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f007 f8c5 	bl	8008684 <memset>
  if(uartHandle->Instance==USART2)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a45      	ldr	r2, [pc, #276]	@ (8001614 <HAL_UART_MspInit+0x140>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d13f      	bne.n	8001584 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001504:	2302      	movs	r3, #2
 8001506:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800150c:	f107 0318 	add.w	r3, r7, #24
 8001510:	4618      	mov	r0, r3
 8001512:	f002 fcd5 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800151c:	f7ff fb54 	bl	8000bc8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001520:	4b3d      	ldr	r3, [pc, #244]	@ (8001618 <HAL_UART_MspInit+0x144>)
 8001522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001524:	4a3c      	ldr	r2, [pc, #240]	@ (8001618 <HAL_UART_MspInit+0x144>)
 8001526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800152a:	6593      	str	r3, [r2, #88]	@ 0x58
 800152c:	4b3a      	ldr	r3, [pc, #232]	@ (8001618 <HAL_UART_MspInit+0x144>)
 800152e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001538:	4b37      	ldr	r3, [pc, #220]	@ (8001618 <HAL_UART_MspInit+0x144>)
 800153a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153c:	4a36      	ldr	r2, [pc, #216]	@ (8001618 <HAL_UART_MspInit+0x144>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001544:	4b34      	ldr	r3, [pc, #208]	@ (8001618 <HAL_UART_MspInit+0x144>)
 8001546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001550:	230c      	movs	r3, #12
 8001552:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001560:	2307      	movs	r3, #7
 8001562:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001568:	4619      	mov	r1, r3
 800156a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800156e:	f001 fcd5 	bl	8002f1c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	2026      	movs	r0, #38	@ 0x26
 8001578:	f001 fbe8 	bl	8002d4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800157c:	2026      	movs	r0, #38	@ 0x26
 800157e:	f001 fbff 	bl	8002d80 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001582:	e043      	b.n	800160c <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a24      	ldr	r2, [pc, #144]	@ (800161c <HAL_UART_MspInit+0x148>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d13e      	bne.n	800160c <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800158e:	2304      	movs	r3, #4
 8001590:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001596:	f107 0318 	add.w	r3, r7, #24
 800159a:	4618      	mov	r0, r3
 800159c:	f002 fc90 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80015a6:	f7ff fb0f 	bl	8000bc8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <HAL_UART_MspInit+0x144>)
 80015ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ae:	4a1a      	ldr	r2, [pc, #104]	@ (8001618 <HAL_UART_MspInit+0x144>)
 80015b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80015b6:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <HAL_UART_MspInit+0x144>)
 80015b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c2:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <HAL_UART_MspInit+0x144>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c6:	4a14      	ldr	r2, [pc, #80]	@ (8001618 <HAL_UART_MspInit+0x144>)
 80015c8:	f043 0304 	orr.w	r3, r3, #4
 80015cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ce:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <HAL_UART_MspInit+0x144>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015da:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80015de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015ec:	2307      	movs	r3, #7
 80015ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80015f4:	4619      	mov	r1, r3
 80015f6:	480a      	ldr	r0, [pc, #40]	@ (8001620 <HAL_UART_MspInit+0x14c>)
 80015f8:	f001 fc90 	bl	8002f1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2100      	movs	r1, #0
 8001600:	2027      	movs	r0, #39	@ 0x27
 8001602:	f001 fba3 	bl	8002d4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001606:	2027      	movs	r0, #39	@ 0x27
 8001608:	f001 fbba 	bl	8002d80 <HAL_NVIC_EnableIRQ>
}
 800160c:	bf00      	nop
 800160e:	3780      	adds	r7, #128	@ 0x80
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40004400 	.word	0x40004400
 8001618:	40021000 	.word	0x40021000
 800161c:	40004800 	.word	0x40004800
 8001620:	48000800 	.word	0x48000800

08001624 <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8001628:	2224      	movs	r2, #36	@ 0x24
 800162a:	2100      	movs	r1, #0
 800162c:	4816      	ldr	r0, [pc, #88]	@ (8001688 <Shell_Init+0x64>)
 800162e:	f007 f829 	bl	8008684 <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 8001632:	2240      	movs	r2, #64	@ 0x40
 8001634:	2100      	movs	r1, #0
 8001636:	4815      	ldr	r0, [pc, #84]	@ (800168c <Shell_Init+0x68>)
 8001638:	f007 f824 	bl	8008684 <memset>
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
 800163c:	4b14      	ldr	r3, [pc, #80]	@ (8001690 <Shell_Init+0x6c>)
 800163e:	2200      	movs	r2, #0
 8001640:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 8001642:	2240      	movs	r2, #64	@ 0x40
 8001644:	2100      	movs	r1, #0
 8001646:	4813      	ldr	r0, [pc, #76]	@ (8001694 <Shell_Init+0x70>)
 8001648:	f007 f81c 	bl	8008684 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800164c:	2201      	movs	r2, #1
 800164e:	4910      	ldr	r1, [pc, #64]	@ (8001690 <Shell_Init+0x6c>)
 8001650:	4811      	ldr	r0, [pc, #68]	@ (8001698 <Shell_Init+0x74>)
 8001652:	f004 fdd1 	bl	80061f8 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8001656:	4811      	ldr	r0, [pc, #68]	@ (800169c <Shell_Init+0x78>)
 8001658:	f7fe fde2 	bl	8000220 <strlen>
 800165c:	4603      	mov	r3, r0
 800165e:	b29a      	uxth	r2, r3
 8001660:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001664:	490d      	ldr	r1, [pc, #52]	@ (800169c <Shell_Init+0x78>)
 8001666:	480c      	ldr	r0, [pc, #48]	@ (8001698 <Shell_Init+0x74>)
 8001668:	f004 fd37 	bl	80060da <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 800166c:	480c      	ldr	r0, [pc, #48]	@ (80016a0 <Shell_Init+0x7c>)
 800166e:	f7fe fdd7 	bl	8000220 <strlen>
 8001672:	4603      	mov	r3, r0
 8001674:	b29a      	uxth	r2, r3
 8001676:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800167a:	4909      	ldr	r1, [pc, #36]	@ (80016a0 <Shell_Init+0x7c>)
 800167c:	4806      	ldr	r0, [pc, #24]	@ (8001698 <Shell_Init+0x74>)
 800167e:	f004 fd2c 	bl	80060da <HAL_UART_Transmit>
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200004d0 	.word	0x200004d0
 800168c:	2000048c 	.word	0x2000048c
 8001690:	20000448 	.word	0x20000448
 8001694:	2000044c 	.word	0x2000044c
 8001698:	2000031c 	.word	0x2000031c
 800169c:	20000020 	.word	0x20000020
 80016a0:	20000004 	.word	0x20000004

080016a4 <Shell_Loop>:

void Shell_Loop(void){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 80016aa:	4b7a      	ldr	r3, [pc, #488]	@ (8001894 <Shell_Loop+0x1f0>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d05b      	beq.n	800176a <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 80016b2:	4b79      	ldr	r3, [pc, #484]	@ (8001898 <Shell_Loop+0x1f4>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d034      	beq.n	8001724 <Shell_Loop+0x80>
 80016ba:	2b0d      	cmp	r3, #13
 80016bc:	d142      	bne.n	8001744 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80016be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016c2:	2203      	movs	r2, #3
 80016c4:	4975      	ldr	r1, [pc, #468]	@ (800189c <Shell_Loop+0x1f8>)
 80016c6:	4876      	ldr	r0, [pc, #472]	@ (80018a0 <Shell_Loop+0x1fc>)
 80016c8:	f004 fd07 	bl	80060da <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 80016cc:	4b75      	ldr	r3, [pc, #468]	@ (80018a4 <Shell_Loop+0x200>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a75      	ldr	r2, [pc, #468]	@ (80018a8 <Shell_Loop+0x204>)
 80016d2:	2100      	movs	r1, #0
 80016d4:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 80016d6:	4b75      	ldr	r3, [pc, #468]	@ (80018ac <Shell_Loop+0x208>)
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 80016dc:	4974      	ldr	r1, [pc, #464]	@ (80018b0 <Shell_Loop+0x20c>)
 80016de:	4872      	ldr	r0, [pc, #456]	@ (80018a8 <Shell_Loop+0x204>)
 80016e0:	f006 ff74 	bl	80085cc <strtok>
 80016e4:	4603      	mov	r3, r0
 80016e6:	4a73      	ldr	r2, [pc, #460]	@ (80018b4 <Shell_Loop+0x210>)
 80016e8:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80016ea:	e010      	b.n	800170e <Shell_Loop+0x6a>
				argv[argc++] = token;
 80016ec:	4b6f      	ldr	r3, [pc, #444]	@ (80018ac <Shell_Loop+0x208>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	496e      	ldr	r1, [pc, #440]	@ (80018ac <Shell_Loop+0x208>)
 80016f4:	600a      	str	r2, [r1, #0]
 80016f6:	4a6f      	ldr	r2, [pc, #444]	@ (80018b4 <Shell_Loop+0x210>)
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	496f      	ldr	r1, [pc, #444]	@ (80018b8 <Shell_Loop+0x214>)
 80016fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8001700:	496b      	ldr	r1, [pc, #428]	@ (80018b0 <Shell_Loop+0x20c>)
 8001702:	2000      	movs	r0, #0
 8001704:	f006 ff62 	bl	80085cc <strtok>
 8001708:	4603      	mov	r3, r0
 800170a:	4a6a      	ldr	r2, [pc, #424]	@ (80018b4 <Shell_Loop+0x210>)
 800170c:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800170e:	4b69      	ldr	r3, [pc, #420]	@ (80018b4 <Shell_Loop+0x210>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1ea      	bne.n	80016ec <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 8001716:	4b63      	ldr	r3, [pc, #396]	@ (80018a4 <Shell_Loop+0x200>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 800171c:	4b67      	ldr	r3, [pc, #412]	@ (80018bc <Shell_Loop+0x218>)
 800171e:	2201      	movs	r2, #1
 8001720:	601a      	str	r2, [r3, #0]
			break;
 8001722:	e01f      	b.n	8001764 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8001724:	4b5f      	ldr	r3, [pc, #380]	@ (80018a4 <Shell_Loop+0x200>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	1e5a      	subs	r2, r3, #1
 800172a:	495e      	ldr	r1, [pc, #376]	@ (80018a4 <Shell_Loop+0x200>)
 800172c:	600a      	str	r2, [r1, #0]
 800172e:	4a5e      	ldr	r2, [pc, #376]	@ (80018a8 <Shell_Loop+0x204>)
 8001730:	2100      	movs	r1, #0
 8001732:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8001734:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001738:	2204      	movs	r2, #4
 800173a:	4961      	ldr	r1, [pc, #388]	@ (80018c0 <Shell_Loop+0x21c>)
 800173c:	4858      	ldr	r0, [pc, #352]	@ (80018a0 <Shell_Loop+0x1fc>)
 800173e:	f004 fccc 	bl	80060da <HAL_UART_Transmit>
			break;
 8001742:	e00f      	b.n	8001764 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8001744:	4b57      	ldr	r3, [pc, #348]	@ (80018a4 <Shell_Loop+0x200>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	1c5a      	adds	r2, r3, #1
 800174a:	4956      	ldr	r1, [pc, #344]	@ (80018a4 <Shell_Loop+0x200>)
 800174c:	600a      	str	r2, [r1, #0]
 800174e:	4a52      	ldr	r2, [pc, #328]	@ (8001898 <Shell_Loop+0x1f4>)
 8001750:	7811      	ldrb	r1, [r2, #0]
 8001752:	4a55      	ldr	r2, [pc, #340]	@ (80018a8 <Shell_Loop+0x204>)
 8001754:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001756:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800175a:	2201      	movs	r2, #1
 800175c:	494e      	ldr	r1, [pc, #312]	@ (8001898 <Shell_Loop+0x1f4>)
 800175e:	4850      	ldr	r0, [pc, #320]	@ (80018a0 <Shell_Loop+0x1fc>)
 8001760:	f004 fcbb 	bl	80060da <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 8001764:	4b4b      	ldr	r3, [pc, #300]	@ (8001894 <Shell_Loop+0x1f0>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 800176a:	4b54      	ldr	r3, [pc, #336]	@ (80018bc <Shell_Loop+0x218>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 808b 	beq.w	800188a <Shell_Loop+0x1e6>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 8001774:	4b50      	ldr	r3, [pc, #320]	@ (80018b8 <Shell_Loop+0x214>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4952      	ldr	r1, [pc, #328]	@ (80018c4 <Shell_Loop+0x220>)
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fd58 	bl	8000230 <strcmp>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d107      	bne.n	8001796 <Shell_Loop+0xf2>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 8001786:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800178a:	221a      	movs	r2, #26
 800178c:	494e      	ldr	r1, [pc, #312]	@ (80018c8 <Shell_Loop+0x224>)
 800178e:	4844      	ldr	r0, [pc, #272]	@ (80018a0 <Shell_Loop+0x1fc>)
 8001790:	f004 fca3 	bl	80060da <HAL_UART_Transmit>
 8001794:	e06f      	b.n	8001876 <Shell_Loop+0x1d2>
		}
		else if(strcmp(argv[0],"help")==0){
 8001796:	4b48      	ldr	r3, [pc, #288]	@ (80018b8 <Shell_Loop+0x214>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	494c      	ldr	r1, [pc, #304]	@ (80018cc <Shell_Loop+0x228>)
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fd47 	bl	8000230 <strcmp>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10e      	bne.n	80017c6 <Shell_Loop+0x122>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 80017a8:	4a49      	ldr	r2, [pc, #292]	@ (80018d0 <Shell_Loop+0x22c>)
 80017aa:	2140      	movs	r1, #64	@ 0x40
 80017ac:	4849      	ldr	r0, [pc, #292]	@ (80018d4 <Shell_Loop+0x230>)
 80017ae:	f006 fd93 	bl	80082d8 <sniprintf>
 80017b2:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017bc:	4945      	ldr	r1, [pc, #276]	@ (80018d4 <Shell_Loop+0x230>)
 80017be:	4838      	ldr	r0, [pc, #224]	@ (80018a0 <Shell_Loop+0x1fc>)
 80017c0:	f004 fc8b 	bl	80060da <HAL_UART_Transmit>
 80017c4:	e057      	b.n	8001876 <Shell_Loop+0x1d2>
		}
		else if (strcmp(argv[0], "speed")==0){
 80017c6:	4b3c      	ldr	r3, [pc, #240]	@ (80018b8 <Shell_Loop+0x214>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4943      	ldr	r1, [pc, #268]	@ (80018d8 <Shell_Loop+0x234>)
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fd2f 	bl	8000230 <strcmp>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d147      	bne.n	8001868 <Shell_Loop+0x1c4>
			uint32_t speed = atoi(argv[1]);
 80017d8:	4b37      	ldr	r3, [pc, #220]	@ (80018b8 <Shell_Loop+0x214>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	4618      	mov	r0, r3
 80017de:	f006 fd77 	bl	80082d0 <atoi>
 80017e2:	4603      	mov	r3, r0
 80017e4:	617b      	str	r3, [r7, #20]

			if (speed > 3000){
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d907      	bls.n	8001800 <Shell_Loop+0x15c>
				HAL_UART_Transmit(&huart2,speedNotAvailable , sizeof(speedNotAvailable), HAL_MAX_DELAY);
 80017f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017f4:	2216      	movs	r2, #22
 80017f6:	4939      	ldr	r1, [pc, #228]	@ (80018dc <Shell_Loop+0x238>)
 80017f8:	4829      	ldr	r0, [pc, #164]	@ (80018a0 <Shell_Loop+0x1fc>)
 80017fa:	f004 fc6e 	bl	80060da <HAL_UART_Transmit>
 80017fe:	e03a      	b.n	8001876 <Shell_Loop+0x1d2>
			}
			else {
				uint32_t rpmMax = 3000;
 8001800:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001804:	613b      	str	r3, [r7, #16]
				uint32_t pulse1 = ((uint32_t)htim1.Instance->ARR * (uint32_t)(100*speed/rpmMax))/100;
 8001806:	4b36      	ldr	r3, [pc, #216]	@ (80018e0 <Shell_Loop+0x23c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	2164      	movs	r1, #100	@ 0x64
 8001810:	fb02 f101 	mul.w	r1, r2, r1
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	fbb1 f2f2 	udiv	r2, r1, r2
 800181a:	fb02 f303 	mul.w	r3, r2, r3
 800181e:	4a31      	ldr	r2, [pc, #196]	@ (80018e4 <Shell_Loop+0x240>)
 8001820:	fba2 2303 	umull	r2, r3, r2, r3
 8001824:	095b      	lsrs	r3, r3, #5
 8001826:	60fb      	str	r3, [r7, #12]
				uint32_t pulse2 = ((uint32_t)htim1.Instance->ARR * (uint32_t)(100-100*speed/rpmMax))/100;
 8001828:	4b2d      	ldr	r3, [pc, #180]	@ (80018e0 <Shell_Loop+0x23c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	2164      	movs	r1, #100	@ 0x64
 8001832:	fb02 f101 	mul.w	r1, r2, r1
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	fbb1 f2f2 	udiv	r2, r1, r2
 800183c:	f1c2 0264 	rsb	r2, r2, #100	@ 0x64
 8001840:	fb02 f303 	mul.w	r3, r2, r3
 8001844:	4a27      	ldr	r2, [pc, #156]	@ (80018e4 <Shell_Loop+0x240>)
 8001846:	fba2 2303 	umull	r2, r3, r2, r3
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	60bb      	str	r3, [r7, #8]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse1/100);
 800184e:	4b24      	ldr	r3, [pc, #144]	@ (80018e0 <Shell_Loop+0x23c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	4923      	ldr	r1, [pc, #140]	@ (80018e4 <Shell_Loop+0x240>)
 8001856:	fba1 1202 	umull	r1, r2, r1, r2
 800185a:	0952      	lsrs	r2, r2, #5
 800185c:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse2);
 800185e:	4b20      	ldr	r3, [pc, #128]	@ (80018e0 <Shell_Loop+0x23c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	639a      	str	r2, [r3, #56]	@ 0x38
 8001866:	e006      	b.n	8001876 <Shell_Loop+0x1d2>
			}
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001868:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800186c:	2214      	movs	r2, #20
 800186e:	491e      	ldr	r1, [pc, #120]	@ (80018e8 <Shell_Loop+0x244>)
 8001870:	480b      	ldr	r0, [pc, #44]	@ (80018a0 <Shell_Loop+0x1fc>)
 8001872:	f004 fc32 	bl	80060da <HAL_UART_Transmit>
		}

		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001876:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800187a:	221c      	movs	r2, #28
 800187c:	491b      	ldr	r1, [pc, #108]	@ (80018ec <Shell_Loop+0x248>)
 800187e:	4808      	ldr	r0, [pc, #32]	@ (80018a0 <Shell_Loop+0x1fc>)
 8001880:	f004 fc2b 	bl	80060da <HAL_UART_Transmit>
		newCmdReady = 0;
 8001884:	4b0d      	ldr	r3, [pc, #52]	@ (80018bc <Shell_Loop+0x218>)
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
	}
}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000444 	.word	0x20000444
 8001898:	20000448 	.word	0x20000448
 800189c:	20000088 	.word	0x20000088
 80018a0:	2000031c 	.word	0x2000031c
 80018a4:	200004cc 	.word	0x200004cc
 80018a8:	2000048c 	.word	0x2000048c
 80018ac:	200004f4 	.word	0x200004f4
 80018b0:	080097c8 	.word	0x080097c8
 80018b4:	200004f8 	.word	0x200004f8
 80018b8:	200004d0 	.word	0x200004d0
 80018bc:	200004fc 	.word	0x200004fc
 80018c0:	2000008c 	.word	0x2000008c
 80018c4:	080097cc 	.word	0x080097cc
 80018c8:	200000a4 	.word	0x200000a4
 80018cc:	080097dc 	.word	0x080097dc
 80018d0:	080097e4 	.word	0x080097e4
 80018d4:	2000044c 	.word	0x2000044c
 80018d8:	0800980c 	.word	0x0800980c
 80018dc:	200000c0 	.word	0x200000c0
 80018e0:	20000284 	.word	0x20000284
 80018e4:	51eb851f 	.word	0x51eb851f
 80018e8:	20000090 	.word	0x20000090
 80018ec:	20000004 	.word	0x20000004

080018f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80018f8:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <HAL_UART_RxCpltCallback+0x20>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80018fe:	2201      	movs	r2, #1
 8001900:	4904      	ldr	r1, [pc, #16]	@ (8001914 <HAL_UART_RxCpltCallback+0x24>)
 8001902:	4805      	ldr	r0, [pc, #20]	@ (8001918 <HAL_UART_RxCpltCallback+0x28>)
 8001904:	f004 fc78 	bl	80061f8 <HAL_UART_Receive_IT>
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000444 	.word	0x20000444
 8001914:	20000448 	.word	0x20000448
 8001918:	2000031c 	.word	0x2000031c

0800191c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800191c:	480d      	ldr	r0, [pc, #52]	@ (8001954 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800191e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001920:	480d      	ldr	r0, [pc, #52]	@ (8001958 <LoopForever+0x6>)
  ldr r1, =_edata
 8001922:	490e      	ldr	r1, [pc, #56]	@ (800195c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001924:	4a0e      	ldr	r2, [pc, #56]	@ (8001960 <LoopForever+0xe>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001928:	e002      	b.n	8001930 <LoopCopyDataInit>

0800192a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800192c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192e:	3304      	adds	r3, #4

08001930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001934:	d3f9      	bcc.n	800192a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001936:	4a0b      	ldr	r2, [pc, #44]	@ (8001964 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001938:	4c0b      	ldr	r4, [pc, #44]	@ (8001968 <LoopForever+0x16>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800193c:	e001      	b.n	8001942 <LoopFillZerobss>

0800193e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001940:	3204      	adds	r2, #4

08001942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001944:	d3fb      	bcc.n	800193e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001946:	f7ff faf1 	bl	8000f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800194a:	f006 fea9 	bl	80086a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800194e:	f7ff f8af 	bl	8000ab0 <main>

08001952 <LoopForever>:

LoopForever:
    b LoopForever
 8001952:	e7fe      	b.n	8001952 <LoopForever>
  ldr   r0, =_estack
 8001954:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800195c:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 8001960:	08009a48 	.word	0x08009a48
  ldr r2, =_sbss
 8001964:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 8001968:	20000650 	.word	0x20000650

0800196c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800196c:	e7fe      	b.n	800196c <ADC1_2_IRQHandler>

0800196e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001978:	2003      	movs	r0, #3
 800197a:	f001 f9dc 	bl	8002d36 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800197e:	200f      	movs	r0, #15
 8001980:	f7ff f94c 	bl	8000c1c <HAL_InitTick>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	71fb      	strb	r3, [r7, #7]
 800198e:	e001      	b.n	8001994 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001990:	f7ff f920 	bl	8000bd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001994:	79fb      	ldrb	r3, [r7, #7]

}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a4:	4b05      	ldr	r3, [pc, #20]	@ (80019bc <HAL_IncTick+0x1c>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <HAL_IncTick+0x20>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4413      	add	r3, r2
 80019ae:	4a03      	ldr	r2, [pc, #12]	@ (80019bc <HAL_IncTick+0x1c>)
 80019b0:	6013      	str	r3, [r2, #0]
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	20000500 	.word	0x20000500
 80019c0:	200000dc 	.word	0x200000dc

080019c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return uwTick;
 80019c8:	4b03      	ldr	r3, [pc, #12]	@ (80019d8 <HAL_GetTick+0x14>)
 80019ca:	681b      	ldr	r3, [r3, #0]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000500 	.word	0x20000500

080019dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	609a      	str	r2, [r3, #8]
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	3360      	adds	r3, #96	@ 0x60
 8001a56:	461a      	mov	r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <LL_ADC_SetOffset+0x44>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	4313      	orrs	r3, r2
 8001a74:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a7c:	bf00      	nop
 8001a7e:	371c      	adds	r7, #28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	03fff000 	.word	0x03fff000

08001a8c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3360      	adds	r3, #96	@ 0x60
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	3360      	adds	r3, #96	@ 0x60
 8001ac8:	461a      	mov	r2, r3
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	431a      	orrs	r2, r3
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ae2:	bf00      	nop
 8001ae4:	371c      	adds	r7, #28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b087      	sub	sp, #28
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	3360      	adds	r3, #96	@ 0x60
 8001afe:	461a      	mov	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	431a      	orrs	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001b18:	bf00      	nop
 8001b1a:	371c      	adds	r7, #28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	3360      	adds	r3, #96	@ 0x60
 8001b34:	461a      	mov	r2, r3
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001b4e:	bf00      	nop
 8001b50:	371c      	adds	r7, #28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	615a      	str	r2, [r3, #20]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b087      	sub	sp, #28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	3330      	adds	r3, #48	@ 0x30
 8001b90:	461a      	mov	r2, r3
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	0a1b      	lsrs	r3, r3, #8
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	f003 030c 	and.w	r3, r3, #12
 8001b9c:	4413      	add	r3, r2
 8001b9e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	211f      	movs	r1, #31
 8001bac:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	0e9b      	lsrs	r3, r3, #26
 8001bb8:	f003 011f 	and.w	r1, r3, #31
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bcc:	bf00      	nop
 8001bce:	371c      	adds	r7, #28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	3314      	adds	r3, #20
 8001be8:	461a      	mov	r2, r3
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	0e5b      	lsrs	r3, r3, #25
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	4413      	add	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	0d1b      	lsrs	r3, r3, #20
 8001c00:	f003 031f 	and.w	r3, r3, #31
 8001c04:	2107      	movs	r1, #7
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	401a      	ands	r2, r3
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	0d1b      	lsrs	r3, r3, #20
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c22:	bf00      	nop
 8001c24:	371c      	adds	r7, #28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f003 0318 	and.w	r3, r3, #24
 8001c52:	4908      	ldr	r1, [pc, #32]	@ (8001c74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c54:	40d9      	lsrs	r1, r3
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	400b      	ands	r3, r1
 8001c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c66:	bf00      	nop
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	0007ffff 	.word	0x0007ffff

08001c78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6093      	str	r3, [r2, #8]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001cb0:	d101      	bne.n	8001cb6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001cd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cd8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d00:	d101      	bne.n	8001d06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <LL_ADC_IsEnabled+0x18>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <LL_ADC_IsEnabled+0x1a>
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d101      	bne.n	8001d52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d101      	bne.n	8001d78 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b089      	sub	sp, #36	@ 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e1a9      	b.n	80020f6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d109      	bne.n	8001dc4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7fe fcf3 	bl	800079c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff67 	bl	8001c9c <LL_ADC_IsDeepPowerDownEnabled>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d004      	beq.n	8001dde <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff4d 	bl	8001c78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ff82 	bl	8001cec <LL_ADC_IsInternalRegulatorEnabled>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d115      	bne.n	8001e1a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff ff66 	bl	8001cc4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001df8:	4b9c      	ldr	r3, [pc, #624]	@ (800206c <HAL_ADC_Init+0x2e4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	099b      	lsrs	r3, r3, #6
 8001dfe:	4a9c      	ldr	r2, [pc, #624]	@ (8002070 <HAL_ADC_Init+0x2e8>)
 8001e00:	fba2 2303 	umull	r2, r3, r2, r3
 8001e04:	099b      	lsrs	r3, r3, #6
 8001e06:	3301      	adds	r3, #1
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e0c:	e002      	b.n	8001e14 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f9      	bne.n	8001e0e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff ff64 	bl	8001cec <LL_ADC_IsInternalRegulatorEnabled>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10d      	bne.n	8001e46 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e2e:	f043 0210 	orr.w	r2, r3, #16
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e3a:	f043 0201 	orr.w	r2, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ff75 	bl	8001d3a <LL_ADC_REG_IsConversionOngoing>
 8001e50:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e56:	f003 0310 	and.w	r3, r3, #16
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f040 8142 	bne.w	80020e4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f040 813e 	bne.w	80020e4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e6c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e70:	f043 0202 	orr.w	r2, r3, #2
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff49 	bl	8001d14 <LL_ADC_IsEnabled>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d141      	bne.n	8001f0c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e90:	d004      	beq.n	8001e9c <HAL_ADC_Init+0x114>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a77      	ldr	r2, [pc, #476]	@ (8002074 <HAL_ADC_Init+0x2ec>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d10f      	bne.n	8001ebc <HAL_ADC_Init+0x134>
 8001e9c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001ea0:	f7ff ff38 	bl	8001d14 <LL_ADC_IsEnabled>
 8001ea4:	4604      	mov	r4, r0
 8001ea6:	4873      	ldr	r0, [pc, #460]	@ (8002074 <HAL_ADC_Init+0x2ec>)
 8001ea8:	f7ff ff34 	bl	8001d14 <LL_ADC_IsEnabled>
 8001eac:	4603      	mov	r3, r0
 8001eae:	4323      	orrs	r3, r4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	bf0c      	ite	eq
 8001eb4:	2301      	moveq	r3, #1
 8001eb6:	2300      	movne	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	e012      	b.n	8001ee2 <HAL_ADC_Init+0x15a>
 8001ebc:	486e      	ldr	r0, [pc, #440]	@ (8002078 <HAL_ADC_Init+0x2f0>)
 8001ebe:	f7ff ff29 	bl	8001d14 <LL_ADC_IsEnabled>
 8001ec2:	4604      	mov	r4, r0
 8001ec4:	486d      	ldr	r0, [pc, #436]	@ (800207c <HAL_ADC_Init+0x2f4>)
 8001ec6:	f7ff ff25 	bl	8001d14 <LL_ADC_IsEnabled>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	431c      	orrs	r4, r3
 8001ece:	486c      	ldr	r0, [pc, #432]	@ (8002080 <HAL_ADC_Init+0x2f8>)
 8001ed0:	f7ff ff20 	bl	8001d14 <LL_ADC_IsEnabled>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	4323      	orrs	r3, r4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	bf0c      	ite	eq
 8001edc:	2301      	moveq	r3, #1
 8001ede:	2300      	movne	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d012      	beq.n	8001f0c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001eee:	d004      	beq.n	8001efa <HAL_ADC_Init+0x172>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a5f      	ldr	r2, [pc, #380]	@ (8002074 <HAL_ADC_Init+0x2ec>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_Init+0x176>
 8001efa:	4a62      	ldr	r2, [pc, #392]	@ (8002084 <HAL_ADC_Init+0x2fc>)
 8001efc:	e000      	b.n	8001f00 <HAL_ADC_Init+0x178>
 8001efe:	4a62      	ldr	r2, [pc, #392]	@ (8002088 <HAL_ADC_Init+0x300>)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4619      	mov	r1, r3
 8001f06:	4610      	mov	r0, r2
 8001f08:	f7ff fd68 	bl	80019dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	7f5b      	ldrb	r3, [r3, #29]
 8001f10:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f16:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f1c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f22:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f2a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d106      	bne.n	8001f48 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	045b      	lsls	r3, r3, #17
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d009      	beq.n	8001f64 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f54:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	4b48      	ldr	r3, [pc, #288]	@ (800208c <HAL_ADC_Init+0x304>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6812      	ldr	r2, [r2, #0]
 8001f72:	69b9      	ldr	r1, [r7, #24]
 8001f74:	430b      	orrs	r3, r1
 8001f76:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fee4 	bl	8001d60 <LL_ADC_INJ_IsConversionOngoing>
 8001f98:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d17f      	bne.n	80020a0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d17c      	bne.n	80020a0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001faa:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001fb2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001fc2:	f023 0302 	bic.w	r3, r3, #2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	69b9      	ldr	r1, [r7, #24]
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d017      	beq.n	8002008 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691a      	ldr	r2, [r3, #16]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001fe6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001ff0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ff4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6911      	ldr	r1, [r2, #16]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	430b      	orrs	r3, r1
 8002002:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002006:	e013      	b.n	8002030 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691a      	ldr	r2, [r3, #16]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002016:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002028:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800202c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002036:	2b01      	cmp	r3, #1
 8002038:	d12a      	bne.n	8002090 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002044:	f023 0304 	bic.w	r3, r3, #4
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002050:	4311      	orrs	r1, r2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002056:	4311      	orrs	r1, r2
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800205c:	430a      	orrs	r2, r1
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 0201 	orr.w	r2, r2, #1
 8002068:	611a      	str	r2, [r3, #16]
 800206a:	e019      	b.n	80020a0 <HAL_ADC_Init+0x318>
 800206c:	20000000 	.word	0x20000000
 8002070:	053e2d63 	.word	0x053e2d63
 8002074:	50000100 	.word	0x50000100
 8002078:	50000400 	.word	0x50000400
 800207c:	50000500 	.word	0x50000500
 8002080:	50000600 	.word	0x50000600
 8002084:	50000300 	.word	0x50000300
 8002088:	50000700 	.word	0x50000700
 800208c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691a      	ldr	r2, [r3, #16]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0201 	bic.w	r2, r2, #1
 800209e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d10c      	bne.n	80020c2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	f023 010f 	bic.w	r1, r3, #15
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	1e5a      	subs	r2, r3, #1
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	631a      	str	r2, [r3, #48]	@ 0x30
 80020c0:	e007      	b.n	80020d2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 020f 	bic.w	r2, r2, #15
 80020d0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d6:	f023 0303 	bic.w	r3, r3, #3
 80020da:	f043 0201 	orr.w	r2, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020e2:	e007      	b.n	80020f4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e8:	f043 0210 	orr.w	r2, r3, #16
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3724      	adds	r7, #36	@ 0x24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd90      	pop	{r4, r7, pc}
 80020fe:	bf00      	nop

08002100 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b0b6      	sub	sp, #216	@ 0xd8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800211a:	2b01      	cmp	r3, #1
 800211c:	d102      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x24>
 800211e:	2302      	movs	r3, #2
 8002120:	f000 bc13 	b.w	800294a <HAL_ADC_ConfigChannel+0x84a>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fe02 	bl	8001d3a <LL_ADC_REG_IsConversionOngoing>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	f040 83f3 	bne.w	8002924 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	6859      	ldr	r1, [r3, #4]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	461a      	mov	r2, r3
 800214c:	f7ff fd18 	bl	8001b80 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff fdf0 	bl	8001d3a <LL_ADC_REG_IsConversionOngoing>
 800215a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fdfc 	bl	8001d60 <LL_ADC_INJ_IsConversionOngoing>
 8002168:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800216c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002170:	2b00      	cmp	r3, #0
 8002172:	f040 81d9 	bne.w	8002528 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002176:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800217a:	2b00      	cmp	r3, #0
 800217c:	f040 81d4 	bne.w	8002528 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002188:	d10f      	bne.n	80021aa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2200      	movs	r2, #0
 8002194:	4619      	mov	r1, r3
 8002196:	f7ff fd1f 	bl	8001bd8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fcd9 	bl	8001b5a <LL_ADC_SetSamplingTimeCommonConfig>
 80021a8:	e00e      	b.n	80021c8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6818      	ldr	r0, [r3, #0]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	6819      	ldr	r1, [r3, #0]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	461a      	mov	r2, r3
 80021b8:	f7ff fd0e 	bl	8001bd8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fcc9 	bl	8001b5a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	695a      	ldr	r2, [r3, #20]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	08db      	lsrs	r3, r3, #3
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d022      	beq.n	8002230 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	6919      	ldr	r1, [r3, #16]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80021fa:	f7ff fc23 	bl	8001a44 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	6919      	ldr	r1, [r3, #16]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	461a      	mov	r2, r3
 800220c:	f7ff fc6f 	bl	8001aee <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800221c:	2b01      	cmp	r3, #1
 800221e:	d102      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x126>
 8002220:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002224:	e000      	b.n	8002228 <HAL_ADC_ConfigChannel+0x128>
 8002226:	2300      	movs	r3, #0
 8002228:	461a      	mov	r2, r3
 800222a:	f7ff fc7b 	bl	8001b24 <LL_ADC_SetOffsetSaturation>
 800222e:	e17b      	b.n	8002528 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2100      	movs	r1, #0
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fc28 	bl	8001a8c <LL_ADC_GetOffsetChannel>
 800223c:	4603      	mov	r3, r0
 800223e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10a      	bne.n	800225c <HAL_ADC_ConfigChannel+0x15c>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2100      	movs	r1, #0
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fc1d 	bl	8001a8c <LL_ADC_GetOffsetChannel>
 8002252:	4603      	mov	r3, r0
 8002254:	0e9b      	lsrs	r3, r3, #26
 8002256:	f003 021f 	and.w	r2, r3, #31
 800225a:	e01e      	b.n	800229a <HAL_ADC_ConfigChannel+0x19a>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2100      	movs	r1, #0
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fc12 	bl	8001a8c <LL_ADC_GetOffsetChannel>
 8002268:	4603      	mov	r3, r0
 800226a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002272:	fa93 f3a3 	rbit	r3, r3
 8002276:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800227a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800227e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002282:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800228a:	2320      	movs	r3, #32
 800228c:	e004      	b.n	8002298 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800228e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d105      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x1b2>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	0e9b      	lsrs	r3, r3, #26
 80022ac:	f003 031f 	and.w	r3, r3, #31
 80022b0:	e018      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x1e4>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80022be:	fa93 f3a3 	rbit	r3, r3
 80022c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80022c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80022ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80022d6:	2320      	movs	r3, #32
 80022d8:	e004      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80022da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80022de:	fab3 f383 	clz	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d106      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2200      	movs	r2, #0
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fbe1 	bl	8001ab8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2101      	movs	r1, #1
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fbc5 	bl	8001a8c <LL_ADC_GetOffsetChannel>
 8002302:	4603      	mov	r3, r0
 8002304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10a      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x222>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2101      	movs	r1, #1
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fbba 	bl	8001a8c <LL_ADC_GetOffsetChannel>
 8002318:	4603      	mov	r3, r0
 800231a:	0e9b      	lsrs	r3, r3, #26
 800231c:	f003 021f 	and.w	r2, r3, #31
 8002320:	e01e      	b.n	8002360 <HAL_ADC_ConfigChannel+0x260>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2101      	movs	r1, #1
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fbaf 	bl	8001a8c <LL_ADC_GetOffsetChannel>
 800232e:	4603      	mov	r3, r0
 8002330:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002340:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002344:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002348:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002350:	2320      	movs	r3, #32
 8002352:	e004      	b.n	800235e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002354:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002358:	fab3 f383 	clz	r3, r3
 800235c:	b2db      	uxtb	r3, r3
 800235e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002368:	2b00      	cmp	r3, #0
 800236a:	d105      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x278>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	0e9b      	lsrs	r3, r3, #26
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	e018      	b.n	80023aa <HAL_ADC_ConfigChannel+0x2aa>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800238c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002390:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002394:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800239c:	2320      	movs	r3, #32
 800239e:	e004      	b.n	80023aa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80023a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023a4:	fab3 f383 	clz	r3, r3
 80023a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d106      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2200      	movs	r2, #0
 80023b4:	2101      	movs	r1, #1
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fb7e 	bl	8001ab8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2102      	movs	r1, #2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fb62 	bl	8001a8c <LL_ADC_GetOffsetChannel>
 80023c8:	4603      	mov	r3, r0
 80023ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10a      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x2e8>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2102      	movs	r1, #2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fb57 	bl	8001a8c <LL_ADC_GetOffsetChannel>
 80023de:	4603      	mov	r3, r0
 80023e0:	0e9b      	lsrs	r3, r3, #26
 80023e2:	f003 021f 	and.w	r2, r3, #31
 80023e6:	e01e      	b.n	8002426 <HAL_ADC_ConfigChannel+0x326>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2102      	movs	r1, #2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fb4c 	bl	8001a8c <LL_ADC_GetOffsetChannel>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023fe:	fa93 f3a3 	rbit	r3, r3
 8002402:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002406:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800240a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800240e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002416:	2320      	movs	r3, #32
 8002418:	e004      	b.n	8002424 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800241a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242e:	2b00      	cmp	r3, #0
 8002430:	d105      	bne.n	800243e <HAL_ADC_ConfigChannel+0x33e>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	0e9b      	lsrs	r3, r3, #26
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	e016      	b.n	800246c <HAL_ADC_ConfigChannel+0x36c>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002450:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002452:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002456:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800245e:	2320      	movs	r3, #32
 8002460:	e004      	b.n	800246c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002462:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800246c:	429a      	cmp	r2, r3
 800246e:	d106      	bne.n	800247e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2200      	movs	r2, #0
 8002476:	2102      	movs	r1, #2
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fb1d 	bl	8001ab8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2103      	movs	r1, #3
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fb01 	bl	8001a8c <LL_ADC_GetOffsetChannel>
 800248a:	4603      	mov	r3, r0
 800248c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10a      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x3aa>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2103      	movs	r1, #3
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff faf6 	bl	8001a8c <LL_ADC_GetOffsetChannel>
 80024a0:	4603      	mov	r3, r0
 80024a2:	0e9b      	lsrs	r3, r3, #26
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	e017      	b.n	80024da <HAL_ADC_ConfigChannel+0x3da>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2103      	movs	r1, #3
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff faeb 	bl	8001a8c <LL_ADC_GetOffsetChannel>
 80024b6:	4603      	mov	r3, r0
 80024b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024bc:	fa93 f3a3 	rbit	r3, r3
 80024c0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80024c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024c4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80024c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80024cc:	2320      	movs	r3, #32
 80024ce:	e003      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80024d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d105      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x3f2>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	0e9b      	lsrs	r3, r3, #26
 80024ec:	f003 031f 	and.w	r3, r3, #31
 80024f0:	e011      	b.n	8002516 <HAL_ADC_ConfigChannel+0x416>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002500:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002502:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002504:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800250a:	2320      	movs	r3, #32
 800250c:	e003      	b.n	8002516 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800250e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002510:	fab3 f383 	clz	r3, r3
 8002514:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002516:	429a      	cmp	r2, r3
 8002518:	d106      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2200      	movs	r2, #0
 8002520:	2103      	movs	r1, #3
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fac8 	bl	8001ab8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fbf1 	bl	8001d14 <LL_ADC_IsEnabled>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	f040 813d 	bne.w	80027b4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	6819      	ldr	r1, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	461a      	mov	r2, r3
 8002548:	f7ff fb72 	bl	8001c30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4aa2      	ldr	r2, [pc, #648]	@ (80027dc <HAL_ADC_ConfigChannel+0x6dc>)
 8002552:	4293      	cmp	r3, r2
 8002554:	f040 812e 	bne.w	80027b4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10b      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x480>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0e9b      	lsrs	r3, r3, #26
 800256e:	3301      	adds	r3, #1
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	2b09      	cmp	r3, #9
 8002576:	bf94      	ite	ls
 8002578:	2301      	movls	r3, #1
 800257a:	2300      	movhi	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	e019      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x4b4>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800258e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002590:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002592:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002598:	2320      	movs	r3, #32
 800259a:	e003      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800259c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	3301      	adds	r3, #1
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	2b09      	cmp	r3, #9
 80025ac:	bf94      	ite	ls
 80025ae:	2301      	movls	r3, #1
 80025b0:	2300      	movhi	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d079      	beq.n	80026ac <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d107      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x4d4>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	0e9b      	lsrs	r3, r3, #26
 80025ca:	3301      	adds	r3, #1
 80025cc:	069b      	lsls	r3, r3, #26
 80025ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025d2:	e015      	b.n	8002600 <HAL_ADC_ConfigChannel+0x500>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025dc:	fa93 f3a3 	rbit	r3, r3
 80025e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80025e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025e4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80025e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80025ec:	2320      	movs	r3, #32
 80025ee:	e003      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80025f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	3301      	adds	r3, #1
 80025fa:	069b      	lsls	r3, r3, #26
 80025fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002608:	2b00      	cmp	r3, #0
 800260a:	d109      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x520>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	0e9b      	lsrs	r3, r3, #26
 8002612:	3301      	adds	r3, #1
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	2101      	movs	r1, #1
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	e017      	b.n	8002650 <HAL_ADC_ConfigChannel+0x550>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002628:	fa93 f3a3 	rbit	r3, r3
 800262c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800262e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002630:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002632:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002638:	2320      	movs	r3, #32
 800263a:	e003      	b.n	8002644 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800263c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	3301      	adds	r3, #1
 8002646:	f003 031f 	and.w	r3, r3, #31
 800264a:	2101      	movs	r1, #1
 800264c:	fa01 f303 	lsl.w	r3, r1, r3
 8002650:	ea42 0103 	orr.w	r1, r2, r3
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10a      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x576>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	0e9b      	lsrs	r3, r3, #26
 8002666:	3301      	adds	r3, #1
 8002668:	f003 021f 	and.w	r2, r3, #31
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	051b      	lsls	r3, r3, #20
 8002674:	e018      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x5a8>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800268e:	2320      	movs	r3, #32
 8002690:	e003      	b.n	800269a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
 800269a:	3301      	adds	r3, #1
 800269c:	f003 021f 	and.w	r2, r3, #31
 80026a0:	4613      	mov	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4413      	add	r3, r2
 80026a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026a8:	430b      	orrs	r3, r1
 80026aa:	e07e      	b.n	80027aa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d107      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x5c8>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	0e9b      	lsrs	r3, r3, #26
 80026be:	3301      	adds	r3, #1
 80026c0:	069b      	lsls	r3, r3, #26
 80026c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026c6:	e015      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x5f4>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80026d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80026da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80026e0:	2320      	movs	r3, #32
 80026e2:	e003      	b.n	80026ec <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80026e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	3301      	adds	r3, #1
 80026ee:	069b      	lsls	r3, r3, #26
 80026f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d109      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x614>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	0e9b      	lsrs	r3, r3, #26
 8002706:	3301      	adds	r3, #1
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	e017      	b.n	8002744 <HAL_ADC_ConfigChannel+0x644>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	61fb      	str	r3, [r7, #28]
  return result;
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800272c:	2320      	movs	r3, #32
 800272e:	e003      	b.n	8002738 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	3301      	adds	r3, #1
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	2101      	movs	r1, #1
 8002740:	fa01 f303 	lsl.w	r3, r1, r3
 8002744:	ea42 0103 	orr.w	r1, r2, r3
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10d      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x670>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	0e9b      	lsrs	r3, r3, #26
 800275a:	3301      	adds	r3, #1
 800275c:	f003 021f 	and.w	r2, r3, #31
 8002760:	4613      	mov	r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4413      	add	r3, r2
 8002766:	3b1e      	subs	r3, #30
 8002768:	051b      	lsls	r3, r3, #20
 800276a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800276e:	e01b      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x6a8>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	fa93 f3a3 	rbit	r3, r3
 800277c:	613b      	str	r3, [r7, #16]
  return result;
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002788:	2320      	movs	r3, #32
 800278a:	e003      	b.n	8002794 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	3301      	adds	r3, #1
 8002796:	f003 021f 	and.w	r2, r3, #31
 800279a:	4613      	mov	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	3b1e      	subs	r3, #30
 80027a2:	051b      	lsls	r3, r3, #20
 80027a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027a8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027ae:	4619      	mov	r1, r3
 80027b0:	f7ff fa12 	bl	8001bd8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4b09      	ldr	r3, [pc, #36]	@ (80027e0 <HAL_ADC_ConfigChannel+0x6e0>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80be 	beq.w	800293e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027ca:	d004      	beq.n	80027d6 <HAL_ADC_ConfigChannel+0x6d6>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a04      	ldr	r2, [pc, #16]	@ (80027e4 <HAL_ADC_ConfigChannel+0x6e4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d10a      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x6ec>
 80027d6:	4b04      	ldr	r3, [pc, #16]	@ (80027e8 <HAL_ADC_ConfigChannel+0x6e8>)
 80027d8:	e009      	b.n	80027ee <HAL_ADC_ConfigChannel+0x6ee>
 80027da:	bf00      	nop
 80027dc:	407f0000 	.word	0x407f0000
 80027e0:	80080000 	.word	0x80080000
 80027e4:	50000100 	.word	0x50000100
 80027e8:	50000300 	.word	0x50000300
 80027ec:	4b59      	ldr	r3, [pc, #356]	@ (8002954 <HAL_ADC_ConfigChannel+0x854>)
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff f91a 	bl	8001a28 <LL_ADC_GetCommonPathInternalCh>
 80027f4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a56      	ldr	r2, [pc, #344]	@ (8002958 <HAL_ADC_ConfigChannel+0x858>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d004      	beq.n	800280c <HAL_ADC_ConfigChannel+0x70c>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a55      	ldr	r2, [pc, #340]	@ (800295c <HAL_ADC_ConfigChannel+0x85c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d13a      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800280c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002810:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d134      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002820:	d005      	beq.n	800282e <HAL_ADC_ConfigChannel+0x72e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a4e      	ldr	r2, [pc, #312]	@ (8002960 <HAL_ADC_ConfigChannel+0x860>)
 8002828:	4293      	cmp	r3, r2
 800282a:	f040 8085 	bne.w	8002938 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002836:	d004      	beq.n	8002842 <HAL_ADC_ConfigChannel+0x742>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a49      	ldr	r2, [pc, #292]	@ (8002964 <HAL_ADC_ConfigChannel+0x864>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d101      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x746>
 8002842:	4a49      	ldr	r2, [pc, #292]	@ (8002968 <HAL_ADC_ConfigChannel+0x868>)
 8002844:	e000      	b.n	8002848 <HAL_ADC_ConfigChannel+0x748>
 8002846:	4a43      	ldr	r2, [pc, #268]	@ (8002954 <HAL_ADC_ConfigChannel+0x854>)
 8002848:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800284c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002850:	4619      	mov	r1, r3
 8002852:	4610      	mov	r0, r2
 8002854:	f7ff f8d5 	bl	8001a02 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002858:	4b44      	ldr	r3, [pc, #272]	@ (800296c <HAL_ADC_ConfigChannel+0x86c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	099b      	lsrs	r3, r3, #6
 800285e:	4a44      	ldr	r2, [pc, #272]	@ (8002970 <HAL_ADC_ConfigChannel+0x870>)
 8002860:	fba2 2303 	umull	r2, r3, r2, r3
 8002864:	099b      	lsrs	r3, r3, #6
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	4613      	mov	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002872:	e002      	b.n	800287a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	3b01      	subs	r3, #1
 8002878:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1f9      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002880:	e05a      	b.n	8002938 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a3b      	ldr	r2, [pc, #236]	@ (8002974 <HAL_ADC_ConfigChannel+0x874>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d125      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800288c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002890:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d11f      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a31      	ldr	r2, [pc, #196]	@ (8002964 <HAL_ADC_ConfigChannel+0x864>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d104      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x7ac>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a34      	ldr	r2, [pc, #208]	@ (8002978 <HAL_ADC_ConfigChannel+0x878>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d047      	beq.n	800293c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028b4:	d004      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0x7c0>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a2a      	ldr	r2, [pc, #168]	@ (8002964 <HAL_ADC_ConfigChannel+0x864>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d101      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x7c4>
 80028c0:	4a29      	ldr	r2, [pc, #164]	@ (8002968 <HAL_ADC_ConfigChannel+0x868>)
 80028c2:	e000      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x7c6>
 80028c4:	4a23      	ldr	r2, [pc, #140]	@ (8002954 <HAL_ADC_ConfigChannel+0x854>)
 80028c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ce:	4619      	mov	r1, r3
 80028d0:	4610      	mov	r0, r2
 80028d2:	f7ff f896 	bl	8001a02 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028d6:	e031      	b.n	800293c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a27      	ldr	r2, [pc, #156]	@ (800297c <HAL_ADC_ConfigChannel+0x87c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d12d      	bne.n	800293e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d127      	bne.n	800293e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002964 <HAL_ADC_ConfigChannel+0x864>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d022      	beq.n	800293e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002900:	d004      	beq.n	800290c <HAL_ADC_ConfigChannel+0x80c>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a17      	ldr	r2, [pc, #92]	@ (8002964 <HAL_ADC_ConfigChannel+0x864>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d101      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x810>
 800290c:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <HAL_ADC_ConfigChannel+0x868>)
 800290e:	e000      	b.n	8002912 <HAL_ADC_ConfigChannel+0x812>
 8002910:	4a10      	ldr	r2, [pc, #64]	@ (8002954 <HAL_ADC_ConfigChannel+0x854>)
 8002912:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002916:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800291a:	4619      	mov	r1, r3
 800291c:	4610      	mov	r0, r2
 800291e:	f7ff f870 	bl	8001a02 <LL_ADC_SetCommonPathInternalCh>
 8002922:	e00c      	b.n	800293e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002928:	f043 0220 	orr.w	r2, r3, #32
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002936:	e002      	b.n	800293e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002938:	bf00      	nop
 800293a:	e000      	b.n	800293e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800293c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002946:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800294a:	4618      	mov	r0, r3
 800294c:	37d8      	adds	r7, #216	@ 0xd8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	50000700 	.word	0x50000700
 8002958:	c3210000 	.word	0xc3210000
 800295c:	90c00010 	.word	0x90c00010
 8002960:	50000600 	.word	0x50000600
 8002964:	50000100 	.word	0x50000100
 8002968:	50000300 	.word	0x50000300
 800296c:	20000000 	.word	0x20000000
 8002970:	053e2d63 	.word	0x053e2d63
 8002974:	c7520000 	.word	0xc7520000
 8002978:	50000500 	.word	0x50000500
 800297c:	cb840000 	.word	0xcb840000

08002980 <LL_ADC_IsEnabled>:
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <LL_ADC_IsEnabled+0x18>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <LL_ADC_IsEnabled+0x1a>
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d101      	bne.n	80029be <LL_ADC_REG_IsConversionOngoing+0x18>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b0a1      	sub	sp, #132	@ 0x84
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e0e7      	b.n	8002bba <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80029f2:	2300      	movs	r3, #0
 80029f4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80029f6:	2300      	movs	r3, #0
 80029f8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a02:	d102      	bne.n	8002a0a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a04:	4b6f      	ldr	r3, [pc, #444]	@ (8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	e009      	b.n	8002a1e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a6e      	ldr	r2, [pc, #440]	@ (8002bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d102      	bne.n	8002a1a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002a14:	4b6d      	ldr	r3, [pc, #436]	@ (8002bcc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	e001      	b.n	8002a1e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10b      	bne.n	8002a3c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a28:	f043 0220 	orr.w	r2, r3, #32
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0be      	b.n	8002bba <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff ffb1 	bl	80029a6 <LL_ADC_REG_IsConversionOngoing>
 8002a44:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff ffab 	bl	80029a6 <LL_ADC_REG_IsConversionOngoing>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f040 80a0 	bne.w	8002b98 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002a58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f040 809c 	bne.w	8002b98 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a68:	d004      	beq.n	8002a74 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a55      	ldr	r2, [pc, #340]	@ (8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d101      	bne.n	8002a78 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002a74:	4b56      	ldr	r3, [pc, #344]	@ (8002bd0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002a76:	e000      	b.n	8002a7a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002a78:	4b56      	ldr	r3, [pc, #344]	@ (8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002a7a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d04b      	beq.n	8002b1c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	6859      	ldr	r1, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a96:	035b      	lsls	r3, r3, #13
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a9e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002aa8:	d004      	beq.n	8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a45      	ldr	r2, [pc, #276]	@ (8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d10f      	bne.n	8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002ab4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002ab8:	f7ff ff62 	bl	8002980 <LL_ADC_IsEnabled>
 8002abc:	4604      	mov	r4, r0
 8002abe:	4841      	ldr	r0, [pc, #260]	@ (8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ac0:	f7ff ff5e 	bl	8002980 <LL_ADC_IsEnabled>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	4323      	orrs	r3, r4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf0c      	ite	eq
 8002acc:	2301      	moveq	r3, #1
 8002ace:	2300      	movne	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	e012      	b.n	8002afa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002ad4:	483c      	ldr	r0, [pc, #240]	@ (8002bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002ad6:	f7ff ff53 	bl	8002980 <LL_ADC_IsEnabled>
 8002ada:	4604      	mov	r4, r0
 8002adc:	483b      	ldr	r0, [pc, #236]	@ (8002bcc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002ade:	f7ff ff4f 	bl	8002980 <LL_ADC_IsEnabled>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	431c      	orrs	r4, r3
 8002ae6:	483c      	ldr	r0, [pc, #240]	@ (8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002ae8:	f7ff ff4a 	bl	8002980 <LL_ADC_IsEnabled>
 8002aec:	4603      	mov	r3, r0
 8002aee:	4323      	orrs	r3, r4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	bf0c      	ite	eq
 8002af4:	2301      	moveq	r3, #1
 8002af6:	2300      	movne	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d056      	beq.n	8002bac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002afe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002b06:	f023 030f 	bic.w	r3, r3, #15
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	6811      	ldr	r1, [r2, #0]
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	6892      	ldr	r2, [r2, #8]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	431a      	orrs	r2, r3
 8002b16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b18:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b1a:	e047      	b.n	8002bac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b26:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b30:	d004      	beq.n	8002b3c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a23      	ldr	r2, [pc, #140]	@ (8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d10f      	bne.n	8002b5c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002b3c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002b40:	f7ff ff1e 	bl	8002980 <LL_ADC_IsEnabled>
 8002b44:	4604      	mov	r4, r0
 8002b46:	481f      	ldr	r0, [pc, #124]	@ (8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b48:	f7ff ff1a 	bl	8002980 <LL_ADC_IsEnabled>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	4323      	orrs	r3, r4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf0c      	ite	eq
 8002b54:	2301      	moveq	r3, #1
 8002b56:	2300      	movne	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	e012      	b.n	8002b82 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002b5c:	481a      	ldr	r0, [pc, #104]	@ (8002bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002b5e:	f7ff ff0f 	bl	8002980 <LL_ADC_IsEnabled>
 8002b62:	4604      	mov	r4, r0
 8002b64:	4819      	ldr	r0, [pc, #100]	@ (8002bcc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002b66:	f7ff ff0b 	bl	8002980 <LL_ADC_IsEnabled>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	431c      	orrs	r4, r3
 8002b6e:	481a      	ldr	r0, [pc, #104]	@ (8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002b70:	f7ff ff06 	bl	8002980 <LL_ADC_IsEnabled>
 8002b74:	4603      	mov	r3, r0
 8002b76:	4323      	orrs	r3, r4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bf0c      	ite	eq
 8002b7c:	2301      	moveq	r3, #1
 8002b7e:	2300      	movne	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d012      	beq.n	8002bac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002b8e:	f023 030f 	bic.w	r3, r3, #15
 8002b92:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002b94:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b96:	e009      	b.n	8002bac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b9c:	f043 0220 	orr.w	r2, r3, #32
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002baa:	e000      	b.n	8002bae <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002bac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002bb6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3784      	adds	r7, #132	@ 0x84
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd90      	pop	{r4, r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	50000100 	.word	0x50000100
 8002bc8:	50000400 	.word	0x50000400
 8002bcc:	50000500 	.word	0x50000500
 8002bd0:	50000300 	.word	0x50000300
 8002bd4:	50000700 	.word	0x50000700
 8002bd8:	50000600 	.word	0x50000600

08002bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bec:	4b0c      	ldr	r3, [pc, #48]	@ (8002c20 <__NVIC_SetPriorityGrouping+0x44>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c0e:	4a04      	ldr	r2, [pc, #16]	@ (8002c20 <__NVIC_SetPriorityGrouping+0x44>)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	60d3      	str	r3, [r2, #12]
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c28:	4b04      	ldr	r3, [pc, #16]	@ (8002c3c <__NVIC_GetPriorityGrouping+0x18>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	0a1b      	lsrs	r3, r3, #8
 8002c2e:	f003 0307 	and.w	r3, r3, #7
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	db0b      	blt.n	8002c6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	f003 021f 	and.w	r2, r3, #31
 8002c58:	4907      	ldr	r1, [pc, #28]	@ (8002c78 <__NVIC_EnableIRQ+0x38>)
 8002c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	2001      	movs	r0, #1
 8002c62:	fa00 f202 	lsl.w	r2, r0, r2
 8002c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	e000e100 	.word	0xe000e100

08002c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	6039      	str	r1, [r7, #0]
 8002c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	db0a      	blt.n	8002ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	490c      	ldr	r1, [pc, #48]	@ (8002cc8 <__NVIC_SetPriority+0x4c>)
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	0112      	lsls	r2, r2, #4
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ca4:	e00a      	b.n	8002cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	4908      	ldr	r1, [pc, #32]	@ (8002ccc <__NVIC_SetPriority+0x50>)
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	3b04      	subs	r3, #4
 8002cb4:	0112      	lsls	r2, r2, #4
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	440b      	add	r3, r1
 8002cba:	761a      	strb	r2, [r3, #24]
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	e000e100 	.word	0xe000e100
 8002ccc:	e000ed00 	.word	0xe000ed00

08002cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b089      	sub	sp, #36	@ 0x24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f1c3 0307 	rsb	r3, r3, #7
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	bf28      	it	cs
 8002cee:	2304      	movcs	r3, #4
 8002cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	2b06      	cmp	r3, #6
 8002cf8:	d902      	bls.n	8002d00 <NVIC_EncodePriority+0x30>
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	3b03      	subs	r3, #3
 8002cfe:	e000      	b.n	8002d02 <NVIC_EncodePriority+0x32>
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43da      	mvns	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	401a      	ands	r2, r3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d22:	43d9      	mvns	r1, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d28:	4313      	orrs	r3, r2
         );
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3724      	adds	r7, #36	@ 0x24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff ff4c 	bl	8002bdc <__NVIC_SetPriorityGrouping>
}
 8002d44:	bf00      	nop
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d5a:	f7ff ff63 	bl	8002c24 <__NVIC_GetPriorityGrouping>
 8002d5e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	68b9      	ldr	r1, [r7, #8]
 8002d64:	6978      	ldr	r0, [r7, #20]
 8002d66:	f7ff ffb3 	bl	8002cd0 <NVIC_EncodePriority>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff ff82 	bl	8002c7c <__NVIC_SetPriority>
}
 8002d78:	bf00      	nop
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff ff56 	bl	8002c40 <__NVIC_EnableIRQ>
}
 8002d94:	bf00      	nop
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d005      	beq.n	8002dc0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2204      	movs	r2, #4
 8002db8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	73fb      	strb	r3, [r7, #15]
 8002dbe:	e037      	b.n	8002e30 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 020e 	bic.w	r2, r2, #14
 8002dce:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dda:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dde:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0201 	bic.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df4:	f003 021f 	and.w	r2, r3, #31
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8002e02:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e0c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00c      	beq.n	8002e30 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e24:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e2e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d00d      	beq.n	8002e82 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2204      	movs	r2, #4
 8002e6a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
 8002e80:	e047      	b.n	8002f12 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 020e 	bic.w	r2, r2, #14
 8002e90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0201 	bic.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002eb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb6:	f003 021f 	and.w	r2, r3, #31
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ece:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00c      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ee6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002ef0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	4798      	blx	r3
    }
  }
  return status;
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f2a:	e15a      	b.n	80031e2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	2101      	movs	r1, #1
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	fa01 f303 	lsl.w	r3, r1, r3
 8002f38:	4013      	ands	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 814c 	beq.w	80031dc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d005      	beq.n	8002f5c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d130      	bne.n	8002fbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	2203      	movs	r2, #3
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4013      	ands	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f92:	2201      	movs	r2, #1
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	091b      	lsrs	r3, r3, #4
 8002fa8:	f003 0201 	and.w	r2, r3, #1
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d017      	beq.n	8002ffa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d123      	bne.n	800304e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	08da      	lsrs	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3208      	adds	r2, #8
 800300e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003012:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	220f      	movs	r2, #15
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4013      	ands	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	691a      	ldr	r2, [r3, #16]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	08da      	lsrs	r2, r3, #3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3208      	adds	r2, #8
 8003048:	6939      	ldr	r1, [r7, #16]
 800304a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	2203      	movs	r2, #3
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4013      	ands	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f003 0203 	and.w	r2, r3, #3
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 80a6 	beq.w	80031dc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003090:	4b5b      	ldr	r3, [pc, #364]	@ (8003200 <HAL_GPIO_Init+0x2e4>)
 8003092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003094:	4a5a      	ldr	r2, [pc, #360]	@ (8003200 <HAL_GPIO_Init+0x2e4>)
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	6613      	str	r3, [r2, #96]	@ 0x60
 800309c:	4b58      	ldr	r3, [pc, #352]	@ (8003200 <HAL_GPIO_Init+0x2e4>)
 800309e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030a8:	4a56      	ldr	r2, [pc, #344]	@ (8003204 <HAL_GPIO_Init+0x2e8>)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	089b      	lsrs	r3, r3, #2
 80030ae:	3302      	adds	r3, #2
 80030b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	220f      	movs	r2, #15
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4013      	ands	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80030d2:	d01f      	beq.n	8003114 <HAL_GPIO_Init+0x1f8>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a4c      	ldr	r2, [pc, #304]	@ (8003208 <HAL_GPIO_Init+0x2ec>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d019      	beq.n	8003110 <HAL_GPIO_Init+0x1f4>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a4b      	ldr	r2, [pc, #300]	@ (800320c <HAL_GPIO_Init+0x2f0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d013      	beq.n	800310c <HAL_GPIO_Init+0x1f0>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a4a      	ldr	r2, [pc, #296]	@ (8003210 <HAL_GPIO_Init+0x2f4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d00d      	beq.n	8003108 <HAL_GPIO_Init+0x1ec>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a49      	ldr	r2, [pc, #292]	@ (8003214 <HAL_GPIO_Init+0x2f8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d007      	beq.n	8003104 <HAL_GPIO_Init+0x1e8>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a48      	ldr	r2, [pc, #288]	@ (8003218 <HAL_GPIO_Init+0x2fc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d101      	bne.n	8003100 <HAL_GPIO_Init+0x1e4>
 80030fc:	2305      	movs	r3, #5
 80030fe:	e00a      	b.n	8003116 <HAL_GPIO_Init+0x1fa>
 8003100:	2306      	movs	r3, #6
 8003102:	e008      	b.n	8003116 <HAL_GPIO_Init+0x1fa>
 8003104:	2304      	movs	r3, #4
 8003106:	e006      	b.n	8003116 <HAL_GPIO_Init+0x1fa>
 8003108:	2303      	movs	r3, #3
 800310a:	e004      	b.n	8003116 <HAL_GPIO_Init+0x1fa>
 800310c:	2302      	movs	r3, #2
 800310e:	e002      	b.n	8003116 <HAL_GPIO_Init+0x1fa>
 8003110:	2301      	movs	r3, #1
 8003112:	e000      	b.n	8003116 <HAL_GPIO_Init+0x1fa>
 8003114:	2300      	movs	r3, #0
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	f002 0203 	and.w	r2, r2, #3
 800311c:	0092      	lsls	r2, r2, #2
 800311e:	4093      	lsls	r3, r2
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003126:	4937      	ldr	r1, [pc, #220]	@ (8003204 <HAL_GPIO_Init+0x2e8>)
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	089b      	lsrs	r3, r3, #2
 800312c:	3302      	adds	r3, #2
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003134:	4b39      	ldr	r3, [pc, #228]	@ (800321c <HAL_GPIO_Init+0x300>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	43db      	mvns	r3, r3
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4013      	ands	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003158:	4a30      	ldr	r2, [pc, #192]	@ (800321c <HAL_GPIO_Init+0x300>)
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800315e:	4b2f      	ldr	r3, [pc, #188]	@ (800321c <HAL_GPIO_Init+0x300>)
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	43db      	mvns	r3, r3
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4013      	ands	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003182:	4a26      	ldr	r2, [pc, #152]	@ (800321c <HAL_GPIO_Init+0x300>)
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003188:	4b24      	ldr	r3, [pc, #144]	@ (800321c <HAL_GPIO_Init+0x300>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	43db      	mvns	r3, r3
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4013      	ands	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031ac:	4a1b      	ldr	r2, [pc, #108]	@ (800321c <HAL_GPIO_Init+0x300>)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80031b2:	4b1a      	ldr	r3, [pc, #104]	@ (800321c <HAL_GPIO_Init+0x300>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	43db      	mvns	r3, r3
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4013      	ands	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031d6:	4a11      	ldr	r2, [pc, #68]	@ (800321c <HAL_GPIO_Init+0x300>)
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	3301      	adds	r3, #1
 80031e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	fa22 f303 	lsr.w	r3, r2, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f47f ae9d 	bne.w	8002f2c <HAL_GPIO_Init+0x10>
  }
}
 80031f2:	bf00      	nop
 80031f4:	bf00      	nop
 80031f6:	371c      	adds	r7, #28
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	40021000 	.word	0x40021000
 8003204:	40010000 	.word	0x40010000
 8003208:	48000400 	.word	0x48000400
 800320c:	48000800 	.word	0x48000800
 8003210:	48000c00 	.word	0x48000c00
 8003214:	48001000 	.word	0x48001000
 8003218:	48001400 	.word	0x48001400
 800321c:	40010400 	.word	0x40010400

08003220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	807b      	strh	r3, [r7, #2]
 800322c:	4613      	mov	r3, r2
 800322e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003230:	787b      	ldrb	r3, [r7, #1]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003236:	887a      	ldrh	r2, [r7, #2]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800323c:	e002      	b.n	8003244 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800323e:	887a      	ldrh	r2, [r7, #2]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800325a:	4b08      	ldr	r3, [pc, #32]	@ (800327c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	88fb      	ldrh	r3, [r7, #6]
 8003260:	4013      	ands	r3, r2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d006      	beq.n	8003274 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003266:	4a05      	ldr	r2, [pc, #20]	@ (800327c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003268:	88fb      	ldrh	r3, [r7, #6]
 800326a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800326c:	88fb      	ldrh	r3, [r7, #6]
 800326e:	4618      	mov	r0, r3
 8003270:	f000 f806 	bl	8003280 <HAL_GPIO_EXTI_Callback>
  }
}
 8003274:	bf00      	nop
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40010400 	.word	0x40010400

08003280 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d141      	bne.n	800332a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032a6:	4b4b      	ldr	r3, [pc, #300]	@ (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032b2:	d131      	bne.n	8003318 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032b4:	4b47      	ldr	r3, [pc, #284]	@ (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032ba:	4a46      	ldr	r2, [pc, #280]	@ (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032c4:	4b43      	ldr	r3, [pc, #268]	@ (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032cc:	4a41      	ldr	r2, [pc, #260]	@ (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032d4:	4b40      	ldr	r3, [pc, #256]	@ (80033d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2232      	movs	r2, #50	@ 0x32
 80032da:	fb02 f303 	mul.w	r3, r2, r3
 80032de:	4a3f      	ldr	r2, [pc, #252]	@ (80033dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032e0:	fba2 2303 	umull	r2, r3, r2, r3
 80032e4:	0c9b      	lsrs	r3, r3, #18
 80032e6:	3301      	adds	r3, #1
 80032e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032ea:	e002      	b.n	80032f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032f2:	4b38      	ldr	r3, [pc, #224]	@ (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032fe:	d102      	bne.n	8003306 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f2      	bne.n	80032ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003306:	4b33      	ldr	r3, [pc, #204]	@ (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800330e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003312:	d158      	bne.n	80033c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e057      	b.n	80033c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003318:	4b2e      	ldr	r3, [pc, #184]	@ (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800331a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800331e:	4a2d      	ldr	r2, [pc, #180]	@ (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003320:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003324:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003328:	e04d      	b.n	80033c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003330:	d141      	bne.n	80033b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003332:	4b28      	ldr	r3, [pc, #160]	@ (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800333a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800333e:	d131      	bne.n	80033a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003340:	4b24      	ldr	r3, [pc, #144]	@ (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003346:	4a23      	ldr	r2, [pc, #140]	@ (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800334c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003350:	4b20      	ldr	r3, [pc, #128]	@ (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003358:	4a1e      	ldr	r2, [pc, #120]	@ (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800335a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800335e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003360:	4b1d      	ldr	r3, [pc, #116]	@ (80033d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2232      	movs	r2, #50	@ 0x32
 8003366:	fb02 f303 	mul.w	r3, r2, r3
 800336a:	4a1c      	ldr	r2, [pc, #112]	@ (80033dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800336c:	fba2 2303 	umull	r2, r3, r2, r3
 8003370:	0c9b      	lsrs	r3, r3, #18
 8003372:	3301      	adds	r3, #1
 8003374:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003376:	e002      	b.n	800337e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	3b01      	subs	r3, #1
 800337c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800337e:	4b15      	ldr	r3, [pc, #84]	@ (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800338a:	d102      	bne.n	8003392 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f2      	bne.n	8003378 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003392:	4b10      	ldr	r3, [pc, #64]	@ (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800339a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800339e:	d112      	bne.n	80033c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e011      	b.n	80033c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033a4:	4b0b      	ldr	r3, [pc, #44]	@ (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033aa:	4a0a      	ldr	r2, [pc, #40]	@ (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80033b4:	e007      	b.n	80033c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033b6:	4b07      	ldr	r3, [pc, #28]	@ (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033be:	4a05      	ldr	r2, [pc, #20]	@ (80033d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033c4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	40007000 	.word	0x40007000
 80033d8:	20000000 	.word	0x20000000
 80033dc:	431bde83 	.word	0x431bde83

080033e0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80033e4:	4b05      	ldr	r3, [pc, #20]	@ (80033fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	4a04      	ldr	r2, [pc, #16]	@ (80033fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80033ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033ee:	6093      	str	r3, [r2, #8]
}
 80033f0:	bf00      	nop
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40007000 	.word	0x40007000

08003400 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e2fe      	b.n	8003a10 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d075      	beq.n	800350a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800341e:	4b97      	ldr	r3, [pc, #604]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003428:	4b94      	ldr	r3, [pc, #592]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2b0c      	cmp	r3, #12
 8003436:	d102      	bne.n	800343e <HAL_RCC_OscConfig+0x3e>
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2b03      	cmp	r3, #3
 800343c:	d002      	beq.n	8003444 <HAL_RCC_OscConfig+0x44>
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	2b08      	cmp	r3, #8
 8003442:	d10b      	bne.n	800345c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003444:	4b8d      	ldr	r3, [pc, #564]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d05b      	beq.n	8003508 <HAL_RCC_OscConfig+0x108>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d157      	bne.n	8003508 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e2d9      	b.n	8003a10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003464:	d106      	bne.n	8003474 <HAL_RCC_OscConfig+0x74>
 8003466:	4b85      	ldr	r3, [pc, #532]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a84      	ldr	r2, [pc, #528]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 800346c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	e01d      	b.n	80034b0 <HAL_RCC_OscConfig+0xb0>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800347c:	d10c      	bne.n	8003498 <HAL_RCC_OscConfig+0x98>
 800347e:	4b7f      	ldr	r3, [pc, #508]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a7e      	ldr	r2, [pc, #504]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 8003484:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	4b7c      	ldr	r3, [pc, #496]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a7b      	ldr	r2, [pc, #492]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 8003490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	e00b      	b.n	80034b0 <HAL_RCC_OscConfig+0xb0>
 8003498:	4b78      	ldr	r3, [pc, #480]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a77      	ldr	r2, [pc, #476]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 800349e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	4b75      	ldr	r3, [pc, #468]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a74      	ldr	r2, [pc, #464]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 80034aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d013      	beq.n	80034e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fe fa84 	bl	80019c4 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c0:	f7fe fa80 	bl	80019c4 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b64      	cmp	r3, #100	@ 0x64
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e29e      	b.n	8003a10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034d2:	4b6a      	ldr	r3, [pc, #424]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0xc0>
 80034de:	e014      	b.n	800350a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e0:	f7fe fa70 	bl	80019c4 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034e8:	f7fe fa6c 	bl	80019c4 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b64      	cmp	r3, #100	@ 0x64
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e28a      	b.n	8003a10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034fa:	4b60      	ldr	r3, [pc, #384]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0xe8>
 8003506:	e000      	b.n	800350a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d075      	beq.n	8003602 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003516:	4b59      	ldr	r3, [pc, #356]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003520:	4b56      	ldr	r3, [pc, #344]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	2b0c      	cmp	r3, #12
 800352e:	d102      	bne.n	8003536 <HAL_RCC_OscConfig+0x136>
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2b02      	cmp	r3, #2
 8003534:	d002      	beq.n	800353c <HAL_RCC_OscConfig+0x13c>
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	2b04      	cmp	r3, #4
 800353a:	d11f      	bne.n	800357c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800353c:	4b4f      	ldr	r3, [pc, #316]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <HAL_RCC_OscConfig+0x154>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e25d      	b.n	8003a10 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003554:	4b49      	ldr	r3, [pc, #292]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	061b      	lsls	r3, r3, #24
 8003562:	4946      	ldr	r1, [pc, #280]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 8003564:	4313      	orrs	r3, r2
 8003566:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003568:	4b45      	ldr	r3, [pc, #276]	@ (8003680 <HAL_RCC_OscConfig+0x280>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f7fd fb55 	bl	8000c1c <HAL_InitTick>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d043      	beq.n	8003600 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e249      	b.n	8003a10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d023      	beq.n	80035cc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003584:	4b3d      	ldr	r3, [pc, #244]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a3c      	ldr	r2, [pc, #240]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 800358a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800358e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003590:	f7fe fa18 	bl	80019c4 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003598:	f7fe fa14 	bl	80019c4 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e232      	b.n	8003a10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035aa:	4b34      	ldr	r3, [pc, #208]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b6:	4b31      	ldr	r3, [pc, #196]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	061b      	lsls	r3, r3, #24
 80035c4:	492d      	ldr	r1, [pc, #180]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	604b      	str	r3, [r1, #4]
 80035ca:	e01a      	b.n	8003602 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035cc:	4b2b      	ldr	r3, [pc, #172]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a2a      	ldr	r2, [pc, #168]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 80035d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d8:	f7fe f9f4 	bl	80019c4 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035e0:	f7fe f9f0 	bl	80019c4 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e20e      	b.n	8003a10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035f2:	4b22      	ldr	r3, [pc, #136]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f0      	bne.n	80035e0 <HAL_RCC_OscConfig+0x1e0>
 80035fe:	e000      	b.n	8003602 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003600:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d041      	beq.n	8003692 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d01c      	beq.n	8003650 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003616:	4b19      	ldr	r3, [pc, #100]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 8003618:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800361c:	4a17      	ldr	r2, [pc, #92]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003626:	f7fe f9cd 	bl	80019c4 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800362e:	f7fe f9c9 	bl	80019c4 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e1e7      	b.n	8003a10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003640:	4b0e      	ldr	r3, [pc, #56]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 8003642:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0ef      	beq.n	800362e <HAL_RCC_OscConfig+0x22e>
 800364e:	e020      	b.n	8003692 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003650:	4b0a      	ldr	r3, [pc, #40]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 8003652:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003656:	4a09      	ldr	r2, [pc, #36]	@ (800367c <HAL_RCC_OscConfig+0x27c>)
 8003658:	f023 0301 	bic.w	r3, r3, #1
 800365c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003660:	f7fe f9b0 	bl	80019c4 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003666:	e00d      	b.n	8003684 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003668:	f7fe f9ac 	bl	80019c4 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d906      	bls.n	8003684 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e1ca      	b.n	8003a10 <HAL_RCC_OscConfig+0x610>
 800367a:	bf00      	nop
 800367c:	40021000 	.word	0x40021000
 8003680:	200000d8 	.word	0x200000d8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003684:	4b8c      	ldr	r3, [pc, #560]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 8003686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1ea      	bne.n	8003668 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 80a6 	beq.w	80037ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036a0:	2300      	movs	r3, #0
 80036a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036a4:	4b84      	ldr	r3, [pc, #528]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 80036a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_RCC_OscConfig+0x2b4>
 80036b0:	2301      	movs	r3, #1
 80036b2:	e000      	b.n	80036b6 <HAL_RCC_OscConfig+0x2b6>
 80036b4:	2300      	movs	r3, #0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00d      	beq.n	80036d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ba:	4b7f      	ldr	r3, [pc, #508]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 80036bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036be:	4a7e      	ldr	r2, [pc, #504]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 80036c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80036c6:	4b7c      	ldr	r3, [pc, #496]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 80036c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036d2:	2301      	movs	r3, #1
 80036d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036d6:	4b79      	ldr	r3, [pc, #484]	@ (80038bc <HAL_RCC_OscConfig+0x4bc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d118      	bne.n	8003714 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036e2:	4b76      	ldr	r3, [pc, #472]	@ (80038bc <HAL_RCC_OscConfig+0x4bc>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a75      	ldr	r2, [pc, #468]	@ (80038bc <HAL_RCC_OscConfig+0x4bc>)
 80036e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ee:	f7fe f969 	bl	80019c4 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036f6:	f7fe f965 	bl	80019c4 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e183      	b.n	8003a10 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003708:	4b6c      	ldr	r3, [pc, #432]	@ (80038bc <HAL_RCC_OscConfig+0x4bc>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0f0      	beq.n	80036f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d108      	bne.n	800372e <HAL_RCC_OscConfig+0x32e>
 800371c:	4b66      	ldr	r3, [pc, #408]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003722:	4a65      	ldr	r2, [pc, #404]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800372c:	e024      	b.n	8003778 <HAL_RCC_OscConfig+0x378>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2b05      	cmp	r3, #5
 8003734:	d110      	bne.n	8003758 <HAL_RCC_OscConfig+0x358>
 8003736:	4b60      	ldr	r3, [pc, #384]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373c:	4a5e      	ldr	r2, [pc, #376]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 800373e:	f043 0304 	orr.w	r3, r3, #4
 8003742:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003746:	4b5c      	ldr	r3, [pc, #368]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800374c:	4a5a      	ldr	r2, [pc, #360]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003756:	e00f      	b.n	8003778 <HAL_RCC_OscConfig+0x378>
 8003758:	4b57      	ldr	r3, [pc, #348]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 800375a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800375e:	4a56      	ldr	r2, [pc, #344]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 8003760:	f023 0301 	bic.w	r3, r3, #1
 8003764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003768:	4b53      	ldr	r3, [pc, #332]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 800376a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800376e:	4a52      	ldr	r2, [pc, #328]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 8003770:	f023 0304 	bic.w	r3, r3, #4
 8003774:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d016      	beq.n	80037ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003780:	f7fe f920 	bl	80019c4 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003786:	e00a      	b.n	800379e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003788:	f7fe f91c 	bl	80019c4 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003796:	4293      	cmp	r3, r2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e138      	b.n	8003a10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800379e:	4b46      	ldr	r3, [pc, #280]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0ed      	beq.n	8003788 <HAL_RCC_OscConfig+0x388>
 80037ac:	e015      	b.n	80037da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ae:	f7fe f909 	bl	80019c4 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037b4:	e00a      	b.n	80037cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b6:	f7fe f905 	bl	80019c4 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e121      	b.n	8003a10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037cc:	4b3a      	ldr	r3, [pc, #232]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1ed      	bne.n	80037b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037da:	7ffb      	ldrb	r3, [r7, #31]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d105      	bne.n	80037ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037e0:	4b35      	ldr	r3, [pc, #212]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 80037e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e4:	4a34      	ldr	r2, [pc, #208]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 80037e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0320 	and.w	r3, r3, #32
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d03c      	beq.n	8003872 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d01c      	beq.n	800383a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003800:	4b2d      	ldr	r3, [pc, #180]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 8003802:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003806:	4a2c      	ldr	r2, [pc, #176]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003810:	f7fe f8d8 	bl	80019c4 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003818:	f7fe f8d4 	bl	80019c4 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e0f2      	b.n	8003a10 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800382a:	4b23      	ldr	r3, [pc, #140]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 800382c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0ef      	beq.n	8003818 <HAL_RCC_OscConfig+0x418>
 8003838:	e01b      	b.n	8003872 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800383a:	4b1f      	ldr	r3, [pc, #124]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 800383c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003840:	4a1d      	ldr	r2, [pc, #116]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 8003842:	f023 0301 	bic.w	r3, r3, #1
 8003846:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384a:	f7fe f8bb 	bl	80019c4 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003852:	f7fe f8b7 	bl	80019c4 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e0d5      	b.n	8003a10 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003864:	4b14      	ldr	r3, [pc, #80]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 8003866:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1ef      	bne.n	8003852 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 80c9 	beq.w	8003a0e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800387c:	4b0e      	ldr	r3, [pc, #56]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 030c 	and.w	r3, r3, #12
 8003884:	2b0c      	cmp	r3, #12
 8003886:	f000 8083 	beq.w	8003990 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d15e      	bne.n	8003950 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003892:	4b09      	ldr	r3, [pc, #36]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a08      	ldr	r2, [pc, #32]	@ (80038b8 <HAL_RCC_OscConfig+0x4b8>)
 8003898:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800389c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389e:	f7fe f891 	bl	80019c4 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038a4:	e00c      	b.n	80038c0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a6:	f7fe f88d 	bl	80019c4 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d905      	bls.n	80038c0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e0ab      	b.n	8003a10 <HAL_RCC_OscConfig+0x610>
 80038b8:	40021000 	.word	0x40021000
 80038bc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038c0:	4b55      	ldr	r3, [pc, #340]	@ (8003a18 <HAL_RCC_OscConfig+0x618>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1ec      	bne.n	80038a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038cc:	4b52      	ldr	r3, [pc, #328]	@ (8003a18 <HAL_RCC_OscConfig+0x618>)
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	4b52      	ldr	r3, [pc, #328]	@ (8003a1c <HAL_RCC_OscConfig+0x61c>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6a11      	ldr	r1, [r2, #32]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038dc:	3a01      	subs	r2, #1
 80038de:	0112      	lsls	r2, r2, #4
 80038e0:	4311      	orrs	r1, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80038e6:	0212      	lsls	r2, r2, #8
 80038e8:	4311      	orrs	r1, r2
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80038ee:	0852      	lsrs	r2, r2, #1
 80038f0:	3a01      	subs	r2, #1
 80038f2:	0552      	lsls	r2, r2, #21
 80038f4:	4311      	orrs	r1, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80038fa:	0852      	lsrs	r2, r2, #1
 80038fc:	3a01      	subs	r2, #1
 80038fe:	0652      	lsls	r2, r2, #25
 8003900:	4311      	orrs	r1, r2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003906:	06d2      	lsls	r2, r2, #27
 8003908:	430a      	orrs	r2, r1
 800390a:	4943      	ldr	r1, [pc, #268]	@ (8003a18 <HAL_RCC_OscConfig+0x618>)
 800390c:	4313      	orrs	r3, r2
 800390e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003910:	4b41      	ldr	r3, [pc, #260]	@ (8003a18 <HAL_RCC_OscConfig+0x618>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a40      	ldr	r2, [pc, #256]	@ (8003a18 <HAL_RCC_OscConfig+0x618>)
 8003916:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800391a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800391c:	4b3e      	ldr	r3, [pc, #248]	@ (8003a18 <HAL_RCC_OscConfig+0x618>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	4a3d      	ldr	r2, [pc, #244]	@ (8003a18 <HAL_RCC_OscConfig+0x618>)
 8003922:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003926:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003928:	f7fe f84c 	bl	80019c4 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003930:	f7fe f848 	bl	80019c4 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e066      	b.n	8003a10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003942:	4b35      	ldr	r3, [pc, #212]	@ (8003a18 <HAL_RCC_OscConfig+0x618>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0f0      	beq.n	8003930 <HAL_RCC_OscConfig+0x530>
 800394e:	e05e      	b.n	8003a0e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003950:	4b31      	ldr	r3, [pc, #196]	@ (8003a18 <HAL_RCC_OscConfig+0x618>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a30      	ldr	r2, [pc, #192]	@ (8003a18 <HAL_RCC_OscConfig+0x618>)
 8003956:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800395a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395c:	f7fe f832 	bl	80019c4 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003964:	f7fe f82e 	bl	80019c4 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e04c      	b.n	8003a10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003976:	4b28      	ldr	r3, [pc, #160]	@ (8003a18 <HAL_RCC_OscConfig+0x618>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1f0      	bne.n	8003964 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003982:	4b25      	ldr	r3, [pc, #148]	@ (8003a18 <HAL_RCC_OscConfig+0x618>)
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	4924      	ldr	r1, [pc, #144]	@ (8003a18 <HAL_RCC_OscConfig+0x618>)
 8003988:	4b25      	ldr	r3, [pc, #148]	@ (8003a20 <HAL_RCC_OscConfig+0x620>)
 800398a:	4013      	ands	r3, r2
 800398c:	60cb      	str	r3, [r1, #12]
 800398e:	e03e      	b.n	8003a0e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e039      	b.n	8003a10 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800399c:	4b1e      	ldr	r3, [pc, #120]	@ (8003a18 <HAL_RCC_OscConfig+0x618>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f003 0203 	and.w	r2, r3, #3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d12c      	bne.n	8003a0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ba:	3b01      	subs	r3, #1
 80039bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039be:	429a      	cmp	r2, r3
 80039c0:	d123      	bne.n	8003a0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d11b      	bne.n	8003a0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039de:	429a      	cmp	r2, r3
 80039e0:	d113      	bne.n	8003a0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ec:	085b      	lsrs	r3, r3, #1
 80039ee:	3b01      	subs	r3, #1
 80039f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d109      	bne.n	8003a0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a00:	085b      	lsrs	r3, r3, #1
 8003a02:	3b01      	subs	r3, #1
 8003a04:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d001      	beq.n	8003a0e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3720      	adds	r7, #32
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	019f800c 	.word	0x019f800c
 8003a20:	feeefffc 	.word	0xfeeefffc

08003a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e11e      	b.n	8003c7a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a3c:	4b91      	ldr	r3, [pc, #580]	@ (8003c84 <HAL_RCC_ClockConfig+0x260>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 030f 	and.w	r3, r3, #15
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d910      	bls.n	8003a6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4a:	4b8e      	ldr	r3, [pc, #568]	@ (8003c84 <HAL_RCC_ClockConfig+0x260>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 020f 	bic.w	r2, r3, #15
 8003a52:	498c      	ldr	r1, [pc, #560]	@ (8003c84 <HAL_RCC_ClockConfig+0x260>)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5a:	4b8a      	ldr	r3, [pc, #552]	@ (8003c84 <HAL_RCC_ClockConfig+0x260>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d001      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e106      	b.n	8003c7a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d073      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d129      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a80:	4b81      	ldr	r3, [pc, #516]	@ (8003c88 <HAL_RCC_ClockConfig+0x264>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e0f4      	b.n	8003c7a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a90:	f000 f9d0 	bl	8003e34 <RCC_GetSysClockFreqFromPLLSource>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4a7c      	ldr	r2, [pc, #496]	@ (8003c8c <HAL_RCC_ClockConfig+0x268>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d93f      	bls.n	8003b1e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a9e:	4b7a      	ldr	r3, [pc, #488]	@ (8003c88 <HAL_RCC_ClockConfig+0x264>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d009      	beq.n	8003abe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d033      	beq.n	8003b1e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d12f      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003abe:	4b72      	ldr	r3, [pc, #456]	@ (8003c88 <HAL_RCC_ClockConfig+0x264>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ac6:	4a70      	ldr	r2, [pc, #448]	@ (8003c88 <HAL_RCC_ClockConfig+0x264>)
 8003ac8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003acc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ace:	2380      	movs	r3, #128	@ 0x80
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	e024      	b.n	8003b1e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d107      	bne.n	8003aec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003adc:	4b6a      	ldr	r3, [pc, #424]	@ (8003c88 <HAL_RCC_ClockConfig+0x264>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d109      	bne.n	8003afc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e0c6      	b.n	8003c7a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aec:	4b66      	ldr	r3, [pc, #408]	@ (8003c88 <HAL_RCC_ClockConfig+0x264>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0be      	b.n	8003c7a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003afc:	f000 f8ce 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 8003b00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	4a61      	ldr	r2, [pc, #388]	@ (8003c8c <HAL_RCC_ClockConfig+0x268>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d909      	bls.n	8003b1e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b0a:	4b5f      	ldr	r3, [pc, #380]	@ (8003c88 <HAL_RCC_ClockConfig+0x264>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b12:	4a5d      	ldr	r2, [pc, #372]	@ (8003c88 <HAL_RCC_ClockConfig+0x264>)
 8003b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b18:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b1a:	2380      	movs	r3, #128	@ 0x80
 8003b1c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b1e:	4b5a      	ldr	r3, [pc, #360]	@ (8003c88 <HAL_RCC_ClockConfig+0x264>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f023 0203 	bic.w	r2, r3, #3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	4957      	ldr	r1, [pc, #348]	@ (8003c88 <HAL_RCC_ClockConfig+0x264>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b30:	f7fd ff48 	bl	80019c4 <HAL_GetTick>
 8003b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b36:	e00a      	b.n	8003b4e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b38:	f7fd ff44 	bl	80019c4 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e095      	b.n	8003c7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4e:	4b4e      	ldr	r3, [pc, #312]	@ (8003c88 <HAL_RCC_ClockConfig+0x264>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 020c 	and.w	r2, r3, #12
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d1eb      	bne.n	8003b38 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d023      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b78:	4b43      	ldr	r3, [pc, #268]	@ (8003c88 <HAL_RCC_ClockConfig+0x264>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	4a42      	ldr	r2, [pc, #264]	@ (8003c88 <HAL_RCC_ClockConfig+0x264>)
 8003b7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b82:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003b90:	4b3d      	ldr	r3, [pc, #244]	@ (8003c88 <HAL_RCC_ClockConfig+0x264>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b98:	4a3b      	ldr	r2, [pc, #236]	@ (8003c88 <HAL_RCC_ClockConfig+0x264>)
 8003b9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba0:	4b39      	ldr	r3, [pc, #228]	@ (8003c88 <HAL_RCC_ClockConfig+0x264>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	4936      	ldr	r1, [pc, #216]	@ (8003c88 <HAL_RCC_ClockConfig+0x264>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	608b      	str	r3, [r1, #8]
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	2b80      	cmp	r3, #128	@ 0x80
 8003bb8:	d105      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003bba:	4b33      	ldr	r3, [pc, #204]	@ (8003c88 <HAL_RCC_ClockConfig+0x264>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	4a32      	ldr	r2, [pc, #200]	@ (8003c88 <HAL_RCC_ClockConfig+0x264>)
 8003bc0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bc4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc6:	4b2f      	ldr	r3, [pc, #188]	@ (8003c84 <HAL_RCC_ClockConfig+0x260>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d21d      	bcs.n	8003c10 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8003c84 <HAL_RCC_ClockConfig+0x260>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f023 020f 	bic.w	r2, r3, #15
 8003bdc:	4929      	ldr	r1, [pc, #164]	@ (8003c84 <HAL_RCC_ClockConfig+0x260>)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003be4:	f7fd feee 	bl	80019c4 <HAL_GetTick>
 8003be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bea:	e00a      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bec:	f7fd feea 	bl	80019c4 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e03b      	b.n	8003c7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c02:	4b20      	ldr	r3, [pc, #128]	@ (8003c84 <HAL_RCC_ClockConfig+0x260>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d1ed      	bne.n	8003bec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8003c88 <HAL_RCC_ClockConfig+0x264>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	4917      	ldr	r1, [pc, #92]	@ (8003c88 <HAL_RCC_ClockConfig+0x264>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d009      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c3a:	4b13      	ldr	r3, [pc, #76]	@ (8003c88 <HAL_RCC_ClockConfig+0x264>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	490f      	ldr	r1, [pc, #60]	@ (8003c88 <HAL_RCC_ClockConfig+0x264>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c4e:	f000 f825 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 8003c52:	4602      	mov	r2, r0
 8003c54:	4b0c      	ldr	r3, [pc, #48]	@ (8003c88 <HAL_RCC_ClockConfig+0x264>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	091b      	lsrs	r3, r3, #4
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	490c      	ldr	r1, [pc, #48]	@ (8003c90 <HAL_RCC_ClockConfig+0x26c>)
 8003c60:	5ccb      	ldrb	r3, [r1, r3]
 8003c62:	f003 031f 	and.w	r3, r3, #31
 8003c66:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c94 <HAL_RCC_ClockConfig+0x270>)
 8003c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c98 <HAL_RCC_ClockConfig+0x274>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fc ffd2 	bl	8000c1c <HAL_InitTick>
 8003c78:	4603      	mov	r3, r0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40022000 	.word	0x40022000
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	04c4b400 	.word	0x04c4b400
 8003c90:	08009814 	.word	0x08009814
 8003c94:	20000000 	.word	0x20000000
 8003c98:	200000d8 	.word	0x200000d8

08003c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003ca2:	4b2c      	ldr	r3, [pc, #176]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d102      	bne.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cae:	4b2a      	ldr	r3, [pc, #168]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	e047      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003cb4:	4b27      	ldr	r3, [pc, #156]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 030c 	and.w	r3, r3, #12
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d102      	bne.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cc0:	4b26      	ldr	r3, [pc, #152]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cc2:	613b      	str	r3, [r7, #16]
 8003cc4:	e03e      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003cc6:	4b23      	ldr	r3, [pc, #140]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
 8003cce:	2b0c      	cmp	r3, #12
 8003cd0:	d136      	bne.n	8003d40 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cd2:	4b20      	ldr	r3, [pc, #128]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	091b      	lsrs	r3, r3, #4
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b03      	cmp	r3, #3
 8003cee:	d10c      	bne.n	8003d0a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf8:	4a16      	ldr	r2, [pc, #88]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cfa:	68d2      	ldr	r2, [r2, #12]
 8003cfc:	0a12      	lsrs	r2, r2, #8
 8003cfe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d02:	fb02 f303 	mul.w	r3, r2, r3
 8003d06:	617b      	str	r3, [r7, #20]
      break;
 8003d08:	e00c      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d0a:	4a13      	ldr	r2, [pc, #76]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d12:	4a10      	ldr	r2, [pc, #64]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d14:	68d2      	ldr	r2, [r2, #12]
 8003d16:	0a12      	lsrs	r2, r2, #8
 8003d18:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d1c:	fb02 f303 	mul.w	r3, r2, r3
 8003d20:	617b      	str	r3, [r7, #20]
      break;
 8003d22:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d24:	4b0b      	ldr	r3, [pc, #44]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	0e5b      	lsrs	r3, r3, #25
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	3301      	adds	r3, #1
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	e001      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d44:	693b      	ldr	r3, [r7, #16]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40021000 	.word	0x40021000
 8003d58:	00f42400 	.word	0x00f42400
 8003d5c:	016e3600 	.word	0x016e3600

08003d60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d64:	4b03      	ldr	r3, [pc, #12]	@ (8003d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d66:	681b      	ldr	r3, [r3, #0]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	20000000 	.word	0x20000000

08003d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d7c:	f7ff fff0 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8003d80:	4602      	mov	r2, r0
 8003d82:	4b06      	ldr	r3, [pc, #24]	@ (8003d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	0a1b      	lsrs	r3, r3, #8
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	4904      	ldr	r1, [pc, #16]	@ (8003da0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d8e:	5ccb      	ldrb	r3, [r1, r3]
 8003d90:	f003 031f 	and.w	r3, r3, #31
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	08009824 	.word	0x08009824

08003da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003da8:	f7ff ffda 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8003dac:	4602      	mov	r2, r0
 8003dae:	4b06      	ldr	r3, [pc, #24]	@ (8003dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	0adb      	lsrs	r3, r3, #11
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	4904      	ldr	r1, [pc, #16]	@ (8003dcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dba:	5ccb      	ldrb	r3, [r1, r3]
 8003dbc:	f003 031f 	and.w	r3, r3, #31
 8003dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	08009824 	.word	0x08009824

08003dd0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	220f      	movs	r2, #15
 8003dde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003de0:	4b12      	ldr	r3, [pc, #72]	@ (8003e2c <HAL_RCC_GetClockConfig+0x5c>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 0203 	and.w	r2, r3, #3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003dec:	4b0f      	ldr	r3, [pc, #60]	@ (8003e2c <HAL_RCC_GetClockConfig+0x5c>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003df8:	4b0c      	ldr	r3, [pc, #48]	@ (8003e2c <HAL_RCC_GetClockConfig+0x5c>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003e04:	4b09      	ldr	r3, [pc, #36]	@ (8003e2c <HAL_RCC_GetClockConfig+0x5c>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	08db      	lsrs	r3, r3, #3
 8003e0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003e12:	4b07      	ldr	r3, [pc, #28]	@ (8003e30 <HAL_RCC_GetClockConfig+0x60>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 020f 	and.w	r2, r3, #15
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	601a      	str	r2, [r3, #0]
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	40022000 	.word	0x40022000

08003e34 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8003eb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e44:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	091b      	lsrs	r3, r3, #4
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	3301      	adds	r3, #1
 8003e50:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d10c      	bne.n	8003e72 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e58:	4a17      	ldr	r2, [pc, #92]	@ (8003eb8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e60:	4a14      	ldr	r2, [pc, #80]	@ (8003eb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e62:	68d2      	ldr	r2, [r2, #12]
 8003e64:	0a12      	lsrs	r2, r2, #8
 8003e66:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e6a:	fb02 f303 	mul.w	r3, r2, r3
 8003e6e:	617b      	str	r3, [r7, #20]
    break;
 8003e70:	e00c      	b.n	8003e8c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e72:	4a12      	ldr	r2, [pc, #72]	@ (8003ebc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7a:	4a0e      	ldr	r2, [pc, #56]	@ (8003eb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e7c:	68d2      	ldr	r2, [r2, #12]
 8003e7e:	0a12      	lsrs	r2, r2, #8
 8003e80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e84:	fb02 f303 	mul.w	r3, r2, r3
 8003e88:	617b      	str	r3, [r7, #20]
    break;
 8003e8a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e8c:	4b09      	ldr	r3, [pc, #36]	@ (8003eb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	0e5b      	lsrs	r3, r3, #25
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	3301      	adds	r3, #1
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003ea6:	687b      	ldr	r3, [r7, #4]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	371c      	adds	r7, #28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	016e3600 	.word	0x016e3600
 8003ebc:	00f42400 	.word	0x00f42400

08003ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ec8:	2300      	movs	r3, #0
 8003eca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ecc:	2300      	movs	r3, #0
 8003ece:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 8098 	beq.w	800400e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ee2:	4b43      	ldr	r3, [pc, #268]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10d      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eee:	4b40      	ldr	r3, [pc, #256]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef2:	4a3f      	ldr	r2, [pc, #252]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ef8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003efa:	4b3d      	ldr	r3, [pc, #244]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f02:	60bb      	str	r3, [r7, #8]
 8003f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f06:	2301      	movs	r3, #1
 8003f08:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f0a:	4b3a      	ldr	r3, [pc, #232]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a39      	ldr	r2, [pc, #228]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f16:	f7fd fd55 	bl	80019c4 <HAL_GetTick>
 8003f1a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f1c:	e009      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f1e:	f7fd fd51 	bl	80019c4 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d902      	bls.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	74fb      	strb	r3, [r7, #19]
        break;
 8003f30:	e005      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f32:	4b30      	ldr	r3, [pc, #192]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0ef      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f3e:	7cfb      	ldrb	r3, [r7, #19]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d159      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f44:	4b2a      	ldr	r3, [pc, #168]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f4e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d01e      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d019      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f60:	4b23      	ldr	r3, [pc, #140]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f6a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f6c:	4b20      	ldr	r3, [pc, #128]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f72:	4a1f      	ldr	r2, [pc, #124]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f82:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f8c:	4a18      	ldr	r2, [pc, #96]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d016      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9e:	f7fd fd11 	bl	80019c4 <HAL_GetTick>
 8003fa2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fa4:	e00b      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa6:	f7fd fd0d 	bl	80019c4 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d902      	bls.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	74fb      	strb	r3, [r7, #19]
            break;
 8003fbc:	e006      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0ec      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003fcc:	7cfb      	ldrb	r3, [r7, #19]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10b      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fd2:	4b07      	ldr	r3, [pc, #28]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fe0:	4903      	ldr	r1, [pc, #12]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003fe8:	e008      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fea:	7cfb      	ldrb	r3, [r7, #19]
 8003fec:	74bb      	strb	r3, [r7, #18]
 8003fee:	e005      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff8:	7cfb      	ldrb	r3, [r7, #19]
 8003ffa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ffc:	7c7b      	ldrb	r3, [r7, #17]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d105      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004002:	4ba7      	ldr	r3, [pc, #668]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004006:	4aa6      	ldr	r2, [pc, #664]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004008:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800400c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800401a:	4ba1      	ldr	r3, [pc, #644]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004020:	f023 0203 	bic.w	r2, r3, #3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	499d      	ldr	r1, [pc, #628]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800403c:	4b98      	ldr	r3, [pc, #608]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800403e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004042:	f023 020c 	bic.w	r2, r3, #12
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	4995      	ldr	r1, [pc, #596]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800405e:	4b90      	ldr	r3, [pc, #576]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004064:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	498c      	ldr	r1, [pc, #560]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00a      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004080:	4b87      	ldr	r3, [pc, #540]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004086:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	4984      	ldr	r1, [pc, #528]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004090:	4313      	orrs	r3, r2
 8004092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0310 	and.w	r3, r3, #16
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040a2:	4b7f      	ldr	r3, [pc, #508]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	497b      	ldr	r1, [pc, #492]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0320 	and.w	r3, r3, #32
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00a      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040c4:	4b76      	ldr	r3, [pc, #472]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	4973      	ldr	r1, [pc, #460]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040e6:	4b6e      	ldr	r3, [pc, #440]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	496a      	ldr	r1, [pc, #424]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004108:	4b65      	ldr	r3, [pc, #404]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	4962      	ldr	r1, [pc, #392]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800412a:	4b5d      	ldr	r3, [pc, #372]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004130:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	4959      	ldr	r1, [pc, #356]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413a:	4313      	orrs	r3, r2
 800413c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00a      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800414c:	4b54      	ldr	r3, [pc, #336]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800414e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004152:	f023 0203 	bic.w	r2, r3, #3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415a:	4951      	ldr	r1, [pc, #324]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800416e:	4b4c      	ldr	r3, [pc, #304]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004174:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417c:	4948      	ldr	r1, [pc, #288]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800418c:	2b00      	cmp	r3, #0
 800418e:	d015      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004190:	4b43      	ldr	r3, [pc, #268]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004196:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419e:	4940      	ldr	r1, [pc, #256]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041ae:	d105      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041b0:	4b3b      	ldr	r3, [pc, #236]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	4a3a      	ldr	r2, [pc, #232]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041ba:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d015      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041c8:	4b35      	ldr	r3, [pc, #212]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041d6:	4932      	ldr	r1, [pc, #200]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041e6:	d105      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041e8:	4b2d      	ldr	r3, [pc, #180]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	4a2c      	ldr	r2, [pc, #176]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041f2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d015      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004200:	4b27      	ldr	r3, [pc, #156]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004206:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420e:	4924      	ldr	r1, [pc, #144]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800421a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800421e:	d105      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004220:	4b1f      	ldr	r3, [pc, #124]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4a1e      	ldr	r2, [pc, #120]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004226:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800422a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d015      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004238:	4b19      	ldr	r3, [pc, #100]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004246:	4916      	ldr	r1, [pc, #88]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004252:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004256:	d105      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004258:	4b11      	ldr	r3, [pc, #68]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	4a10      	ldr	r2, [pc, #64]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800425e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004262:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d019      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004270:	4b0b      	ldr	r3, [pc, #44]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004276:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427e:	4908      	ldr	r1, [pc, #32]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800428e:	d109      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004290:	4b03      	ldr	r3, [pc, #12]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4a02      	ldr	r2, [pc, #8]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004296:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800429a:	60d3      	str	r3, [r2, #12]
 800429c:	e002      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800429e:	bf00      	nop
 80042a0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d015      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80042b0:	4b29      	ldr	r3, [pc, #164]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042be:	4926      	ldr	r1, [pc, #152]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042ce:	d105      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042d0:	4b21      	ldr	r3, [pc, #132]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	4a20      	ldr	r2, [pc, #128]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042da:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d015      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80042e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ee:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042f6:	4918      	ldr	r1, [pc, #96]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004306:	d105      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004308:	4b13      	ldr	r3, [pc, #76]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	4a12      	ldr	r2, [pc, #72]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800430e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004312:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d015      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004320:	4b0d      	ldr	r3, [pc, #52]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004322:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004326:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800432e:	490a      	ldr	r1, [pc, #40]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800433a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800433e:	d105      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004340:	4b05      	ldr	r3, [pc, #20]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	4a04      	ldr	r2, [pc, #16]	@ (8004358 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004346:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800434a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800434c:	7cbb      	ldrb	r3, [r7, #18]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40021000 	.word	0x40021000

0800435c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e049      	b.n	8004402 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d106      	bne.n	8004388 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7fc ff00 	bl	8001188 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3304      	adds	r3, #4
 8004398:	4619      	mov	r1, r3
 800439a:	4610      	mov	r0, r2
 800439c:	f000 fe34 	bl	8005008 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
	...

0800440c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b01      	cmp	r3, #1
 800441e:	d001      	beq.n	8004424 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e04c      	b.n	80044be <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a26      	ldr	r2, [pc, #152]	@ (80044cc <HAL_TIM_Base_Start+0xc0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d022      	beq.n	800447c <HAL_TIM_Base_Start+0x70>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800443e:	d01d      	beq.n	800447c <HAL_TIM_Base_Start+0x70>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a22      	ldr	r2, [pc, #136]	@ (80044d0 <HAL_TIM_Base_Start+0xc4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d018      	beq.n	800447c <HAL_TIM_Base_Start+0x70>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a21      	ldr	r2, [pc, #132]	@ (80044d4 <HAL_TIM_Base_Start+0xc8>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d013      	beq.n	800447c <HAL_TIM_Base_Start+0x70>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1f      	ldr	r2, [pc, #124]	@ (80044d8 <HAL_TIM_Base_Start+0xcc>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00e      	beq.n	800447c <HAL_TIM_Base_Start+0x70>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a1e      	ldr	r2, [pc, #120]	@ (80044dc <HAL_TIM_Base_Start+0xd0>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d009      	beq.n	800447c <HAL_TIM_Base_Start+0x70>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a1c      	ldr	r2, [pc, #112]	@ (80044e0 <HAL_TIM_Base_Start+0xd4>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d004      	beq.n	800447c <HAL_TIM_Base_Start+0x70>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a1b      	ldr	r2, [pc, #108]	@ (80044e4 <HAL_TIM_Base_Start+0xd8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d115      	bne.n	80044a8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	4b19      	ldr	r3, [pc, #100]	@ (80044e8 <HAL_TIM_Base_Start+0xdc>)
 8004484:	4013      	ands	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2b06      	cmp	r3, #6
 800448c:	d015      	beq.n	80044ba <HAL_TIM_Base_Start+0xae>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004494:	d011      	beq.n	80044ba <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0201 	orr.w	r2, r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a6:	e008      	b.n	80044ba <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	e000      	b.n	80044bc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40012c00 	.word	0x40012c00
 80044d0:	40000400 	.word	0x40000400
 80044d4:	40000800 	.word	0x40000800
 80044d8:	40000c00 	.word	0x40000c00
 80044dc:	40013400 	.word	0x40013400
 80044e0:	40014000 	.word	0x40014000
 80044e4:	40015000 	.word	0x40015000
 80044e8:	00010007 	.word	0x00010007

080044ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d001      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e054      	b.n	80045ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a26      	ldr	r2, [pc, #152]	@ (80045bc <HAL_TIM_Base_Start_IT+0xd0>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d022      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x80>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800452e:	d01d      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x80>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a22      	ldr	r2, [pc, #136]	@ (80045c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d018      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x80>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a21      	ldr	r2, [pc, #132]	@ (80045c4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d013      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x80>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a1f      	ldr	r2, [pc, #124]	@ (80045c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00e      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x80>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a1e      	ldr	r2, [pc, #120]	@ (80045cc <HAL_TIM_Base_Start_IT+0xe0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d009      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x80>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1c      	ldr	r2, [pc, #112]	@ (80045d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d004      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x80>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a1b      	ldr	r2, [pc, #108]	@ (80045d4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d115      	bne.n	8004598 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689a      	ldr	r2, [r3, #8]
 8004572:	4b19      	ldr	r3, [pc, #100]	@ (80045d8 <HAL_TIM_Base_Start_IT+0xec>)
 8004574:	4013      	ands	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b06      	cmp	r3, #6
 800457c:	d015      	beq.n	80045aa <HAL_TIM_Base_Start_IT+0xbe>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004584:	d011      	beq.n	80045aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f042 0201 	orr.w	r2, r2, #1
 8004594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004596:	e008      	b.n	80045aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	e000      	b.n	80045ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40012c00 	.word	0x40012c00
 80045c0:	40000400 	.word	0x40000400
 80045c4:	40000800 	.word	0x40000800
 80045c8:	40000c00 	.word	0x40000c00
 80045cc:	40013400 	.word	0x40013400
 80045d0:	40014000 	.word	0x40014000
 80045d4:	40015000 	.word	0x40015000
 80045d8:	00010007 	.word	0x00010007

080045dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e049      	b.n	8004682 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d106      	bne.n	8004608 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f841 	bl	800468a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3304      	adds	r3, #4
 8004618:	4619      	mov	r1, r3
 800461a:	4610      	mov	r0, r2
 800461c:	f000 fcf4 	bl	8005008 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
	...

080046a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d109      	bne.n	80046c4 <HAL_TIM_PWM_Start+0x24>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	bf14      	ite	ne
 80046bc:	2301      	movne	r3, #1
 80046be:	2300      	moveq	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	e03c      	b.n	800473e <HAL_TIM_PWM_Start+0x9e>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d109      	bne.n	80046de <HAL_TIM_PWM_Start+0x3e>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	bf14      	ite	ne
 80046d6:	2301      	movne	r3, #1
 80046d8:	2300      	moveq	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	e02f      	b.n	800473e <HAL_TIM_PWM_Start+0x9e>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d109      	bne.n	80046f8 <HAL_TIM_PWM_Start+0x58>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	bf14      	ite	ne
 80046f0:	2301      	movne	r3, #1
 80046f2:	2300      	moveq	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	e022      	b.n	800473e <HAL_TIM_PWM_Start+0x9e>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b0c      	cmp	r3, #12
 80046fc:	d109      	bne.n	8004712 <HAL_TIM_PWM_Start+0x72>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b01      	cmp	r3, #1
 8004708:	bf14      	ite	ne
 800470a:	2301      	movne	r3, #1
 800470c:	2300      	moveq	r3, #0
 800470e:	b2db      	uxtb	r3, r3
 8004710:	e015      	b.n	800473e <HAL_TIM_PWM_Start+0x9e>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b10      	cmp	r3, #16
 8004716:	d109      	bne.n	800472c <HAL_TIM_PWM_Start+0x8c>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b01      	cmp	r3, #1
 8004722:	bf14      	ite	ne
 8004724:	2301      	movne	r3, #1
 8004726:	2300      	moveq	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	e008      	b.n	800473e <HAL_TIM_PWM_Start+0x9e>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b01      	cmp	r3, #1
 8004736:	bf14      	ite	ne
 8004738:	2301      	movne	r3, #1
 800473a:	2300      	moveq	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e0a6      	b.n	8004894 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d104      	bne.n	8004756 <HAL_TIM_PWM_Start+0xb6>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004754:	e023      	b.n	800479e <HAL_TIM_PWM_Start+0xfe>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b04      	cmp	r3, #4
 800475a:	d104      	bne.n	8004766 <HAL_TIM_PWM_Start+0xc6>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004764:	e01b      	b.n	800479e <HAL_TIM_PWM_Start+0xfe>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b08      	cmp	r3, #8
 800476a:	d104      	bne.n	8004776 <HAL_TIM_PWM_Start+0xd6>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004774:	e013      	b.n	800479e <HAL_TIM_PWM_Start+0xfe>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b0c      	cmp	r3, #12
 800477a:	d104      	bne.n	8004786 <HAL_TIM_PWM_Start+0xe6>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004784:	e00b      	b.n	800479e <HAL_TIM_PWM_Start+0xfe>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b10      	cmp	r3, #16
 800478a:	d104      	bne.n	8004796 <HAL_TIM_PWM_Start+0xf6>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004794:	e003      	b.n	800479e <HAL_TIM_PWM_Start+0xfe>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2202      	movs	r2, #2
 800479a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2201      	movs	r2, #1
 80047a4:	6839      	ldr	r1, [r7, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f001 f91c 	bl	80059e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a3a      	ldr	r2, [pc, #232]	@ (800489c <HAL_TIM_PWM_Start+0x1fc>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d018      	beq.n	80047e8 <HAL_TIM_PWM_Start+0x148>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a39      	ldr	r2, [pc, #228]	@ (80048a0 <HAL_TIM_PWM_Start+0x200>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d013      	beq.n	80047e8 <HAL_TIM_PWM_Start+0x148>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a37      	ldr	r2, [pc, #220]	@ (80048a4 <HAL_TIM_PWM_Start+0x204>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00e      	beq.n	80047e8 <HAL_TIM_PWM_Start+0x148>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a36      	ldr	r2, [pc, #216]	@ (80048a8 <HAL_TIM_PWM_Start+0x208>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d009      	beq.n	80047e8 <HAL_TIM_PWM_Start+0x148>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a34      	ldr	r2, [pc, #208]	@ (80048ac <HAL_TIM_PWM_Start+0x20c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d004      	beq.n	80047e8 <HAL_TIM_PWM_Start+0x148>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a33      	ldr	r2, [pc, #204]	@ (80048b0 <HAL_TIM_PWM_Start+0x210>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d101      	bne.n	80047ec <HAL_TIM_PWM_Start+0x14c>
 80047e8:	2301      	movs	r3, #1
 80047ea:	e000      	b.n	80047ee <HAL_TIM_PWM_Start+0x14e>
 80047ec:	2300      	movs	r3, #0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d007      	beq.n	8004802 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004800:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a25      	ldr	r2, [pc, #148]	@ (800489c <HAL_TIM_PWM_Start+0x1fc>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d022      	beq.n	8004852 <HAL_TIM_PWM_Start+0x1b2>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004814:	d01d      	beq.n	8004852 <HAL_TIM_PWM_Start+0x1b2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a26      	ldr	r2, [pc, #152]	@ (80048b4 <HAL_TIM_PWM_Start+0x214>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d018      	beq.n	8004852 <HAL_TIM_PWM_Start+0x1b2>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a24      	ldr	r2, [pc, #144]	@ (80048b8 <HAL_TIM_PWM_Start+0x218>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d013      	beq.n	8004852 <HAL_TIM_PWM_Start+0x1b2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a23      	ldr	r2, [pc, #140]	@ (80048bc <HAL_TIM_PWM_Start+0x21c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d00e      	beq.n	8004852 <HAL_TIM_PWM_Start+0x1b2>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a19      	ldr	r2, [pc, #100]	@ (80048a0 <HAL_TIM_PWM_Start+0x200>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d009      	beq.n	8004852 <HAL_TIM_PWM_Start+0x1b2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a18      	ldr	r2, [pc, #96]	@ (80048a4 <HAL_TIM_PWM_Start+0x204>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d004      	beq.n	8004852 <HAL_TIM_PWM_Start+0x1b2>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a18      	ldr	r2, [pc, #96]	@ (80048b0 <HAL_TIM_PWM_Start+0x210>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d115      	bne.n	800487e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	4b19      	ldr	r3, [pc, #100]	@ (80048c0 <HAL_TIM_PWM_Start+0x220>)
 800485a:	4013      	ands	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2b06      	cmp	r3, #6
 8004862:	d015      	beq.n	8004890 <HAL_TIM_PWM_Start+0x1f0>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800486a:	d011      	beq.n	8004890 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0201 	orr.w	r2, r2, #1
 800487a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487c:	e008      	b.n	8004890 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0201 	orr.w	r2, r2, #1
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	e000      	b.n	8004892 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004890:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40012c00 	.word	0x40012c00
 80048a0:	40013400 	.word	0x40013400
 80048a4:	40014000 	.word	0x40014000
 80048a8:	40014400 	.word	0x40014400
 80048ac:	40014800 	.word	0x40014800
 80048b0:	40015000 	.word	0x40015000
 80048b4:	40000400 	.word	0x40000400
 80048b8:	40000800 	.word	0x40000800
 80048bc:	40000c00 	.word	0x40000c00
 80048c0:	00010007 	.word	0x00010007

080048c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d020      	beq.n	8004928 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d01b      	beq.n	8004928 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0202 	mvn.w	r2, #2
 80048f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fb5c 	bl	8004fcc <HAL_TIM_IC_CaptureCallback>
 8004914:	e005      	b.n	8004922 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fb4e 	bl	8004fb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 fb5f 	bl	8004fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	2b00      	cmp	r3, #0
 8004930:	d020      	beq.n	8004974 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01b      	beq.n	8004974 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f06f 0204 	mvn.w	r2, #4
 8004944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2202      	movs	r2, #2
 800494a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fb36 	bl	8004fcc <HAL_TIM_IC_CaptureCallback>
 8004960:	e005      	b.n	800496e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fb28 	bl	8004fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fb39 	bl	8004fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d020      	beq.n	80049c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d01b      	beq.n	80049c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f06f 0208 	mvn.w	r2, #8
 8004990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2204      	movs	r2, #4
 8004996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fb10 	bl	8004fcc <HAL_TIM_IC_CaptureCallback>
 80049ac:	e005      	b.n	80049ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fb02 	bl	8004fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fb13 	bl	8004fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f003 0310 	and.w	r3, r3, #16
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d020      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f003 0310 	and.w	r3, r3, #16
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01b      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0210 	mvn.w	r2, #16
 80049dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2208      	movs	r2, #8
 80049e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 faea 	bl	8004fcc <HAL_TIM_IC_CaptureCallback>
 80049f8:	e005      	b.n	8004a06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fadc 	bl	8004fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 faed 	bl	8004fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00c      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d007      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0201 	mvn.w	r2, #1
 8004a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fc f8ba 	bl	8000ba4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d104      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00c      	beq.n	8004a5e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d007      	beq.n	8004a5e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f001 fa8d 	bl	8005f78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00c      	beq.n	8004a82 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d007      	beq.n	8004a82 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f001 fa85 	bl	8005f8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00c      	beq.n	8004aa6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d007      	beq.n	8004aa6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 faa7 	bl	8004ff4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	f003 0320 	and.w	r3, r3, #32
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00c      	beq.n	8004aca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d007      	beq.n	8004aca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f06f 0220 	mvn.w	r2, #32
 8004ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f001 fa4d 	bl	8005f64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00c      	beq.n	8004aee <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d007      	beq.n	8004aee <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f001 fa59 	bl	8005fa0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00c      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d007      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f001 fa51 	bl	8005fb4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00c      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f001 fa49 	bl	8005fc8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00c      	beq.n	8004b5a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d007      	beq.n	8004b5a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f001 fa41 	bl	8005fdc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b70:	2300      	movs	r3, #0
 8004b72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d101      	bne.n	8004b82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e0ff      	b.n	8004d82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b14      	cmp	r3, #20
 8004b8e:	f200 80f0 	bhi.w	8004d72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b92:	a201      	add	r2, pc, #4	@ (adr r2, 8004b98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b98:	08004bed 	.word	0x08004bed
 8004b9c:	08004d73 	.word	0x08004d73
 8004ba0:	08004d73 	.word	0x08004d73
 8004ba4:	08004d73 	.word	0x08004d73
 8004ba8:	08004c2d 	.word	0x08004c2d
 8004bac:	08004d73 	.word	0x08004d73
 8004bb0:	08004d73 	.word	0x08004d73
 8004bb4:	08004d73 	.word	0x08004d73
 8004bb8:	08004c6f 	.word	0x08004c6f
 8004bbc:	08004d73 	.word	0x08004d73
 8004bc0:	08004d73 	.word	0x08004d73
 8004bc4:	08004d73 	.word	0x08004d73
 8004bc8:	08004caf 	.word	0x08004caf
 8004bcc:	08004d73 	.word	0x08004d73
 8004bd0:	08004d73 	.word	0x08004d73
 8004bd4:	08004d73 	.word	0x08004d73
 8004bd8:	08004cf1 	.word	0x08004cf1
 8004bdc:	08004d73 	.word	0x08004d73
 8004be0:	08004d73 	.word	0x08004d73
 8004be4:	08004d73 	.word	0x08004d73
 8004be8:	08004d31 	.word	0x08004d31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fabc 	bl	8005170 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699a      	ldr	r2, [r3, #24]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0208 	orr.w	r2, r2, #8
 8004c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699a      	ldr	r2, [r3, #24]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0204 	bic.w	r2, r2, #4
 8004c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6999      	ldr	r1, [r3, #24]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	691a      	ldr	r2, [r3, #16]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	619a      	str	r2, [r3, #24]
      break;
 8004c2a:	e0a5      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68b9      	ldr	r1, [r7, #8]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fb36 	bl	80052a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699a      	ldr	r2, [r3, #24]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6999      	ldr	r1, [r3, #24]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	021a      	lsls	r2, r3, #8
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	619a      	str	r2, [r3, #24]
      break;
 8004c6c:	e084      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68b9      	ldr	r1, [r7, #8]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 fba9 	bl	80053cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69da      	ldr	r2, [r3, #28]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0208 	orr.w	r2, r2, #8
 8004c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69da      	ldr	r2, [r3, #28]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0204 	bic.w	r2, r2, #4
 8004c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69d9      	ldr	r1, [r3, #28]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	61da      	str	r2, [r3, #28]
      break;
 8004cac:	e064      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68b9      	ldr	r1, [r7, #8]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fc1b 	bl	80054f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69da      	ldr	r2, [r3, #28]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69da      	ldr	r2, [r3, #28]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69d9      	ldr	r1, [r3, #28]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	021a      	lsls	r2, r3, #8
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	61da      	str	r2, [r3, #28]
      break;
 8004cee:	e043      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 fc8e 	bl	8005618 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0208 	orr.w	r2, r2, #8
 8004d0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0204 	bic.w	r2, r2, #4
 8004d1a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004d2e:	e023      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fcd8 	bl	80056ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d4a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d5a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	021a      	lsls	r2, r3, #8
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004d70:	e002      	b.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	75fb      	strb	r3, [r7, #23]
      break;
 8004d76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop

08004d8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d101      	bne.n	8004da8 <HAL_TIM_ConfigClockSource+0x1c>
 8004da4:	2302      	movs	r3, #2
 8004da6:	e0f6      	b.n	8004f96 <HAL_TIM_ConfigClockSource+0x20a>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004dc6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004dca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004dd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a6f      	ldr	r2, [pc, #444]	@ (8004fa0 <HAL_TIM_ConfigClockSource+0x214>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	f000 80c1 	beq.w	8004f6a <HAL_TIM_ConfigClockSource+0x1de>
 8004de8:	4a6d      	ldr	r2, [pc, #436]	@ (8004fa0 <HAL_TIM_ConfigClockSource+0x214>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	f200 80c6 	bhi.w	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004df0:	4a6c      	ldr	r2, [pc, #432]	@ (8004fa4 <HAL_TIM_ConfigClockSource+0x218>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	f000 80b9 	beq.w	8004f6a <HAL_TIM_ConfigClockSource+0x1de>
 8004df8:	4a6a      	ldr	r2, [pc, #424]	@ (8004fa4 <HAL_TIM_ConfigClockSource+0x218>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	f200 80be 	bhi.w	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e00:	4a69      	ldr	r2, [pc, #420]	@ (8004fa8 <HAL_TIM_ConfigClockSource+0x21c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	f000 80b1 	beq.w	8004f6a <HAL_TIM_ConfigClockSource+0x1de>
 8004e08:	4a67      	ldr	r2, [pc, #412]	@ (8004fa8 <HAL_TIM_ConfigClockSource+0x21c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	f200 80b6 	bhi.w	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e10:	4a66      	ldr	r2, [pc, #408]	@ (8004fac <HAL_TIM_ConfigClockSource+0x220>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	f000 80a9 	beq.w	8004f6a <HAL_TIM_ConfigClockSource+0x1de>
 8004e18:	4a64      	ldr	r2, [pc, #400]	@ (8004fac <HAL_TIM_ConfigClockSource+0x220>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	f200 80ae 	bhi.w	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e20:	4a63      	ldr	r2, [pc, #396]	@ (8004fb0 <HAL_TIM_ConfigClockSource+0x224>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	f000 80a1 	beq.w	8004f6a <HAL_TIM_ConfigClockSource+0x1de>
 8004e28:	4a61      	ldr	r2, [pc, #388]	@ (8004fb0 <HAL_TIM_ConfigClockSource+0x224>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	f200 80a6 	bhi.w	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e30:	4a60      	ldr	r2, [pc, #384]	@ (8004fb4 <HAL_TIM_ConfigClockSource+0x228>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	f000 8099 	beq.w	8004f6a <HAL_TIM_ConfigClockSource+0x1de>
 8004e38:	4a5e      	ldr	r2, [pc, #376]	@ (8004fb4 <HAL_TIM_ConfigClockSource+0x228>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	f200 809e 	bhi.w	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004e44:	f000 8091 	beq.w	8004f6a <HAL_TIM_ConfigClockSource+0x1de>
 8004e48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004e4c:	f200 8096 	bhi.w	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e54:	f000 8089 	beq.w	8004f6a <HAL_TIM_ConfigClockSource+0x1de>
 8004e58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e5c:	f200 808e 	bhi.w	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e64:	d03e      	beq.n	8004ee4 <HAL_TIM_ConfigClockSource+0x158>
 8004e66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e6a:	f200 8087 	bhi.w	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e72:	f000 8086 	beq.w	8004f82 <HAL_TIM_ConfigClockSource+0x1f6>
 8004e76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e7a:	d87f      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e7c:	2b70      	cmp	r3, #112	@ 0x70
 8004e7e:	d01a      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x12a>
 8004e80:	2b70      	cmp	r3, #112	@ 0x70
 8004e82:	d87b      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e84:	2b60      	cmp	r3, #96	@ 0x60
 8004e86:	d050      	beq.n	8004f2a <HAL_TIM_ConfigClockSource+0x19e>
 8004e88:	2b60      	cmp	r3, #96	@ 0x60
 8004e8a:	d877      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e8c:	2b50      	cmp	r3, #80	@ 0x50
 8004e8e:	d03c      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0x17e>
 8004e90:	2b50      	cmp	r3, #80	@ 0x50
 8004e92:	d873      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e94:	2b40      	cmp	r3, #64	@ 0x40
 8004e96:	d058      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x1be>
 8004e98:	2b40      	cmp	r3, #64	@ 0x40
 8004e9a:	d86f      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004e9c:	2b30      	cmp	r3, #48	@ 0x30
 8004e9e:	d064      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0x1de>
 8004ea0:	2b30      	cmp	r3, #48	@ 0x30
 8004ea2:	d86b      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004ea4:	2b20      	cmp	r3, #32
 8004ea6:	d060      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0x1de>
 8004ea8:	2b20      	cmp	r3, #32
 8004eaa:	d867      	bhi.n	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d05c      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0x1de>
 8004eb0:	2b10      	cmp	r3, #16
 8004eb2:	d05a      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0x1de>
 8004eb4:	e062      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ec6:	f000 fd6d 	bl	80059a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ed8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	609a      	str	r2, [r3, #8]
      break;
 8004ee2:	e04f      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ef4:	f000 fd56 	bl	80059a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689a      	ldr	r2, [r3, #8]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f06:	609a      	str	r2, [r3, #8]
      break;
 8004f08:	e03c      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f16:	461a      	mov	r2, r3
 8004f18:	f000 fcc8 	bl	80058ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2150      	movs	r1, #80	@ 0x50
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fd21 	bl	800596a <TIM_ITRx_SetConfig>
      break;
 8004f28:	e02c      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f36:	461a      	mov	r2, r3
 8004f38:	f000 fce7 	bl	800590a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2160      	movs	r1, #96	@ 0x60
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fd11 	bl	800596a <TIM_ITRx_SetConfig>
      break;
 8004f48:	e01c      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f56:	461a      	mov	r2, r3
 8004f58:	f000 fca8 	bl	80058ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2140      	movs	r1, #64	@ 0x40
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fd01 	bl	800596a <TIM_ITRx_SetConfig>
      break;
 8004f68:	e00c      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4619      	mov	r1, r3
 8004f74:	4610      	mov	r0, r2
 8004f76:	f000 fcf8 	bl	800596a <TIM_ITRx_SetConfig>
      break;
 8004f7a:	e003      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f80:	e000      	b.n	8004f84 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004f82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	00100070 	.word	0x00100070
 8004fa4:	00100060 	.word	0x00100060
 8004fa8:	00100050 	.word	0x00100050
 8004fac:	00100040 	.word	0x00100040
 8004fb0:	00100030 	.word	0x00100030
 8004fb4:	00100020 	.word	0x00100020

08004fb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a4c      	ldr	r2, [pc, #304]	@ (800514c <TIM_Base_SetConfig+0x144>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d017      	beq.n	8005050 <TIM_Base_SetConfig+0x48>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005026:	d013      	beq.n	8005050 <TIM_Base_SetConfig+0x48>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a49      	ldr	r2, [pc, #292]	@ (8005150 <TIM_Base_SetConfig+0x148>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d00f      	beq.n	8005050 <TIM_Base_SetConfig+0x48>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a48      	ldr	r2, [pc, #288]	@ (8005154 <TIM_Base_SetConfig+0x14c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d00b      	beq.n	8005050 <TIM_Base_SetConfig+0x48>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a47      	ldr	r2, [pc, #284]	@ (8005158 <TIM_Base_SetConfig+0x150>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d007      	beq.n	8005050 <TIM_Base_SetConfig+0x48>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a46      	ldr	r2, [pc, #280]	@ (800515c <TIM_Base_SetConfig+0x154>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d003      	beq.n	8005050 <TIM_Base_SetConfig+0x48>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a45      	ldr	r2, [pc, #276]	@ (8005160 <TIM_Base_SetConfig+0x158>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d108      	bne.n	8005062 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a39      	ldr	r2, [pc, #228]	@ (800514c <TIM_Base_SetConfig+0x144>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d023      	beq.n	80050b2 <TIM_Base_SetConfig+0xaa>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005070:	d01f      	beq.n	80050b2 <TIM_Base_SetConfig+0xaa>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a36      	ldr	r2, [pc, #216]	@ (8005150 <TIM_Base_SetConfig+0x148>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d01b      	beq.n	80050b2 <TIM_Base_SetConfig+0xaa>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a35      	ldr	r2, [pc, #212]	@ (8005154 <TIM_Base_SetConfig+0x14c>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d017      	beq.n	80050b2 <TIM_Base_SetConfig+0xaa>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a34      	ldr	r2, [pc, #208]	@ (8005158 <TIM_Base_SetConfig+0x150>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d013      	beq.n	80050b2 <TIM_Base_SetConfig+0xaa>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a33      	ldr	r2, [pc, #204]	@ (800515c <TIM_Base_SetConfig+0x154>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00f      	beq.n	80050b2 <TIM_Base_SetConfig+0xaa>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a33      	ldr	r2, [pc, #204]	@ (8005164 <TIM_Base_SetConfig+0x15c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00b      	beq.n	80050b2 <TIM_Base_SetConfig+0xaa>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a32      	ldr	r2, [pc, #200]	@ (8005168 <TIM_Base_SetConfig+0x160>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d007      	beq.n	80050b2 <TIM_Base_SetConfig+0xaa>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a31      	ldr	r2, [pc, #196]	@ (800516c <TIM_Base_SetConfig+0x164>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d003      	beq.n	80050b2 <TIM_Base_SetConfig+0xaa>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a2c      	ldr	r2, [pc, #176]	@ (8005160 <TIM_Base_SetConfig+0x158>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d108      	bne.n	80050c4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a18      	ldr	r2, [pc, #96]	@ (800514c <TIM_Base_SetConfig+0x144>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d013      	beq.n	8005118 <TIM_Base_SetConfig+0x110>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a1a      	ldr	r2, [pc, #104]	@ (800515c <TIM_Base_SetConfig+0x154>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d00f      	beq.n	8005118 <TIM_Base_SetConfig+0x110>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a1a      	ldr	r2, [pc, #104]	@ (8005164 <TIM_Base_SetConfig+0x15c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00b      	beq.n	8005118 <TIM_Base_SetConfig+0x110>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a19      	ldr	r2, [pc, #100]	@ (8005168 <TIM_Base_SetConfig+0x160>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d007      	beq.n	8005118 <TIM_Base_SetConfig+0x110>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a18      	ldr	r2, [pc, #96]	@ (800516c <TIM_Base_SetConfig+0x164>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d003      	beq.n	8005118 <TIM_Base_SetConfig+0x110>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a13      	ldr	r2, [pc, #76]	@ (8005160 <TIM_Base_SetConfig+0x158>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d103      	bne.n	8005120 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b01      	cmp	r3, #1
 8005130:	d105      	bne.n	800513e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	f023 0201 	bic.w	r2, r3, #1
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	611a      	str	r2, [r3, #16]
  }
}
 800513e:	bf00      	nop
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40012c00 	.word	0x40012c00
 8005150:	40000400 	.word	0x40000400
 8005154:	40000800 	.word	0x40000800
 8005158:	40000c00 	.word	0x40000c00
 800515c:	40013400 	.word	0x40013400
 8005160:	40015000 	.word	0x40015000
 8005164:	40014000 	.word	0x40014000
 8005168:	40014400 	.word	0x40014400
 800516c:	40014800 	.word	0x40014800

08005170 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	f023 0201 	bic.w	r2, r3, #1
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800519e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0303 	bic.w	r3, r3, #3
 80051aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f023 0302 	bic.w	r3, r3, #2
 80051bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a30      	ldr	r2, [pc, #192]	@ (800528c <TIM_OC1_SetConfig+0x11c>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d013      	beq.n	80051f8 <TIM_OC1_SetConfig+0x88>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a2f      	ldr	r2, [pc, #188]	@ (8005290 <TIM_OC1_SetConfig+0x120>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00f      	beq.n	80051f8 <TIM_OC1_SetConfig+0x88>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a2e      	ldr	r2, [pc, #184]	@ (8005294 <TIM_OC1_SetConfig+0x124>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d00b      	beq.n	80051f8 <TIM_OC1_SetConfig+0x88>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a2d      	ldr	r2, [pc, #180]	@ (8005298 <TIM_OC1_SetConfig+0x128>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d007      	beq.n	80051f8 <TIM_OC1_SetConfig+0x88>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a2c      	ldr	r2, [pc, #176]	@ (800529c <TIM_OC1_SetConfig+0x12c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d003      	beq.n	80051f8 <TIM_OC1_SetConfig+0x88>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a2b      	ldr	r2, [pc, #172]	@ (80052a0 <TIM_OC1_SetConfig+0x130>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d10c      	bne.n	8005212 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f023 0308 	bic.w	r3, r3, #8
 80051fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f023 0304 	bic.w	r3, r3, #4
 8005210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a1d      	ldr	r2, [pc, #116]	@ (800528c <TIM_OC1_SetConfig+0x11c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d013      	beq.n	8005242 <TIM_OC1_SetConfig+0xd2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a1c      	ldr	r2, [pc, #112]	@ (8005290 <TIM_OC1_SetConfig+0x120>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00f      	beq.n	8005242 <TIM_OC1_SetConfig+0xd2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a1b      	ldr	r2, [pc, #108]	@ (8005294 <TIM_OC1_SetConfig+0x124>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00b      	beq.n	8005242 <TIM_OC1_SetConfig+0xd2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a1a      	ldr	r2, [pc, #104]	@ (8005298 <TIM_OC1_SetConfig+0x128>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d007      	beq.n	8005242 <TIM_OC1_SetConfig+0xd2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a19      	ldr	r2, [pc, #100]	@ (800529c <TIM_OC1_SetConfig+0x12c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d003      	beq.n	8005242 <TIM_OC1_SetConfig+0xd2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a18      	ldr	r2, [pc, #96]	@ (80052a0 <TIM_OC1_SetConfig+0x130>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d111      	bne.n	8005266 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	4313      	orrs	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	621a      	str	r2, [r3, #32]
}
 8005280:	bf00      	nop
 8005282:	371c      	adds	r7, #28
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	40012c00 	.word	0x40012c00
 8005290:	40013400 	.word	0x40013400
 8005294:	40014000 	.word	0x40014000
 8005298:	40014400 	.word	0x40014400
 800529c:	40014800 	.word	0x40014800
 80052a0:	40015000 	.word	0x40015000

080052a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	f023 0210 	bic.w	r2, r3, #16
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f023 0320 	bic.w	r3, r3, #32
 80052f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a2c      	ldr	r2, [pc, #176]	@ (80053b4 <TIM_OC2_SetConfig+0x110>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d007      	beq.n	8005318 <TIM_OC2_SetConfig+0x74>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a2b      	ldr	r2, [pc, #172]	@ (80053b8 <TIM_OC2_SetConfig+0x114>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d003      	beq.n	8005318 <TIM_OC2_SetConfig+0x74>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a2a      	ldr	r2, [pc, #168]	@ (80053bc <TIM_OC2_SetConfig+0x118>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d10d      	bne.n	8005334 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800531e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	4313      	orrs	r3, r2
 800532a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005332:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a1f      	ldr	r2, [pc, #124]	@ (80053b4 <TIM_OC2_SetConfig+0x110>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d013      	beq.n	8005364 <TIM_OC2_SetConfig+0xc0>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a1e      	ldr	r2, [pc, #120]	@ (80053b8 <TIM_OC2_SetConfig+0x114>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d00f      	beq.n	8005364 <TIM_OC2_SetConfig+0xc0>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a1e      	ldr	r2, [pc, #120]	@ (80053c0 <TIM_OC2_SetConfig+0x11c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00b      	beq.n	8005364 <TIM_OC2_SetConfig+0xc0>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a1d      	ldr	r2, [pc, #116]	@ (80053c4 <TIM_OC2_SetConfig+0x120>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d007      	beq.n	8005364 <TIM_OC2_SetConfig+0xc0>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a1c      	ldr	r2, [pc, #112]	@ (80053c8 <TIM_OC2_SetConfig+0x124>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d003      	beq.n	8005364 <TIM_OC2_SetConfig+0xc0>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a17      	ldr	r2, [pc, #92]	@ (80053bc <TIM_OC2_SetConfig+0x118>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d113      	bne.n	800538c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800536a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005372:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	4313      	orrs	r3, r2
 800538a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	621a      	str	r2, [r3, #32]
}
 80053a6:	bf00      	nop
 80053a8:	371c      	adds	r7, #28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40012c00 	.word	0x40012c00
 80053b8:	40013400 	.word	0x40013400
 80053bc:	40015000 	.word	0x40015000
 80053c0:	40014000 	.word	0x40014000
 80053c4:	40014400 	.word	0x40014400
 80053c8:	40014800 	.word	0x40014800

080053cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0303 	bic.w	r3, r3, #3
 8005406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	021b      	lsls	r3, r3, #8
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	4313      	orrs	r3, r2
 8005424:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a2b      	ldr	r2, [pc, #172]	@ (80054d8 <TIM_OC3_SetConfig+0x10c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d007      	beq.n	800543e <TIM_OC3_SetConfig+0x72>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a2a      	ldr	r2, [pc, #168]	@ (80054dc <TIM_OC3_SetConfig+0x110>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d003      	beq.n	800543e <TIM_OC3_SetConfig+0x72>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a29      	ldr	r2, [pc, #164]	@ (80054e0 <TIM_OC3_SetConfig+0x114>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d10d      	bne.n	800545a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005444:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	021b      	lsls	r3, r3, #8
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	4313      	orrs	r3, r2
 8005450:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005458:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a1e      	ldr	r2, [pc, #120]	@ (80054d8 <TIM_OC3_SetConfig+0x10c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d013      	beq.n	800548a <TIM_OC3_SetConfig+0xbe>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a1d      	ldr	r2, [pc, #116]	@ (80054dc <TIM_OC3_SetConfig+0x110>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00f      	beq.n	800548a <TIM_OC3_SetConfig+0xbe>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a1d      	ldr	r2, [pc, #116]	@ (80054e4 <TIM_OC3_SetConfig+0x118>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d00b      	beq.n	800548a <TIM_OC3_SetConfig+0xbe>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a1c      	ldr	r2, [pc, #112]	@ (80054e8 <TIM_OC3_SetConfig+0x11c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d007      	beq.n	800548a <TIM_OC3_SetConfig+0xbe>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a1b      	ldr	r2, [pc, #108]	@ (80054ec <TIM_OC3_SetConfig+0x120>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d003      	beq.n	800548a <TIM_OC3_SetConfig+0xbe>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a16      	ldr	r2, [pc, #88]	@ (80054e0 <TIM_OC3_SetConfig+0x114>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d113      	bne.n	80054b2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	011b      	lsls	r3, r3, #4
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	621a      	str	r2, [r3, #32]
}
 80054cc:	bf00      	nop
 80054ce:	371c      	adds	r7, #28
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	40012c00 	.word	0x40012c00
 80054dc:	40013400 	.word	0x40013400
 80054e0:	40015000 	.word	0x40015000
 80054e4:	40014000 	.word	0x40014000
 80054e8:	40014400 	.word	0x40014400
 80054ec:	40014800 	.word	0x40014800

080054f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800551e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800552a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	021b      	lsls	r3, r3, #8
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4313      	orrs	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800553e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	031b      	lsls	r3, r3, #12
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a2c      	ldr	r2, [pc, #176]	@ (8005600 <TIM_OC4_SetConfig+0x110>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d007      	beq.n	8005564 <TIM_OC4_SetConfig+0x74>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a2b      	ldr	r2, [pc, #172]	@ (8005604 <TIM_OC4_SetConfig+0x114>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d003      	beq.n	8005564 <TIM_OC4_SetConfig+0x74>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a2a      	ldr	r2, [pc, #168]	@ (8005608 <TIM_OC4_SetConfig+0x118>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d10d      	bne.n	8005580 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800556a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	031b      	lsls	r3, r3, #12
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	4313      	orrs	r3, r2
 8005576:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800557e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a1f      	ldr	r2, [pc, #124]	@ (8005600 <TIM_OC4_SetConfig+0x110>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d013      	beq.n	80055b0 <TIM_OC4_SetConfig+0xc0>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a1e      	ldr	r2, [pc, #120]	@ (8005604 <TIM_OC4_SetConfig+0x114>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d00f      	beq.n	80055b0 <TIM_OC4_SetConfig+0xc0>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a1e      	ldr	r2, [pc, #120]	@ (800560c <TIM_OC4_SetConfig+0x11c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00b      	beq.n	80055b0 <TIM_OC4_SetConfig+0xc0>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a1d      	ldr	r2, [pc, #116]	@ (8005610 <TIM_OC4_SetConfig+0x120>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d007      	beq.n	80055b0 <TIM_OC4_SetConfig+0xc0>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005614 <TIM_OC4_SetConfig+0x124>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d003      	beq.n	80055b0 <TIM_OC4_SetConfig+0xc0>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a17      	ldr	r2, [pc, #92]	@ (8005608 <TIM_OC4_SetConfig+0x118>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d113      	bne.n	80055d8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055b6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80055be:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	019b      	lsls	r3, r3, #6
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	019b      	lsls	r3, r3, #6
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	621a      	str	r2, [r3, #32]
}
 80055f2:	bf00      	nop
 80055f4:	371c      	adds	r7, #28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	40012c00 	.word	0x40012c00
 8005604:	40013400 	.word	0x40013400
 8005608:	40015000 	.word	0x40015000
 800560c:	40014000 	.word	0x40014000
 8005610:	40014400 	.word	0x40014400
 8005614:	40014800 	.word	0x40014800

08005618 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005618:	b480      	push	{r7}
 800561a:	b087      	sub	sp, #28
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800563e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800564a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800565c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	041b      	lsls	r3, r3, #16
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	4313      	orrs	r3, r2
 8005668:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a19      	ldr	r2, [pc, #100]	@ (80056d4 <TIM_OC5_SetConfig+0xbc>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d013      	beq.n	800569a <TIM_OC5_SetConfig+0x82>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a18      	ldr	r2, [pc, #96]	@ (80056d8 <TIM_OC5_SetConfig+0xc0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00f      	beq.n	800569a <TIM_OC5_SetConfig+0x82>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a17      	ldr	r2, [pc, #92]	@ (80056dc <TIM_OC5_SetConfig+0xc4>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d00b      	beq.n	800569a <TIM_OC5_SetConfig+0x82>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a16      	ldr	r2, [pc, #88]	@ (80056e0 <TIM_OC5_SetConfig+0xc8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d007      	beq.n	800569a <TIM_OC5_SetConfig+0x82>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a15      	ldr	r2, [pc, #84]	@ (80056e4 <TIM_OC5_SetConfig+0xcc>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d003      	beq.n	800569a <TIM_OC5_SetConfig+0x82>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a14      	ldr	r2, [pc, #80]	@ (80056e8 <TIM_OC5_SetConfig+0xd0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d109      	bne.n	80056ae <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	021b      	lsls	r3, r3, #8
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	621a      	str	r2, [r3, #32]
}
 80056c8:	bf00      	nop
 80056ca:	371c      	adds	r7, #28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	40012c00 	.word	0x40012c00
 80056d8:	40013400 	.word	0x40013400
 80056dc:	40014000 	.word	0x40014000
 80056e0:	40014400 	.word	0x40014400
 80056e4:	40014800 	.word	0x40014800
 80056e8:	40015000 	.word	0x40015000

080056ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800571a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800571e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	4313      	orrs	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005732:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	051b      	lsls	r3, r3, #20
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	4313      	orrs	r3, r2
 800573e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a1a      	ldr	r2, [pc, #104]	@ (80057ac <TIM_OC6_SetConfig+0xc0>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d013      	beq.n	8005770 <TIM_OC6_SetConfig+0x84>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a19      	ldr	r2, [pc, #100]	@ (80057b0 <TIM_OC6_SetConfig+0xc4>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d00f      	beq.n	8005770 <TIM_OC6_SetConfig+0x84>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a18      	ldr	r2, [pc, #96]	@ (80057b4 <TIM_OC6_SetConfig+0xc8>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00b      	beq.n	8005770 <TIM_OC6_SetConfig+0x84>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a17      	ldr	r2, [pc, #92]	@ (80057b8 <TIM_OC6_SetConfig+0xcc>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d007      	beq.n	8005770 <TIM_OC6_SetConfig+0x84>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a16      	ldr	r2, [pc, #88]	@ (80057bc <TIM_OC6_SetConfig+0xd0>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d003      	beq.n	8005770 <TIM_OC6_SetConfig+0x84>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a15      	ldr	r2, [pc, #84]	@ (80057c0 <TIM_OC6_SetConfig+0xd4>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d109      	bne.n	8005784 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005776:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	029b      	lsls	r3, r3, #10
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	4313      	orrs	r3, r2
 8005782:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	621a      	str	r2, [r3, #32]
}
 800579e:	bf00      	nop
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	40012c00 	.word	0x40012c00
 80057b0:	40013400 	.word	0x40013400
 80057b4:	40014000 	.word	0x40014000
 80057b8:	40014400 	.word	0x40014400
 80057bc:	40014800 	.word	0x40014800
 80057c0:	40015000 	.word	0x40015000

080057c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b087      	sub	sp, #28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	f023 0201 	bic.w	r2, r3, #1
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4a28      	ldr	r2, [pc, #160]	@ (8005890 <TIM_TI1_SetConfig+0xcc>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d01b      	beq.n	800582a <TIM_TI1_SetConfig+0x66>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057f8:	d017      	beq.n	800582a <TIM_TI1_SetConfig+0x66>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4a25      	ldr	r2, [pc, #148]	@ (8005894 <TIM_TI1_SetConfig+0xd0>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d013      	beq.n	800582a <TIM_TI1_SetConfig+0x66>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4a24      	ldr	r2, [pc, #144]	@ (8005898 <TIM_TI1_SetConfig+0xd4>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d00f      	beq.n	800582a <TIM_TI1_SetConfig+0x66>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4a23      	ldr	r2, [pc, #140]	@ (800589c <TIM_TI1_SetConfig+0xd8>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d00b      	beq.n	800582a <TIM_TI1_SetConfig+0x66>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4a22      	ldr	r2, [pc, #136]	@ (80058a0 <TIM_TI1_SetConfig+0xdc>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d007      	beq.n	800582a <TIM_TI1_SetConfig+0x66>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4a21      	ldr	r2, [pc, #132]	@ (80058a4 <TIM_TI1_SetConfig+0xe0>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d003      	beq.n	800582a <TIM_TI1_SetConfig+0x66>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4a20      	ldr	r2, [pc, #128]	@ (80058a8 <TIM_TI1_SetConfig+0xe4>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d101      	bne.n	800582e <TIM_TI1_SetConfig+0x6a>
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <TIM_TI1_SetConfig+0x6c>
 800582e:	2300      	movs	r3, #0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d008      	beq.n	8005846 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f023 0303 	bic.w	r3, r3, #3
 800583a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4313      	orrs	r3, r2
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	e003      	b.n	800584e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f043 0301 	orr.w	r3, r3, #1
 800584c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005854:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	b2db      	uxtb	r3, r3
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	f023 030a 	bic.w	r3, r3, #10
 8005868:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f003 030a 	and.w	r3, r3, #10
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	4313      	orrs	r3, r2
 8005874:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	621a      	str	r2, [r3, #32]
}
 8005882:	bf00      	nop
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	40012c00 	.word	0x40012c00
 8005894:	40000400 	.word	0x40000400
 8005898:	40000800 	.word	0x40000800
 800589c:	40000c00 	.word	0x40000c00
 80058a0:	40013400 	.word	0x40013400
 80058a4:	40014000 	.word	0x40014000
 80058a8:	40015000 	.word	0x40015000

080058ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	f023 0201 	bic.w	r2, r3, #1
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f023 030a 	bic.w	r3, r3, #10
 80058e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	621a      	str	r2, [r3, #32]
}
 80058fe:	bf00      	nop
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800590a:	b480      	push	{r7}
 800590c:	b087      	sub	sp, #28
 800590e:	af00      	add	r7, sp, #0
 8005910:	60f8      	str	r0, [r7, #12]
 8005912:	60b9      	str	r1, [r7, #8]
 8005914:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	f023 0210 	bic.w	r2, r3, #16
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005934:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	031b      	lsls	r3, r3, #12
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005946:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	4313      	orrs	r3, r2
 8005950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	621a      	str	r2, [r3, #32]
}
 800595e:	bf00      	nop
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800596a:	b480      	push	{r7}
 800596c:	b085      	sub	sp, #20
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005980:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005984:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4313      	orrs	r3, r2
 800598c:	f043 0307 	orr.w	r3, r3, #7
 8005990:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	609a      	str	r2, [r3, #8]
}
 8005998:	bf00      	nop
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	021a      	lsls	r2, r3, #8
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	431a      	orrs	r2, r3
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	609a      	str	r2, [r3, #8]
}
 80059d8:	bf00      	nop
 80059da:	371c      	adds	r7, #28
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f003 031f 	and.w	r3, r3, #31
 80059f6:	2201      	movs	r2, #1
 80059f8:	fa02 f303 	lsl.w	r3, r2, r3
 80059fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a1a      	ldr	r2, [r3, #32]
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	43db      	mvns	r3, r3
 8005a06:	401a      	ands	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6a1a      	ldr	r2, [r3, #32]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f003 031f 	and.w	r3, r3, #31
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	fa01 f303 	lsl.w	r3, r1, r3
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	621a      	str	r2, [r3, #32]
}
 8005a22:	bf00      	nop
 8005a24:	371c      	adds	r7, #28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b08a      	sub	sp, #40	@ 0x28
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e0a0      	b.n	8005b84 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d106      	bne.n	8005a5c <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7fb fbda 	bl	8001210 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	f7ff faca 	bl	8005008 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6818      	ldr	r0, [r3, #0]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	6819      	ldr	r1, [r3, #0]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	2203      	movs	r2, #3
 8005a82:	f7ff fe9f 	bl	80057c4 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	699a      	ldr	r2, [r3, #24]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 020c 	bic.w	r2, r2, #12
 8005a94:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6999      	ldr	r1, [r3, #24]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005ab6:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6812      	ldr	r2, [r2, #0]
 8005ac2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aca:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ada:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	6812      	ldr	r2, [r2, #0]
 8005ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aea:	f023 0307 	bic.w	r3, r3, #7
 8005aee:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0204 	orr.w	r2, r2, #4
 8005afe:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005b00:	2300      	movs	r3, #0
 8005b02:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005b04:	2300      	movs	r3, #0
 8005b06:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005b08:	2370      	movs	r3, #112	@ 0x70
 8005b0a:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005b10:	2300      	movs	r3, #0
 8005b12:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b14:	2300      	movs	r3, #0
 8005b16:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f107 020c 	add.w	r2, r7, #12
 8005b26:	4611      	mov	r1, r2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7ff fbbb 	bl	80052a4 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6812      	ldr	r2, [r2, #0]
 8005b38:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005b3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b40:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8005b50:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3728      	adds	r7, #40	@ 0x28
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d109      	bne.n	8005bb0 <HAL_TIMEx_PWMN_Start+0x24>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	bf14      	ite	ne
 8005ba8:	2301      	movne	r3, #1
 8005baa:	2300      	moveq	r3, #0
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	e022      	b.n	8005bf6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d109      	bne.n	8005bca <HAL_TIMEx_PWMN_Start+0x3e>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	bf14      	ite	ne
 8005bc2:	2301      	movne	r3, #1
 8005bc4:	2300      	moveq	r3, #0
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	e015      	b.n	8005bf6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d109      	bne.n	8005be4 <HAL_TIMEx_PWMN_Start+0x58>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	bf14      	ite	ne
 8005bdc:	2301      	movne	r3, #1
 8005bde:	2300      	moveq	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	e008      	b.n	8005bf6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	bf14      	ite	ne
 8005bf0:	2301      	movne	r3, #1
 8005bf2:	2300      	moveq	r3, #0
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e073      	b.n	8005ce6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d104      	bne.n	8005c0e <HAL_TIMEx_PWMN_Start+0x82>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c0c:	e013      	b.n	8005c36 <HAL_TIMEx_PWMN_Start+0xaa>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b04      	cmp	r3, #4
 8005c12:	d104      	bne.n	8005c1e <HAL_TIMEx_PWMN_Start+0x92>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c1c:	e00b      	b.n	8005c36 <HAL_TIMEx_PWMN_Start+0xaa>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d104      	bne.n	8005c2e <HAL_TIMEx_PWMN_Start+0xa2>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c2c:	e003      	b.n	8005c36 <HAL_TIMEx_PWMN_Start+0xaa>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2202      	movs	r2, #2
 8005c32:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2204      	movs	r2, #4
 8005c3c:	6839      	ldr	r1, [r7, #0]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 f9d6 	bl	8005ff0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c52:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a25      	ldr	r2, [pc, #148]	@ (8005cf0 <HAL_TIMEx_PWMN_Start+0x164>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d022      	beq.n	8005ca4 <HAL_TIMEx_PWMN_Start+0x118>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c66:	d01d      	beq.n	8005ca4 <HAL_TIMEx_PWMN_Start+0x118>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a21      	ldr	r2, [pc, #132]	@ (8005cf4 <HAL_TIMEx_PWMN_Start+0x168>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d018      	beq.n	8005ca4 <HAL_TIMEx_PWMN_Start+0x118>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a20      	ldr	r2, [pc, #128]	@ (8005cf8 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d013      	beq.n	8005ca4 <HAL_TIMEx_PWMN_Start+0x118>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a1e      	ldr	r2, [pc, #120]	@ (8005cfc <HAL_TIMEx_PWMN_Start+0x170>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00e      	beq.n	8005ca4 <HAL_TIMEx_PWMN_Start+0x118>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8005d00 <HAL_TIMEx_PWMN_Start+0x174>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d009      	beq.n	8005ca4 <HAL_TIMEx_PWMN_Start+0x118>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1b      	ldr	r2, [pc, #108]	@ (8005d04 <HAL_TIMEx_PWMN_Start+0x178>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d004      	beq.n	8005ca4 <HAL_TIMEx_PWMN_Start+0x118>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a1a      	ldr	r2, [pc, #104]	@ (8005d08 <HAL_TIMEx_PWMN_Start+0x17c>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d115      	bne.n	8005cd0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689a      	ldr	r2, [r3, #8]
 8005caa:	4b18      	ldr	r3, [pc, #96]	@ (8005d0c <HAL_TIMEx_PWMN_Start+0x180>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b06      	cmp	r3, #6
 8005cb4:	d015      	beq.n	8005ce2 <HAL_TIMEx_PWMN_Start+0x156>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cbc:	d011      	beq.n	8005ce2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f042 0201 	orr.w	r2, r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cce:	e008      	b.n	8005ce2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0201 	orr.w	r2, r2, #1
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	e000      	b.n	8005ce4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	40012c00 	.word	0x40012c00
 8005cf4:	40000400 	.word	0x40000400
 8005cf8:	40000800 	.word	0x40000800
 8005cfc:	40000c00 	.word	0x40000c00
 8005d00:	40013400 	.word	0x40013400
 8005d04:	40014000 	.word	0x40014000
 8005d08:	40015000 	.word	0x40015000
 8005d0c:	00010007 	.word	0x00010007

08005d10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d101      	bne.n	8005d28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d24:	2302      	movs	r3, #2
 8005d26:	e074      	b.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a34      	ldr	r2, [pc, #208]	@ (8005e20 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d009      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a33      	ldr	r2, [pc, #204]	@ (8005e24 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d004      	beq.n	8005d66 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a31      	ldr	r2, [pc, #196]	@ (8005e28 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d108      	bne.n	8005d78 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005d6c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a21      	ldr	r2, [pc, #132]	@ (8005e20 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d022      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005da8:	d01d      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a1f      	ldr	r2, [pc, #124]	@ (8005e2c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d018      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a1d      	ldr	r2, [pc, #116]	@ (8005e30 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d013      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8005e34 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00e      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a15      	ldr	r2, [pc, #84]	@ (8005e24 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d009      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a18      	ldr	r2, [pc, #96]	@ (8005e38 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d004      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a11      	ldr	r2, [pc, #68]	@ (8005e28 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d10c      	bne.n	8005e00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	40012c00 	.word	0x40012c00
 8005e24:	40013400 	.word	0x40013400
 8005e28:	40015000 	.word	0x40015000
 8005e2c:	40000400 	.word	0x40000400
 8005e30:	40000800 	.word	0x40000800
 8005e34:	40000c00 	.word	0x40000c00
 8005e38:	40014000 	.word	0x40014000

08005e3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d101      	bne.n	8005e58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e54:	2302      	movs	r3, #2
 8005e56:	e078      	b.n	8005f4a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	041b      	lsls	r3, r3, #16
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	69db      	ldr	r3, [r3, #28]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8005f58 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d009      	beq.n	8005efe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a1b      	ldr	r2, [pc, #108]	@ (8005f5c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d004      	beq.n	8005efe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a19      	ldr	r2, [pc, #100]	@ (8005f60 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d11c      	bne.n	8005f38 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f08:	051b      	lsls	r3, r3, #20
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f34:	4313      	orrs	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40012c00 	.word	0x40012c00
 8005f5c:	40013400 	.word	0x40013400
 8005f60:	40015000 	.word	0x40015000

08005f64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	2204      	movs	r2, #4
 8006004:	fa02 f303 	lsl.w	r3, r2, r3
 8006008:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6a1a      	ldr	r2, [r3, #32]
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	43db      	mvns	r3, r3
 8006012:	401a      	ands	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a1a      	ldr	r2, [r3, #32]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f003 030f 	and.w	r3, r3, #15
 8006022:	6879      	ldr	r1, [r7, #4]
 8006024:	fa01 f303 	lsl.w	r3, r1, r3
 8006028:	431a      	orrs	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	621a      	str	r2, [r3, #32]
}
 800602e:	bf00      	nop
 8006030:	371c      	adds	r7, #28
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b082      	sub	sp, #8
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e042      	b.n	80060d2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006052:	2b00      	cmp	r3, #0
 8006054:	d106      	bne.n	8006064 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7fb fa38 	bl	80014d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2224      	movs	r2, #36	@ 0x24
 8006068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0201 	bic.w	r2, r2, #1
 800607a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 ff61 	bl	8006f4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fc62 	bl	8006954 <UART_SetConfig>
 8006090:	4603      	mov	r3, r0
 8006092:	2b01      	cmp	r3, #1
 8006094:	d101      	bne.n	800609a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e01b      	b.n	80060d2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689a      	ldr	r2, [r3, #8]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f042 0201 	orr.w	r2, r2, #1
 80060c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 ffe0 	bl	8007090 <UART_CheckIdleState>
 80060d0:	4603      	mov	r3, r0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b08a      	sub	sp, #40	@ 0x28
 80060de:	af02      	add	r7, sp, #8
 80060e0:	60f8      	str	r0, [r7, #12]
 80060e2:	60b9      	str	r1, [r7, #8]
 80060e4:	603b      	str	r3, [r7, #0]
 80060e6:	4613      	mov	r3, r2
 80060e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f0:	2b20      	cmp	r3, #32
 80060f2:	d17b      	bne.n	80061ec <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d002      	beq.n	8006100 <HAL_UART_Transmit+0x26>
 80060fa:	88fb      	ldrh	r3, [r7, #6]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d101      	bne.n	8006104 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e074      	b.n	80061ee <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2221      	movs	r2, #33	@ 0x21
 8006110:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006114:	f7fb fc56 	bl	80019c4 <HAL_GetTick>
 8006118:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	88fa      	ldrh	r2, [r7, #6]
 800611e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	88fa      	ldrh	r2, [r7, #6]
 8006126:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006132:	d108      	bne.n	8006146 <HAL_UART_Transmit+0x6c>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d104      	bne.n	8006146 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800613c:	2300      	movs	r3, #0
 800613e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	61bb      	str	r3, [r7, #24]
 8006144:	e003      	b.n	800614e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800614a:	2300      	movs	r3, #0
 800614c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800614e:	e030      	b.n	80061b2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	2200      	movs	r2, #0
 8006158:	2180      	movs	r1, #128	@ 0x80
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f001 f842 	bl	80071e4 <UART_WaitOnFlagUntilTimeout>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d005      	beq.n	8006172 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2220      	movs	r2, #32
 800616a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e03d      	b.n	80061ee <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10b      	bne.n	8006190 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	461a      	mov	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006186:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	3302      	adds	r3, #2
 800618c:	61bb      	str	r3, [r7, #24]
 800618e:	e007      	b.n	80061a0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	781a      	ldrb	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	3301      	adds	r3, #1
 800619e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	3b01      	subs	r3, #1
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1c8      	bne.n	8006150 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	2200      	movs	r2, #0
 80061c6:	2140      	movs	r1, #64	@ 0x40
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f001 f80b 	bl	80071e4 <UART_WaitOnFlagUntilTimeout>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d005      	beq.n	80061e0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2220      	movs	r2, #32
 80061d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e006      	b.n	80061ee <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80061e8:	2300      	movs	r3, #0
 80061ea:	e000      	b.n	80061ee <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80061ec:	2302      	movs	r3, #2
  }
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3720      	adds	r7, #32
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
	...

080061f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b08a      	sub	sp, #40	@ 0x28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	4613      	mov	r3, r2
 8006204:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800620c:	2b20      	cmp	r3, #32
 800620e:	d137      	bne.n	8006280 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d002      	beq.n	800621c <HAL_UART_Receive_IT+0x24>
 8006216:	88fb      	ldrh	r3, [r7, #6]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e030      	b.n	8006282 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a18      	ldr	r2, [pc, #96]	@ (800628c <HAL_UART_Receive_IT+0x94>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d01f      	beq.n	8006270 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d018      	beq.n	8006270 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	e853 3f00 	ldrex	r3, [r3]
 800624a:	613b      	str	r3, [r7, #16]
   return(result);
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006252:	627b      	str	r3, [r7, #36]	@ 0x24
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	461a      	mov	r2, r3
 800625a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625c:	623b      	str	r3, [r7, #32]
 800625e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006260:	69f9      	ldr	r1, [r7, #28]
 8006262:	6a3a      	ldr	r2, [r7, #32]
 8006264:	e841 2300 	strex	r3, r2, [r1]
 8006268:	61bb      	str	r3, [r7, #24]
   return(result);
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1e6      	bne.n	800623e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006270:	88fb      	ldrh	r3, [r7, #6]
 8006272:	461a      	mov	r2, r3
 8006274:	68b9      	ldr	r1, [r7, #8]
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f001 f822 	bl	80072c0 <UART_Start_Receive_IT>
 800627c:	4603      	mov	r3, r0
 800627e:	e000      	b.n	8006282 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006280:	2302      	movs	r3, #2
  }
}
 8006282:	4618      	mov	r0, r3
 8006284:	3728      	adds	r7, #40	@ 0x28
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	40008000 	.word	0x40008000

08006290 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b0ba      	sub	sp, #232	@ 0xe8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80062b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80062ba:	f640 030f 	movw	r3, #2063	@ 0x80f
 80062be:	4013      	ands	r3, r2
 80062c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80062c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d11b      	bne.n	8006304 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80062cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062d0:	f003 0320 	and.w	r3, r3, #32
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d015      	beq.n	8006304 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80062d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062dc:	f003 0320 	and.w	r3, r3, #32
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d105      	bne.n	80062f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80062e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d009      	beq.n	8006304 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 8300 	beq.w	80068fa <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	4798      	blx	r3
      }
      return;
 8006302:	e2fa      	b.n	80068fa <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006304:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 8123 	beq.w	8006554 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800630e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006312:	4b8d      	ldr	r3, [pc, #564]	@ (8006548 <HAL_UART_IRQHandler+0x2b8>)
 8006314:	4013      	ands	r3, r2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d106      	bne.n	8006328 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800631a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800631e:	4b8b      	ldr	r3, [pc, #556]	@ (800654c <HAL_UART_IRQHandler+0x2bc>)
 8006320:	4013      	ands	r3, r2
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 8116 	beq.w	8006554 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	2b00      	cmp	r3, #0
 8006332:	d011      	beq.n	8006358 <HAL_UART_IRQHandler+0xc8>
 8006334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00b      	beq.n	8006358 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2201      	movs	r2, #1
 8006346:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800634e:	f043 0201 	orr.w	r2, r3, #1
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d011      	beq.n	8006388 <HAL_UART_IRQHandler+0xf8>
 8006364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00b      	beq.n	8006388 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2202      	movs	r2, #2
 8006376:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800637e:	f043 0204 	orr.w	r2, r3, #4
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800638c:	f003 0304 	and.w	r3, r3, #4
 8006390:	2b00      	cmp	r3, #0
 8006392:	d011      	beq.n	80063b8 <HAL_UART_IRQHandler+0x128>
 8006394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006398:	f003 0301 	and.w	r3, r3, #1
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00b      	beq.n	80063b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2204      	movs	r2, #4
 80063a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ae:	f043 0202 	orr.w	r2, r3, #2
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80063b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063bc:	f003 0308 	and.w	r3, r3, #8
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d017      	beq.n	80063f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80063c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063c8:	f003 0320 	and.w	r3, r3, #32
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d105      	bne.n	80063dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80063d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80063d4:	4b5c      	ldr	r3, [pc, #368]	@ (8006548 <HAL_UART_IRQHandler+0x2b8>)
 80063d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00b      	beq.n	80063f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2208      	movs	r2, #8
 80063e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ea:	f043 0208 	orr.w	r2, r3, #8
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80063f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d012      	beq.n	8006426 <HAL_UART_IRQHandler+0x196>
 8006400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006404:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00c      	beq.n	8006426 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006414:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800641c:	f043 0220 	orr.w	r2, r3, #32
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 8266 	beq.w	80068fe <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b00      	cmp	r3, #0
 800643c:	d013      	beq.n	8006466 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800643e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006442:	f003 0320 	and.w	r3, r3, #32
 8006446:	2b00      	cmp	r3, #0
 8006448:	d105      	bne.n	8006456 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800644a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800644e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d007      	beq.n	8006466 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800646c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800647a:	2b40      	cmp	r3, #64	@ 0x40
 800647c:	d005      	beq.n	800648a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800647e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006482:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006486:	2b00      	cmp	r3, #0
 8006488:	d054      	beq.n	8006534 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f001 f83a 	bl	8007504 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800649a:	2b40      	cmp	r3, #64	@ 0x40
 800649c:	d146      	bne.n	800652c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3308      	adds	r3, #8
 80064a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064ac:	e853 3f00 	ldrex	r3, [r3]
 80064b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80064b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3308      	adds	r3, #8
 80064c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80064ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80064ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80064d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80064e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1d9      	bne.n	800649e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d017      	beq.n	8006524 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064fa:	4a15      	ldr	r2, [pc, #84]	@ (8006550 <HAL_UART_IRQHandler+0x2c0>)
 80064fc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006504:	4618      	mov	r0, r3
 8006506:	f7fc fca2 	bl	8002e4e <HAL_DMA_Abort_IT>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d019      	beq.n	8006544 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800651e:	4610      	mov	r0, r2
 8006520:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006522:	e00f      	b.n	8006544 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f9ff 	bl	8006928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800652a:	e00b      	b.n	8006544 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f9fb 	bl	8006928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006532:	e007      	b.n	8006544 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f9f7 	bl	8006928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006542:	e1dc      	b.n	80068fe <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006544:	bf00      	nop
    return;
 8006546:	e1da      	b.n	80068fe <HAL_UART_IRQHandler+0x66e>
 8006548:	10000001 	.word	0x10000001
 800654c:	04000120 	.word	0x04000120
 8006550:	080075d1 	.word	0x080075d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006558:	2b01      	cmp	r3, #1
 800655a:	f040 8170 	bne.w	800683e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800655e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006562:	f003 0310 	and.w	r3, r3, #16
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 8169 	beq.w	800683e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800656c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006570:	f003 0310 	and.w	r3, r3, #16
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 8162 	beq.w	800683e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2210      	movs	r2, #16
 8006580:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800658c:	2b40      	cmp	r3, #64	@ 0x40
 800658e:	f040 80d8 	bne.w	8006742 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 80af 	beq.w	8006708 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80065b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065b4:	429a      	cmp	r2, r3
 80065b6:	f080 80a7 	bcs.w	8006708 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0320 	and.w	r3, r3, #32
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f040 8087 	bne.w	80066e6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80065ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	461a      	mov	r2, r3
 80065fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006602:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006606:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800660e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800661a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1da      	bne.n	80065d8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3308      	adds	r3, #8
 8006628:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800662c:	e853 3f00 	ldrex	r3, [r3]
 8006630:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006632:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006634:	f023 0301 	bic.w	r3, r3, #1
 8006638:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3308      	adds	r3, #8
 8006642:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006646:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800664a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800664e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006658:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e1      	bne.n	8006622 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3308      	adds	r3, #8
 8006664:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006666:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800666e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006670:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006674:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3308      	adds	r3, #8
 800667e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006682:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006684:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006686:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006688:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800668a:	e841 2300 	strex	r3, r2, [r1]
 800668e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006690:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1e3      	bne.n	800665e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2220      	movs	r2, #32
 800669a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066ac:	e853 3f00 	ldrex	r3, [r3]
 80066b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066b4:	f023 0310 	bic.w	r3, r3, #16
 80066b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	461a      	mov	r2, r3
 80066c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066ce:	e841 2300 	strex	r3, r2, [r1]
 80066d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80066d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1e4      	bne.n	80066a4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7fc fb5b 	bl	8002d9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2202      	movs	r2, #2
 80066ea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f91b 	bl	800693c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006706:	e0fc      	b.n	8006902 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800670e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006712:	429a      	cmp	r2, r3
 8006714:	f040 80f5 	bne.w	8006902 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0320 	and.w	r3, r3, #32
 8006726:	2b20      	cmp	r3, #32
 8006728:	f040 80eb 	bne.w	8006902 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2202      	movs	r2, #2
 8006730:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006738:	4619      	mov	r1, r3
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f8fe 	bl	800693c <HAL_UARTEx_RxEventCallback>
      return;
 8006740:	e0df      	b.n	8006902 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800674e:	b29b      	uxth	r3, r3
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800675c:	b29b      	uxth	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 80d1 	beq.w	8006906 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006764:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 80cc 	beq.w	8006906 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006776:	e853 3f00 	ldrex	r3, [r3]
 800677a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800677c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800677e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006782:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	461a      	mov	r2, r3
 800678c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006790:	647b      	str	r3, [r7, #68]	@ 0x44
 8006792:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006794:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006796:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006798:	e841 2300 	strex	r3, r2, [r1]
 800679c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800679e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1e4      	bne.n	800676e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3308      	adds	r3, #8
 80067aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ae:	e853 3f00 	ldrex	r3, [r3]
 80067b2:	623b      	str	r3, [r7, #32]
   return(result);
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067ba:	f023 0301 	bic.w	r3, r3, #1
 80067be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3308      	adds	r3, #8
 80067c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80067cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80067ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067d4:	e841 2300 	strex	r3, r2, [r1]
 80067d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e1      	bne.n	80067a4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2220      	movs	r2, #32
 80067e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	e853 3f00 	ldrex	r3, [r3]
 8006800:	60fb      	str	r3, [r7, #12]
   return(result);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f023 0310 	bic.w	r3, r3, #16
 8006808:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	461a      	mov	r2, r3
 8006812:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006816:	61fb      	str	r3, [r7, #28]
 8006818:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681a:	69b9      	ldr	r1, [r7, #24]
 800681c:	69fa      	ldr	r2, [r7, #28]
 800681e:	e841 2300 	strex	r3, r2, [r1]
 8006822:	617b      	str	r3, [r7, #20]
   return(result);
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1e4      	bne.n	80067f4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2202      	movs	r2, #2
 800682e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006830:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006834:	4619      	mov	r1, r3
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f880 	bl	800693c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800683c:	e063      	b.n	8006906 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800683e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006842:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00e      	beq.n	8006868 <HAL_UART_IRQHandler+0x5d8>
 800684a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800684e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d008      	beq.n	8006868 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800685e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f001 fc13 	bl	800808c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006866:	e051      	b.n	800690c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800686c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006870:	2b00      	cmp	r3, #0
 8006872:	d014      	beq.n	800689e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800687c:	2b00      	cmp	r3, #0
 800687e:	d105      	bne.n	800688c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006884:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d008      	beq.n	800689e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006890:	2b00      	cmp	r3, #0
 8006892:	d03a      	beq.n	800690a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	4798      	blx	r3
    }
    return;
 800689c:	e035      	b.n	800690a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800689e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d009      	beq.n	80068be <HAL_UART_IRQHandler+0x62e>
 80068aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fe9c 	bl	80075f4 <UART_EndTransmit_IT>
    return;
 80068bc:	e026      	b.n	800690c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80068be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d009      	beq.n	80068de <HAL_UART_IRQHandler+0x64e>
 80068ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f001 fbec 	bl	80080b4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068dc:	e016      	b.n	800690c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80068de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d010      	beq.n	800690c <HAL_UART_IRQHandler+0x67c>
 80068ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	da0c      	bge.n	800690c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f001 fbd4 	bl	80080a0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068f8:	e008      	b.n	800690c <HAL_UART_IRQHandler+0x67c>
      return;
 80068fa:	bf00      	nop
 80068fc:	e006      	b.n	800690c <HAL_UART_IRQHandler+0x67c>
    return;
 80068fe:	bf00      	nop
 8006900:	e004      	b.n	800690c <HAL_UART_IRQHandler+0x67c>
      return;
 8006902:	bf00      	nop
 8006904:	e002      	b.n	800690c <HAL_UART_IRQHandler+0x67c>
      return;
 8006906:	bf00      	nop
 8006908:	e000      	b.n	800690c <HAL_UART_IRQHandler+0x67c>
    return;
 800690a:	bf00      	nop
  }
}
 800690c:	37e8      	adds	r7, #232	@ 0xe8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop

08006914 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	460b      	mov	r3, r1
 8006946:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006958:	b08c      	sub	sp, #48	@ 0x30
 800695a:	af00      	add	r7, sp, #0
 800695c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	431a      	orrs	r2, r3
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	431a      	orrs	r2, r3
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	4313      	orrs	r3, r2
 800697a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	4baa      	ldr	r3, [pc, #680]	@ (8006c2c <UART_SetConfig+0x2d8>)
 8006984:	4013      	ands	r3, r2
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	6812      	ldr	r2, [r2, #0]
 800698a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800698c:	430b      	orrs	r3, r1
 800698e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	68da      	ldr	r2, [r3, #12]
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a9f      	ldr	r2, [pc, #636]	@ (8006c30 <UART_SetConfig+0x2dc>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d004      	beq.n	80069c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069bc:	4313      	orrs	r3, r2
 80069be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80069ca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	6812      	ldr	r2, [r2, #0]
 80069d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069d4:	430b      	orrs	r3, r1
 80069d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069de:	f023 010f 	bic.w	r1, r3, #15
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a90      	ldr	r2, [pc, #576]	@ (8006c34 <UART_SetConfig+0x2e0>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d125      	bne.n	8006a44 <UART_SetConfig+0xf0>
 80069f8:	4b8f      	ldr	r3, [pc, #572]	@ (8006c38 <UART_SetConfig+0x2e4>)
 80069fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069fe:	f003 0303 	and.w	r3, r3, #3
 8006a02:	2b03      	cmp	r3, #3
 8006a04:	d81a      	bhi.n	8006a3c <UART_SetConfig+0xe8>
 8006a06:	a201      	add	r2, pc, #4	@ (adr r2, 8006a0c <UART_SetConfig+0xb8>)
 8006a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0c:	08006a1d 	.word	0x08006a1d
 8006a10:	08006a2d 	.word	0x08006a2d
 8006a14:	08006a25 	.word	0x08006a25
 8006a18:	08006a35 	.word	0x08006a35
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a22:	e116      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006a24:	2302      	movs	r3, #2
 8006a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a2a:	e112      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006a2c:	2304      	movs	r3, #4
 8006a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a32:	e10e      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006a34:	2308      	movs	r3, #8
 8006a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a3a:	e10a      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006a3c:	2310      	movs	r3, #16
 8006a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a42:	e106      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a7c      	ldr	r2, [pc, #496]	@ (8006c3c <UART_SetConfig+0x2e8>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d138      	bne.n	8006ac0 <UART_SetConfig+0x16c>
 8006a4e:	4b7a      	ldr	r3, [pc, #488]	@ (8006c38 <UART_SetConfig+0x2e4>)
 8006a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a54:	f003 030c 	and.w	r3, r3, #12
 8006a58:	2b0c      	cmp	r3, #12
 8006a5a:	d82d      	bhi.n	8006ab8 <UART_SetConfig+0x164>
 8006a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a64 <UART_SetConfig+0x110>)
 8006a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a62:	bf00      	nop
 8006a64:	08006a99 	.word	0x08006a99
 8006a68:	08006ab9 	.word	0x08006ab9
 8006a6c:	08006ab9 	.word	0x08006ab9
 8006a70:	08006ab9 	.word	0x08006ab9
 8006a74:	08006aa9 	.word	0x08006aa9
 8006a78:	08006ab9 	.word	0x08006ab9
 8006a7c:	08006ab9 	.word	0x08006ab9
 8006a80:	08006ab9 	.word	0x08006ab9
 8006a84:	08006aa1 	.word	0x08006aa1
 8006a88:	08006ab9 	.word	0x08006ab9
 8006a8c:	08006ab9 	.word	0x08006ab9
 8006a90:	08006ab9 	.word	0x08006ab9
 8006a94:	08006ab1 	.word	0x08006ab1
 8006a98:	2300      	movs	r3, #0
 8006a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a9e:	e0d8      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aa6:	e0d4      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006aa8:	2304      	movs	r3, #4
 8006aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aae:	e0d0      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006ab0:	2308      	movs	r3, #8
 8006ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ab6:	e0cc      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006ab8:	2310      	movs	r3, #16
 8006aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006abe:	e0c8      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a5e      	ldr	r2, [pc, #376]	@ (8006c40 <UART_SetConfig+0x2ec>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d125      	bne.n	8006b16 <UART_SetConfig+0x1c2>
 8006aca:	4b5b      	ldr	r3, [pc, #364]	@ (8006c38 <UART_SetConfig+0x2e4>)
 8006acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ad0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006ad4:	2b30      	cmp	r3, #48	@ 0x30
 8006ad6:	d016      	beq.n	8006b06 <UART_SetConfig+0x1b2>
 8006ad8:	2b30      	cmp	r3, #48	@ 0x30
 8006ada:	d818      	bhi.n	8006b0e <UART_SetConfig+0x1ba>
 8006adc:	2b20      	cmp	r3, #32
 8006ade:	d00a      	beq.n	8006af6 <UART_SetConfig+0x1a2>
 8006ae0:	2b20      	cmp	r3, #32
 8006ae2:	d814      	bhi.n	8006b0e <UART_SetConfig+0x1ba>
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <UART_SetConfig+0x19a>
 8006ae8:	2b10      	cmp	r3, #16
 8006aea:	d008      	beq.n	8006afe <UART_SetConfig+0x1aa>
 8006aec:	e00f      	b.n	8006b0e <UART_SetConfig+0x1ba>
 8006aee:	2300      	movs	r3, #0
 8006af0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006af4:	e0ad      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006af6:	2302      	movs	r3, #2
 8006af8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006afc:	e0a9      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006afe:	2304      	movs	r3, #4
 8006b00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b04:	e0a5      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006b06:	2308      	movs	r3, #8
 8006b08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b0c:	e0a1      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006b0e:	2310      	movs	r3, #16
 8006b10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b14:	e09d      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a4a      	ldr	r2, [pc, #296]	@ (8006c44 <UART_SetConfig+0x2f0>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d125      	bne.n	8006b6c <UART_SetConfig+0x218>
 8006b20:	4b45      	ldr	r3, [pc, #276]	@ (8006c38 <UART_SetConfig+0x2e4>)
 8006b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b2c:	d016      	beq.n	8006b5c <UART_SetConfig+0x208>
 8006b2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b30:	d818      	bhi.n	8006b64 <UART_SetConfig+0x210>
 8006b32:	2b80      	cmp	r3, #128	@ 0x80
 8006b34:	d00a      	beq.n	8006b4c <UART_SetConfig+0x1f8>
 8006b36:	2b80      	cmp	r3, #128	@ 0x80
 8006b38:	d814      	bhi.n	8006b64 <UART_SetConfig+0x210>
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d002      	beq.n	8006b44 <UART_SetConfig+0x1f0>
 8006b3e:	2b40      	cmp	r3, #64	@ 0x40
 8006b40:	d008      	beq.n	8006b54 <UART_SetConfig+0x200>
 8006b42:	e00f      	b.n	8006b64 <UART_SetConfig+0x210>
 8006b44:	2300      	movs	r3, #0
 8006b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b4a:	e082      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b52:	e07e      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006b54:	2304      	movs	r3, #4
 8006b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b5a:	e07a      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006b5c:	2308      	movs	r3, #8
 8006b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b62:	e076      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006b64:	2310      	movs	r3, #16
 8006b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b6a:	e072      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a35      	ldr	r2, [pc, #212]	@ (8006c48 <UART_SetConfig+0x2f4>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d12a      	bne.n	8006bcc <UART_SetConfig+0x278>
 8006b76:	4b30      	ldr	r3, [pc, #192]	@ (8006c38 <UART_SetConfig+0x2e4>)
 8006b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b84:	d01a      	beq.n	8006bbc <UART_SetConfig+0x268>
 8006b86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b8a:	d81b      	bhi.n	8006bc4 <UART_SetConfig+0x270>
 8006b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b90:	d00c      	beq.n	8006bac <UART_SetConfig+0x258>
 8006b92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b96:	d815      	bhi.n	8006bc4 <UART_SetConfig+0x270>
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d003      	beq.n	8006ba4 <UART_SetConfig+0x250>
 8006b9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ba0:	d008      	beq.n	8006bb4 <UART_SetConfig+0x260>
 8006ba2:	e00f      	b.n	8006bc4 <UART_SetConfig+0x270>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006baa:	e052      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006bac:	2302      	movs	r3, #2
 8006bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bb2:	e04e      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006bb4:	2304      	movs	r3, #4
 8006bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bba:	e04a      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006bbc:	2308      	movs	r3, #8
 8006bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bc2:	e046      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006bc4:	2310      	movs	r3, #16
 8006bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bca:	e042      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a17      	ldr	r2, [pc, #92]	@ (8006c30 <UART_SetConfig+0x2dc>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d13a      	bne.n	8006c4c <UART_SetConfig+0x2f8>
 8006bd6:	4b18      	ldr	r3, [pc, #96]	@ (8006c38 <UART_SetConfig+0x2e4>)
 8006bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bdc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006be0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006be4:	d01a      	beq.n	8006c1c <UART_SetConfig+0x2c8>
 8006be6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006bea:	d81b      	bhi.n	8006c24 <UART_SetConfig+0x2d0>
 8006bec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bf0:	d00c      	beq.n	8006c0c <UART_SetConfig+0x2b8>
 8006bf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bf6:	d815      	bhi.n	8006c24 <UART_SetConfig+0x2d0>
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d003      	beq.n	8006c04 <UART_SetConfig+0x2b0>
 8006bfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c00:	d008      	beq.n	8006c14 <UART_SetConfig+0x2c0>
 8006c02:	e00f      	b.n	8006c24 <UART_SetConfig+0x2d0>
 8006c04:	2300      	movs	r3, #0
 8006c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c0a:	e022      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c12:	e01e      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006c14:	2304      	movs	r3, #4
 8006c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c1a:	e01a      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006c1c:	2308      	movs	r3, #8
 8006c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c22:	e016      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006c24:	2310      	movs	r3, #16
 8006c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c2a:	e012      	b.n	8006c52 <UART_SetConfig+0x2fe>
 8006c2c:	cfff69f3 	.word	0xcfff69f3
 8006c30:	40008000 	.word	0x40008000
 8006c34:	40013800 	.word	0x40013800
 8006c38:	40021000 	.word	0x40021000
 8006c3c:	40004400 	.word	0x40004400
 8006c40:	40004800 	.word	0x40004800
 8006c44:	40004c00 	.word	0x40004c00
 8006c48:	40005000 	.word	0x40005000
 8006c4c:	2310      	movs	r3, #16
 8006c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4aae      	ldr	r2, [pc, #696]	@ (8006f10 <UART_SetConfig+0x5bc>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	f040 8097 	bne.w	8006d8c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c5e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c62:	2b08      	cmp	r3, #8
 8006c64:	d823      	bhi.n	8006cae <UART_SetConfig+0x35a>
 8006c66:	a201      	add	r2, pc, #4	@ (adr r2, 8006c6c <UART_SetConfig+0x318>)
 8006c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6c:	08006c91 	.word	0x08006c91
 8006c70:	08006caf 	.word	0x08006caf
 8006c74:	08006c99 	.word	0x08006c99
 8006c78:	08006caf 	.word	0x08006caf
 8006c7c:	08006c9f 	.word	0x08006c9f
 8006c80:	08006caf 	.word	0x08006caf
 8006c84:	08006caf 	.word	0x08006caf
 8006c88:	08006caf 	.word	0x08006caf
 8006c8c:	08006ca7 	.word	0x08006ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c90:	f7fd f872 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
 8006c94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c96:	e010      	b.n	8006cba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c98:	4b9e      	ldr	r3, [pc, #632]	@ (8006f14 <UART_SetConfig+0x5c0>)
 8006c9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c9c:	e00d      	b.n	8006cba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c9e:	f7fc fffd 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 8006ca2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ca4:	e009      	b.n	8006cba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ca6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006caa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cac:	e005      	b.n	8006cba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006cb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 8130 	beq.w	8006f22 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc6:	4a94      	ldr	r2, [pc, #592]	@ (8006f18 <UART_SetConfig+0x5c4>)
 8006cc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ccc:	461a      	mov	r2, r3
 8006cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cd4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	005b      	lsls	r3, r3, #1
 8006cde:	4413      	add	r3, r2
 8006ce0:	69ba      	ldr	r2, [r7, #24]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d305      	bcc.n	8006cf2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d903      	bls.n	8006cfa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006cf8:	e113      	b.n	8006f22 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	60bb      	str	r3, [r7, #8]
 8006d00:	60fa      	str	r2, [r7, #12]
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d06:	4a84      	ldr	r2, [pc, #528]	@ (8006f18 <UART_SetConfig+0x5c4>)
 8006d08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	2200      	movs	r2, #0
 8006d10:	603b      	str	r3, [r7, #0]
 8006d12:	607a      	str	r2, [r7, #4]
 8006d14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d1c:	f7f9 fae8 	bl	80002f0 <__aeabi_uldivmod>
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	4610      	mov	r0, r2
 8006d26:	4619      	mov	r1, r3
 8006d28:	f04f 0200 	mov.w	r2, #0
 8006d2c:	f04f 0300 	mov.w	r3, #0
 8006d30:	020b      	lsls	r3, r1, #8
 8006d32:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d36:	0202      	lsls	r2, r0, #8
 8006d38:	6979      	ldr	r1, [r7, #20]
 8006d3a:	6849      	ldr	r1, [r1, #4]
 8006d3c:	0849      	lsrs	r1, r1, #1
 8006d3e:	2000      	movs	r0, #0
 8006d40:	460c      	mov	r4, r1
 8006d42:	4605      	mov	r5, r0
 8006d44:	eb12 0804 	adds.w	r8, r2, r4
 8006d48:	eb43 0905 	adc.w	r9, r3, r5
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	469a      	mov	sl, r3
 8006d54:	4693      	mov	fp, r2
 8006d56:	4652      	mov	r2, sl
 8006d58:	465b      	mov	r3, fp
 8006d5a:	4640      	mov	r0, r8
 8006d5c:	4649      	mov	r1, r9
 8006d5e:	f7f9 fac7 	bl	80002f0 <__aeabi_uldivmod>
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	4613      	mov	r3, r2
 8006d68:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d6a:	6a3b      	ldr	r3, [r7, #32]
 8006d6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d70:	d308      	bcc.n	8006d84 <UART_SetConfig+0x430>
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d78:	d204      	bcs.n	8006d84 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6a3a      	ldr	r2, [r7, #32]
 8006d80:	60da      	str	r2, [r3, #12]
 8006d82:	e0ce      	b.n	8006f22 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d8a:	e0ca      	b.n	8006f22 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	69db      	ldr	r3, [r3, #28]
 8006d90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d94:	d166      	bne.n	8006e64 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006d96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d9a:	2b08      	cmp	r3, #8
 8006d9c:	d827      	bhi.n	8006dee <UART_SetConfig+0x49a>
 8006d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8006da4 <UART_SetConfig+0x450>)
 8006da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da4:	08006dc9 	.word	0x08006dc9
 8006da8:	08006dd1 	.word	0x08006dd1
 8006dac:	08006dd9 	.word	0x08006dd9
 8006db0:	08006def 	.word	0x08006def
 8006db4:	08006ddf 	.word	0x08006ddf
 8006db8:	08006def 	.word	0x08006def
 8006dbc:	08006def 	.word	0x08006def
 8006dc0:	08006def 	.word	0x08006def
 8006dc4:	08006de7 	.word	0x08006de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dc8:	f7fc ffd6 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
 8006dcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dce:	e014      	b.n	8006dfa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dd0:	f7fc ffe8 	bl	8003da4 <HAL_RCC_GetPCLK2Freq>
 8006dd4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dd6:	e010      	b.n	8006dfa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dd8:	4b4e      	ldr	r3, [pc, #312]	@ (8006f14 <UART_SetConfig+0x5c0>)
 8006dda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ddc:	e00d      	b.n	8006dfa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dde:	f7fc ff5d 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 8006de2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006de4:	e009      	b.n	8006dfa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006dec:	e005      	b.n	8006dfa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006df8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 8090 	beq.w	8006f22 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e06:	4a44      	ldr	r2, [pc, #272]	@ (8006f18 <UART_SetConfig+0x5c4>)
 8006e08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e10:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e14:	005a      	lsls	r2, r3, #1
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	085b      	lsrs	r3, r3, #1
 8006e1c:	441a      	add	r2, r3
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	2b0f      	cmp	r3, #15
 8006e2c:	d916      	bls.n	8006e5c <UART_SetConfig+0x508>
 8006e2e:	6a3b      	ldr	r3, [r7, #32]
 8006e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e34:	d212      	bcs.n	8006e5c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	f023 030f 	bic.w	r3, r3, #15
 8006e3e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	085b      	lsrs	r3, r3, #1
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	f003 0307 	and.w	r3, r3, #7
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	8bfb      	ldrh	r3, [r7, #30]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	8bfa      	ldrh	r2, [r7, #30]
 8006e58:	60da      	str	r2, [r3, #12]
 8006e5a:	e062      	b.n	8006f22 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e62:	e05e      	b.n	8006f22 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e68:	2b08      	cmp	r3, #8
 8006e6a:	d828      	bhi.n	8006ebe <UART_SetConfig+0x56a>
 8006e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e74 <UART_SetConfig+0x520>)
 8006e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e72:	bf00      	nop
 8006e74:	08006e99 	.word	0x08006e99
 8006e78:	08006ea1 	.word	0x08006ea1
 8006e7c:	08006ea9 	.word	0x08006ea9
 8006e80:	08006ebf 	.word	0x08006ebf
 8006e84:	08006eaf 	.word	0x08006eaf
 8006e88:	08006ebf 	.word	0x08006ebf
 8006e8c:	08006ebf 	.word	0x08006ebf
 8006e90:	08006ebf 	.word	0x08006ebf
 8006e94:	08006eb7 	.word	0x08006eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e98:	f7fc ff6e 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
 8006e9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e9e:	e014      	b.n	8006eca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ea0:	f7fc ff80 	bl	8003da4 <HAL_RCC_GetPCLK2Freq>
 8006ea4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ea6:	e010      	b.n	8006eca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8006f14 <UART_SetConfig+0x5c0>)
 8006eaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006eac:	e00d      	b.n	8006eca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eae:	f7fc fef5 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 8006eb2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006eb4:	e009      	b.n	8006eca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006eba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ebc:	e005      	b.n	8006eca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ec8:	bf00      	nop
    }

    if (pclk != 0U)
 8006eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d028      	beq.n	8006f22 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed4:	4a10      	ldr	r2, [pc, #64]	@ (8006f18 <UART_SetConfig+0x5c4>)
 8006ed6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006eda:	461a      	mov	r2, r3
 8006edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ede:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	085b      	lsrs	r3, r3, #1
 8006ee8:	441a      	add	r2, r3
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	2b0f      	cmp	r3, #15
 8006ef8:	d910      	bls.n	8006f1c <UART_SetConfig+0x5c8>
 8006efa:	6a3b      	ldr	r3, [r7, #32]
 8006efc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f00:	d20c      	bcs.n	8006f1c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	60da      	str	r2, [r3, #12]
 8006f0c:	e009      	b.n	8006f22 <UART_SetConfig+0x5ce>
 8006f0e:	bf00      	nop
 8006f10:	40008000 	.word	0x40008000
 8006f14:	00f42400 	.word	0x00f42400
 8006f18:	0800982c 	.word	0x0800982c
      }
      else
      {
        ret = HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	2200      	movs	r2, #0
 8006f36:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006f3e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3730      	adds	r7, #48	@ 0x30
 8006f46:	46bd      	mov	sp, r7
 8006f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006f4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f58:	f003 0308 	and.w	r3, r3, #8
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00a      	beq.n	8006f76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00a      	beq.n	8006f98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	430a      	orrs	r2, r1
 8006f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9c:	f003 0302 	and.w	r3, r3, #2
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00a      	beq.n	8006fba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fbe:	f003 0304 	and.w	r3, r3, #4
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00a      	beq.n	8006fdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe0:	f003 0310 	and.w	r3, r3, #16
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00a      	beq.n	8006ffe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007002:	f003 0320 	and.w	r3, r3, #32
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00a      	beq.n	8007020 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	430a      	orrs	r2, r1
 800701e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007028:	2b00      	cmp	r3, #0
 800702a:	d01a      	beq.n	8007062 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007046:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800704a:	d10a      	bne.n	8007062 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	430a      	orrs	r2, r1
 8007060:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00a      	beq.n	8007084 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	430a      	orrs	r2, r1
 8007082:	605a      	str	r2, [r3, #4]
  }
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b098      	sub	sp, #96	@ 0x60
 8007094:	af02      	add	r7, sp, #8
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070a0:	f7fa fc90 	bl	80019c4 <HAL_GetTick>
 80070a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0308 	and.w	r3, r3, #8
 80070b0:	2b08      	cmp	r3, #8
 80070b2:	d12f      	bne.n	8007114 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070bc:	2200      	movs	r2, #0
 80070be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f88e 	bl	80071e4 <UART_WaitOnFlagUntilTimeout>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d022      	beq.n	8007114 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d6:	e853 3f00 	ldrex	r3, [r3]
 80070da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80070dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	461a      	mov	r2, r3
 80070ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80070ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070f4:	e841 2300 	strex	r3, r2, [r1]
 80070f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1e6      	bne.n	80070ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2220      	movs	r2, #32
 8007104:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e063      	b.n	80071dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0304 	and.w	r3, r3, #4
 800711e:	2b04      	cmp	r3, #4
 8007120:	d149      	bne.n	80071b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007122:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800712a:	2200      	movs	r2, #0
 800712c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f857 	bl	80071e4 <UART_WaitOnFlagUntilTimeout>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d03c      	beq.n	80071b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007144:	e853 3f00 	ldrex	r3, [r3]
 8007148:	623b      	str	r3, [r7, #32]
   return(result);
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007150:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800715a:	633b      	str	r3, [r7, #48]	@ 0x30
 800715c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007162:	e841 2300 	strex	r3, r2, [r1]
 8007166:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1e6      	bne.n	800713c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3308      	adds	r3, #8
 8007174:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	e853 3f00 	ldrex	r3, [r3]
 800717c:	60fb      	str	r3, [r7, #12]
   return(result);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f023 0301 	bic.w	r3, r3, #1
 8007184:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3308      	adds	r3, #8
 800718c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800718e:	61fa      	str	r2, [r7, #28]
 8007190:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	69b9      	ldr	r1, [r7, #24]
 8007194:	69fa      	ldr	r2, [r7, #28]
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	617b      	str	r3, [r7, #20]
   return(result);
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e5      	bne.n	800716e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e012      	b.n	80071dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2220      	movs	r2, #32
 80071ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2220      	movs	r2, #32
 80071c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3758      	adds	r7, #88	@ 0x58
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	603b      	str	r3, [r7, #0]
 80071f0:	4613      	mov	r3, r2
 80071f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071f4:	e04f      	b.n	8007296 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071fc:	d04b      	beq.n	8007296 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071fe:	f7fa fbe1 	bl	80019c4 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	69ba      	ldr	r2, [r7, #24]
 800720a:	429a      	cmp	r2, r3
 800720c:	d302      	bcc.n	8007214 <UART_WaitOnFlagUntilTimeout+0x30>
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e04e      	b.n	80072b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0304 	and.w	r3, r3, #4
 8007222:	2b00      	cmp	r3, #0
 8007224:	d037      	beq.n	8007296 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2b80      	cmp	r3, #128	@ 0x80
 800722a:	d034      	beq.n	8007296 <UART_WaitOnFlagUntilTimeout+0xb2>
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	2b40      	cmp	r3, #64	@ 0x40
 8007230:	d031      	beq.n	8007296 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	f003 0308 	and.w	r3, r3, #8
 800723c:	2b08      	cmp	r3, #8
 800723e:	d110      	bne.n	8007262 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2208      	movs	r2, #8
 8007246:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f000 f95b 	bl	8007504 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2208      	movs	r2, #8
 8007252:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e029      	b.n	80072b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800726c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007270:	d111      	bne.n	8007296 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800727a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 f941 	bl	8007504 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2220      	movs	r2, #32
 8007286:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e00f      	b.n	80072b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	69da      	ldr	r2, [r3, #28]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	4013      	ands	r3, r2
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	bf0c      	ite	eq
 80072a6:	2301      	moveq	r3, #1
 80072a8:	2300      	movne	r3, #0
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	461a      	mov	r2, r3
 80072ae:	79fb      	ldrb	r3, [r7, #7]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d0a0      	beq.n	80071f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
	...

080072c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b0a3      	sub	sp, #140	@ 0x8c
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	4613      	mov	r3, r2
 80072cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	88fa      	ldrh	r2, [r7, #6]
 80072d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	88fa      	ldrh	r2, [r7, #6]
 80072e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072f2:	d10e      	bne.n	8007312 <UART_Start_Receive_IT+0x52>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d105      	bne.n	8007308 <UART_Start_Receive_IT+0x48>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007302:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007306:	e02d      	b.n	8007364 <UART_Start_Receive_IT+0xa4>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	22ff      	movs	r2, #255	@ 0xff
 800730c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007310:	e028      	b.n	8007364 <UART_Start_Receive_IT+0xa4>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10d      	bne.n	8007336 <UART_Start_Receive_IT+0x76>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d104      	bne.n	800732c <UART_Start_Receive_IT+0x6c>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	22ff      	movs	r2, #255	@ 0xff
 8007326:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800732a:	e01b      	b.n	8007364 <UART_Start_Receive_IT+0xa4>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	227f      	movs	r2, #127	@ 0x7f
 8007330:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007334:	e016      	b.n	8007364 <UART_Start_Receive_IT+0xa4>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800733e:	d10d      	bne.n	800735c <UART_Start_Receive_IT+0x9c>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d104      	bne.n	8007352 <UART_Start_Receive_IT+0x92>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	227f      	movs	r2, #127	@ 0x7f
 800734c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007350:	e008      	b.n	8007364 <UART_Start_Receive_IT+0xa4>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	223f      	movs	r2, #63	@ 0x3f
 8007356:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800735a:	e003      	b.n	8007364 <UART_Start_Receive_IT+0xa4>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2222      	movs	r2, #34	@ 0x22
 8007370:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3308      	adds	r3, #8
 800737a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800737e:	e853 3f00 	ldrex	r3, [r3]
 8007382:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007384:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007386:	f043 0301 	orr.w	r3, r3, #1
 800738a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3308      	adds	r3, #8
 8007394:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007398:	673a      	str	r2, [r7, #112]	@ 0x70
 800739a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800739e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80073a0:	e841 2300 	strex	r3, r2, [r1]
 80073a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80073a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1e3      	bne.n	8007374 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073b4:	d14f      	bne.n	8007456 <UART_Start_Receive_IT+0x196>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80073bc:	88fa      	ldrh	r2, [r7, #6]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d349      	bcc.n	8007456 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073ca:	d107      	bne.n	80073dc <UART_Start_Receive_IT+0x11c>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d103      	bne.n	80073dc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	4a47      	ldr	r2, [pc, #284]	@ (80074f4 <UART_Start_Receive_IT+0x234>)
 80073d8:	675a      	str	r2, [r3, #116]	@ 0x74
 80073da:	e002      	b.n	80073e2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	4a46      	ldr	r2, [pc, #280]	@ (80074f8 <UART_Start_Receive_IT+0x238>)
 80073e0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d01a      	beq.n	8007420 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073f2:	e853 3f00 	ldrex	r3, [r3]
 80073f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80073f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800740c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800740e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007410:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007412:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007414:	e841 2300 	strex	r3, r2, [r1]
 8007418:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800741a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1e4      	bne.n	80073ea <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3308      	adds	r3, #8
 8007426:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800742a:	e853 3f00 	ldrex	r3, [r3]
 800742e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007432:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007436:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3308      	adds	r3, #8
 800743e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007440:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007442:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007444:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007446:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007448:	e841 2300 	strex	r3, r2, [r1]
 800744c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800744e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1e5      	bne.n	8007420 <UART_Start_Receive_IT+0x160>
 8007454:	e046      	b.n	80074e4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800745e:	d107      	bne.n	8007470 <UART_Start_Receive_IT+0x1b0>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d103      	bne.n	8007470 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	4a24      	ldr	r2, [pc, #144]	@ (80074fc <UART_Start_Receive_IT+0x23c>)
 800746c:	675a      	str	r2, [r3, #116]	@ 0x74
 800746e:	e002      	b.n	8007476 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	4a23      	ldr	r2, [pc, #140]	@ (8007500 <UART_Start_Receive_IT+0x240>)
 8007474:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d019      	beq.n	80074b2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007486:	e853 3f00 	ldrex	r3, [r3]
 800748a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800748c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007492:	677b      	str	r3, [r7, #116]	@ 0x74
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	461a      	mov	r2, r3
 800749a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800749c:	637b      	str	r3, [r7, #52]	@ 0x34
 800749e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80074a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074a4:	e841 2300 	strex	r3, r2, [r1]
 80074a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80074aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1e6      	bne.n	800747e <UART_Start_Receive_IT+0x1be>
 80074b0:	e018      	b.n	80074e4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	e853 3f00 	ldrex	r3, [r3]
 80074be:	613b      	str	r3, [r7, #16]
   return(result);
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	f043 0320 	orr.w	r3, r3, #32
 80074c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	461a      	mov	r2, r3
 80074ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074d0:	623b      	str	r3, [r7, #32]
 80074d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d4:	69f9      	ldr	r1, [r7, #28]
 80074d6:	6a3a      	ldr	r2, [r7, #32]
 80074d8:	e841 2300 	strex	r3, r2, [r1]
 80074dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1e6      	bne.n	80074b2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	378c      	adds	r7, #140	@ 0x8c
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	08007d21 	.word	0x08007d21
 80074f8:	080079bd 	.word	0x080079bd
 80074fc:	08007805 	.word	0x08007805
 8007500:	0800764d 	.word	0x0800764d

08007504 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007504:	b480      	push	{r7}
 8007506:	b095      	sub	sp, #84	@ 0x54
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800751a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007520:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	461a      	mov	r2, r3
 8007528:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800752a:	643b      	str	r3, [r7, #64]	@ 0x40
 800752c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007530:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e6      	bne.n	800750c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3308      	adds	r3, #8
 8007544:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	61fb      	str	r3, [r7, #28]
   return(result);
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007554:	f023 0301 	bic.w	r3, r3, #1
 8007558:	64bb      	str	r3, [r7, #72]	@ 0x48
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	3308      	adds	r3, #8
 8007560:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007562:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007564:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007566:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007568:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800756a:	e841 2300 	strex	r3, r2, [r1]
 800756e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1e3      	bne.n	800753e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800757a:	2b01      	cmp	r3, #1
 800757c:	d118      	bne.n	80075b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	e853 3f00 	ldrex	r3, [r3]
 800758a:	60bb      	str	r3, [r7, #8]
   return(result);
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	f023 0310 	bic.w	r3, r3, #16
 8007592:	647b      	str	r3, [r7, #68]	@ 0x44
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	461a      	mov	r2, r3
 800759a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800759c:	61bb      	str	r3, [r7, #24]
 800759e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a0:	6979      	ldr	r1, [r7, #20]
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	e841 2300 	strex	r3, r2, [r1]
 80075a8:	613b      	str	r3, [r7, #16]
   return(result);
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1e6      	bne.n	800757e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2220      	movs	r2, #32
 80075b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80075c4:	bf00      	nop
 80075c6:	3754      	adds	r7, #84	@ 0x54
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f7ff f99e 	bl	8006928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075ec:	bf00      	nop
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b088      	sub	sp, #32
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	e853 3f00 	ldrex	r3, [r3]
 8007608:	60bb      	str	r3, [r7, #8]
   return(result);
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007610:	61fb      	str	r3, [r7, #28]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	461a      	mov	r2, r3
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	61bb      	str	r3, [r7, #24]
 800761c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761e:	6979      	ldr	r1, [r7, #20]
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	e841 2300 	strex	r3, r2, [r1]
 8007626:	613b      	str	r3, [r7, #16]
   return(result);
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1e6      	bne.n	80075fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2220      	movs	r2, #32
 8007632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7ff f969 	bl	8006914 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007642:	bf00      	nop
 8007644:	3720      	adds	r7, #32
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
	...

0800764c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b09c      	sub	sp, #112	@ 0x70
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800765a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007664:	2b22      	cmp	r3, #34	@ 0x22
 8007666:	f040 80be 	bne.w	80077e6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007670:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007674:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007678:	b2d9      	uxtb	r1, r3
 800767a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800767e:	b2da      	uxtb	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007684:	400a      	ands	r2, r1
 8007686:	b2d2      	uxtb	r2, r2
 8007688:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800768e:	1c5a      	adds	r2, r3, #1
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800769a:	b29b      	uxth	r3, r3
 800769c:	3b01      	subs	r3, #1
 800769e:	b29a      	uxth	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f040 80a1 	bne.w	80077f6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076bc:	e853 3f00 	ldrex	r3, [r3]
 80076c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80076c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	461a      	mov	r2, r3
 80076d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80076d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80076d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076da:	e841 2300 	strex	r3, r2, [r1]
 80076de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80076e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1e6      	bne.n	80076b4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	3308      	adds	r3, #8
 80076ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f0:	e853 3f00 	ldrex	r3, [r3]
 80076f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076f8:	f023 0301 	bic.w	r3, r3, #1
 80076fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3308      	adds	r3, #8
 8007704:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007706:	647a      	str	r2, [r7, #68]	@ 0x44
 8007708:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800770c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800770e:	e841 2300 	strex	r3, r2, [r1]
 8007712:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1e5      	bne.n	80076e6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2220      	movs	r2, #32
 800771e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a33      	ldr	r2, [pc, #204]	@ (8007800 <UART_RxISR_8BIT+0x1b4>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d01f      	beq.n	8007778 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d018      	beq.n	8007778 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774e:	e853 3f00 	ldrex	r3, [r3]
 8007752:	623b      	str	r3, [r7, #32]
   return(result);
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800775a:	663b      	str	r3, [r7, #96]	@ 0x60
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	461a      	mov	r2, r3
 8007762:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007764:	633b      	str	r3, [r7, #48]	@ 0x30
 8007766:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007768:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800776a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800776c:	e841 2300 	strex	r3, r2, [r1]
 8007770:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1e6      	bne.n	8007746 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800777c:	2b01      	cmp	r3, #1
 800777e:	d12e      	bne.n	80077de <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	e853 3f00 	ldrex	r3, [r3]
 8007792:	60fb      	str	r3, [r7, #12]
   return(result);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f023 0310 	bic.w	r3, r3, #16
 800779a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	461a      	mov	r2, r3
 80077a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077a4:	61fb      	str	r3, [r7, #28]
 80077a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a8:	69b9      	ldr	r1, [r7, #24]
 80077aa:	69fa      	ldr	r2, [r7, #28]
 80077ac:	e841 2300 	strex	r3, r2, [r1]
 80077b0:	617b      	str	r3, [r7, #20]
   return(result);
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1e6      	bne.n	8007786 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	69db      	ldr	r3, [r3, #28]
 80077be:	f003 0310 	and.w	r3, r3, #16
 80077c2:	2b10      	cmp	r3, #16
 80077c4:	d103      	bne.n	80077ce <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2210      	movs	r2, #16
 80077cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077d4:	4619      	mov	r1, r3
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f7ff f8b0 	bl	800693c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077dc:	e00b      	b.n	80077f6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7fa f886 	bl	80018f0 <HAL_UART_RxCpltCallback>
}
 80077e4:	e007      	b.n	80077f6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	699a      	ldr	r2, [r3, #24]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f042 0208 	orr.w	r2, r2, #8
 80077f4:	619a      	str	r2, [r3, #24]
}
 80077f6:	bf00      	nop
 80077f8:	3770      	adds	r7, #112	@ 0x70
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	40008000 	.word	0x40008000

08007804 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b09c      	sub	sp, #112	@ 0x70
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007812:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800781c:	2b22      	cmp	r3, #34	@ 0x22
 800781e:	f040 80be 	bne.w	800799e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007828:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007830:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007832:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007836:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800783a:	4013      	ands	r3, r2
 800783c:	b29a      	uxth	r2, r3
 800783e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007840:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007846:	1c9a      	adds	r2, r3, #2
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007852:	b29b      	uxth	r3, r3
 8007854:	3b01      	subs	r3, #1
 8007856:	b29a      	uxth	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007864:	b29b      	uxth	r3, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	f040 80a1 	bne.w	80079ae <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007872:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007874:	e853 3f00 	ldrex	r3, [r3]
 8007878:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800787a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800787c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007880:	667b      	str	r3, [r7, #100]	@ 0x64
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800788a:	657b      	str	r3, [r7, #84]	@ 0x54
 800788c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007890:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007892:	e841 2300 	strex	r3, r2, [r1]
 8007896:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1e6      	bne.n	800786c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3308      	adds	r3, #8
 80078a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078a8:	e853 3f00 	ldrex	r3, [r3]
 80078ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b0:	f023 0301 	bic.w	r3, r3, #1
 80078b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3308      	adds	r3, #8
 80078bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80078be:	643a      	str	r2, [r7, #64]	@ 0x40
 80078c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80078c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e5      	bne.n	800789e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2220      	movs	r2, #32
 80078d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a33      	ldr	r2, [pc, #204]	@ (80079b8 <UART_RxISR_16BIT+0x1b4>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d01f      	beq.n	8007930 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d018      	beq.n	8007930 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007904:	6a3b      	ldr	r3, [r7, #32]
 8007906:	e853 3f00 	ldrex	r3, [r3]
 800790a:	61fb      	str	r3, [r7, #28]
   return(result);
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007912:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	461a      	mov	r2, r3
 800791a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800791c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800791e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007920:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007922:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007924:	e841 2300 	strex	r3, r2, [r1]
 8007928:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800792a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1e6      	bne.n	80078fe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007934:	2b01      	cmp	r3, #1
 8007936:	d12e      	bne.n	8007996 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	e853 3f00 	ldrex	r3, [r3]
 800794a:	60bb      	str	r3, [r7, #8]
   return(result);
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	f023 0310 	bic.w	r3, r3, #16
 8007952:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	461a      	mov	r2, r3
 800795a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800795c:	61bb      	str	r3, [r7, #24]
 800795e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007960:	6979      	ldr	r1, [r7, #20]
 8007962:	69ba      	ldr	r2, [r7, #24]
 8007964:	e841 2300 	strex	r3, r2, [r1]
 8007968:	613b      	str	r3, [r7, #16]
   return(result);
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1e6      	bne.n	800793e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	69db      	ldr	r3, [r3, #28]
 8007976:	f003 0310 	and.w	r3, r3, #16
 800797a:	2b10      	cmp	r3, #16
 800797c:	d103      	bne.n	8007986 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2210      	movs	r2, #16
 8007984:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800798c:	4619      	mov	r1, r3
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7fe ffd4 	bl	800693c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007994:	e00b      	b.n	80079ae <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f7f9 ffaa 	bl	80018f0 <HAL_UART_RxCpltCallback>
}
 800799c:	e007      	b.n	80079ae <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	699a      	ldr	r2, [r3, #24]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f042 0208 	orr.w	r2, r2, #8
 80079ac:	619a      	str	r2, [r3, #24]
}
 80079ae:	bf00      	nop
 80079b0:	3770      	adds	r7, #112	@ 0x70
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	40008000 	.word	0x40008000

080079bc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b0ac      	sub	sp, #176	@ 0xb0
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80079ca:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	69db      	ldr	r3, [r3, #28]
 80079d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079f2:	2b22      	cmp	r3, #34	@ 0x22
 80079f4:	f040 8183 	bne.w	8007cfe <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80079fe:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a02:	e126      	b.n	8007c52 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a0a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a0e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007a12:	b2d9      	uxtb	r1, r3
 8007a14:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a1e:	400a      	ands	r2, r1
 8007a20:	b2d2      	uxtb	r2, r2
 8007a22:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a28:	1c5a      	adds	r2, r3, #1
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	3b01      	subs	r3, #1
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a4e:	f003 0307 	and.w	r3, r3, #7
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d053      	beq.n	8007afe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d011      	beq.n	8007a86 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007a62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00b      	beq.n	8007a86 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2201      	movs	r2, #1
 8007a74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a7c:	f043 0201 	orr.w	r2, r3, #1
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a8a:	f003 0302 	and.w	r3, r3, #2
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d011      	beq.n	8007ab6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007a92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00b      	beq.n	8007ab6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aac:	f043 0204 	orr.w	r2, r3, #4
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007aba:	f003 0304 	and.w	r3, r3, #4
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d011      	beq.n	8007ae6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007ac2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00b      	beq.n	8007ae6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2204      	movs	r2, #4
 8007ad4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007adc:	f043 0202 	orr.w	r2, r3, #2
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d006      	beq.n	8007afe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7fe ff19 	bl	8006928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f040 80a3 	bne.w	8007c52 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007b1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	461a      	mov	r2, r3
 8007b2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007b30:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b32:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007b34:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007b3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1e4      	bne.n	8007b0c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3308      	adds	r3, #8
 8007b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b4c:	e853 3f00 	ldrex	r3, [r3]
 8007b50:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007b52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b58:	f023 0301 	bic.w	r3, r3, #1
 8007b5c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3308      	adds	r3, #8
 8007b66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007b6a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007b6c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007b70:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007b72:	e841 2300 	strex	r3, r2, [r1]
 8007b76:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007b78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1e1      	bne.n	8007b42 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2220      	movs	r2, #32
 8007b82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a60      	ldr	r2, [pc, #384]	@ (8007d18 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d021      	beq.n	8007be0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d01a      	beq.n	8007be0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bb2:	e853 3f00 	ldrex	r3, [r3]
 8007bb6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007bb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007bbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007bcc:	657b      	str	r3, [r7, #84]	@ 0x54
 8007bce:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007bd2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007bd4:	e841 2300 	strex	r3, r2, [r1]
 8007bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007bda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1e4      	bne.n	8007baa <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d130      	bne.n	8007c4a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bf6:	e853 3f00 	ldrex	r3, [r3]
 8007bfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfe:	f023 0310 	bic.w	r3, r3, #16
 8007c02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c10:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c18:	e841 2300 	strex	r3, r2, [r1]
 8007c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1e4      	bne.n	8007bee <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	69db      	ldr	r3, [r3, #28]
 8007c2a:	f003 0310 	and.w	r3, r3, #16
 8007c2e:	2b10      	cmp	r3, #16
 8007c30:	d103      	bne.n	8007c3a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2210      	movs	r2, #16
 8007c38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c40:	4619      	mov	r1, r3
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7fe fe7a 	bl	800693c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007c48:	e00e      	b.n	8007c68 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f7f9 fe50 	bl	80018f0 <HAL_UART_RxCpltCallback>
        break;
 8007c50:	e00a      	b.n	8007c68 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c52:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d006      	beq.n	8007c68 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8007c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c5e:	f003 0320 	and.w	r3, r3, #32
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f47f aece 	bne.w	8007a04 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c6e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007c72:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d049      	beq.n	8007d0e <UART_RxISR_8BIT_FIFOEN+0x352>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007c80:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d242      	bcs.n	8007d0e <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3308      	adds	r3, #8
 8007c8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	e853 3f00 	ldrex	r3, [r3]
 8007c96:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007cac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007cae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cb4:	e841 2300 	strex	r3, r2, [r1]
 8007cb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1e3      	bne.n	8007c88 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a16      	ldr	r2, [pc, #88]	@ (8007d1c <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007cc4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	e853 3f00 	ldrex	r3, [r3]
 8007cd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	f043 0320 	orr.w	r3, r3, #32
 8007cda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007ce8:	61bb      	str	r3, [r7, #24]
 8007cea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cec:	6979      	ldr	r1, [r7, #20]
 8007cee:	69ba      	ldr	r2, [r7, #24]
 8007cf0:	e841 2300 	strex	r3, r2, [r1]
 8007cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1e4      	bne.n	8007cc6 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cfc:	e007      	b.n	8007d0e <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	699a      	ldr	r2, [r3, #24]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f042 0208 	orr.w	r2, r2, #8
 8007d0c:	619a      	str	r2, [r3, #24]
}
 8007d0e:	bf00      	nop
 8007d10:	37b0      	adds	r7, #176	@ 0xb0
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	40008000 	.word	0x40008000
 8007d1c:	0800764d 	.word	0x0800764d

08007d20 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b0ae      	sub	sp, #184	@ 0xb8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007d2e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	69db      	ldr	r3, [r3, #28]
 8007d38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d56:	2b22      	cmp	r3, #34	@ 0x22
 8007d58:	f040 8187 	bne.w	800806a <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007d62:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d66:	e12a      	b.n	8007fbe <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d6e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007d7a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007d7e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007d82:	4013      	ands	r3, r2
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d90:	1c9a      	adds	r2, r3, #2
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007db2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007db6:	f003 0307 	and.w	r3, r3, #7
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d053      	beq.n	8007e66 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007dbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d011      	beq.n	8007dee <UART_RxISR_16BIT_FIFOEN+0xce>
 8007dca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00b      	beq.n	8007dee <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007de4:	f043 0201 	orr.w	r2, r3, #1
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007df2:	f003 0302 	and.w	r3, r3, #2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d011      	beq.n	8007e1e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007dfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007dfe:	f003 0301 	and.w	r3, r3, #1
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00b      	beq.n	8007e1e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e14:	f043 0204 	orr.w	r2, r3, #4
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e22:	f003 0304 	and.w	r3, r3, #4
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d011      	beq.n	8007e4e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007e2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00b      	beq.n	8007e4e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2204      	movs	r2, #4
 8007e3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e44:	f043 0202 	orr.w	r2, r3, #2
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d006      	beq.n	8007e66 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f7fe fd65 	bl	8006928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f040 80a5 	bne.w	8007fbe <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e7c:	e853 3f00 	ldrex	r3, [r3]
 8007e80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007e82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	461a      	mov	r2, r3
 8007e92:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007e9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007ea2:	e841 2300 	strex	r3, r2, [r1]
 8007ea6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007ea8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1e2      	bne.n	8007e74 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3308      	adds	r3, #8
 8007eb4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007eb8:	e853 3f00 	ldrex	r3, [r3]
 8007ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007ebe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ec0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ec4:	f023 0301 	bic.w	r3, r3, #1
 8007ec8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3308      	adds	r3, #8
 8007ed2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007ed6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ed8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eda:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007edc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007ede:	e841 2300 	strex	r3, r2, [r1]
 8007ee2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ee4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1e1      	bne.n	8007eae <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2220      	movs	r2, #32
 8007eee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a60      	ldr	r2, [pc, #384]	@ (8008084 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d021      	beq.n	8007f4c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d01a      	beq.n	8007f4c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f1e:	e853 3f00 	ldrex	r3, [r3]
 8007f22:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007f24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007f38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f3a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f40:	e841 2300 	strex	r3, r2, [r1]
 8007f44:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1e4      	bne.n	8007f16 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d130      	bne.n	8007fb6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f62:	e853 3f00 	ldrex	r3, [r3]
 8007f66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f6a:	f023 0310 	bic.w	r3, r3, #16
 8007f6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	461a      	mov	r2, r3
 8007f78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f84:	e841 2300 	strex	r3, r2, [r1]
 8007f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1e4      	bne.n	8007f5a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	69db      	ldr	r3, [r3, #28]
 8007f96:	f003 0310 	and.w	r3, r3, #16
 8007f9a:	2b10      	cmp	r3, #16
 8007f9c:	d103      	bne.n	8007fa6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2210      	movs	r2, #16
 8007fa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007fac:	4619      	mov	r1, r3
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f7fe fcc4 	bl	800693c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007fb4:	e00e      	b.n	8007fd4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7f9 fc9a 	bl	80018f0 <HAL_UART_RxCpltCallback>
        break;
 8007fbc:	e00a      	b.n	8007fd4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007fbe:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d006      	beq.n	8007fd4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8007fc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007fca:	f003 0320 	and.w	r3, r3, #32
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f47f aeca 	bne.w	8007d68 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007fda:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007fde:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d049      	beq.n	800807a <UART_RxISR_16BIT_FIFOEN+0x35a>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007fec:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d242      	bcs.n	800807a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffe:	e853 3f00 	ldrex	r3, [r3]
 8008002:	623b      	str	r3, [r7, #32]
   return(result);
 8008004:	6a3b      	ldr	r3, [r7, #32]
 8008006:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800800a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	3308      	adds	r3, #8
 8008014:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008018:	633a      	str	r2, [r7, #48]	@ 0x30
 800801a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800801e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008020:	e841 2300 	strex	r3, r2, [r1]
 8008024:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1e3      	bne.n	8007ff4 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a16      	ldr	r2, [pc, #88]	@ (8008088 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8008030:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	e853 3f00 	ldrex	r3, [r3]
 800803e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f043 0320 	orr.w	r3, r3, #32
 8008046:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	461a      	mov	r2, r3
 8008050:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008054:	61fb      	str	r3, [r7, #28]
 8008056:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008058:	69b9      	ldr	r1, [r7, #24]
 800805a:	69fa      	ldr	r2, [r7, #28]
 800805c:	e841 2300 	strex	r3, r2, [r1]
 8008060:	617b      	str	r3, [r7, #20]
   return(result);
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1e4      	bne.n	8008032 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008068:	e007      	b.n	800807a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	699a      	ldr	r2, [r3, #24]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f042 0208 	orr.w	r2, r2, #8
 8008078:	619a      	str	r2, [r3, #24]
}
 800807a:	bf00      	nop
 800807c:	37b8      	adds	r7, #184	@ 0xb8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	40008000 	.word	0x40008000
 8008088:	08007805 	.word	0x08007805

0800808c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008094:	bf00      	nop
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d101      	bne.n	80080de <HAL_UARTEx_DisableFifoMode+0x16>
 80080da:	2302      	movs	r3, #2
 80080dc:	e027      	b.n	800812e <HAL_UARTEx_DisableFifoMode+0x66>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2224      	movs	r2, #36	@ 0x24
 80080ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f022 0201 	bic.w	r2, r2, #1
 8008104:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800810c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2220      	movs	r2, #32
 8008120:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3714      	adds	r7, #20
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b084      	sub	sp, #16
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
 8008142:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800814a:	2b01      	cmp	r3, #1
 800814c:	d101      	bne.n	8008152 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800814e:	2302      	movs	r3, #2
 8008150:	e02d      	b.n	80081ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2224      	movs	r2, #36	@ 0x24
 800815e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f022 0201 	bic.w	r2, r2, #1
 8008178:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	683a      	ldr	r2, [r7, #0]
 800818a:	430a      	orrs	r2, r1
 800818c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f850 	bl	8008234 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2220      	movs	r2, #32
 80081a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b084      	sub	sp, #16
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
 80081be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d101      	bne.n	80081ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80081ca:	2302      	movs	r3, #2
 80081cc:	e02d      	b.n	800822a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2201      	movs	r2, #1
 80081d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2224      	movs	r2, #36	@ 0x24
 80081da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f022 0201 	bic.w	r2, r2, #1
 80081f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	683a      	ldr	r2, [r7, #0]
 8008206:	430a      	orrs	r2, r1
 8008208:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f812 	bl	8008234 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2220      	movs	r2, #32
 800821c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
	...

08008234 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008240:	2b00      	cmp	r3, #0
 8008242:	d108      	bne.n	8008256 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008254:	e031      	b.n	80082ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008256:	2308      	movs	r3, #8
 8008258:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800825a:	2308      	movs	r3, #8
 800825c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	0e5b      	lsrs	r3, r3, #25
 8008266:	b2db      	uxtb	r3, r3
 8008268:	f003 0307 	and.w	r3, r3, #7
 800826c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	0f5b      	lsrs	r3, r3, #29
 8008276:	b2db      	uxtb	r3, r3
 8008278:	f003 0307 	and.w	r3, r3, #7
 800827c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800827e:	7bbb      	ldrb	r3, [r7, #14]
 8008280:	7b3a      	ldrb	r2, [r7, #12]
 8008282:	4911      	ldr	r1, [pc, #68]	@ (80082c8 <UARTEx_SetNbDataToProcess+0x94>)
 8008284:	5c8a      	ldrb	r2, [r1, r2]
 8008286:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800828a:	7b3a      	ldrb	r2, [r7, #12]
 800828c:	490f      	ldr	r1, [pc, #60]	@ (80082cc <UARTEx_SetNbDataToProcess+0x98>)
 800828e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008290:	fb93 f3f2 	sdiv	r3, r3, r2
 8008294:	b29a      	uxth	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800829c:	7bfb      	ldrb	r3, [r7, #15]
 800829e:	7b7a      	ldrb	r2, [r7, #13]
 80082a0:	4909      	ldr	r1, [pc, #36]	@ (80082c8 <UARTEx_SetNbDataToProcess+0x94>)
 80082a2:	5c8a      	ldrb	r2, [r1, r2]
 80082a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80082a8:	7b7a      	ldrb	r2, [r7, #13]
 80082aa:	4908      	ldr	r1, [pc, #32]	@ (80082cc <UARTEx_SetNbDataToProcess+0x98>)
 80082ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80082ba:	bf00      	nop
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	08009844 	.word	0x08009844
 80082cc:	0800984c 	.word	0x0800984c

080082d0 <atoi>:
 80082d0:	220a      	movs	r2, #10
 80082d2:	2100      	movs	r1, #0
 80082d4:	f000 b952 	b.w	800857c <strtol>

080082d8 <sniprintf>:
 80082d8:	b40c      	push	{r2, r3}
 80082da:	b530      	push	{r4, r5, lr}
 80082dc:	4b17      	ldr	r3, [pc, #92]	@ (800833c <sniprintf+0x64>)
 80082de:	1e0c      	subs	r4, r1, #0
 80082e0:	681d      	ldr	r5, [r3, #0]
 80082e2:	b09d      	sub	sp, #116	@ 0x74
 80082e4:	da08      	bge.n	80082f8 <sniprintf+0x20>
 80082e6:	238b      	movs	r3, #139	@ 0x8b
 80082e8:	602b      	str	r3, [r5, #0]
 80082ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082ee:	b01d      	add	sp, #116	@ 0x74
 80082f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082f4:	b002      	add	sp, #8
 80082f6:	4770      	bx	lr
 80082f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80082fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008300:	bf14      	ite	ne
 8008302:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8008306:	4623      	moveq	r3, r4
 8008308:	9304      	str	r3, [sp, #16]
 800830a:	9307      	str	r3, [sp, #28]
 800830c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008310:	9002      	str	r0, [sp, #8]
 8008312:	9006      	str	r0, [sp, #24]
 8008314:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008318:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800831a:	ab21      	add	r3, sp, #132	@ 0x84
 800831c:	a902      	add	r1, sp, #8
 800831e:	4628      	mov	r0, r5
 8008320:	9301      	str	r3, [sp, #4]
 8008322:	f000 fa5f 	bl	80087e4 <_svfiprintf_r>
 8008326:	1c43      	adds	r3, r0, #1
 8008328:	bfbc      	itt	lt
 800832a:	238b      	movlt	r3, #139	@ 0x8b
 800832c:	602b      	strlt	r3, [r5, #0]
 800832e:	2c00      	cmp	r4, #0
 8008330:	d0dd      	beq.n	80082ee <sniprintf+0x16>
 8008332:	9b02      	ldr	r3, [sp, #8]
 8008334:	2200      	movs	r2, #0
 8008336:	701a      	strb	r2, [r3, #0]
 8008338:	e7d9      	b.n	80082ee <sniprintf+0x16>
 800833a:	bf00      	nop
 800833c:	200000ec 	.word	0x200000ec

08008340 <std>:
 8008340:	2300      	movs	r3, #0
 8008342:	b510      	push	{r4, lr}
 8008344:	4604      	mov	r4, r0
 8008346:	e9c0 3300 	strd	r3, r3, [r0]
 800834a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800834e:	6083      	str	r3, [r0, #8]
 8008350:	8181      	strh	r1, [r0, #12]
 8008352:	6643      	str	r3, [r0, #100]	@ 0x64
 8008354:	81c2      	strh	r2, [r0, #14]
 8008356:	6183      	str	r3, [r0, #24]
 8008358:	4619      	mov	r1, r3
 800835a:	2208      	movs	r2, #8
 800835c:	305c      	adds	r0, #92	@ 0x5c
 800835e:	f000 f991 	bl	8008684 <memset>
 8008362:	4b0d      	ldr	r3, [pc, #52]	@ (8008398 <std+0x58>)
 8008364:	6263      	str	r3, [r4, #36]	@ 0x24
 8008366:	4b0d      	ldr	r3, [pc, #52]	@ (800839c <std+0x5c>)
 8008368:	62a3      	str	r3, [r4, #40]	@ 0x28
 800836a:	4b0d      	ldr	r3, [pc, #52]	@ (80083a0 <std+0x60>)
 800836c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800836e:	4b0d      	ldr	r3, [pc, #52]	@ (80083a4 <std+0x64>)
 8008370:	6323      	str	r3, [r4, #48]	@ 0x30
 8008372:	4b0d      	ldr	r3, [pc, #52]	@ (80083a8 <std+0x68>)
 8008374:	6224      	str	r4, [r4, #32]
 8008376:	429c      	cmp	r4, r3
 8008378:	d006      	beq.n	8008388 <std+0x48>
 800837a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800837e:	4294      	cmp	r4, r2
 8008380:	d002      	beq.n	8008388 <std+0x48>
 8008382:	33d0      	adds	r3, #208	@ 0xd0
 8008384:	429c      	cmp	r4, r3
 8008386:	d105      	bne.n	8008394 <std+0x54>
 8008388:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800838c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008390:	f000 b9aa 	b.w	80086e8 <__retarget_lock_init_recursive>
 8008394:	bd10      	pop	{r4, pc}
 8008396:	bf00      	nop
 8008398:	08008fbd 	.word	0x08008fbd
 800839c:	08008fdf 	.word	0x08008fdf
 80083a0:	08009017 	.word	0x08009017
 80083a4:	0800903b 	.word	0x0800903b
 80083a8:	20000504 	.word	0x20000504

080083ac <stdio_exit_handler>:
 80083ac:	4a02      	ldr	r2, [pc, #8]	@ (80083b8 <stdio_exit_handler+0xc>)
 80083ae:	4903      	ldr	r1, [pc, #12]	@ (80083bc <stdio_exit_handler+0x10>)
 80083b0:	4803      	ldr	r0, [pc, #12]	@ (80083c0 <stdio_exit_handler+0x14>)
 80083b2:	f000 b8ed 	b.w	8008590 <_fwalk_sglue>
 80083b6:	bf00      	nop
 80083b8:	200000e0 	.word	0x200000e0
 80083bc:	08008f55 	.word	0x08008f55
 80083c0:	200000f0 	.word	0x200000f0

080083c4 <cleanup_stdio>:
 80083c4:	6841      	ldr	r1, [r0, #4]
 80083c6:	4b0c      	ldr	r3, [pc, #48]	@ (80083f8 <cleanup_stdio+0x34>)
 80083c8:	4299      	cmp	r1, r3
 80083ca:	b510      	push	{r4, lr}
 80083cc:	4604      	mov	r4, r0
 80083ce:	d001      	beq.n	80083d4 <cleanup_stdio+0x10>
 80083d0:	f000 fdc0 	bl	8008f54 <_fflush_r>
 80083d4:	68a1      	ldr	r1, [r4, #8]
 80083d6:	4b09      	ldr	r3, [pc, #36]	@ (80083fc <cleanup_stdio+0x38>)
 80083d8:	4299      	cmp	r1, r3
 80083da:	d002      	beq.n	80083e2 <cleanup_stdio+0x1e>
 80083dc:	4620      	mov	r0, r4
 80083de:	f000 fdb9 	bl	8008f54 <_fflush_r>
 80083e2:	68e1      	ldr	r1, [r4, #12]
 80083e4:	4b06      	ldr	r3, [pc, #24]	@ (8008400 <cleanup_stdio+0x3c>)
 80083e6:	4299      	cmp	r1, r3
 80083e8:	d004      	beq.n	80083f4 <cleanup_stdio+0x30>
 80083ea:	4620      	mov	r0, r4
 80083ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083f0:	f000 bdb0 	b.w	8008f54 <_fflush_r>
 80083f4:	bd10      	pop	{r4, pc}
 80083f6:	bf00      	nop
 80083f8:	20000504 	.word	0x20000504
 80083fc:	2000056c 	.word	0x2000056c
 8008400:	200005d4 	.word	0x200005d4

08008404 <global_stdio_init.part.0>:
 8008404:	b510      	push	{r4, lr}
 8008406:	4b0b      	ldr	r3, [pc, #44]	@ (8008434 <global_stdio_init.part.0+0x30>)
 8008408:	4c0b      	ldr	r4, [pc, #44]	@ (8008438 <global_stdio_init.part.0+0x34>)
 800840a:	4a0c      	ldr	r2, [pc, #48]	@ (800843c <global_stdio_init.part.0+0x38>)
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	4620      	mov	r0, r4
 8008410:	2200      	movs	r2, #0
 8008412:	2104      	movs	r1, #4
 8008414:	f7ff ff94 	bl	8008340 <std>
 8008418:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800841c:	2201      	movs	r2, #1
 800841e:	2109      	movs	r1, #9
 8008420:	f7ff ff8e 	bl	8008340 <std>
 8008424:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008428:	2202      	movs	r2, #2
 800842a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800842e:	2112      	movs	r1, #18
 8008430:	f7ff bf86 	b.w	8008340 <std>
 8008434:	2000063c 	.word	0x2000063c
 8008438:	20000504 	.word	0x20000504
 800843c:	080083ad 	.word	0x080083ad

08008440 <__sfp_lock_acquire>:
 8008440:	4801      	ldr	r0, [pc, #4]	@ (8008448 <__sfp_lock_acquire+0x8>)
 8008442:	f000 b952 	b.w	80086ea <__retarget_lock_acquire_recursive>
 8008446:	bf00      	nop
 8008448:	20000641 	.word	0x20000641

0800844c <__sfp_lock_release>:
 800844c:	4801      	ldr	r0, [pc, #4]	@ (8008454 <__sfp_lock_release+0x8>)
 800844e:	f000 b94d 	b.w	80086ec <__retarget_lock_release_recursive>
 8008452:	bf00      	nop
 8008454:	20000641 	.word	0x20000641

08008458 <__sinit>:
 8008458:	b510      	push	{r4, lr}
 800845a:	4604      	mov	r4, r0
 800845c:	f7ff fff0 	bl	8008440 <__sfp_lock_acquire>
 8008460:	6a23      	ldr	r3, [r4, #32]
 8008462:	b11b      	cbz	r3, 800846c <__sinit+0x14>
 8008464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008468:	f7ff bff0 	b.w	800844c <__sfp_lock_release>
 800846c:	4b04      	ldr	r3, [pc, #16]	@ (8008480 <__sinit+0x28>)
 800846e:	6223      	str	r3, [r4, #32]
 8008470:	4b04      	ldr	r3, [pc, #16]	@ (8008484 <__sinit+0x2c>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1f5      	bne.n	8008464 <__sinit+0xc>
 8008478:	f7ff ffc4 	bl	8008404 <global_stdio_init.part.0>
 800847c:	e7f2      	b.n	8008464 <__sinit+0xc>
 800847e:	bf00      	nop
 8008480:	080083c5 	.word	0x080083c5
 8008484:	2000063c 	.word	0x2000063c

08008488 <_strtol_l.constprop.0>:
 8008488:	2b24      	cmp	r3, #36	@ 0x24
 800848a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800848e:	4686      	mov	lr, r0
 8008490:	4690      	mov	r8, r2
 8008492:	d801      	bhi.n	8008498 <_strtol_l.constprop.0+0x10>
 8008494:	2b01      	cmp	r3, #1
 8008496:	d106      	bne.n	80084a6 <_strtol_l.constprop.0+0x1e>
 8008498:	f000 f8fc 	bl	8008694 <__errno>
 800849c:	2316      	movs	r3, #22
 800849e:	6003      	str	r3, [r0, #0]
 80084a0:	2000      	movs	r0, #0
 80084a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a6:	4834      	ldr	r0, [pc, #208]	@ (8008578 <_strtol_l.constprop.0+0xf0>)
 80084a8:	460d      	mov	r5, r1
 80084aa:	462a      	mov	r2, r5
 80084ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084b0:	5d06      	ldrb	r6, [r0, r4]
 80084b2:	f016 0608 	ands.w	r6, r6, #8
 80084b6:	d1f8      	bne.n	80084aa <_strtol_l.constprop.0+0x22>
 80084b8:	2c2d      	cmp	r4, #45	@ 0x2d
 80084ba:	d12d      	bne.n	8008518 <_strtol_l.constprop.0+0x90>
 80084bc:	782c      	ldrb	r4, [r5, #0]
 80084be:	2601      	movs	r6, #1
 80084c0:	1c95      	adds	r5, r2, #2
 80084c2:	f033 0210 	bics.w	r2, r3, #16
 80084c6:	d109      	bne.n	80084dc <_strtol_l.constprop.0+0x54>
 80084c8:	2c30      	cmp	r4, #48	@ 0x30
 80084ca:	d12a      	bne.n	8008522 <_strtol_l.constprop.0+0x9a>
 80084cc:	782a      	ldrb	r2, [r5, #0]
 80084ce:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80084d2:	2a58      	cmp	r2, #88	@ 0x58
 80084d4:	d125      	bne.n	8008522 <_strtol_l.constprop.0+0x9a>
 80084d6:	786c      	ldrb	r4, [r5, #1]
 80084d8:	2310      	movs	r3, #16
 80084da:	3502      	adds	r5, #2
 80084dc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80084e0:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80084e4:	2200      	movs	r2, #0
 80084e6:	fbbc f9f3 	udiv	r9, ip, r3
 80084ea:	4610      	mov	r0, r2
 80084ec:	fb03 ca19 	mls	sl, r3, r9, ip
 80084f0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80084f4:	2f09      	cmp	r7, #9
 80084f6:	d81b      	bhi.n	8008530 <_strtol_l.constprop.0+0xa8>
 80084f8:	463c      	mov	r4, r7
 80084fa:	42a3      	cmp	r3, r4
 80084fc:	dd27      	ble.n	800854e <_strtol_l.constprop.0+0xc6>
 80084fe:	1c57      	adds	r7, r2, #1
 8008500:	d007      	beq.n	8008512 <_strtol_l.constprop.0+0x8a>
 8008502:	4581      	cmp	r9, r0
 8008504:	d320      	bcc.n	8008548 <_strtol_l.constprop.0+0xc0>
 8008506:	d101      	bne.n	800850c <_strtol_l.constprop.0+0x84>
 8008508:	45a2      	cmp	sl, r4
 800850a:	db1d      	blt.n	8008548 <_strtol_l.constprop.0+0xc0>
 800850c:	fb00 4003 	mla	r0, r0, r3, r4
 8008510:	2201      	movs	r2, #1
 8008512:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008516:	e7eb      	b.n	80084f0 <_strtol_l.constprop.0+0x68>
 8008518:	2c2b      	cmp	r4, #43	@ 0x2b
 800851a:	bf04      	itt	eq
 800851c:	782c      	ldrbeq	r4, [r5, #0]
 800851e:	1c95      	addeq	r5, r2, #2
 8008520:	e7cf      	b.n	80084c2 <_strtol_l.constprop.0+0x3a>
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1da      	bne.n	80084dc <_strtol_l.constprop.0+0x54>
 8008526:	2c30      	cmp	r4, #48	@ 0x30
 8008528:	bf0c      	ite	eq
 800852a:	2308      	moveq	r3, #8
 800852c:	230a      	movne	r3, #10
 800852e:	e7d5      	b.n	80084dc <_strtol_l.constprop.0+0x54>
 8008530:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008534:	2f19      	cmp	r7, #25
 8008536:	d801      	bhi.n	800853c <_strtol_l.constprop.0+0xb4>
 8008538:	3c37      	subs	r4, #55	@ 0x37
 800853a:	e7de      	b.n	80084fa <_strtol_l.constprop.0+0x72>
 800853c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008540:	2f19      	cmp	r7, #25
 8008542:	d804      	bhi.n	800854e <_strtol_l.constprop.0+0xc6>
 8008544:	3c57      	subs	r4, #87	@ 0x57
 8008546:	e7d8      	b.n	80084fa <_strtol_l.constprop.0+0x72>
 8008548:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800854c:	e7e1      	b.n	8008512 <_strtol_l.constprop.0+0x8a>
 800854e:	1c53      	adds	r3, r2, #1
 8008550:	d108      	bne.n	8008564 <_strtol_l.constprop.0+0xdc>
 8008552:	2322      	movs	r3, #34	@ 0x22
 8008554:	f8ce 3000 	str.w	r3, [lr]
 8008558:	4660      	mov	r0, ip
 800855a:	f1b8 0f00 	cmp.w	r8, #0
 800855e:	d0a0      	beq.n	80084a2 <_strtol_l.constprop.0+0x1a>
 8008560:	1e69      	subs	r1, r5, #1
 8008562:	e006      	b.n	8008572 <_strtol_l.constprop.0+0xea>
 8008564:	b106      	cbz	r6, 8008568 <_strtol_l.constprop.0+0xe0>
 8008566:	4240      	negs	r0, r0
 8008568:	f1b8 0f00 	cmp.w	r8, #0
 800856c:	d099      	beq.n	80084a2 <_strtol_l.constprop.0+0x1a>
 800856e:	2a00      	cmp	r2, #0
 8008570:	d1f6      	bne.n	8008560 <_strtol_l.constprop.0+0xd8>
 8008572:	f8c8 1000 	str.w	r1, [r8]
 8008576:	e794      	b.n	80084a2 <_strtol_l.constprop.0+0x1a>
 8008578:	080098c6 	.word	0x080098c6

0800857c <strtol>:
 800857c:	4613      	mov	r3, r2
 800857e:	460a      	mov	r2, r1
 8008580:	4601      	mov	r1, r0
 8008582:	4802      	ldr	r0, [pc, #8]	@ (800858c <strtol+0x10>)
 8008584:	6800      	ldr	r0, [r0, #0]
 8008586:	f7ff bf7f 	b.w	8008488 <_strtol_l.constprop.0>
 800858a:	bf00      	nop
 800858c:	200000ec 	.word	0x200000ec

08008590 <_fwalk_sglue>:
 8008590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008594:	4607      	mov	r7, r0
 8008596:	4688      	mov	r8, r1
 8008598:	4614      	mov	r4, r2
 800859a:	2600      	movs	r6, #0
 800859c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085a0:	f1b9 0901 	subs.w	r9, r9, #1
 80085a4:	d505      	bpl.n	80085b2 <_fwalk_sglue+0x22>
 80085a6:	6824      	ldr	r4, [r4, #0]
 80085a8:	2c00      	cmp	r4, #0
 80085aa:	d1f7      	bne.n	800859c <_fwalk_sglue+0xc>
 80085ac:	4630      	mov	r0, r6
 80085ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085b2:	89ab      	ldrh	r3, [r5, #12]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d907      	bls.n	80085c8 <_fwalk_sglue+0x38>
 80085b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085bc:	3301      	adds	r3, #1
 80085be:	d003      	beq.n	80085c8 <_fwalk_sglue+0x38>
 80085c0:	4629      	mov	r1, r5
 80085c2:	4638      	mov	r0, r7
 80085c4:	47c0      	blx	r8
 80085c6:	4306      	orrs	r6, r0
 80085c8:	3568      	adds	r5, #104	@ 0x68
 80085ca:	e7e9      	b.n	80085a0 <_fwalk_sglue+0x10>

080085cc <strtok>:
 80085cc:	4b16      	ldr	r3, [pc, #88]	@ (8008628 <strtok+0x5c>)
 80085ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085d2:	681f      	ldr	r7, [r3, #0]
 80085d4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80085d6:	4605      	mov	r5, r0
 80085d8:	460e      	mov	r6, r1
 80085da:	b9ec      	cbnz	r4, 8008618 <strtok+0x4c>
 80085dc:	2050      	movs	r0, #80	@ 0x50
 80085de:	f000 f9fd 	bl	80089dc <malloc>
 80085e2:	4602      	mov	r2, r0
 80085e4:	6478      	str	r0, [r7, #68]	@ 0x44
 80085e6:	b920      	cbnz	r0, 80085f2 <strtok+0x26>
 80085e8:	4b10      	ldr	r3, [pc, #64]	@ (800862c <strtok+0x60>)
 80085ea:	4811      	ldr	r0, [pc, #68]	@ (8008630 <strtok+0x64>)
 80085ec:	215b      	movs	r1, #91	@ 0x5b
 80085ee:	f000 f87f 	bl	80086f0 <__assert_func>
 80085f2:	e9c0 4400 	strd	r4, r4, [r0]
 80085f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80085fa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80085fe:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008602:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008606:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800860a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800860e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008612:	6184      	str	r4, [r0, #24]
 8008614:	7704      	strb	r4, [r0, #28]
 8008616:	6244      	str	r4, [r0, #36]	@ 0x24
 8008618:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800861a:	4631      	mov	r1, r6
 800861c:	4628      	mov	r0, r5
 800861e:	2301      	movs	r3, #1
 8008620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008624:	f000 b806 	b.w	8008634 <__strtok_r>
 8008628:	200000ec 	.word	0x200000ec
 800862c:	08009854 	.word	0x08009854
 8008630:	0800986b 	.word	0x0800986b

08008634 <__strtok_r>:
 8008634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008636:	4604      	mov	r4, r0
 8008638:	b908      	cbnz	r0, 800863e <__strtok_r+0xa>
 800863a:	6814      	ldr	r4, [r2, #0]
 800863c:	b144      	cbz	r4, 8008650 <__strtok_r+0x1c>
 800863e:	4620      	mov	r0, r4
 8008640:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008644:	460f      	mov	r7, r1
 8008646:	f817 6b01 	ldrb.w	r6, [r7], #1
 800864a:	b91e      	cbnz	r6, 8008654 <__strtok_r+0x20>
 800864c:	b965      	cbnz	r5, 8008668 <__strtok_r+0x34>
 800864e:	6015      	str	r5, [r2, #0]
 8008650:	2000      	movs	r0, #0
 8008652:	e005      	b.n	8008660 <__strtok_r+0x2c>
 8008654:	42b5      	cmp	r5, r6
 8008656:	d1f6      	bne.n	8008646 <__strtok_r+0x12>
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1f0      	bne.n	800863e <__strtok_r+0xa>
 800865c:	6014      	str	r4, [r2, #0]
 800865e:	7003      	strb	r3, [r0, #0]
 8008660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008662:	461c      	mov	r4, r3
 8008664:	e00c      	b.n	8008680 <__strtok_r+0x4c>
 8008666:	b915      	cbnz	r5, 800866e <__strtok_r+0x3a>
 8008668:	f814 3b01 	ldrb.w	r3, [r4], #1
 800866c:	460e      	mov	r6, r1
 800866e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008672:	42ab      	cmp	r3, r5
 8008674:	d1f7      	bne.n	8008666 <__strtok_r+0x32>
 8008676:	2b00      	cmp	r3, #0
 8008678:	d0f3      	beq.n	8008662 <__strtok_r+0x2e>
 800867a:	2300      	movs	r3, #0
 800867c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008680:	6014      	str	r4, [r2, #0]
 8008682:	e7ed      	b.n	8008660 <__strtok_r+0x2c>

08008684 <memset>:
 8008684:	4402      	add	r2, r0
 8008686:	4603      	mov	r3, r0
 8008688:	4293      	cmp	r3, r2
 800868a:	d100      	bne.n	800868e <memset+0xa>
 800868c:	4770      	bx	lr
 800868e:	f803 1b01 	strb.w	r1, [r3], #1
 8008692:	e7f9      	b.n	8008688 <memset+0x4>

08008694 <__errno>:
 8008694:	4b01      	ldr	r3, [pc, #4]	@ (800869c <__errno+0x8>)
 8008696:	6818      	ldr	r0, [r3, #0]
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	200000ec 	.word	0x200000ec

080086a0 <__libc_init_array>:
 80086a0:	b570      	push	{r4, r5, r6, lr}
 80086a2:	4d0d      	ldr	r5, [pc, #52]	@ (80086d8 <__libc_init_array+0x38>)
 80086a4:	4c0d      	ldr	r4, [pc, #52]	@ (80086dc <__libc_init_array+0x3c>)
 80086a6:	1b64      	subs	r4, r4, r5
 80086a8:	10a4      	asrs	r4, r4, #2
 80086aa:	2600      	movs	r6, #0
 80086ac:	42a6      	cmp	r6, r4
 80086ae:	d109      	bne.n	80086c4 <__libc_init_array+0x24>
 80086b0:	4d0b      	ldr	r5, [pc, #44]	@ (80086e0 <__libc_init_array+0x40>)
 80086b2:	4c0c      	ldr	r4, [pc, #48]	@ (80086e4 <__libc_init_array+0x44>)
 80086b4:	f001 f87c 	bl	80097b0 <_init>
 80086b8:	1b64      	subs	r4, r4, r5
 80086ba:	10a4      	asrs	r4, r4, #2
 80086bc:	2600      	movs	r6, #0
 80086be:	42a6      	cmp	r6, r4
 80086c0:	d105      	bne.n	80086ce <__libc_init_array+0x2e>
 80086c2:	bd70      	pop	{r4, r5, r6, pc}
 80086c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80086c8:	4798      	blx	r3
 80086ca:	3601      	adds	r6, #1
 80086cc:	e7ee      	b.n	80086ac <__libc_init_array+0xc>
 80086ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80086d2:	4798      	blx	r3
 80086d4:	3601      	adds	r6, #1
 80086d6:	e7f2      	b.n	80086be <__libc_init_array+0x1e>
 80086d8:	08009a40 	.word	0x08009a40
 80086dc:	08009a40 	.word	0x08009a40
 80086e0:	08009a40 	.word	0x08009a40
 80086e4:	08009a44 	.word	0x08009a44

080086e8 <__retarget_lock_init_recursive>:
 80086e8:	4770      	bx	lr

080086ea <__retarget_lock_acquire_recursive>:
 80086ea:	4770      	bx	lr

080086ec <__retarget_lock_release_recursive>:
 80086ec:	4770      	bx	lr
	...

080086f0 <__assert_func>:
 80086f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086f2:	4614      	mov	r4, r2
 80086f4:	461a      	mov	r2, r3
 80086f6:	4b09      	ldr	r3, [pc, #36]	@ (800871c <__assert_func+0x2c>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4605      	mov	r5, r0
 80086fc:	68d8      	ldr	r0, [r3, #12]
 80086fe:	b954      	cbnz	r4, 8008716 <__assert_func+0x26>
 8008700:	4b07      	ldr	r3, [pc, #28]	@ (8008720 <__assert_func+0x30>)
 8008702:	461c      	mov	r4, r3
 8008704:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008708:	9100      	str	r1, [sp, #0]
 800870a:	462b      	mov	r3, r5
 800870c:	4905      	ldr	r1, [pc, #20]	@ (8008724 <__assert_func+0x34>)
 800870e:	f000 fc99 	bl	8009044 <fiprintf>
 8008712:	f000 fd55 	bl	80091c0 <abort>
 8008716:	4b04      	ldr	r3, [pc, #16]	@ (8008728 <__assert_func+0x38>)
 8008718:	e7f4      	b.n	8008704 <__assert_func+0x14>
 800871a:	bf00      	nop
 800871c:	200000ec 	.word	0x200000ec
 8008720:	08009a01 	.word	0x08009a01
 8008724:	080099d3 	.word	0x080099d3
 8008728:	080099c6 	.word	0x080099c6

0800872c <__ssputs_r>:
 800872c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008730:	688e      	ldr	r6, [r1, #8]
 8008732:	461f      	mov	r7, r3
 8008734:	42be      	cmp	r6, r7
 8008736:	680b      	ldr	r3, [r1, #0]
 8008738:	4682      	mov	sl, r0
 800873a:	460c      	mov	r4, r1
 800873c:	4690      	mov	r8, r2
 800873e:	d82d      	bhi.n	800879c <__ssputs_r+0x70>
 8008740:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008744:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008748:	d026      	beq.n	8008798 <__ssputs_r+0x6c>
 800874a:	6965      	ldr	r5, [r4, #20]
 800874c:	6909      	ldr	r1, [r1, #16]
 800874e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008752:	eba3 0901 	sub.w	r9, r3, r1
 8008756:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800875a:	1c7b      	adds	r3, r7, #1
 800875c:	444b      	add	r3, r9
 800875e:	106d      	asrs	r5, r5, #1
 8008760:	429d      	cmp	r5, r3
 8008762:	bf38      	it	cc
 8008764:	461d      	movcc	r5, r3
 8008766:	0553      	lsls	r3, r2, #21
 8008768:	d527      	bpl.n	80087ba <__ssputs_r+0x8e>
 800876a:	4629      	mov	r1, r5
 800876c:	f000 f960 	bl	8008a30 <_malloc_r>
 8008770:	4606      	mov	r6, r0
 8008772:	b360      	cbz	r0, 80087ce <__ssputs_r+0xa2>
 8008774:	6921      	ldr	r1, [r4, #16]
 8008776:	464a      	mov	r2, r9
 8008778:	f000 fd14 	bl	80091a4 <memcpy>
 800877c:	89a3      	ldrh	r3, [r4, #12]
 800877e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008786:	81a3      	strh	r3, [r4, #12]
 8008788:	6126      	str	r6, [r4, #16]
 800878a:	6165      	str	r5, [r4, #20]
 800878c:	444e      	add	r6, r9
 800878e:	eba5 0509 	sub.w	r5, r5, r9
 8008792:	6026      	str	r6, [r4, #0]
 8008794:	60a5      	str	r5, [r4, #8]
 8008796:	463e      	mov	r6, r7
 8008798:	42be      	cmp	r6, r7
 800879a:	d900      	bls.n	800879e <__ssputs_r+0x72>
 800879c:	463e      	mov	r6, r7
 800879e:	6820      	ldr	r0, [r4, #0]
 80087a0:	4632      	mov	r2, r6
 80087a2:	4641      	mov	r1, r8
 80087a4:	f000 fc8e 	bl	80090c4 <memmove>
 80087a8:	68a3      	ldr	r3, [r4, #8]
 80087aa:	1b9b      	subs	r3, r3, r6
 80087ac:	60a3      	str	r3, [r4, #8]
 80087ae:	6823      	ldr	r3, [r4, #0]
 80087b0:	4433      	add	r3, r6
 80087b2:	6023      	str	r3, [r4, #0]
 80087b4:	2000      	movs	r0, #0
 80087b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ba:	462a      	mov	r2, r5
 80087bc:	f000 fc54 	bl	8009068 <_realloc_r>
 80087c0:	4606      	mov	r6, r0
 80087c2:	2800      	cmp	r0, #0
 80087c4:	d1e0      	bne.n	8008788 <__ssputs_r+0x5c>
 80087c6:	6921      	ldr	r1, [r4, #16]
 80087c8:	4650      	mov	r0, sl
 80087ca:	f000 fd01 	bl	80091d0 <_free_r>
 80087ce:	230c      	movs	r3, #12
 80087d0:	f8ca 3000 	str.w	r3, [sl]
 80087d4:	89a3      	ldrh	r3, [r4, #12]
 80087d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087da:	81a3      	strh	r3, [r4, #12]
 80087dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087e0:	e7e9      	b.n	80087b6 <__ssputs_r+0x8a>
	...

080087e4 <_svfiprintf_r>:
 80087e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e8:	4698      	mov	r8, r3
 80087ea:	898b      	ldrh	r3, [r1, #12]
 80087ec:	061b      	lsls	r3, r3, #24
 80087ee:	b09d      	sub	sp, #116	@ 0x74
 80087f0:	4607      	mov	r7, r0
 80087f2:	460d      	mov	r5, r1
 80087f4:	4614      	mov	r4, r2
 80087f6:	d510      	bpl.n	800881a <_svfiprintf_r+0x36>
 80087f8:	690b      	ldr	r3, [r1, #16]
 80087fa:	b973      	cbnz	r3, 800881a <_svfiprintf_r+0x36>
 80087fc:	2140      	movs	r1, #64	@ 0x40
 80087fe:	f000 f917 	bl	8008a30 <_malloc_r>
 8008802:	6028      	str	r0, [r5, #0]
 8008804:	6128      	str	r0, [r5, #16]
 8008806:	b930      	cbnz	r0, 8008816 <_svfiprintf_r+0x32>
 8008808:	230c      	movs	r3, #12
 800880a:	603b      	str	r3, [r7, #0]
 800880c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008810:	b01d      	add	sp, #116	@ 0x74
 8008812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008816:	2340      	movs	r3, #64	@ 0x40
 8008818:	616b      	str	r3, [r5, #20]
 800881a:	2300      	movs	r3, #0
 800881c:	9309      	str	r3, [sp, #36]	@ 0x24
 800881e:	2320      	movs	r3, #32
 8008820:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008824:	f8cd 800c 	str.w	r8, [sp, #12]
 8008828:	2330      	movs	r3, #48	@ 0x30
 800882a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80089c8 <_svfiprintf_r+0x1e4>
 800882e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008832:	f04f 0901 	mov.w	r9, #1
 8008836:	4623      	mov	r3, r4
 8008838:	469a      	mov	sl, r3
 800883a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800883e:	b10a      	cbz	r2, 8008844 <_svfiprintf_r+0x60>
 8008840:	2a25      	cmp	r2, #37	@ 0x25
 8008842:	d1f9      	bne.n	8008838 <_svfiprintf_r+0x54>
 8008844:	ebba 0b04 	subs.w	fp, sl, r4
 8008848:	d00b      	beq.n	8008862 <_svfiprintf_r+0x7e>
 800884a:	465b      	mov	r3, fp
 800884c:	4622      	mov	r2, r4
 800884e:	4629      	mov	r1, r5
 8008850:	4638      	mov	r0, r7
 8008852:	f7ff ff6b 	bl	800872c <__ssputs_r>
 8008856:	3001      	adds	r0, #1
 8008858:	f000 80a7 	beq.w	80089aa <_svfiprintf_r+0x1c6>
 800885c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800885e:	445a      	add	r2, fp
 8008860:	9209      	str	r2, [sp, #36]	@ 0x24
 8008862:	f89a 3000 	ldrb.w	r3, [sl]
 8008866:	2b00      	cmp	r3, #0
 8008868:	f000 809f 	beq.w	80089aa <_svfiprintf_r+0x1c6>
 800886c:	2300      	movs	r3, #0
 800886e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008872:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008876:	f10a 0a01 	add.w	sl, sl, #1
 800887a:	9304      	str	r3, [sp, #16]
 800887c:	9307      	str	r3, [sp, #28]
 800887e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008882:	931a      	str	r3, [sp, #104]	@ 0x68
 8008884:	4654      	mov	r4, sl
 8008886:	2205      	movs	r2, #5
 8008888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800888c:	484e      	ldr	r0, [pc, #312]	@ (80089c8 <_svfiprintf_r+0x1e4>)
 800888e:	f7f7 fcdf 	bl	8000250 <memchr>
 8008892:	9a04      	ldr	r2, [sp, #16]
 8008894:	b9d8      	cbnz	r0, 80088ce <_svfiprintf_r+0xea>
 8008896:	06d0      	lsls	r0, r2, #27
 8008898:	bf44      	itt	mi
 800889a:	2320      	movmi	r3, #32
 800889c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088a0:	0711      	lsls	r1, r2, #28
 80088a2:	bf44      	itt	mi
 80088a4:	232b      	movmi	r3, #43	@ 0x2b
 80088a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088aa:	f89a 3000 	ldrb.w	r3, [sl]
 80088ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80088b0:	d015      	beq.n	80088de <_svfiprintf_r+0xfa>
 80088b2:	9a07      	ldr	r2, [sp, #28]
 80088b4:	4654      	mov	r4, sl
 80088b6:	2000      	movs	r0, #0
 80088b8:	f04f 0c0a 	mov.w	ip, #10
 80088bc:	4621      	mov	r1, r4
 80088be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088c2:	3b30      	subs	r3, #48	@ 0x30
 80088c4:	2b09      	cmp	r3, #9
 80088c6:	d94b      	bls.n	8008960 <_svfiprintf_r+0x17c>
 80088c8:	b1b0      	cbz	r0, 80088f8 <_svfiprintf_r+0x114>
 80088ca:	9207      	str	r2, [sp, #28]
 80088cc:	e014      	b.n	80088f8 <_svfiprintf_r+0x114>
 80088ce:	eba0 0308 	sub.w	r3, r0, r8
 80088d2:	fa09 f303 	lsl.w	r3, r9, r3
 80088d6:	4313      	orrs	r3, r2
 80088d8:	9304      	str	r3, [sp, #16]
 80088da:	46a2      	mov	sl, r4
 80088dc:	e7d2      	b.n	8008884 <_svfiprintf_r+0xa0>
 80088de:	9b03      	ldr	r3, [sp, #12]
 80088e0:	1d19      	adds	r1, r3, #4
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	9103      	str	r1, [sp, #12]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	bfbb      	ittet	lt
 80088ea:	425b      	neglt	r3, r3
 80088ec:	f042 0202 	orrlt.w	r2, r2, #2
 80088f0:	9307      	strge	r3, [sp, #28]
 80088f2:	9307      	strlt	r3, [sp, #28]
 80088f4:	bfb8      	it	lt
 80088f6:	9204      	strlt	r2, [sp, #16]
 80088f8:	7823      	ldrb	r3, [r4, #0]
 80088fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80088fc:	d10a      	bne.n	8008914 <_svfiprintf_r+0x130>
 80088fe:	7863      	ldrb	r3, [r4, #1]
 8008900:	2b2a      	cmp	r3, #42	@ 0x2a
 8008902:	d132      	bne.n	800896a <_svfiprintf_r+0x186>
 8008904:	9b03      	ldr	r3, [sp, #12]
 8008906:	1d1a      	adds	r2, r3, #4
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	9203      	str	r2, [sp, #12]
 800890c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008910:	3402      	adds	r4, #2
 8008912:	9305      	str	r3, [sp, #20]
 8008914:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80089d8 <_svfiprintf_r+0x1f4>
 8008918:	7821      	ldrb	r1, [r4, #0]
 800891a:	2203      	movs	r2, #3
 800891c:	4650      	mov	r0, sl
 800891e:	f7f7 fc97 	bl	8000250 <memchr>
 8008922:	b138      	cbz	r0, 8008934 <_svfiprintf_r+0x150>
 8008924:	9b04      	ldr	r3, [sp, #16]
 8008926:	eba0 000a 	sub.w	r0, r0, sl
 800892a:	2240      	movs	r2, #64	@ 0x40
 800892c:	4082      	lsls	r2, r0
 800892e:	4313      	orrs	r3, r2
 8008930:	3401      	adds	r4, #1
 8008932:	9304      	str	r3, [sp, #16]
 8008934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008938:	4824      	ldr	r0, [pc, #144]	@ (80089cc <_svfiprintf_r+0x1e8>)
 800893a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800893e:	2206      	movs	r2, #6
 8008940:	f7f7 fc86 	bl	8000250 <memchr>
 8008944:	2800      	cmp	r0, #0
 8008946:	d036      	beq.n	80089b6 <_svfiprintf_r+0x1d2>
 8008948:	4b21      	ldr	r3, [pc, #132]	@ (80089d0 <_svfiprintf_r+0x1ec>)
 800894a:	bb1b      	cbnz	r3, 8008994 <_svfiprintf_r+0x1b0>
 800894c:	9b03      	ldr	r3, [sp, #12]
 800894e:	3307      	adds	r3, #7
 8008950:	f023 0307 	bic.w	r3, r3, #7
 8008954:	3308      	adds	r3, #8
 8008956:	9303      	str	r3, [sp, #12]
 8008958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800895a:	4433      	add	r3, r6
 800895c:	9309      	str	r3, [sp, #36]	@ 0x24
 800895e:	e76a      	b.n	8008836 <_svfiprintf_r+0x52>
 8008960:	fb0c 3202 	mla	r2, ip, r2, r3
 8008964:	460c      	mov	r4, r1
 8008966:	2001      	movs	r0, #1
 8008968:	e7a8      	b.n	80088bc <_svfiprintf_r+0xd8>
 800896a:	2300      	movs	r3, #0
 800896c:	3401      	adds	r4, #1
 800896e:	9305      	str	r3, [sp, #20]
 8008970:	4619      	mov	r1, r3
 8008972:	f04f 0c0a 	mov.w	ip, #10
 8008976:	4620      	mov	r0, r4
 8008978:	f810 2b01 	ldrb.w	r2, [r0], #1
 800897c:	3a30      	subs	r2, #48	@ 0x30
 800897e:	2a09      	cmp	r2, #9
 8008980:	d903      	bls.n	800898a <_svfiprintf_r+0x1a6>
 8008982:	2b00      	cmp	r3, #0
 8008984:	d0c6      	beq.n	8008914 <_svfiprintf_r+0x130>
 8008986:	9105      	str	r1, [sp, #20]
 8008988:	e7c4      	b.n	8008914 <_svfiprintf_r+0x130>
 800898a:	fb0c 2101 	mla	r1, ip, r1, r2
 800898e:	4604      	mov	r4, r0
 8008990:	2301      	movs	r3, #1
 8008992:	e7f0      	b.n	8008976 <_svfiprintf_r+0x192>
 8008994:	ab03      	add	r3, sp, #12
 8008996:	9300      	str	r3, [sp, #0]
 8008998:	462a      	mov	r2, r5
 800899a:	4b0e      	ldr	r3, [pc, #56]	@ (80089d4 <_svfiprintf_r+0x1f0>)
 800899c:	a904      	add	r1, sp, #16
 800899e:	4638      	mov	r0, r7
 80089a0:	f3af 8000 	nop.w
 80089a4:	1c42      	adds	r2, r0, #1
 80089a6:	4606      	mov	r6, r0
 80089a8:	d1d6      	bne.n	8008958 <_svfiprintf_r+0x174>
 80089aa:	89ab      	ldrh	r3, [r5, #12]
 80089ac:	065b      	lsls	r3, r3, #25
 80089ae:	f53f af2d 	bmi.w	800880c <_svfiprintf_r+0x28>
 80089b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089b4:	e72c      	b.n	8008810 <_svfiprintf_r+0x2c>
 80089b6:	ab03      	add	r3, sp, #12
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	462a      	mov	r2, r5
 80089bc:	4b05      	ldr	r3, [pc, #20]	@ (80089d4 <_svfiprintf_r+0x1f0>)
 80089be:	a904      	add	r1, sp, #16
 80089c0:	4638      	mov	r0, r7
 80089c2:	f000 f923 	bl	8008c0c <_printf_i>
 80089c6:	e7ed      	b.n	80089a4 <_svfiprintf_r+0x1c0>
 80089c8:	08009a02 	.word	0x08009a02
 80089cc:	08009a0c 	.word	0x08009a0c
 80089d0:	00000000 	.word	0x00000000
 80089d4:	0800872d 	.word	0x0800872d
 80089d8:	08009a08 	.word	0x08009a08

080089dc <malloc>:
 80089dc:	4b02      	ldr	r3, [pc, #8]	@ (80089e8 <malloc+0xc>)
 80089de:	4601      	mov	r1, r0
 80089e0:	6818      	ldr	r0, [r3, #0]
 80089e2:	f000 b825 	b.w	8008a30 <_malloc_r>
 80089e6:	bf00      	nop
 80089e8:	200000ec 	.word	0x200000ec

080089ec <sbrk_aligned>:
 80089ec:	b570      	push	{r4, r5, r6, lr}
 80089ee:	4e0f      	ldr	r6, [pc, #60]	@ (8008a2c <sbrk_aligned+0x40>)
 80089f0:	460c      	mov	r4, r1
 80089f2:	6831      	ldr	r1, [r6, #0]
 80089f4:	4605      	mov	r5, r0
 80089f6:	b911      	cbnz	r1, 80089fe <sbrk_aligned+0x12>
 80089f8:	f000 fbb2 	bl	8009160 <_sbrk_r>
 80089fc:	6030      	str	r0, [r6, #0]
 80089fe:	4621      	mov	r1, r4
 8008a00:	4628      	mov	r0, r5
 8008a02:	f000 fbad 	bl	8009160 <_sbrk_r>
 8008a06:	1c43      	adds	r3, r0, #1
 8008a08:	d103      	bne.n	8008a12 <sbrk_aligned+0x26>
 8008a0a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008a0e:	4620      	mov	r0, r4
 8008a10:	bd70      	pop	{r4, r5, r6, pc}
 8008a12:	1cc4      	adds	r4, r0, #3
 8008a14:	f024 0403 	bic.w	r4, r4, #3
 8008a18:	42a0      	cmp	r0, r4
 8008a1a:	d0f8      	beq.n	8008a0e <sbrk_aligned+0x22>
 8008a1c:	1a21      	subs	r1, r4, r0
 8008a1e:	4628      	mov	r0, r5
 8008a20:	f000 fb9e 	bl	8009160 <_sbrk_r>
 8008a24:	3001      	adds	r0, #1
 8008a26:	d1f2      	bne.n	8008a0e <sbrk_aligned+0x22>
 8008a28:	e7ef      	b.n	8008a0a <sbrk_aligned+0x1e>
 8008a2a:	bf00      	nop
 8008a2c:	20000644 	.word	0x20000644

08008a30 <_malloc_r>:
 8008a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a34:	1ccd      	adds	r5, r1, #3
 8008a36:	f025 0503 	bic.w	r5, r5, #3
 8008a3a:	3508      	adds	r5, #8
 8008a3c:	2d0c      	cmp	r5, #12
 8008a3e:	bf38      	it	cc
 8008a40:	250c      	movcc	r5, #12
 8008a42:	2d00      	cmp	r5, #0
 8008a44:	4606      	mov	r6, r0
 8008a46:	db01      	blt.n	8008a4c <_malloc_r+0x1c>
 8008a48:	42a9      	cmp	r1, r5
 8008a4a:	d904      	bls.n	8008a56 <_malloc_r+0x26>
 8008a4c:	230c      	movs	r3, #12
 8008a4e:	6033      	str	r3, [r6, #0]
 8008a50:	2000      	movs	r0, #0
 8008a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b2c <_malloc_r+0xfc>
 8008a5a:	f000 faa3 	bl	8008fa4 <__malloc_lock>
 8008a5e:	f8d8 3000 	ldr.w	r3, [r8]
 8008a62:	461c      	mov	r4, r3
 8008a64:	bb44      	cbnz	r4, 8008ab8 <_malloc_r+0x88>
 8008a66:	4629      	mov	r1, r5
 8008a68:	4630      	mov	r0, r6
 8008a6a:	f7ff ffbf 	bl	80089ec <sbrk_aligned>
 8008a6e:	1c43      	adds	r3, r0, #1
 8008a70:	4604      	mov	r4, r0
 8008a72:	d158      	bne.n	8008b26 <_malloc_r+0xf6>
 8008a74:	f8d8 4000 	ldr.w	r4, [r8]
 8008a78:	4627      	mov	r7, r4
 8008a7a:	2f00      	cmp	r7, #0
 8008a7c:	d143      	bne.n	8008b06 <_malloc_r+0xd6>
 8008a7e:	2c00      	cmp	r4, #0
 8008a80:	d04b      	beq.n	8008b1a <_malloc_r+0xea>
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	4639      	mov	r1, r7
 8008a86:	4630      	mov	r0, r6
 8008a88:	eb04 0903 	add.w	r9, r4, r3
 8008a8c:	f000 fb68 	bl	8009160 <_sbrk_r>
 8008a90:	4581      	cmp	r9, r0
 8008a92:	d142      	bne.n	8008b1a <_malloc_r+0xea>
 8008a94:	6821      	ldr	r1, [r4, #0]
 8008a96:	1a6d      	subs	r5, r5, r1
 8008a98:	4629      	mov	r1, r5
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	f7ff ffa6 	bl	80089ec <sbrk_aligned>
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	d03a      	beq.n	8008b1a <_malloc_r+0xea>
 8008aa4:	6823      	ldr	r3, [r4, #0]
 8008aa6:	442b      	add	r3, r5
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	f8d8 3000 	ldr.w	r3, [r8]
 8008aae:	685a      	ldr	r2, [r3, #4]
 8008ab0:	bb62      	cbnz	r2, 8008b0c <_malloc_r+0xdc>
 8008ab2:	f8c8 7000 	str.w	r7, [r8]
 8008ab6:	e00f      	b.n	8008ad8 <_malloc_r+0xa8>
 8008ab8:	6822      	ldr	r2, [r4, #0]
 8008aba:	1b52      	subs	r2, r2, r5
 8008abc:	d420      	bmi.n	8008b00 <_malloc_r+0xd0>
 8008abe:	2a0b      	cmp	r2, #11
 8008ac0:	d917      	bls.n	8008af2 <_malloc_r+0xc2>
 8008ac2:	1961      	adds	r1, r4, r5
 8008ac4:	42a3      	cmp	r3, r4
 8008ac6:	6025      	str	r5, [r4, #0]
 8008ac8:	bf18      	it	ne
 8008aca:	6059      	strne	r1, [r3, #4]
 8008acc:	6863      	ldr	r3, [r4, #4]
 8008ace:	bf08      	it	eq
 8008ad0:	f8c8 1000 	streq.w	r1, [r8]
 8008ad4:	5162      	str	r2, [r4, r5]
 8008ad6:	604b      	str	r3, [r1, #4]
 8008ad8:	4630      	mov	r0, r6
 8008ada:	f000 fa69 	bl	8008fb0 <__malloc_unlock>
 8008ade:	f104 000b 	add.w	r0, r4, #11
 8008ae2:	1d23      	adds	r3, r4, #4
 8008ae4:	f020 0007 	bic.w	r0, r0, #7
 8008ae8:	1ac2      	subs	r2, r0, r3
 8008aea:	bf1c      	itt	ne
 8008aec:	1a1b      	subne	r3, r3, r0
 8008aee:	50a3      	strne	r3, [r4, r2]
 8008af0:	e7af      	b.n	8008a52 <_malloc_r+0x22>
 8008af2:	6862      	ldr	r2, [r4, #4]
 8008af4:	42a3      	cmp	r3, r4
 8008af6:	bf0c      	ite	eq
 8008af8:	f8c8 2000 	streq.w	r2, [r8]
 8008afc:	605a      	strne	r2, [r3, #4]
 8008afe:	e7eb      	b.n	8008ad8 <_malloc_r+0xa8>
 8008b00:	4623      	mov	r3, r4
 8008b02:	6864      	ldr	r4, [r4, #4]
 8008b04:	e7ae      	b.n	8008a64 <_malloc_r+0x34>
 8008b06:	463c      	mov	r4, r7
 8008b08:	687f      	ldr	r7, [r7, #4]
 8008b0a:	e7b6      	b.n	8008a7a <_malloc_r+0x4a>
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	42a3      	cmp	r3, r4
 8008b12:	d1fb      	bne.n	8008b0c <_malloc_r+0xdc>
 8008b14:	2300      	movs	r3, #0
 8008b16:	6053      	str	r3, [r2, #4]
 8008b18:	e7de      	b.n	8008ad8 <_malloc_r+0xa8>
 8008b1a:	230c      	movs	r3, #12
 8008b1c:	6033      	str	r3, [r6, #0]
 8008b1e:	4630      	mov	r0, r6
 8008b20:	f000 fa46 	bl	8008fb0 <__malloc_unlock>
 8008b24:	e794      	b.n	8008a50 <_malloc_r+0x20>
 8008b26:	6005      	str	r5, [r0, #0]
 8008b28:	e7d6      	b.n	8008ad8 <_malloc_r+0xa8>
 8008b2a:	bf00      	nop
 8008b2c:	20000648 	.word	0x20000648

08008b30 <_printf_common>:
 8008b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b34:	4616      	mov	r6, r2
 8008b36:	4698      	mov	r8, r3
 8008b38:	688a      	ldr	r2, [r1, #8]
 8008b3a:	690b      	ldr	r3, [r1, #16]
 8008b3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b40:	4293      	cmp	r3, r2
 8008b42:	bfb8      	it	lt
 8008b44:	4613      	movlt	r3, r2
 8008b46:	6033      	str	r3, [r6, #0]
 8008b48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b4c:	4607      	mov	r7, r0
 8008b4e:	460c      	mov	r4, r1
 8008b50:	b10a      	cbz	r2, 8008b56 <_printf_common+0x26>
 8008b52:	3301      	adds	r3, #1
 8008b54:	6033      	str	r3, [r6, #0]
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	0699      	lsls	r1, r3, #26
 8008b5a:	bf42      	ittt	mi
 8008b5c:	6833      	ldrmi	r3, [r6, #0]
 8008b5e:	3302      	addmi	r3, #2
 8008b60:	6033      	strmi	r3, [r6, #0]
 8008b62:	6825      	ldr	r5, [r4, #0]
 8008b64:	f015 0506 	ands.w	r5, r5, #6
 8008b68:	d106      	bne.n	8008b78 <_printf_common+0x48>
 8008b6a:	f104 0a19 	add.w	sl, r4, #25
 8008b6e:	68e3      	ldr	r3, [r4, #12]
 8008b70:	6832      	ldr	r2, [r6, #0]
 8008b72:	1a9b      	subs	r3, r3, r2
 8008b74:	42ab      	cmp	r3, r5
 8008b76:	dc26      	bgt.n	8008bc6 <_printf_common+0x96>
 8008b78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b7c:	6822      	ldr	r2, [r4, #0]
 8008b7e:	3b00      	subs	r3, #0
 8008b80:	bf18      	it	ne
 8008b82:	2301      	movne	r3, #1
 8008b84:	0692      	lsls	r2, r2, #26
 8008b86:	d42b      	bmi.n	8008be0 <_printf_common+0xb0>
 8008b88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b8c:	4641      	mov	r1, r8
 8008b8e:	4638      	mov	r0, r7
 8008b90:	47c8      	blx	r9
 8008b92:	3001      	adds	r0, #1
 8008b94:	d01e      	beq.n	8008bd4 <_printf_common+0xa4>
 8008b96:	6823      	ldr	r3, [r4, #0]
 8008b98:	6922      	ldr	r2, [r4, #16]
 8008b9a:	f003 0306 	and.w	r3, r3, #6
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	bf02      	ittt	eq
 8008ba2:	68e5      	ldreq	r5, [r4, #12]
 8008ba4:	6833      	ldreq	r3, [r6, #0]
 8008ba6:	1aed      	subeq	r5, r5, r3
 8008ba8:	68a3      	ldr	r3, [r4, #8]
 8008baa:	bf0c      	ite	eq
 8008bac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bb0:	2500      	movne	r5, #0
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	bfc4      	itt	gt
 8008bb6:	1a9b      	subgt	r3, r3, r2
 8008bb8:	18ed      	addgt	r5, r5, r3
 8008bba:	2600      	movs	r6, #0
 8008bbc:	341a      	adds	r4, #26
 8008bbe:	42b5      	cmp	r5, r6
 8008bc0:	d11a      	bne.n	8008bf8 <_printf_common+0xc8>
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	e008      	b.n	8008bd8 <_printf_common+0xa8>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	4652      	mov	r2, sl
 8008bca:	4641      	mov	r1, r8
 8008bcc:	4638      	mov	r0, r7
 8008bce:	47c8      	blx	r9
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	d103      	bne.n	8008bdc <_printf_common+0xac>
 8008bd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bdc:	3501      	adds	r5, #1
 8008bde:	e7c6      	b.n	8008b6e <_printf_common+0x3e>
 8008be0:	18e1      	adds	r1, r4, r3
 8008be2:	1c5a      	adds	r2, r3, #1
 8008be4:	2030      	movs	r0, #48	@ 0x30
 8008be6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008bea:	4422      	add	r2, r4
 8008bec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008bf0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008bf4:	3302      	adds	r3, #2
 8008bf6:	e7c7      	b.n	8008b88 <_printf_common+0x58>
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	4622      	mov	r2, r4
 8008bfc:	4641      	mov	r1, r8
 8008bfe:	4638      	mov	r0, r7
 8008c00:	47c8      	blx	r9
 8008c02:	3001      	adds	r0, #1
 8008c04:	d0e6      	beq.n	8008bd4 <_printf_common+0xa4>
 8008c06:	3601      	adds	r6, #1
 8008c08:	e7d9      	b.n	8008bbe <_printf_common+0x8e>
	...

08008c0c <_printf_i>:
 8008c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c10:	7e0f      	ldrb	r7, [r1, #24]
 8008c12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c14:	2f78      	cmp	r7, #120	@ 0x78
 8008c16:	4691      	mov	r9, r2
 8008c18:	4680      	mov	r8, r0
 8008c1a:	460c      	mov	r4, r1
 8008c1c:	469a      	mov	sl, r3
 8008c1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c22:	d807      	bhi.n	8008c34 <_printf_i+0x28>
 8008c24:	2f62      	cmp	r7, #98	@ 0x62
 8008c26:	d80a      	bhi.n	8008c3e <_printf_i+0x32>
 8008c28:	2f00      	cmp	r7, #0
 8008c2a:	f000 80d2 	beq.w	8008dd2 <_printf_i+0x1c6>
 8008c2e:	2f58      	cmp	r7, #88	@ 0x58
 8008c30:	f000 80b9 	beq.w	8008da6 <_printf_i+0x19a>
 8008c34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c3c:	e03a      	b.n	8008cb4 <_printf_i+0xa8>
 8008c3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c42:	2b15      	cmp	r3, #21
 8008c44:	d8f6      	bhi.n	8008c34 <_printf_i+0x28>
 8008c46:	a101      	add	r1, pc, #4	@ (adr r1, 8008c4c <_printf_i+0x40>)
 8008c48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c4c:	08008ca5 	.word	0x08008ca5
 8008c50:	08008cb9 	.word	0x08008cb9
 8008c54:	08008c35 	.word	0x08008c35
 8008c58:	08008c35 	.word	0x08008c35
 8008c5c:	08008c35 	.word	0x08008c35
 8008c60:	08008c35 	.word	0x08008c35
 8008c64:	08008cb9 	.word	0x08008cb9
 8008c68:	08008c35 	.word	0x08008c35
 8008c6c:	08008c35 	.word	0x08008c35
 8008c70:	08008c35 	.word	0x08008c35
 8008c74:	08008c35 	.word	0x08008c35
 8008c78:	08008db9 	.word	0x08008db9
 8008c7c:	08008ce3 	.word	0x08008ce3
 8008c80:	08008d73 	.word	0x08008d73
 8008c84:	08008c35 	.word	0x08008c35
 8008c88:	08008c35 	.word	0x08008c35
 8008c8c:	08008ddb 	.word	0x08008ddb
 8008c90:	08008c35 	.word	0x08008c35
 8008c94:	08008ce3 	.word	0x08008ce3
 8008c98:	08008c35 	.word	0x08008c35
 8008c9c:	08008c35 	.word	0x08008c35
 8008ca0:	08008d7b 	.word	0x08008d7b
 8008ca4:	6833      	ldr	r3, [r6, #0]
 8008ca6:	1d1a      	adds	r2, r3, #4
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	6032      	str	r2, [r6, #0]
 8008cac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008cb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e09d      	b.n	8008df4 <_printf_i+0x1e8>
 8008cb8:	6833      	ldr	r3, [r6, #0]
 8008cba:	6820      	ldr	r0, [r4, #0]
 8008cbc:	1d19      	adds	r1, r3, #4
 8008cbe:	6031      	str	r1, [r6, #0]
 8008cc0:	0606      	lsls	r6, r0, #24
 8008cc2:	d501      	bpl.n	8008cc8 <_printf_i+0xbc>
 8008cc4:	681d      	ldr	r5, [r3, #0]
 8008cc6:	e003      	b.n	8008cd0 <_printf_i+0xc4>
 8008cc8:	0645      	lsls	r5, r0, #25
 8008cca:	d5fb      	bpl.n	8008cc4 <_printf_i+0xb8>
 8008ccc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008cd0:	2d00      	cmp	r5, #0
 8008cd2:	da03      	bge.n	8008cdc <_printf_i+0xd0>
 8008cd4:	232d      	movs	r3, #45	@ 0x2d
 8008cd6:	426d      	negs	r5, r5
 8008cd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cdc:	4859      	ldr	r0, [pc, #356]	@ (8008e44 <_printf_i+0x238>)
 8008cde:	230a      	movs	r3, #10
 8008ce0:	e011      	b.n	8008d06 <_printf_i+0xfa>
 8008ce2:	6821      	ldr	r1, [r4, #0]
 8008ce4:	6833      	ldr	r3, [r6, #0]
 8008ce6:	0608      	lsls	r0, r1, #24
 8008ce8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008cec:	d402      	bmi.n	8008cf4 <_printf_i+0xe8>
 8008cee:	0649      	lsls	r1, r1, #25
 8008cf0:	bf48      	it	mi
 8008cf2:	b2ad      	uxthmi	r5, r5
 8008cf4:	2f6f      	cmp	r7, #111	@ 0x6f
 8008cf6:	4853      	ldr	r0, [pc, #332]	@ (8008e44 <_printf_i+0x238>)
 8008cf8:	6033      	str	r3, [r6, #0]
 8008cfa:	bf14      	ite	ne
 8008cfc:	230a      	movne	r3, #10
 8008cfe:	2308      	moveq	r3, #8
 8008d00:	2100      	movs	r1, #0
 8008d02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d06:	6866      	ldr	r6, [r4, #4]
 8008d08:	60a6      	str	r6, [r4, #8]
 8008d0a:	2e00      	cmp	r6, #0
 8008d0c:	bfa2      	ittt	ge
 8008d0e:	6821      	ldrge	r1, [r4, #0]
 8008d10:	f021 0104 	bicge.w	r1, r1, #4
 8008d14:	6021      	strge	r1, [r4, #0]
 8008d16:	b90d      	cbnz	r5, 8008d1c <_printf_i+0x110>
 8008d18:	2e00      	cmp	r6, #0
 8008d1a:	d04b      	beq.n	8008db4 <_printf_i+0x1a8>
 8008d1c:	4616      	mov	r6, r2
 8008d1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d22:	fb03 5711 	mls	r7, r3, r1, r5
 8008d26:	5dc7      	ldrb	r7, [r0, r7]
 8008d28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d2c:	462f      	mov	r7, r5
 8008d2e:	42bb      	cmp	r3, r7
 8008d30:	460d      	mov	r5, r1
 8008d32:	d9f4      	bls.n	8008d1e <_printf_i+0x112>
 8008d34:	2b08      	cmp	r3, #8
 8008d36:	d10b      	bne.n	8008d50 <_printf_i+0x144>
 8008d38:	6823      	ldr	r3, [r4, #0]
 8008d3a:	07df      	lsls	r7, r3, #31
 8008d3c:	d508      	bpl.n	8008d50 <_printf_i+0x144>
 8008d3e:	6923      	ldr	r3, [r4, #16]
 8008d40:	6861      	ldr	r1, [r4, #4]
 8008d42:	4299      	cmp	r1, r3
 8008d44:	bfde      	ittt	le
 8008d46:	2330      	movle	r3, #48	@ 0x30
 8008d48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d4c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008d50:	1b92      	subs	r2, r2, r6
 8008d52:	6122      	str	r2, [r4, #16]
 8008d54:	f8cd a000 	str.w	sl, [sp]
 8008d58:	464b      	mov	r3, r9
 8008d5a:	aa03      	add	r2, sp, #12
 8008d5c:	4621      	mov	r1, r4
 8008d5e:	4640      	mov	r0, r8
 8008d60:	f7ff fee6 	bl	8008b30 <_printf_common>
 8008d64:	3001      	adds	r0, #1
 8008d66:	d14a      	bne.n	8008dfe <_printf_i+0x1f2>
 8008d68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d6c:	b004      	add	sp, #16
 8008d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	f043 0320 	orr.w	r3, r3, #32
 8008d78:	6023      	str	r3, [r4, #0]
 8008d7a:	4833      	ldr	r0, [pc, #204]	@ (8008e48 <_printf_i+0x23c>)
 8008d7c:	2778      	movs	r7, #120	@ 0x78
 8008d7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d82:	6823      	ldr	r3, [r4, #0]
 8008d84:	6831      	ldr	r1, [r6, #0]
 8008d86:	061f      	lsls	r7, r3, #24
 8008d88:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d8c:	d402      	bmi.n	8008d94 <_printf_i+0x188>
 8008d8e:	065f      	lsls	r7, r3, #25
 8008d90:	bf48      	it	mi
 8008d92:	b2ad      	uxthmi	r5, r5
 8008d94:	6031      	str	r1, [r6, #0]
 8008d96:	07d9      	lsls	r1, r3, #31
 8008d98:	bf44      	itt	mi
 8008d9a:	f043 0320 	orrmi.w	r3, r3, #32
 8008d9e:	6023      	strmi	r3, [r4, #0]
 8008da0:	b11d      	cbz	r5, 8008daa <_printf_i+0x19e>
 8008da2:	2310      	movs	r3, #16
 8008da4:	e7ac      	b.n	8008d00 <_printf_i+0xf4>
 8008da6:	4827      	ldr	r0, [pc, #156]	@ (8008e44 <_printf_i+0x238>)
 8008da8:	e7e9      	b.n	8008d7e <_printf_i+0x172>
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	f023 0320 	bic.w	r3, r3, #32
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	e7f6      	b.n	8008da2 <_printf_i+0x196>
 8008db4:	4616      	mov	r6, r2
 8008db6:	e7bd      	b.n	8008d34 <_printf_i+0x128>
 8008db8:	6833      	ldr	r3, [r6, #0]
 8008dba:	6825      	ldr	r5, [r4, #0]
 8008dbc:	6961      	ldr	r1, [r4, #20]
 8008dbe:	1d18      	adds	r0, r3, #4
 8008dc0:	6030      	str	r0, [r6, #0]
 8008dc2:	062e      	lsls	r6, r5, #24
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	d501      	bpl.n	8008dcc <_printf_i+0x1c0>
 8008dc8:	6019      	str	r1, [r3, #0]
 8008dca:	e002      	b.n	8008dd2 <_printf_i+0x1c6>
 8008dcc:	0668      	lsls	r0, r5, #25
 8008dce:	d5fb      	bpl.n	8008dc8 <_printf_i+0x1bc>
 8008dd0:	8019      	strh	r1, [r3, #0]
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	6123      	str	r3, [r4, #16]
 8008dd6:	4616      	mov	r6, r2
 8008dd8:	e7bc      	b.n	8008d54 <_printf_i+0x148>
 8008dda:	6833      	ldr	r3, [r6, #0]
 8008ddc:	1d1a      	adds	r2, r3, #4
 8008dde:	6032      	str	r2, [r6, #0]
 8008de0:	681e      	ldr	r6, [r3, #0]
 8008de2:	6862      	ldr	r2, [r4, #4]
 8008de4:	2100      	movs	r1, #0
 8008de6:	4630      	mov	r0, r6
 8008de8:	f7f7 fa32 	bl	8000250 <memchr>
 8008dec:	b108      	cbz	r0, 8008df2 <_printf_i+0x1e6>
 8008dee:	1b80      	subs	r0, r0, r6
 8008df0:	6060      	str	r0, [r4, #4]
 8008df2:	6863      	ldr	r3, [r4, #4]
 8008df4:	6123      	str	r3, [r4, #16]
 8008df6:	2300      	movs	r3, #0
 8008df8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dfc:	e7aa      	b.n	8008d54 <_printf_i+0x148>
 8008dfe:	6923      	ldr	r3, [r4, #16]
 8008e00:	4632      	mov	r2, r6
 8008e02:	4649      	mov	r1, r9
 8008e04:	4640      	mov	r0, r8
 8008e06:	47d0      	blx	sl
 8008e08:	3001      	adds	r0, #1
 8008e0a:	d0ad      	beq.n	8008d68 <_printf_i+0x15c>
 8008e0c:	6823      	ldr	r3, [r4, #0]
 8008e0e:	079b      	lsls	r3, r3, #30
 8008e10:	d413      	bmi.n	8008e3a <_printf_i+0x22e>
 8008e12:	68e0      	ldr	r0, [r4, #12]
 8008e14:	9b03      	ldr	r3, [sp, #12]
 8008e16:	4298      	cmp	r0, r3
 8008e18:	bfb8      	it	lt
 8008e1a:	4618      	movlt	r0, r3
 8008e1c:	e7a6      	b.n	8008d6c <_printf_i+0x160>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	4632      	mov	r2, r6
 8008e22:	4649      	mov	r1, r9
 8008e24:	4640      	mov	r0, r8
 8008e26:	47d0      	blx	sl
 8008e28:	3001      	adds	r0, #1
 8008e2a:	d09d      	beq.n	8008d68 <_printf_i+0x15c>
 8008e2c:	3501      	adds	r5, #1
 8008e2e:	68e3      	ldr	r3, [r4, #12]
 8008e30:	9903      	ldr	r1, [sp, #12]
 8008e32:	1a5b      	subs	r3, r3, r1
 8008e34:	42ab      	cmp	r3, r5
 8008e36:	dcf2      	bgt.n	8008e1e <_printf_i+0x212>
 8008e38:	e7eb      	b.n	8008e12 <_printf_i+0x206>
 8008e3a:	2500      	movs	r5, #0
 8008e3c:	f104 0619 	add.w	r6, r4, #25
 8008e40:	e7f5      	b.n	8008e2e <_printf_i+0x222>
 8008e42:	bf00      	nop
 8008e44:	08009a13 	.word	0x08009a13
 8008e48:	08009a24 	.word	0x08009a24

08008e4c <__sflush_r>:
 8008e4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e54:	0716      	lsls	r6, r2, #28
 8008e56:	4605      	mov	r5, r0
 8008e58:	460c      	mov	r4, r1
 8008e5a:	d454      	bmi.n	8008f06 <__sflush_r+0xba>
 8008e5c:	684b      	ldr	r3, [r1, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	dc02      	bgt.n	8008e68 <__sflush_r+0x1c>
 8008e62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	dd48      	ble.n	8008efa <__sflush_r+0xae>
 8008e68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e6a:	2e00      	cmp	r6, #0
 8008e6c:	d045      	beq.n	8008efa <__sflush_r+0xae>
 8008e6e:	2300      	movs	r3, #0
 8008e70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e74:	682f      	ldr	r7, [r5, #0]
 8008e76:	6a21      	ldr	r1, [r4, #32]
 8008e78:	602b      	str	r3, [r5, #0]
 8008e7a:	d030      	beq.n	8008ede <__sflush_r+0x92>
 8008e7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e7e:	89a3      	ldrh	r3, [r4, #12]
 8008e80:	0759      	lsls	r1, r3, #29
 8008e82:	d505      	bpl.n	8008e90 <__sflush_r+0x44>
 8008e84:	6863      	ldr	r3, [r4, #4]
 8008e86:	1ad2      	subs	r2, r2, r3
 8008e88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e8a:	b10b      	cbz	r3, 8008e90 <__sflush_r+0x44>
 8008e8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e8e:	1ad2      	subs	r2, r2, r3
 8008e90:	2300      	movs	r3, #0
 8008e92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e94:	6a21      	ldr	r1, [r4, #32]
 8008e96:	4628      	mov	r0, r5
 8008e98:	47b0      	blx	r6
 8008e9a:	1c43      	adds	r3, r0, #1
 8008e9c:	89a3      	ldrh	r3, [r4, #12]
 8008e9e:	d106      	bne.n	8008eae <__sflush_r+0x62>
 8008ea0:	6829      	ldr	r1, [r5, #0]
 8008ea2:	291d      	cmp	r1, #29
 8008ea4:	d82b      	bhi.n	8008efe <__sflush_r+0xb2>
 8008ea6:	4a2a      	ldr	r2, [pc, #168]	@ (8008f50 <__sflush_r+0x104>)
 8008ea8:	410a      	asrs	r2, r1
 8008eaa:	07d6      	lsls	r6, r2, #31
 8008eac:	d427      	bmi.n	8008efe <__sflush_r+0xb2>
 8008eae:	2200      	movs	r2, #0
 8008eb0:	6062      	str	r2, [r4, #4]
 8008eb2:	04d9      	lsls	r1, r3, #19
 8008eb4:	6922      	ldr	r2, [r4, #16]
 8008eb6:	6022      	str	r2, [r4, #0]
 8008eb8:	d504      	bpl.n	8008ec4 <__sflush_r+0x78>
 8008eba:	1c42      	adds	r2, r0, #1
 8008ebc:	d101      	bne.n	8008ec2 <__sflush_r+0x76>
 8008ebe:	682b      	ldr	r3, [r5, #0]
 8008ec0:	b903      	cbnz	r3, 8008ec4 <__sflush_r+0x78>
 8008ec2:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ec4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ec6:	602f      	str	r7, [r5, #0]
 8008ec8:	b1b9      	cbz	r1, 8008efa <__sflush_r+0xae>
 8008eca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ece:	4299      	cmp	r1, r3
 8008ed0:	d002      	beq.n	8008ed8 <__sflush_r+0x8c>
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	f000 f97c 	bl	80091d0 <_free_r>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	6363      	str	r3, [r4, #52]	@ 0x34
 8008edc:	e00d      	b.n	8008efa <__sflush_r+0xae>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	47b0      	blx	r6
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	1c50      	adds	r0, r2, #1
 8008ee8:	d1c9      	bne.n	8008e7e <__sflush_r+0x32>
 8008eea:	682b      	ldr	r3, [r5, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d0c6      	beq.n	8008e7e <__sflush_r+0x32>
 8008ef0:	2b1d      	cmp	r3, #29
 8008ef2:	d001      	beq.n	8008ef8 <__sflush_r+0xac>
 8008ef4:	2b16      	cmp	r3, #22
 8008ef6:	d11e      	bne.n	8008f36 <__sflush_r+0xea>
 8008ef8:	602f      	str	r7, [r5, #0]
 8008efa:	2000      	movs	r0, #0
 8008efc:	e022      	b.n	8008f44 <__sflush_r+0xf8>
 8008efe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f02:	b21b      	sxth	r3, r3
 8008f04:	e01b      	b.n	8008f3e <__sflush_r+0xf2>
 8008f06:	690f      	ldr	r7, [r1, #16]
 8008f08:	2f00      	cmp	r7, #0
 8008f0a:	d0f6      	beq.n	8008efa <__sflush_r+0xae>
 8008f0c:	0793      	lsls	r3, r2, #30
 8008f0e:	680e      	ldr	r6, [r1, #0]
 8008f10:	bf08      	it	eq
 8008f12:	694b      	ldreq	r3, [r1, #20]
 8008f14:	600f      	str	r7, [r1, #0]
 8008f16:	bf18      	it	ne
 8008f18:	2300      	movne	r3, #0
 8008f1a:	eba6 0807 	sub.w	r8, r6, r7
 8008f1e:	608b      	str	r3, [r1, #8]
 8008f20:	f1b8 0f00 	cmp.w	r8, #0
 8008f24:	dde9      	ble.n	8008efa <__sflush_r+0xae>
 8008f26:	6a21      	ldr	r1, [r4, #32]
 8008f28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008f2a:	4643      	mov	r3, r8
 8008f2c:	463a      	mov	r2, r7
 8008f2e:	4628      	mov	r0, r5
 8008f30:	47b0      	blx	r6
 8008f32:	2800      	cmp	r0, #0
 8008f34:	dc08      	bgt.n	8008f48 <__sflush_r+0xfc>
 8008f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f3e:	81a3      	strh	r3, [r4, #12]
 8008f40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f48:	4407      	add	r7, r0
 8008f4a:	eba8 0800 	sub.w	r8, r8, r0
 8008f4e:	e7e7      	b.n	8008f20 <__sflush_r+0xd4>
 8008f50:	dfbffffe 	.word	0xdfbffffe

08008f54 <_fflush_r>:
 8008f54:	b538      	push	{r3, r4, r5, lr}
 8008f56:	690b      	ldr	r3, [r1, #16]
 8008f58:	4605      	mov	r5, r0
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	b913      	cbnz	r3, 8008f64 <_fflush_r+0x10>
 8008f5e:	2500      	movs	r5, #0
 8008f60:	4628      	mov	r0, r5
 8008f62:	bd38      	pop	{r3, r4, r5, pc}
 8008f64:	b118      	cbz	r0, 8008f6e <_fflush_r+0x1a>
 8008f66:	6a03      	ldr	r3, [r0, #32]
 8008f68:	b90b      	cbnz	r3, 8008f6e <_fflush_r+0x1a>
 8008f6a:	f7ff fa75 	bl	8008458 <__sinit>
 8008f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d0f3      	beq.n	8008f5e <_fflush_r+0xa>
 8008f76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f78:	07d0      	lsls	r0, r2, #31
 8008f7a:	d404      	bmi.n	8008f86 <_fflush_r+0x32>
 8008f7c:	0599      	lsls	r1, r3, #22
 8008f7e:	d402      	bmi.n	8008f86 <_fflush_r+0x32>
 8008f80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f82:	f7ff fbb2 	bl	80086ea <__retarget_lock_acquire_recursive>
 8008f86:	4628      	mov	r0, r5
 8008f88:	4621      	mov	r1, r4
 8008f8a:	f7ff ff5f 	bl	8008e4c <__sflush_r>
 8008f8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f90:	07da      	lsls	r2, r3, #31
 8008f92:	4605      	mov	r5, r0
 8008f94:	d4e4      	bmi.n	8008f60 <_fflush_r+0xc>
 8008f96:	89a3      	ldrh	r3, [r4, #12]
 8008f98:	059b      	lsls	r3, r3, #22
 8008f9a:	d4e1      	bmi.n	8008f60 <_fflush_r+0xc>
 8008f9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f9e:	f7ff fba5 	bl	80086ec <__retarget_lock_release_recursive>
 8008fa2:	e7dd      	b.n	8008f60 <_fflush_r+0xc>

08008fa4 <__malloc_lock>:
 8008fa4:	4801      	ldr	r0, [pc, #4]	@ (8008fac <__malloc_lock+0x8>)
 8008fa6:	f7ff bba0 	b.w	80086ea <__retarget_lock_acquire_recursive>
 8008faa:	bf00      	nop
 8008fac:	20000640 	.word	0x20000640

08008fb0 <__malloc_unlock>:
 8008fb0:	4801      	ldr	r0, [pc, #4]	@ (8008fb8 <__malloc_unlock+0x8>)
 8008fb2:	f7ff bb9b 	b.w	80086ec <__retarget_lock_release_recursive>
 8008fb6:	bf00      	nop
 8008fb8:	20000640 	.word	0x20000640

08008fbc <__sread>:
 8008fbc:	b510      	push	{r4, lr}
 8008fbe:	460c      	mov	r4, r1
 8008fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fc4:	f000 f8ba 	bl	800913c <_read_r>
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	bfab      	itete	ge
 8008fcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008fce:	89a3      	ldrhlt	r3, [r4, #12]
 8008fd0:	181b      	addge	r3, r3, r0
 8008fd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008fd6:	bfac      	ite	ge
 8008fd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008fda:	81a3      	strhlt	r3, [r4, #12]
 8008fdc:	bd10      	pop	{r4, pc}

08008fde <__swrite>:
 8008fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe2:	461f      	mov	r7, r3
 8008fe4:	898b      	ldrh	r3, [r1, #12]
 8008fe6:	05db      	lsls	r3, r3, #23
 8008fe8:	4605      	mov	r5, r0
 8008fea:	460c      	mov	r4, r1
 8008fec:	4616      	mov	r6, r2
 8008fee:	d505      	bpl.n	8008ffc <__swrite+0x1e>
 8008ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f000 f88e 	bl	8009118 <_lseek_r>
 8008ffc:	89a3      	ldrh	r3, [r4, #12]
 8008ffe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009002:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009006:	81a3      	strh	r3, [r4, #12]
 8009008:	4632      	mov	r2, r6
 800900a:	463b      	mov	r3, r7
 800900c:	4628      	mov	r0, r5
 800900e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009012:	f000 b8b5 	b.w	8009180 <_write_r>

08009016 <__sseek>:
 8009016:	b510      	push	{r4, lr}
 8009018:	460c      	mov	r4, r1
 800901a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800901e:	f000 f87b 	bl	8009118 <_lseek_r>
 8009022:	1c43      	adds	r3, r0, #1
 8009024:	89a3      	ldrh	r3, [r4, #12]
 8009026:	bf15      	itete	ne
 8009028:	6560      	strne	r0, [r4, #84]	@ 0x54
 800902a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800902e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009032:	81a3      	strheq	r3, [r4, #12]
 8009034:	bf18      	it	ne
 8009036:	81a3      	strhne	r3, [r4, #12]
 8009038:	bd10      	pop	{r4, pc}

0800903a <__sclose>:
 800903a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800903e:	f000 b85b 	b.w	80090f8 <_close_r>
	...

08009044 <fiprintf>:
 8009044:	b40e      	push	{r1, r2, r3}
 8009046:	b503      	push	{r0, r1, lr}
 8009048:	4601      	mov	r1, r0
 800904a:	ab03      	add	r3, sp, #12
 800904c:	4805      	ldr	r0, [pc, #20]	@ (8009064 <fiprintf+0x20>)
 800904e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009052:	6800      	ldr	r0, [r0, #0]
 8009054:	9301      	str	r3, [sp, #4]
 8009056:	f000 f92f 	bl	80092b8 <_vfiprintf_r>
 800905a:	b002      	add	sp, #8
 800905c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009060:	b003      	add	sp, #12
 8009062:	4770      	bx	lr
 8009064:	200000ec 	.word	0x200000ec

08009068 <_realloc_r>:
 8009068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800906c:	4680      	mov	r8, r0
 800906e:	4615      	mov	r5, r2
 8009070:	460c      	mov	r4, r1
 8009072:	b921      	cbnz	r1, 800907e <_realloc_r+0x16>
 8009074:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009078:	4611      	mov	r1, r2
 800907a:	f7ff bcd9 	b.w	8008a30 <_malloc_r>
 800907e:	b92a      	cbnz	r2, 800908c <_realloc_r+0x24>
 8009080:	f000 f8a6 	bl	80091d0 <_free_r>
 8009084:	2400      	movs	r4, #0
 8009086:	4620      	mov	r0, r4
 8009088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800908c:	f000 fa2c 	bl	80094e8 <_malloc_usable_size_r>
 8009090:	4285      	cmp	r5, r0
 8009092:	4606      	mov	r6, r0
 8009094:	d802      	bhi.n	800909c <_realloc_r+0x34>
 8009096:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800909a:	d8f4      	bhi.n	8009086 <_realloc_r+0x1e>
 800909c:	4629      	mov	r1, r5
 800909e:	4640      	mov	r0, r8
 80090a0:	f7ff fcc6 	bl	8008a30 <_malloc_r>
 80090a4:	4607      	mov	r7, r0
 80090a6:	2800      	cmp	r0, #0
 80090a8:	d0ec      	beq.n	8009084 <_realloc_r+0x1c>
 80090aa:	42b5      	cmp	r5, r6
 80090ac:	462a      	mov	r2, r5
 80090ae:	4621      	mov	r1, r4
 80090b0:	bf28      	it	cs
 80090b2:	4632      	movcs	r2, r6
 80090b4:	f000 f876 	bl	80091a4 <memcpy>
 80090b8:	4621      	mov	r1, r4
 80090ba:	4640      	mov	r0, r8
 80090bc:	f000 f888 	bl	80091d0 <_free_r>
 80090c0:	463c      	mov	r4, r7
 80090c2:	e7e0      	b.n	8009086 <_realloc_r+0x1e>

080090c4 <memmove>:
 80090c4:	4288      	cmp	r0, r1
 80090c6:	b510      	push	{r4, lr}
 80090c8:	eb01 0402 	add.w	r4, r1, r2
 80090cc:	d902      	bls.n	80090d4 <memmove+0x10>
 80090ce:	4284      	cmp	r4, r0
 80090d0:	4623      	mov	r3, r4
 80090d2:	d807      	bhi.n	80090e4 <memmove+0x20>
 80090d4:	1e43      	subs	r3, r0, #1
 80090d6:	42a1      	cmp	r1, r4
 80090d8:	d008      	beq.n	80090ec <memmove+0x28>
 80090da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090e2:	e7f8      	b.n	80090d6 <memmove+0x12>
 80090e4:	4402      	add	r2, r0
 80090e6:	4601      	mov	r1, r0
 80090e8:	428a      	cmp	r2, r1
 80090ea:	d100      	bne.n	80090ee <memmove+0x2a>
 80090ec:	bd10      	pop	{r4, pc}
 80090ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090f6:	e7f7      	b.n	80090e8 <memmove+0x24>

080090f8 <_close_r>:
 80090f8:	b538      	push	{r3, r4, r5, lr}
 80090fa:	4d06      	ldr	r5, [pc, #24]	@ (8009114 <_close_r+0x1c>)
 80090fc:	2300      	movs	r3, #0
 80090fe:	4604      	mov	r4, r0
 8009100:	4608      	mov	r0, r1
 8009102:	602b      	str	r3, [r5, #0]
 8009104:	f7f7 fea8 	bl	8000e58 <_close>
 8009108:	1c43      	adds	r3, r0, #1
 800910a:	d102      	bne.n	8009112 <_close_r+0x1a>
 800910c:	682b      	ldr	r3, [r5, #0]
 800910e:	b103      	cbz	r3, 8009112 <_close_r+0x1a>
 8009110:	6023      	str	r3, [r4, #0]
 8009112:	bd38      	pop	{r3, r4, r5, pc}
 8009114:	2000064c 	.word	0x2000064c

08009118 <_lseek_r>:
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	4d07      	ldr	r5, [pc, #28]	@ (8009138 <_lseek_r+0x20>)
 800911c:	4604      	mov	r4, r0
 800911e:	4608      	mov	r0, r1
 8009120:	4611      	mov	r1, r2
 8009122:	2200      	movs	r2, #0
 8009124:	602a      	str	r2, [r5, #0]
 8009126:	461a      	mov	r2, r3
 8009128:	f7f7 febd 	bl	8000ea6 <_lseek>
 800912c:	1c43      	adds	r3, r0, #1
 800912e:	d102      	bne.n	8009136 <_lseek_r+0x1e>
 8009130:	682b      	ldr	r3, [r5, #0]
 8009132:	b103      	cbz	r3, 8009136 <_lseek_r+0x1e>
 8009134:	6023      	str	r3, [r4, #0]
 8009136:	bd38      	pop	{r3, r4, r5, pc}
 8009138:	2000064c 	.word	0x2000064c

0800913c <_read_r>:
 800913c:	b538      	push	{r3, r4, r5, lr}
 800913e:	4d07      	ldr	r5, [pc, #28]	@ (800915c <_read_r+0x20>)
 8009140:	4604      	mov	r4, r0
 8009142:	4608      	mov	r0, r1
 8009144:	4611      	mov	r1, r2
 8009146:	2200      	movs	r2, #0
 8009148:	602a      	str	r2, [r5, #0]
 800914a:	461a      	mov	r2, r3
 800914c:	f7f7 fe4b 	bl	8000de6 <_read>
 8009150:	1c43      	adds	r3, r0, #1
 8009152:	d102      	bne.n	800915a <_read_r+0x1e>
 8009154:	682b      	ldr	r3, [r5, #0]
 8009156:	b103      	cbz	r3, 800915a <_read_r+0x1e>
 8009158:	6023      	str	r3, [r4, #0]
 800915a:	bd38      	pop	{r3, r4, r5, pc}
 800915c:	2000064c 	.word	0x2000064c

08009160 <_sbrk_r>:
 8009160:	b538      	push	{r3, r4, r5, lr}
 8009162:	4d06      	ldr	r5, [pc, #24]	@ (800917c <_sbrk_r+0x1c>)
 8009164:	2300      	movs	r3, #0
 8009166:	4604      	mov	r4, r0
 8009168:	4608      	mov	r0, r1
 800916a:	602b      	str	r3, [r5, #0]
 800916c:	f7f7 fea8 	bl	8000ec0 <_sbrk>
 8009170:	1c43      	adds	r3, r0, #1
 8009172:	d102      	bne.n	800917a <_sbrk_r+0x1a>
 8009174:	682b      	ldr	r3, [r5, #0]
 8009176:	b103      	cbz	r3, 800917a <_sbrk_r+0x1a>
 8009178:	6023      	str	r3, [r4, #0]
 800917a:	bd38      	pop	{r3, r4, r5, pc}
 800917c:	2000064c 	.word	0x2000064c

08009180 <_write_r>:
 8009180:	b538      	push	{r3, r4, r5, lr}
 8009182:	4d07      	ldr	r5, [pc, #28]	@ (80091a0 <_write_r+0x20>)
 8009184:	4604      	mov	r4, r0
 8009186:	4608      	mov	r0, r1
 8009188:	4611      	mov	r1, r2
 800918a:	2200      	movs	r2, #0
 800918c:	602a      	str	r2, [r5, #0]
 800918e:	461a      	mov	r2, r3
 8009190:	f7f7 fe46 	bl	8000e20 <_write>
 8009194:	1c43      	adds	r3, r0, #1
 8009196:	d102      	bne.n	800919e <_write_r+0x1e>
 8009198:	682b      	ldr	r3, [r5, #0]
 800919a:	b103      	cbz	r3, 800919e <_write_r+0x1e>
 800919c:	6023      	str	r3, [r4, #0]
 800919e:	bd38      	pop	{r3, r4, r5, pc}
 80091a0:	2000064c 	.word	0x2000064c

080091a4 <memcpy>:
 80091a4:	440a      	add	r2, r1
 80091a6:	4291      	cmp	r1, r2
 80091a8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80091ac:	d100      	bne.n	80091b0 <memcpy+0xc>
 80091ae:	4770      	bx	lr
 80091b0:	b510      	push	{r4, lr}
 80091b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091ba:	4291      	cmp	r1, r2
 80091bc:	d1f9      	bne.n	80091b2 <memcpy+0xe>
 80091be:	bd10      	pop	{r4, pc}

080091c0 <abort>:
 80091c0:	b508      	push	{r3, lr}
 80091c2:	2006      	movs	r0, #6
 80091c4:	f000 fad8 	bl	8009778 <raise>
 80091c8:	2001      	movs	r0, #1
 80091ca:	f7f7 fe01 	bl	8000dd0 <_exit>
	...

080091d0 <_free_r>:
 80091d0:	b538      	push	{r3, r4, r5, lr}
 80091d2:	4605      	mov	r5, r0
 80091d4:	2900      	cmp	r1, #0
 80091d6:	d041      	beq.n	800925c <_free_r+0x8c>
 80091d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091dc:	1f0c      	subs	r4, r1, #4
 80091de:	2b00      	cmp	r3, #0
 80091e0:	bfb8      	it	lt
 80091e2:	18e4      	addlt	r4, r4, r3
 80091e4:	f7ff fede 	bl	8008fa4 <__malloc_lock>
 80091e8:	4a1d      	ldr	r2, [pc, #116]	@ (8009260 <_free_r+0x90>)
 80091ea:	6813      	ldr	r3, [r2, #0]
 80091ec:	b933      	cbnz	r3, 80091fc <_free_r+0x2c>
 80091ee:	6063      	str	r3, [r4, #4]
 80091f0:	6014      	str	r4, [r2, #0]
 80091f2:	4628      	mov	r0, r5
 80091f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091f8:	f7ff beda 	b.w	8008fb0 <__malloc_unlock>
 80091fc:	42a3      	cmp	r3, r4
 80091fe:	d908      	bls.n	8009212 <_free_r+0x42>
 8009200:	6820      	ldr	r0, [r4, #0]
 8009202:	1821      	adds	r1, r4, r0
 8009204:	428b      	cmp	r3, r1
 8009206:	bf01      	itttt	eq
 8009208:	6819      	ldreq	r1, [r3, #0]
 800920a:	685b      	ldreq	r3, [r3, #4]
 800920c:	1809      	addeq	r1, r1, r0
 800920e:	6021      	streq	r1, [r4, #0]
 8009210:	e7ed      	b.n	80091ee <_free_r+0x1e>
 8009212:	461a      	mov	r2, r3
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	b10b      	cbz	r3, 800921c <_free_r+0x4c>
 8009218:	42a3      	cmp	r3, r4
 800921a:	d9fa      	bls.n	8009212 <_free_r+0x42>
 800921c:	6811      	ldr	r1, [r2, #0]
 800921e:	1850      	adds	r0, r2, r1
 8009220:	42a0      	cmp	r0, r4
 8009222:	d10b      	bne.n	800923c <_free_r+0x6c>
 8009224:	6820      	ldr	r0, [r4, #0]
 8009226:	4401      	add	r1, r0
 8009228:	1850      	adds	r0, r2, r1
 800922a:	4283      	cmp	r3, r0
 800922c:	6011      	str	r1, [r2, #0]
 800922e:	d1e0      	bne.n	80091f2 <_free_r+0x22>
 8009230:	6818      	ldr	r0, [r3, #0]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	6053      	str	r3, [r2, #4]
 8009236:	4408      	add	r0, r1
 8009238:	6010      	str	r0, [r2, #0]
 800923a:	e7da      	b.n	80091f2 <_free_r+0x22>
 800923c:	d902      	bls.n	8009244 <_free_r+0x74>
 800923e:	230c      	movs	r3, #12
 8009240:	602b      	str	r3, [r5, #0]
 8009242:	e7d6      	b.n	80091f2 <_free_r+0x22>
 8009244:	6820      	ldr	r0, [r4, #0]
 8009246:	1821      	adds	r1, r4, r0
 8009248:	428b      	cmp	r3, r1
 800924a:	bf04      	itt	eq
 800924c:	6819      	ldreq	r1, [r3, #0]
 800924e:	685b      	ldreq	r3, [r3, #4]
 8009250:	6063      	str	r3, [r4, #4]
 8009252:	bf04      	itt	eq
 8009254:	1809      	addeq	r1, r1, r0
 8009256:	6021      	streq	r1, [r4, #0]
 8009258:	6054      	str	r4, [r2, #4]
 800925a:	e7ca      	b.n	80091f2 <_free_r+0x22>
 800925c:	bd38      	pop	{r3, r4, r5, pc}
 800925e:	bf00      	nop
 8009260:	20000648 	.word	0x20000648

08009264 <__sfputc_r>:
 8009264:	6893      	ldr	r3, [r2, #8]
 8009266:	3b01      	subs	r3, #1
 8009268:	2b00      	cmp	r3, #0
 800926a:	b410      	push	{r4}
 800926c:	6093      	str	r3, [r2, #8]
 800926e:	da08      	bge.n	8009282 <__sfputc_r+0x1e>
 8009270:	6994      	ldr	r4, [r2, #24]
 8009272:	42a3      	cmp	r3, r4
 8009274:	db01      	blt.n	800927a <__sfputc_r+0x16>
 8009276:	290a      	cmp	r1, #10
 8009278:	d103      	bne.n	8009282 <__sfputc_r+0x1e>
 800927a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800927e:	f000 b93b 	b.w	80094f8 <__swbuf_r>
 8009282:	6813      	ldr	r3, [r2, #0]
 8009284:	1c58      	adds	r0, r3, #1
 8009286:	6010      	str	r0, [r2, #0]
 8009288:	7019      	strb	r1, [r3, #0]
 800928a:	4608      	mov	r0, r1
 800928c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009290:	4770      	bx	lr

08009292 <__sfputs_r>:
 8009292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009294:	4606      	mov	r6, r0
 8009296:	460f      	mov	r7, r1
 8009298:	4614      	mov	r4, r2
 800929a:	18d5      	adds	r5, r2, r3
 800929c:	42ac      	cmp	r4, r5
 800929e:	d101      	bne.n	80092a4 <__sfputs_r+0x12>
 80092a0:	2000      	movs	r0, #0
 80092a2:	e007      	b.n	80092b4 <__sfputs_r+0x22>
 80092a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092a8:	463a      	mov	r2, r7
 80092aa:	4630      	mov	r0, r6
 80092ac:	f7ff ffda 	bl	8009264 <__sfputc_r>
 80092b0:	1c43      	adds	r3, r0, #1
 80092b2:	d1f3      	bne.n	800929c <__sfputs_r+0xa>
 80092b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080092b8 <_vfiprintf_r>:
 80092b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092bc:	460d      	mov	r5, r1
 80092be:	b09d      	sub	sp, #116	@ 0x74
 80092c0:	4614      	mov	r4, r2
 80092c2:	4698      	mov	r8, r3
 80092c4:	4606      	mov	r6, r0
 80092c6:	b118      	cbz	r0, 80092d0 <_vfiprintf_r+0x18>
 80092c8:	6a03      	ldr	r3, [r0, #32]
 80092ca:	b90b      	cbnz	r3, 80092d0 <_vfiprintf_r+0x18>
 80092cc:	f7ff f8c4 	bl	8008458 <__sinit>
 80092d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092d2:	07d9      	lsls	r1, r3, #31
 80092d4:	d405      	bmi.n	80092e2 <_vfiprintf_r+0x2a>
 80092d6:	89ab      	ldrh	r3, [r5, #12]
 80092d8:	059a      	lsls	r2, r3, #22
 80092da:	d402      	bmi.n	80092e2 <_vfiprintf_r+0x2a>
 80092dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092de:	f7ff fa04 	bl	80086ea <__retarget_lock_acquire_recursive>
 80092e2:	89ab      	ldrh	r3, [r5, #12]
 80092e4:	071b      	lsls	r3, r3, #28
 80092e6:	d501      	bpl.n	80092ec <_vfiprintf_r+0x34>
 80092e8:	692b      	ldr	r3, [r5, #16]
 80092ea:	b99b      	cbnz	r3, 8009314 <_vfiprintf_r+0x5c>
 80092ec:	4629      	mov	r1, r5
 80092ee:	4630      	mov	r0, r6
 80092f0:	f000 f940 	bl	8009574 <__swsetup_r>
 80092f4:	b170      	cbz	r0, 8009314 <_vfiprintf_r+0x5c>
 80092f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092f8:	07dc      	lsls	r4, r3, #31
 80092fa:	d504      	bpl.n	8009306 <_vfiprintf_r+0x4e>
 80092fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009300:	b01d      	add	sp, #116	@ 0x74
 8009302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009306:	89ab      	ldrh	r3, [r5, #12]
 8009308:	0598      	lsls	r0, r3, #22
 800930a:	d4f7      	bmi.n	80092fc <_vfiprintf_r+0x44>
 800930c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800930e:	f7ff f9ed 	bl	80086ec <__retarget_lock_release_recursive>
 8009312:	e7f3      	b.n	80092fc <_vfiprintf_r+0x44>
 8009314:	2300      	movs	r3, #0
 8009316:	9309      	str	r3, [sp, #36]	@ 0x24
 8009318:	2320      	movs	r3, #32
 800931a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800931e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009322:	2330      	movs	r3, #48	@ 0x30
 8009324:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80094d4 <_vfiprintf_r+0x21c>
 8009328:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800932c:	f04f 0901 	mov.w	r9, #1
 8009330:	4623      	mov	r3, r4
 8009332:	469a      	mov	sl, r3
 8009334:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009338:	b10a      	cbz	r2, 800933e <_vfiprintf_r+0x86>
 800933a:	2a25      	cmp	r2, #37	@ 0x25
 800933c:	d1f9      	bne.n	8009332 <_vfiprintf_r+0x7a>
 800933e:	ebba 0b04 	subs.w	fp, sl, r4
 8009342:	d00b      	beq.n	800935c <_vfiprintf_r+0xa4>
 8009344:	465b      	mov	r3, fp
 8009346:	4622      	mov	r2, r4
 8009348:	4629      	mov	r1, r5
 800934a:	4630      	mov	r0, r6
 800934c:	f7ff ffa1 	bl	8009292 <__sfputs_r>
 8009350:	3001      	adds	r0, #1
 8009352:	f000 80a7 	beq.w	80094a4 <_vfiprintf_r+0x1ec>
 8009356:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009358:	445a      	add	r2, fp
 800935a:	9209      	str	r2, [sp, #36]	@ 0x24
 800935c:	f89a 3000 	ldrb.w	r3, [sl]
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 809f 	beq.w	80094a4 <_vfiprintf_r+0x1ec>
 8009366:	2300      	movs	r3, #0
 8009368:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800936c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009370:	f10a 0a01 	add.w	sl, sl, #1
 8009374:	9304      	str	r3, [sp, #16]
 8009376:	9307      	str	r3, [sp, #28]
 8009378:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800937c:	931a      	str	r3, [sp, #104]	@ 0x68
 800937e:	4654      	mov	r4, sl
 8009380:	2205      	movs	r2, #5
 8009382:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009386:	4853      	ldr	r0, [pc, #332]	@ (80094d4 <_vfiprintf_r+0x21c>)
 8009388:	f7f6 ff62 	bl	8000250 <memchr>
 800938c:	9a04      	ldr	r2, [sp, #16]
 800938e:	b9d8      	cbnz	r0, 80093c8 <_vfiprintf_r+0x110>
 8009390:	06d1      	lsls	r1, r2, #27
 8009392:	bf44      	itt	mi
 8009394:	2320      	movmi	r3, #32
 8009396:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800939a:	0713      	lsls	r3, r2, #28
 800939c:	bf44      	itt	mi
 800939e:	232b      	movmi	r3, #43	@ 0x2b
 80093a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093a4:	f89a 3000 	ldrb.w	r3, [sl]
 80093a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80093aa:	d015      	beq.n	80093d8 <_vfiprintf_r+0x120>
 80093ac:	9a07      	ldr	r2, [sp, #28]
 80093ae:	4654      	mov	r4, sl
 80093b0:	2000      	movs	r0, #0
 80093b2:	f04f 0c0a 	mov.w	ip, #10
 80093b6:	4621      	mov	r1, r4
 80093b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093bc:	3b30      	subs	r3, #48	@ 0x30
 80093be:	2b09      	cmp	r3, #9
 80093c0:	d94b      	bls.n	800945a <_vfiprintf_r+0x1a2>
 80093c2:	b1b0      	cbz	r0, 80093f2 <_vfiprintf_r+0x13a>
 80093c4:	9207      	str	r2, [sp, #28]
 80093c6:	e014      	b.n	80093f2 <_vfiprintf_r+0x13a>
 80093c8:	eba0 0308 	sub.w	r3, r0, r8
 80093cc:	fa09 f303 	lsl.w	r3, r9, r3
 80093d0:	4313      	orrs	r3, r2
 80093d2:	9304      	str	r3, [sp, #16]
 80093d4:	46a2      	mov	sl, r4
 80093d6:	e7d2      	b.n	800937e <_vfiprintf_r+0xc6>
 80093d8:	9b03      	ldr	r3, [sp, #12]
 80093da:	1d19      	adds	r1, r3, #4
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	9103      	str	r1, [sp, #12]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	bfbb      	ittet	lt
 80093e4:	425b      	neglt	r3, r3
 80093e6:	f042 0202 	orrlt.w	r2, r2, #2
 80093ea:	9307      	strge	r3, [sp, #28]
 80093ec:	9307      	strlt	r3, [sp, #28]
 80093ee:	bfb8      	it	lt
 80093f0:	9204      	strlt	r2, [sp, #16]
 80093f2:	7823      	ldrb	r3, [r4, #0]
 80093f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80093f6:	d10a      	bne.n	800940e <_vfiprintf_r+0x156>
 80093f8:	7863      	ldrb	r3, [r4, #1]
 80093fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80093fc:	d132      	bne.n	8009464 <_vfiprintf_r+0x1ac>
 80093fe:	9b03      	ldr	r3, [sp, #12]
 8009400:	1d1a      	adds	r2, r3, #4
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	9203      	str	r2, [sp, #12]
 8009406:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800940a:	3402      	adds	r4, #2
 800940c:	9305      	str	r3, [sp, #20]
 800940e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80094e4 <_vfiprintf_r+0x22c>
 8009412:	7821      	ldrb	r1, [r4, #0]
 8009414:	2203      	movs	r2, #3
 8009416:	4650      	mov	r0, sl
 8009418:	f7f6 ff1a 	bl	8000250 <memchr>
 800941c:	b138      	cbz	r0, 800942e <_vfiprintf_r+0x176>
 800941e:	9b04      	ldr	r3, [sp, #16]
 8009420:	eba0 000a 	sub.w	r0, r0, sl
 8009424:	2240      	movs	r2, #64	@ 0x40
 8009426:	4082      	lsls	r2, r0
 8009428:	4313      	orrs	r3, r2
 800942a:	3401      	adds	r4, #1
 800942c:	9304      	str	r3, [sp, #16]
 800942e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009432:	4829      	ldr	r0, [pc, #164]	@ (80094d8 <_vfiprintf_r+0x220>)
 8009434:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009438:	2206      	movs	r2, #6
 800943a:	f7f6 ff09 	bl	8000250 <memchr>
 800943e:	2800      	cmp	r0, #0
 8009440:	d03f      	beq.n	80094c2 <_vfiprintf_r+0x20a>
 8009442:	4b26      	ldr	r3, [pc, #152]	@ (80094dc <_vfiprintf_r+0x224>)
 8009444:	bb1b      	cbnz	r3, 800948e <_vfiprintf_r+0x1d6>
 8009446:	9b03      	ldr	r3, [sp, #12]
 8009448:	3307      	adds	r3, #7
 800944a:	f023 0307 	bic.w	r3, r3, #7
 800944e:	3308      	adds	r3, #8
 8009450:	9303      	str	r3, [sp, #12]
 8009452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009454:	443b      	add	r3, r7
 8009456:	9309      	str	r3, [sp, #36]	@ 0x24
 8009458:	e76a      	b.n	8009330 <_vfiprintf_r+0x78>
 800945a:	fb0c 3202 	mla	r2, ip, r2, r3
 800945e:	460c      	mov	r4, r1
 8009460:	2001      	movs	r0, #1
 8009462:	e7a8      	b.n	80093b6 <_vfiprintf_r+0xfe>
 8009464:	2300      	movs	r3, #0
 8009466:	3401      	adds	r4, #1
 8009468:	9305      	str	r3, [sp, #20]
 800946a:	4619      	mov	r1, r3
 800946c:	f04f 0c0a 	mov.w	ip, #10
 8009470:	4620      	mov	r0, r4
 8009472:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009476:	3a30      	subs	r2, #48	@ 0x30
 8009478:	2a09      	cmp	r2, #9
 800947a:	d903      	bls.n	8009484 <_vfiprintf_r+0x1cc>
 800947c:	2b00      	cmp	r3, #0
 800947e:	d0c6      	beq.n	800940e <_vfiprintf_r+0x156>
 8009480:	9105      	str	r1, [sp, #20]
 8009482:	e7c4      	b.n	800940e <_vfiprintf_r+0x156>
 8009484:	fb0c 2101 	mla	r1, ip, r1, r2
 8009488:	4604      	mov	r4, r0
 800948a:	2301      	movs	r3, #1
 800948c:	e7f0      	b.n	8009470 <_vfiprintf_r+0x1b8>
 800948e:	ab03      	add	r3, sp, #12
 8009490:	9300      	str	r3, [sp, #0]
 8009492:	462a      	mov	r2, r5
 8009494:	4b12      	ldr	r3, [pc, #72]	@ (80094e0 <_vfiprintf_r+0x228>)
 8009496:	a904      	add	r1, sp, #16
 8009498:	4630      	mov	r0, r6
 800949a:	f3af 8000 	nop.w
 800949e:	4607      	mov	r7, r0
 80094a0:	1c78      	adds	r0, r7, #1
 80094a2:	d1d6      	bne.n	8009452 <_vfiprintf_r+0x19a>
 80094a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094a6:	07d9      	lsls	r1, r3, #31
 80094a8:	d405      	bmi.n	80094b6 <_vfiprintf_r+0x1fe>
 80094aa:	89ab      	ldrh	r3, [r5, #12]
 80094ac:	059a      	lsls	r2, r3, #22
 80094ae:	d402      	bmi.n	80094b6 <_vfiprintf_r+0x1fe>
 80094b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094b2:	f7ff f91b 	bl	80086ec <__retarget_lock_release_recursive>
 80094b6:	89ab      	ldrh	r3, [r5, #12]
 80094b8:	065b      	lsls	r3, r3, #25
 80094ba:	f53f af1f 	bmi.w	80092fc <_vfiprintf_r+0x44>
 80094be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094c0:	e71e      	b.n	8009300 <_vfiprintf_r+0x48>
 80094c2:	ab03      	add	r3, sp, #12
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	462a      	mov	r2, r5
 80094c8:	4b05      	ldr	r3, [pc, #20]	@ (80094e0 <_vfiprintf_r+0x228>)
 80094ca:	a904      	add	r1, sp, #16
 80094cc:	4630      	mov	r0, r6
 80094ce:	f7ff fb9d 	bl	8008c0c <_printf_i>
 80094d2:	e7e4      	b.n	800949e <_vfiprintf_r+0x1e6>
 80094d4:	08009a02 	.word	0x08009a02
 80094d8:	08009a0c 	.word	0x08009a0c
 80094dc:	00000000 	.word	0x00000000
 80094e0:	08009293 	.word	0x08009293
 80094e4:	08009a08 	.word	0x08009a08

080094e8 <_malloc_usable_size_r>:
 80094e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094ec:	1f18      	subs	r0, r3, #4
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	bfbc      	itt	lt
 80094f2:	580b      	ldrlt	r3, [r1, r0]
 80094f4:	18c0      	addlt	r0, r0, r3
 80094f6:	4770      	bx	lr

080094f8 <__swbuf_r>:
 80094f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fa:	460e      	mov	r6, r1
 80094fc:	4614      	mov	r4, r2
 80094fe:	4605      	mov	r5, r0
 8009500:	b118      	cbz	r0, 800950a <__swbuf_r+0x12>
 8009502:	6a03      	ldr	r3, [r0, #32]
 8009504:	b90b      	cbnz	r3, 800950a <__swbuf_r+0x12>
 8009506:	f7fe ffa7 	bl	8008458 <__sinit>
 800950a:	69a3      	ldr	r3, [r4, #24]
 800950c:	60a3      	str	r3, [r4, #8]
 800950e:	89a3      	ldrh	r3, [r4, #12]
 8009510:	071a      	lsls	r2, r3, #28
 8009512:	d501      	bpl.n	8009518 <__swbuf_r+0x20>
 8009514:	6923      	ldr	r3, [r4, #16]
 8009516:	b943      	cbnz	r3, 800952a <__swbuf_r+0x32>
 8009518:	4621      	mov	r1, r4
 800951a:	4628      	mov	r0, r5
 800951c:	f000 f82a 	bl	8009574 <__swsetup_r>
 8009520:	b118      	cbz	r0, 800952a <__swbuf_r+0x32>
 8009522:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009526:	4638      	mov	r0, r7
 8009528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	6922      	ldr	r2, [r4, #16]
 800952e:	1a98      	subs	r0, r3, r2
 8009530:	6963      	ldr	r3, [r4, #20]
 8009532:	b2f6      	uxtb	r6, r6
 8009534:	4283      	cmp	r3, r0
 8009536:	4637      	mov	r7, r6
 8009538:	dc05      	bgt.n	8009546 <__swbuf_r+0x4e>
 800953a:	4621      	mov	r1, r4
 800953c:	4628      	mov	r0, r5
 800953e:	f7ff fd09 	bl	8008f54 <_fflush_r>
 8009542:	2800      	cmp	r0, #0
 8009544:	d1ed      	bne.n	8009522 <__swbuf_r+0x2a>
 8009546:	68a3      	ldr	r3, [r4, #8]
 8009548:	3b01      	subs	r3, #1
 800954a:	60a3      	str	r3, [r4, #8]
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	1c5a      	adds	r2, r3, #1
 8009550:	6022      	str	r2, [r4, #0]
 8009552:	701e      	strb	r6, [r3, #0]
 8009554:	6962      	ldr	r2, [r4, #20]
 8009556:	1c43      	adds	r3, r0, #1
 8009558:	429a      	cmp	r2, r3
 800955a:	d004      	beq.n	8009566 <__swbuf_r+0x6e>
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	07db      	lsls	r3, r3, #31
 8009560:	d5e1      	bpl.n	8009526 <__swbuf_r+0x2e>
 8009562:	2e0a      	cmp	r6, #10
 8009564:	d1df      	bne.n	8009526 <__swbuf_r+0x2e>
 8009566:	4621      	mov	r1, r4
 8009568:	4628      	mov	r0, r5
 800956a:	f7ff fcf3 	bl	8008f54 <_fflush_r>
 800956e:	2800      	cmp	r0, #0
 8009570:	d0d9      	beq.n	8009526 <__swbuf_r+0x2e>
 8009572:	e7d6      	b.n	8009522 <__swbuf_r+0x2a>

08009574 <__swsetup_r>:
 8009574:	b538      	push	{r3, r4, r5, lr}
 8009576:	4b29      	ldr	r3, [pc, #164]	@ (800961c <__swsetup_r+0xa8>)
 8009578:	4605      	mov	r5, r0
 800957a:	6818      	ldr	r0, [r3, #0]
 800957c:	460c      	mov	r4, r1
 800957e:	b118      	cbz	r0, 8009588 <__swsetup_r+0x14>
 8009580:	6a03      	ldr	r3, [r0, #32]
 8009582:	b90b      	cbnz	r3, 8009588 <__swsetup_r+0x14>
 8009584:	f7fe ff68 	bl	8008458 <__sinit>
 8009588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800958c:	0719      	lsls	r1, r3, #28
 800958e:	d422      	bmi.n	80095d6 <__swsetup_r+0x62>
 8009590:	06da      	lsls	r2, r3, #27
 8009592:	d407      	bmi.n	80095a4 <__swsetup_r+0x30>
 8009594:	2209      	movs	r2, #9
 8009596:	602a      	str	r2, [r5, #0]
 8009598:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800959c:	81a3      	strh	r3, [r4, #12]
 800959e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80095a2:	e033      	b.n	800960c <__swsetup_r+0x98>
 80095a4:	0758      	lsls	r0, r3, #29
 80095a6:	d512      	bpl.n	80095ce <__swsetup_r+0x5a>
 80095a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80095aa:	b141      	cbz	r1, 80095be <__swsetup_r+0x4a>
 80095ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80095b0:	4299      	cmp	r1, r3
 80095b2:	d002      	beq.n	80095ba <__swsetup_r+0x46>
 80095b4:	4628      	mov	r0, r5
 80095b6:	f7ff fe0b 	bl	80091d0 <_free_r>
 80095ba:	2300      	movs	r3, #0
 80095bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80095be:	89a3      	ldrh	r3, [r4, #12]
 80095c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80095c4:	81a3      	strh	r3, [r4, #12]
 80095c6:	2300      	movs	r3, #0
 80095c8:	6063      	str	r3, [r4, #4]
 80095ca:	6923      	ldr	r3, [r4, #16]
 80095cc:	6023      	str	r3, [r4, #0]
 80095ce:	89a3      	ldrh	r3, [r4, #12]
 80095d0:	f043 0308 	orr.w	r3, r3, #8
 80095d4:	81a3      	strh	r3, [r4, #12]
 80095d6:	6923      	ldr	r3, [r4, #16]
 80095d8:	b94b      	cbnz	r3, 80095ee <__swsetup_r+0x7a>
 80095da:	89a3      	ldrh	r3, [r4, #12]
 80095dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80095e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095e4:	d003      	beq.n	80095ee <__swsetup_r+0x7a>
 80095e6:	4621      	mov	r1, r4
 80095e8:	4628      	mov	r0, r5
 80095ea:	f000 f83f 	bl	800966c <__smakebuf_r>
 80095ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095f2:	f013 0201 	ands.w	r2, r3, #1
 80095f6:	d00a      	beq.n	800960e <__swsetup_r+0x9a>
 80095f8:	2200      	movs	r2, #0
 80095fa:	60a2      	str	r2, [r4, #8]
 80095fc:	6962      	ldr	r2, [r4, #20]
 80095fe:	4252      	negs	r2, r2
 8009600:	61a2      	str	r2, [r4, #24]
 8009602:	6922      	ldr	r2, [r4, #16]
 8009604:	b942      	cbnz	r2, 8009618 <__swsetup_r+0xa4>
 8009606:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800960a:	d1c5      	bne.n	8009598 <__swsetup_r+0x24>
 800960c:	bd38      	pop	{r3, r4, r5, pc}
 800960e:	0799      	lsls	r1, r3, #30
 8009610:	bf58      	it	pl
 8009612:	6962      	ldrpl	r2, [r4, #20]
 8009614:	60a2      	str	r2, [r4, #8]
 8009616:	e7f4      	b.n	8009602 <__swsetup_r+0x8e>
 8009618:	2000      	movs	r0, #0
 800961a:	e7f7      	b.n	800960c <__swsetup_r+0x98>
 800961c:	200000ec 	.word	0x200000ec

08009620 <__swhatbuf_r>:
 8009620:	b570      	push	{r4, r5, r6, lr}
 8009622:	460c      	mov	r4, r1
 8009624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009628:	2900      	cmp	r1, #0
 800962a:	b096      	sub	sp, #88	@ 0x58
 800962c:	4615      	mov	r5, r2
 800962e:	461e      	mov	r6, r3
 8009630:	da0d      	bge.n	800964e <__swhatbuf_r+0x2e>
 8009632:	89a3      	ldrh	r3, [r4, #12]
 8009634:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009638:	f04f 0100 	mov.w	r1, #0
 800963c:	bf14      	ite	ne
 800963e:	2340      	movne	r3, #64	@ 0x40
 8009640:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009644:	2000      	movs	r0, #0
 8009646:	6031      	str	r1, [r6, #0]
 8009648:	602b      	str	r3, [r5, #0]
 800964a:	b016      	add	sp, #88	@ 0x58
 800964c:	bd70      	pop	{r4, r5, r6, pc}
 800964e:	466a      	mov	r2, sp
 8009650:	f000 f848 	bl	80096e4 <_fstat_r>
 8009654:	2800      	cmp	r0, #0
 8009656:	dbec      	blt.n	8009632 <__swhatbuf_r+0x12>
 8009658:	9901      	ldr	r1, [sp, #4]
 800965a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800965e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009662:	4259      	negs	r1, r3
 8009664:	4159      	adcs	r1, r3
 8009666:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800966a:	e7eb      	b.n	8009644 <__swhatbuf_r+0x24>

0800966c <__smakebuf_r>:
 800966c:	898b      	ldrh	r3, [r1, #12]
 800966e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009670:	079d      	lsls	r5, r3, #30
 8009672:	4606      	mov	r6, r0
 8009674:	460c      	mov	r4, r1
 8009676:	d507      	bpl.n	8009688 <__smakebuf_r+0x1c>
 8009678:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800967c:	6023      	str	r3, [r4, #0]
 800967e:	6123      	str	r3, [r4, #16]
 8009680:	2301      	movs	r3, #1
 8009682:	6163      	str	r3, [r4, #20]
 8009684:	b003      	add	sp, #12
 8009686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009688:	ab01      	add	r3, sp, #4
 800968a:	466a      	mov	r2, sp
 800968c:	f7ff ffc8 	bl	8009620 <__swhatbuf_r>
 8009690:	9f00      	ldr	r7, [sp, #0]
 8009692:	4605      	mov	r5, r0
 8009694:	4639      	mov	r1, r7
 8009696:	4630      	mov	r0, r6
 8009698:	f7ff f9ca 	bl	8008a30 <_malloc_r>
 800969c:	b948      	cbnz	r0, 80096b2 <__smakebuf_r+0x46>
 800969e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096a2:	059a      	lsls	r2, r3, #22
 80096a4:	d4ee      	bmi.n	8009684 <__smakebuf_r+0x18>
 80096a6:	f023 0303 	bic.w	r3, r3, #3
 80096aa:	f043 0302 	orr.w	r3, r3, #2
 80096ae:	81a3      	strh	r3, [r4, #12]
 80096b0:	e7e2      	b.n	8009678 <__smakebuf_r+0xc>
 80096b2:	89a3      	ldrh	r3, [r4, #12]
 80096b4:	6020      	str	r0, [r4, #0]
 80096b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096ba:	81a3      	strh	r3, [r4, #12]
 80096bc:	9b01      	ldr	r3, [sp, #4]
 80096be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80096c2:	b15b      	cbz	r3, 80096dc <__smakebuf_r+0x70>
 80096c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096c8:	4630      	mov	r0, r6
 80096ca:	f000 f81d 	bl	8009708 <_isatty_r>
 80096ce:	b128      	cbz	r0, 80096dc <__smakebuf_r+0x70>
 80096d0:	89a3      	ldrh	r3, [r4, #12]
 80096d2:	f023 0303 	bic.w	r3, r3, #3
 80096d6:	f043 0301 	orr.w	r3, r3, #1
 80096da:	81a3      	strh	r3, [r4, #12]
 80096dc:	89a3      	ldrh	r3, [r4, #12]
 80096de:	431d      	orrs	r5, r3
 80096e0:	81a5      	strh	r5, [r4, #12]
 80096e2:	e7cf      	b.n	8009684 <__smakebuf_r+0x18>

080096e4 <_fstat_r>:
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	4d07      	ldr	r5, [pc, #28]	@ (8009704 <_fstat_r+0x20>)
 80096e8:	2300      	movs	r3, #0
 80096ea:	4604      	mov	r4, r0
 80096ec:	4608      	mov	r0, r1
 80096ee:	4611      	mov	r1, r2
 80096f0:	602b      	str	r3, [r5, #0]
 80096f2:	f7f7 fbbd 	bl	8000e70 <_fstat>
 80096f6:	1c43      	adds	r3, r0, #1
 80096f8:	d102      	bne.n	8009700 <_fstat_r+0x1c>
 80096fa:	682b      	ldr	r3, [r5, #0]
 80096fc:	b103      	cbz	r3, 8009700 <_fstat_r+0x1c>
 80096fe:	6023      	str	r3, [r4, #0]
 8009700:	bd38      	pop	{r3, r4, r5, pc}
 8009702:	bf00      	nop
 8009704:	2000064c 	.word	0x2000064c

08009708 <_isatty_r>:
 8009708:	b538      	push	{r3, r4, r5, lr}
 800970a:	4d06      	ldr	r5, [pc, #24]	@ (8009724 <_isatty_r+0x1c>)
 800970c:	2300      	movs	r3, #0
 800970e:	4604      	mov	r4, r0
 8009710:	4608      	mov	r0, r1
 8009712:	602b      	str	r3, [r5, #0]
 8009714:	f7f7 fbbc 	bl	8000e90 <_isatty>
 8009718:	1c43      	adds	r3, r0, #1
 800971a:	d102      	bne.n	8009722 <_isatty_r+0x1a>
 800971c:	682b      	ldr	r3, [r5, #0]
 800971e:	b103      	cbz	r3, 8009722 <_isatty_r+0x1a>
 8009720:	6023      	str	r3, [r4, #0]
 8009722:	bd38      	pop	{r3, r4, r5, pc}
 8009724:	2000064c 	.word	0x2000064c

08009728 <_raise_r>:
 8009728:	291f      	cmp	r1, #31
 800972a:	b538      	push	{r3, r4, r5, lr}
 800972c:	4605      	mov	r5, r0
 800972e:	460c      	mov	r4, r1
 8009730:	d904      	bls.n	800973c <_raise_r+0x14>
 8009732:	2316      	movs	r3, #22
 8009734:	6003      	str	r3, [r0, #0]
 8009736:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800973a:	bd38      	pop	{r3, r4, r5, pc}
 800973c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800973e:	b112      	cbz	r2, 8009746 <_raise_r+0x1e>
 8009740:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009744:	b94b      	cbnz	r3, 800975a <_raise_r+0x32>
 8009746:	4628      	mov	r0, r5
 8009748:	f000 f830 	bl	80097ac <_getpid_r>
 800974c:	4622      	mov	r2, r4
 800974e:	4601      	mov	r1, r0
 8009750:	4628      	mov	r0, r5
 8009752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009756:	f000 b817 	b.w	8009788 <_kill_r>
 800975a:	2b01      	cmp	r3, #1
 800975c:	d00a      	beq.n	8009774 <_raise_r+0x4c>
 800975e:	1c59      	adds	r1, r3, #1
 8009760:	d103      	bne.n	800976a <_raise_r+0x42>
 8009762:	2316      	movs	r3, #22
 8009764:	6003      	str	r3, [r0, #0]
 8009766:	2001      	movs	r0, #1
 8009768:	e7e7      	b.n	800973a <_raise_r+0x12>
 800976a:	2100      	movs	r1, #0
 800976c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009770:	4620      	mov	r0, r4
 8009772:	4798      	blx	r3
 8009774:	2000      	movs	r0, #0
 8009776:	e7e0      	b.n	800973a <_raise_r+0x12>

08009778 <raise>:
 8009778:	4b02      	ldr	r3, [pc, #8]	@ (8009784 <raise+0xc>)
 800977a:	4601      	mov	r1, r0
 800977c:	6818      	ldr	r0, [r3, #0]
 800977e:	f7ff bfd3 	b.w	8009728 <_raise_r>
 8009782:	bf00      	nop
 8009784:	200000ec 	.word	0x200000ec

08009788 <_kill_r>:
 8009788:	b538      	push	{r3, r4, r5, lr}
 800978a:	4d07      	ldr	r5, [pc, #28]	@ (80097a8 <_kill_r+0x20>)
 800978c:	2300      	movs	r3, #0
 800978e:	4604      	mov	r4, r0
 8009790:	4608      	mov	r0, r1
 8009792:	4611      	mov	r1, r2
 8009794:	602b      	str	r3, [r5, #0]
 8009796:	f7f7 fb0b 	bl	8000db0 <_kill>
 800979a:	1c43      	adds	r3, r0, #1
 800979c:	d102      	bne.n	80097a4 <_kill_r+0x1c>
 800979e:	682b      	ldr	r3, [r5, #0]
 80097a0:	b103      	cbz	r3, 80097a4 <_kill_r+0x1c>
 80097a2:	6023      	str	r3, [r4, #0]
 80097a4:	bd38      	pop	{r3, r4, r5, pc}
 80097a6:	bf00      	nop
 80097a8:	2000064c 	.word	0x2000064c

080097ac <_getpid_r>:
 80097ac:	f7f7 baf8 	b.w	8000da0 <_getpid>

080097b0 <_init>:
 80097b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b2:	bf00      	nop
 80097b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b6:	bc08      	pop	{r3}
 80097b8:	469e      	mov	lr, r3
 80097ba:	4770      	bx	lr

080097bc <_fini>:
 80097bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097be:	bf00      	nop
 80097c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097c2:	bc08      	pop	{r3}
 80097c4:	469e      	mov	lr, r3
 80097c6:	4770      	bx	lr
