
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b650  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800b830  0800b830  0000c830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdd4  0800bdd4  0000d1c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bdd4  0800bdd4  0000cdd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bddc  0800bddc  0000d1c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bddc  0800bddc  0000cddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bde0  0800bde0  0000cde0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c4  20000000  0800bde4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a74  200001c4  0800bfa8  0000d1c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c38  0800bfa8  0000dc38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f99d  00000000  00000000  0000d1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ddf  00000000  00000000  0002cb91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  00030970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011d1  00000000  00000000  00032088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002af1f  00000000  00000000  00033259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d0b5  00000000  00000000  0005e178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001157e3  00000000  00000000  0007b22d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00190a10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b80  00000000  00000000  00190a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  001975d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001c4 	.word	0x200001c4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b818 	.word	0x0800b818

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001c8 	.word	0x200001c8
 800021c:	0800b818 	.word	0x0800b818

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2220      	movs	r2, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f00a fa25 	bl	800aa48 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005fe:	4b41      	ldr	r3, [pc, #260]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000600:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000604:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000606:	4b3f      	ldr	r3, [pc, #252]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000608:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800060c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060e:	4b3d      	ldr	r3, [pc, #244]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000614:	4b3b      	ldr	r3, [pc, #236]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800061a:	4b3a      	ldr	r3, [pc, #232]	@ (8000704 <MX_ADC1_Init+0x124>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000620:	4b38      	ldr	r3, [pc, #224]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000622:	2201      	movs	r2, #1
 8000624:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000626:	4b37      	ldr	r3, [pc, #220]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000628:	2204      	movs	r2, #4
 800062a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800062c:	4b35      	ldr	r3, [pc, #212]	@ (8000704 <MX_ADC1_Init+0x124>)
 800062e:	2200      	movs	r2, #0
 8000630:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000632:	4b34      	ldr	r3, [pc, #208]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000634:	2201      	movs	r2, #1
 8000636:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000638:	4b32      	ldr	r3, [pc, #200]	@ (8000704 <MX_ADC1_Init+0x124>)
 800063a:	2203      	movs	r2, #3
 800063c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b31      	ldr	r3, [pc, #196]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000646:	4b2f      	ldr	r3, [pc, #188]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000648:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 800064c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800064e:	4b2d      	ldr	r3, [pc, #180]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000650:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000654:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000656:	4b2b      	ldr	r3, [pc, #172]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000658:	2201      	movs	r2, #1
 800065a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065e:	4b29      	ldr	r3, [pc, #164]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000660:	2200      	movs	r2, #0
 8000662:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000664:	4b27      	ldr	r3, [pc, #156]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066c:	4825      	ldr	r0, [pc, #148]	@ (8000704 <MX_ADC1_Init+0x124>)
 800066e:	f002 f863 	bl	8002738 <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000678:	f000 fb46 	bl	8000d08 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000680:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000684:	4619      	mov	r1, r3
 8000686:	481f      	ldr	r0, [pc, #124]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000688:	f003 fd32 	bl	80040f0 <HAL_ADCEx_MultiModeConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000692:	f000 fb39 	bl	8000d08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000696:	4b1c      	ldr	r3, [pc, #112]	@ (8000708 <MX_ADC1_Init+0x128>)
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800069a:	2306      	movs	r3, #6
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800069e:	2307      	movs	r3, #7
 80006a0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a2:	237f      	movs	r3, #127	@ 0x7f
 80006a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a6:	2304      	movs	r3, #4
 80006a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4619      	mov	r1, r3
 80006b2:	4814      	ldr	r0, [pc, #80]	@ (8000704 <MX_ADC1_Init+0x124>)
 80006b4:	f002 fdb0 	bl	8003218 <HAL_ADC_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006be:	f000 fb23 	bl	8000d08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80006c2:	4b12      	ldr	r3, [pc, #72]	@ (800070c <MX_ADC1_Init+0x12c>)
 80006c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c6:	230c      	movs	r3, #12
 80006c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	4619      	mov	r1, r3
 80006ce:	480d      	ldr	r0, [pc, #52]	@ (8000704 <MX_ADC1_Init+0x124>)
 80006d0:	f002 fda2 	bl	8003218 <HAL_ADC_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80006da:	f000 fb15 	bl	8000d08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006de:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_ADC1_Init+0x130>)
 80006e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e2:	2312      	movs	r3, #18
 80006e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4619      	mov	r1, r3
 80006ea:	4806      	ldr	r0, [pc, #24]	@ (8000704 <MX_ADC1_Init+0x124>)
 80006ec:	f002 fd94 	bl	8003218 <HAL_ADC_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80006f6:	f000 fb07 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	3730      	adds	r7, #48	@ 0x30
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200001e0 	.word	0x200001e0
 8000708:	08600004 	.word	0x08600004
 800070c:	32601000 	.word	0x32601000
 8000710:	21800100 	.word	0x21800100

08000714 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800071a:	463b      	mov	r3, r7
 800071c:	2220      	movs	r2, #32
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f00a f991 	bl	800aa48 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000726:	4b2b      	ldr	r3, [pc, #172]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000728:	4a2b      	ldr	r2, [pc, #172]	@ (80007d8 <MX_ADC2_Init+0xc4>)
 800072a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800072c:	4b29      	ldr	r3, [pc, #164]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 800072e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000732:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000734:	4b27      	ldr	r3, [pc, #156]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800073a:	4b26      	ldr	r3, [pc, #152]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000740:	4b24      	ldr	r3, [pc, #144]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000746:	4b23      	ldr	r3, [pc, #140]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074c:	4b21      	ldr	r3, [pc, #132]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 800074e:	2204      	movs	r2, #4
 8000750:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000752:	4b20      	ldr	r3, [pc, #128]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000754:	2200      	movs	r2, #0
 8000756:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000758:	4b1e      	ldr	r3, [pc, #120]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 800075a:	2200      	movs	r2, #0
 800075c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800075e:	4b1d      	ldr	r3, [pc, #116]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000760:	2201      	movs	r2, #1
 8000762:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000764:	4b1b      	ldr	r3, [pc, #108]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000766:	2200      	movs	r2, #0
 8000768:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076c:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 800076e:	2200      	movs	r2, #0
 8000770:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000772:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000774:	2200      	movs	r2, #0
 8000776:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000778:	4b16      	ldr	r3, [pc, #88]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 800077a:	2200      	movs	r2, #0
 800077c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000780:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000782:	2200      	movs	r2, #0
 8000784:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000786:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000788:	2200      	movs	r2, #0
 800078a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800078e:	4811      	ldr	r0, [pc, #68]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000790:	f001 ffd2 	bl	8002738 <HAL_ADC_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800079a:	f000 fab5 	bl	8000d08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800079e:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <MX_ADC2_Init+0xc8>)
 80007a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007a2:	2306      	movs	r3, #6
 80007a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007aa:	237f      	movs	r3, #127	@ 0x7f
 80007ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007ae:	2304      	movs	r3, #4
 80007b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007b6:	463b      	mov	r3, r7
 80007b8:	4619      	mov	r1, r3
 80007ba:	4806      	ldr	r0, [pc, #24]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 80007bc:	f002 fd2c 	bl	8003218 <HAL_ADC_ConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80007c6:	f000 fa9f 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	3720      	adds	r7, #32
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	2000024c 	.word	0x2000024c
 80007d8:	50000100 	.word	0x50000100
 80007dc:	19200040 	.word	0x19200040

080007e0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b0a4      	sub	sp, #144	@ 0x90
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007fc:	2254      	movs	r2, #84	@ 0x54
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f00a f921 	bl	800aa48 <memset>
  if(adcHandle->Instance==ADC1)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800080e:	f040 80a9 	bne.w	8000964 <HAL_ADC_MspInit+0x184>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000812:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000816:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000818:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800081c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800081e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000822:	4618      	mov	r0, r3
 8000824:	f005 f96a 	bl	8005afc <HAL_RCCEx_PeriphCLKConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800082e:	f000 fa6b 	bl	8000d08 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000832:	4b82      	ldr	r3, [pc, #520]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	3301      	adds	r3, #1
 8000838:	4a80      	ldr	r2, [pc, #512]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 800083a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800083c:	4b7f      	ldr	r3, [pc, #508]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d10b      	bne.n	800085c <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000844:	4b7e      	ldr	r3, [pc, #504]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 8000846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000848:	4a7d      	ldr	r2, [pc, #500]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 800084a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800084e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000850:	4b7b      	ldr	r3, [pc, #492]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 8000852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000854:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24
 800085a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800085c:	4b78      	ldr	r3, [pc, #480]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 800085e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000860:	4a77      	ldr	r2, [pc, #476]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000868:	4b75      	ldr	r3, [pc, #468]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 800086a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	623b      	str	r3, [r7, #32]
 8000872:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000874:	4b72      	ldr	r3, [pc, #456]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 8000876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000878:	4a71      	ldr	r2, [pc, #452]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000880:	4b6f      	ldr	r3, [pc, #444]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 8000882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	61fb      	str	r3, [r7, #28]
 800088a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088c:	4b6c      	ldr	r3, [pc, #432]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 800088e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000890:	4a6b      	ldr	r2, [pc, #428]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 8000892:	f043 0302 	orr.w	r3, r3, #2
 8000896:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000898:	4b69      	ldr	r3, [pc, #420]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 800089a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089c:	f003 0302 	and.w	r3, r3, #2
 80008a0:	61bb      	str	r3, [r7, #24]
 80008a2:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 80008a4:	2304      	movs	r3, #4
 80008a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a8:	2303      	movs	r3, #3
 80008aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008b8:	4619      	mov	r1, r3
 80008ba:	4862      	ldr	r0, [pc, #392]	@ (8000a44 <HAL_ADC_MspInit+0x264>)
 80008bc:	f004 f932 	bl	8004b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80008c0:	2302      	movs	r3, #2
 80008c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c4:	2303      	movs	r3, #3
 80008c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008d4:	4619      	mov	r1, r3
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008da:	f004 f923 	bl	8004b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_Imes_Pin|V_Imes_Pin;
 80008de:	2303      	movs	r3, #3
 80008e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e2:	2303      	movs	r3, #3
 80008e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ee:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008f2:	4619      	mov	r1, r3
 80008f4:	4854      	ldr	r0, [pc, #336]	@ (8000a48 <HAL_ADC_MspInit+0x268>)
 80008f6:	f004 f915 	bl	8004b24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80008fa:	4b54      	ldr	r3, [pc, #336]	@ (8000a4c <HAL_ADC_MspInit+0x26c>)
 80008fc:	4a54      	ldr	r2, [pc, #336]	@ (8000a50 <HAL_ADC_MspInit+0x270>)
 80008fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000900:	4b52      	ldr	r3, [pc, #328]	@ (8000a4c <HAL_ADC_MspInit+0x26c>)
 8000902:	2205      	movs	r2, #5
 8000904:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000906:	4b51      	ldr	r3, [pc, #324]	@ (8000a4c <HAL_ADC_MspInit+0x26c>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800090c:	4b4f      	ldr	r3, [pc, #316]	@ (8000a4c <HAL_ADC_MspInit+0x26c>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000912:	4b4e      	ldr	r3, [pc, #312]	@ (8000a4c <HAL_ADC_MspInit+0x26c>)
 8000914:	2280      	movs	r2, #128	@ 0x80
 8000916:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000918:	4b4c      	ldr	r3, [pc, #304]	@ (8000a4c <HAL_ADC_MspInit+0x26c>)
 800091a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800091e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000920:	4b4a      	ldr	r3, [pc, #296]	@ (8000a4c <HAL_ADC_MspInit+0x26c>)
 8000922:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000926:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000928:	4b48      	ldr	r3, [pc, #288]	@ (8000a4c <HAL_ADC_MspInit+0x26c>)
 800092a:	2220      	movs	r2, #32
 800092c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800092e:	4b47      	ldr	r3, [pc, #284]	@ (8000a4c <HAL_ADC_MspInit+0x26c>)
 8000930:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000934:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000936:	4845      	ldr	r0, [pc, #276]	@ (8000a4c <HAL_ADC_MspInit+0x26c>)
 8000938:	f003 fdc2 	bl	80044c0 <HAL_DMA_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_ADC_MspInit+0x166>
    {
      Error_Handler();
 8000942:	f000 f9e1 	bl	8000d08 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a40      	ldr	r2, [pc, #256]	@ (8000a4c <HAL_ADC_MspInit+0x26c>)
 800094a:	655a      	str	r2, [r3, #84]	@ 0x54
 800094c:	4a3f      	ldr	r2, [pc, #252]	@ (8000a4c <HAL_ADC_MspInit+0x26c>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	2012      	movs	r0, #18
 8000958:	f003 fd8a 	bl	8004470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800095c:	2012      	movs	r0, #18
 800095e:	f003 fda1 	bl	80044a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000962:	e066      	b.n	8000a32 <HAL_ADC_MspInit+0x252>
  else if(adcHandle->Instance==ADC2)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a3a      	ldr	r2, [pc, #232]	@ (8000a54 <HAL_ADC_MspInit+0x274>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d161      	bne.n	8000a32 <HAL_ADC_MspInit+0x252>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800096e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000974:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000978:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800097a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800097e:	4618      	mov	r0, r3
 8000980:	f005 f8bc 	bl	8005afc <HAL_RCCEx_PeriphCLKConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_ADC_MspInit+0x1ae>
      Error_Handler();
 800098a:	f000 f9bd 	bl	8000d08 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800098e:	4b2b      	ldr	r3, [pc, #172]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	3301      	adds	r3, #1
 8000994:	4a29      	ldr	r2, [pc, #164]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 8000996:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000998:	4b28      	ldr	r3, [pc, #160]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d10b      	bne.n	80009b8 <HAL_ADC_MspInit+0x1d8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80009a0:	4b27      	ldr	r3, [pc, #156]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 80009a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a4:	4a26      	ldr	r2, [pc, #152]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 80009a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ac:	4b24      	ldr	r3, [pc, #144]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 80009ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009b4:	617b      	str	r3, [r7, #20]
 80009b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b8:	4b21      	ldr	r3, [pc, #132]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 80009ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009bc:	4a20      	ldr	r2, [pc, #128]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 80009be:	f043 0304 	orr.w	r3, r3, #4
 80009c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 80009c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c8:	f003 0304 	and.w	r3, r3, #4
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 80009d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d4:	4a1a      	ldr	r2, [pc, #104]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009dc:	4b18      	ldr	r3, [pc, #96]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 80009de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 80009e8:	230b      	movs	r3, #11
 80009ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80009fc:	4619      	mov	r1, r3
 80009fe:	4811      	ldr	r0, [pc, #68]	@ (8000a44 <HAL_ADC_MspInit+0x264>)
 8000a00:	f004 f890 	bl	8004b24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000a04:	2301      	movs	r3, #1
 8000a06:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a1e:	f004 f881 	bl	8004b24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	2012      	movs	r0, #18
 8000a28:	f003 fd22 	bl	8004470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a2c:	2012      	movs	r0, #18
 8000a2e:	f003 fd39 	bl	80044a4 <HAL_NVIC_EnableIRQ>
}
 8000a32:	bf00      	nop
 8000a34:	3790      	adds	r7, #144	@ 0x90
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000318 	.word	0x20000318
 8000a40:	40021000 	.word	0x40021000
 8000a44:	48000800 	.word	0x48000800
 8000a48:	48000400 	.word	0x48000400
 8000a4c:	200002b8 	.word	0x200002b8
 8000a50:	40020008 	.word	0x40020008
 8000a54:	50000100 	.word	0x50000100

08000a58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a5e:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <MX_DMA_Init+0x50>)
 8000a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a62:	4a11      	ldr	r2, [pc, #68]	@ (8000aa8 <MX_DMA_Init+0x50>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <MX_DMA_Init+0x50>)
 8000a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a76:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <MX_DMA_Init+0x50>)
 8000a78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000aa8 <MX_DMA_Init+0x50>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a82:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <MX_DMA_Init+0x50>)
 8000a84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2100      	movs	r1, #0
 8000a92:	200b      	movs	r0, #11
 8000a94:	f003 fcec 	bl	8004470 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a98:	200b      	movs	r0, #11
 8000a9a:	f003 fd03 	bl	80044a4 <HAL_NVIC_EnableIRQ>

}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40021000 	.word	0x40021000

08000aac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	@ 0x28
 8000ab0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	4b48      	ldr	r3, [pc, #288]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac6:	4a47      	ldr	r2, [pc, #284]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000ac8:	f043 0304 	orr.w	r3, r3, #4
 8000acc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ace:	4b45      	ldr	r3, [pc, #276]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad2:	f003 0304 	and.w	r3, r3, #4
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ada:	4b42      	ldr	r3, [pc, #264]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ade:	4a41      	ldr	r2, [pc, #260]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000ae0:	f043 0320 	orr.w	r3, r3, #32
 8000ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae6:	4b3f      	ldr	r3, [pc, #252]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aea:	f003 0320 	and.w	r3, r3, #32
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	4b3c      	ldr	r3, [pc, #240]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af6:	4a3b      	ldr	r2, [pc, #236]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afe:	4b39      	ldr	r3, [pc, #228]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	4b36      	ldr	r3, [pc, #216]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0e:	4a35      	ldr	r2, [pc, #212]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b16:	4b33      	ldr	r3, [pc, #204]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b22:	4b30      	ldr	r3, [pc, #192]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b26:	4a2f      	ldr	r2, [pc, #188]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000b28:	f043 0308 	orr.w	r3, r3, #8
 8000b2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000be4 <MX_GPIO_Init+0x138>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b32:	f003 0308 	and.w	r3, r3, #8
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2120      	movs	r1, #32
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b42:	f004 f971 	bl	8004e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CONV_END_GPIO_Port, ADC_CONV_END_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2140      	movs	r1, #64	@ 0x40
 8000b4a:	4827      	ldr	r0, [pc, #156]	@ (8000be8 <MX_GPIO_Init+0x13c>)
 8000b4c:	f004 f96c 	bl	8004e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2104      	movs	r1, #4
 8000b54:	4825      	ldr	r0, [pc, #148]	@ (8000bec <MX_GPIO_Init+0x140>)
 8000b56:	f004 f967 	bl	8004e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000b5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	481d      	ldr	r0, [pc, #116]	@ (8000be8 <MX_GPIO_Init+0x13c>)
 8000b72:	f003 ffd7 	bl	8004b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000b76:	2320      	movs	r3, #32
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b90:	f003 ffc8 	bl	8004b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADC_CONV_END_Pin;
 8000b94:	2340      	movs	r3, #64	@ 0x40
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADC_CONV_END_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480f      	ldr	r0, [pc, #60]	@ (8000be8 <MX_GPIO_Init+0x13c>)
 8000bac:	f003 ffba 	bl	8004b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4809      	ldr	r0, [pc, #36]	@ (8000bec <MX_GPIO_Init+0x140>)
 8000bc8:	f003 ffac 	bl	8004b24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2028      	movs	r0, #40	@ 0x28
 8000bd2:	f003 fc4d 	bl	8004470 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bd6:	2028      	movs	r0, #40	@ 0x28
 8000bd8:	f003 fc64 	bl	80044a4 <HAL_NVIC_EnableIRQ>

}
 8000bdc:	bf00      	nop
 8000bde:	3728      	adds	r7, #40	@ 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40021000 	.word	0x40021000
 8000be8:	48000800 	.word	0x48000800
 8000bec:	48000c00 	.word	0x48000c00

08000bf0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bf4:	f001 fadb 	bl	80021ae <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bf8:	f000 f828 	bl	8000c4c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bfc:	f7ff ff56 	bl	8000aac <MX_GPIO_Init>
	MX_DMA_Init();
 8000c00:	f7ff ff2a 	bl	8000a58 <MX_DMA_Init>
	MX_ADC2_Init();
 8000c04:	f7ff fd86 	bl	8000714 <MX_ADC2_Init>
	MX_ADC1_Init();
 8000c08:	f7ff fcea 	bl	80005e0 <MX_ADC1_Init>
	MX_TIM1_Init();
 8000c0c:	f000 fa86 	bl	800111c <MX_TIM1_Init>
	MX_TIM3_Init();
 8000c10:	f000 fba0 	bl	8001354 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 8000c14:	f000 fd12 	bl	800163c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8000c18:	f000 fd5c 	bl	80016d4 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 8000c1c:	f000 fb4c 	bl	80012b8 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 8000c20:	217f      	movs	r1, #127	@ 0x7f
 8000c22:	4807      	ldr	r0, [pc, #28]	@ (8000c40 <main+0x50>)
 8000c24:	f003 f9d0 	bl	8003fc8 <HAL_ADCEx_Calibration_Start>
	Shell_Init();
 8000c28:	f000 fee0 	bl	80019ec <Shell_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 8000c2c:	f000 ff1e 	bl	8001a6c <Shell_Loop>
		/*if(isADC){
			//printf("Valeur U,V,BUS IMES:\t%i\t%i\t%i\r\n",(int16_t)ADC_VAL[0],(int16_t)ADC_VAL[1],(int16_t)ADC_VAL[2]);
			isADC=0;
		}*/
		if(isASSERV_I){
 8000c30:	4b04      	ldr	r3, [pc, #16]	@ (8000c44 <main+0x54>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d0f9      	beq.n	8000c2c <main+0x3c>
			asservCourant(ADC_VAL);
 8000c38:	4803      	ldr	r0, [pc, #12]	@ (8000c48 <main+0x58>)
 8000c3a:	f000 fe3f 	bl	80018bc <asservCourant>
		Shell_Loop();
 8000c3e:	e7f5      	b.n	8000c2c <main+0x3c>
 8000c40:	200001e0 	.word	0x200001e0
 8000c44:	20000ae4 	.word	0x20000ae4
 8000c48:	200007cc 	.word	0x200007cc

08000c4c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b094      	sub	sp, #80	@ 0x50
 8000c50:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c52:	f107 0318 	add.w	r3, r7, #24
 8000c56:	2238      	movs	r2, #56	@ 0x38
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f009 fef4 	bl	800aa48 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f004 f930 	bl	8004ed4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c74:	2301      	movs	r3, #1
 8000c76:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c7c:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c82:	2303      	movs	r3, #3
 8000c84:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000c86:	2306      	movs	r3, #6
 8000c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000c8a:	2355      	movs	r3, #85	@ 0x55
 8000c8c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c92:	2302      	movs	r3, #2
 8000c94:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c96:	2302      	movs	r3, #2
 8000c98:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9a:	f107 0318 	add.w	r3, r7, #24
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f004 f9cc 	bl	800503c <HAL_RCC_OscConfig>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <SystemClock_Config+0x62>
	{
		Error_Handler();
 8000caa:	f000 f82d 	bl	8000d08 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cae:	230f      	movs	r3, #15
 8000cb0:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2104      	movs	r1, #4
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f004 fcca 	bl	8005660 <HAL_RCC_ClockConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8000cd2:	f000 f819 	bl	8000d08 <Error_Handler>
	}
}
 8000cd6:	bf00      	nop
 8000cd8:	3750      	adds	r7, #80	@ 0x50
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */
	CUSTOM_HAL_TIM_PeriodElapsedCallBack(htim);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f009 fc93 	bl	800a614 <CUSTOM_HAL_TIM_PeriodElapsedCallBack>
	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a04      	ldr	r2, [pc, #16]	@ (8000d04 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d101      	bne.n	8000cfc <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_IncTick();
 8000cf8:	f001 fa72 	bl	80021e0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40001000 	.word	0x40001000

08000d08 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0c:	b672      	cpsid	i
}
 8000d0e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <Error_Handler+0x8>

08000d14 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000d1c:	1d39      	adds	r1, r7, #4
 8000d1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d22:	2201      	movs	r2, #1
 8000d24:	4803      	ldr	r0, [pc, #12]	@ (8000d34 <__io_putchar+0x20>)
 8000d26:	f007 fb7a 	bl	800841e <HAL_UART_Transmit>

	return ch;
 8000d2a:	687b      	ldr	r3, [r7, #4]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000654 	.word	0x20000654

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <HAL_MspInit+0x44>)
 8000d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d42:	4a0e      	ldr	r2, [pc, #56]	@ (8000d7c <HAL_MspInit+0x44>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <HAL_MspInit+0x44>)
 8000d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d56:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <HAL_MspInit+0x44>)
 8000d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d5a:	4a08      	ldr	r2, [pc, #32]	@ (8000d7c <HAL_MspInit+0x44>)
 8000d5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d60:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d62:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <HAL_MspInit+0x44>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d6e:	f004 f955 	bl	800501c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40021000 	.word	0x40021000

08000d80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08c      	sub	sp, #48	@ 0x30
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d90:	4b2f      	ldr	r3, [pc, #188]	@ (8000e50 <HAL_InitTick+0xd0>)
 8000d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d94:	4a2e      	ldr	r2, [pc, #184]	@ (8000e50 <HAL_InitTick+0xd0>)
 8000d96:	f043 0310 	orr.w	r3, r3, #16
 8000d9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d9c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e50 <HAL_InitTick+0xd0>)
 8000d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da0:	f003 0310 	and.w	r3, r3, #16
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000da8:	f107 020c 	add.w	r2, r7, #12
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	4611      	mov	r1, r2
 8000db2:	4618      	mov	r0, r3
 8000db4:	f004 fe2a 	bl	8005a0c <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000db8:	f004 fdfc 	bl	80059b4 <HAL_RCC_GetPCLK1Freq>
 8000dbc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dc0:	4a24      	ldr	r2, [pc, #144]	@ (8000e54 <HAL_InitTick+0xd4>)
 8000dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc6:	0c9b      	lsrs	r3, r3, #18
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	@ (8000e58 <HAL_InitTick+0xd8>)
 8000dce:	4a23      	ldr	r2, [pc, #140]	@ (8000e5c <HAL_InitTick+0xdc>)
 8000dd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	@ (8000e58 <HAL_InitTick+0xd8>)
 8000dd4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dd8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dda:	4a1f      	ldr	r2, [pc, #124]	@ (8000e58 <HAL_InitTick+0xd8>)
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dde:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000de0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e58 <HAL_InitTick+0xd8>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e58 <HAL_InitTick+0xd8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000dec:	481a      	ldr	r0, [pc, #104]	@ (8000e58 <HAL_InitTick+0xd8>)
 8000dee:	f005 f8d3 	bl	8005f98 <HAL_TIM_Base_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000df8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d11b      	bne.n	8000e38 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e00:	4815      	ldr	r0, [pc, #84]	@ (8000e58 <HAL_InitTick+0xd8>)
 8000e02:	f005 f9c5 	bl	8006190 <HAL_TIM_Base_Start_IT>
 8000e06:	4603      	mov	r3, r0
 8000e08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d111      	bne.n	8000e38 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e14:	2036      	movs	r0, #54	@ 0x36
 8000e16:	f003 fb45 	bl	80044a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b0f      	cmp	r3, #15
 8000e1e:	d808      	bhi.n	8000e32 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e20:	2200      	movs	r2, #0
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	2036      	movs	r0, #54	@ 0x36
 8000e26:	f003 fb23 	bl	8004470 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e2a:	4a0d      	ldr	r2, [pc, #52]	@ (8000e60 <HAL_InitTick+0xe0>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	e002      	b.n	8000e38 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  HAL_TIM_RegisterCallback(&htim6, HAL_TIM_PERIOD_ELAPSED_CB_ID, TimeBase_TIM_PeriodElapsedCallback);
 8000e38:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <HAL_InitTick+0xe4>)
 8000e3a:	210e      	movs	r1, #14
 8000e3c:	4806      	ldr	r0, [pc, #24]	@ (8000e58 <HAL_InitTick+0xd8>)
 8000e3e:	f006 f839 	bl	8006eb4 <HAL_TIM_RegisterCallback>

 /* Return function status */
  return status;
 8000e42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3730      	adds	r7, #48	@ 0x30
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40021000 	.word	0x40021000
 8000e54:	431bde83 	.word	0x431bde83
 8000e58:	20000320 	.word	0x20000320
 8000e5c:	40001000 	.word	0x40001000
 8000e60:	20000160 	.word	0x20000160
 8000e64:	08000e69 	.word	0x08000e69

08000e68 <TimeBase_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */

void TimeBase_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8000e70:	f001 f9b6 	bl	80021e0 <HAL_IncTick>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <NMI_Handler+0x4>

08000e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <MemManage_Handler+0x4>

08000e94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ee0:	4802      	ldr	r0, [pc, #8]	@ (8000eec <DMA1_Channel1_IRQHandler+0x10>)
 8000ee2:	f003 fcd0 	bl	8004886 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200002b8 	.word	0x200002b8

08000ef0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ef4:	4803      	ldr	r0, [pc, #12]	@ (8000f04 <ADC1_2_IRQHandler+0x14>)
 8000ef6:	f001 ff11 	bl	8002d1c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000efa:	4803      	ldr	r0, [pc, #12]	@ (8000f08 <ADC1_2_IRQHandler+0x18>)
 8000efc:	f001 ff0e 	bl	8002d1c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	200001e0 	.word	0x200001e0
 8000f08:	2000024c 	.word	0x2000024c

08000f0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f10:	4802      	ldr	r0, [pc, #8]	@ (8000f1c <TIM2_IRQHandler+0x10>)
 8000f12:	f005 fbd1 	bl	80066b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200004bc 	.word	0x200004bc

08000f20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f24:	4802      	ldr	r0, [pc, #8]	@ (8000f30 <USART2_IRQHandler+0x10>)
 8000f26:	f007 fb55 	bl	80085d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000654 	.word	0x20000654

08000f34 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f38:	4802      	ldr	r0, [pc, #8]	@ (8000f44 <USART3_IRQHandler+0x10>)
 8000f3a:	f007 fb4b 	bl	80085d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200006e8 	.word	0x200006e8

08000f48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000f4c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f50:	f003 ff9c 	bl	8004e8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f5c:	4802      	ldr	r0, [pc, #8]	@ (8000f68 <TIM6_DAC_IRQHandler+0x10>)
 8000f5e:	f005 fbab 	bl	80066b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000320 	.word	0x20000320

08000f6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return 1;
 8000f70:	2301      	movs	r3, #1
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <_kill>:

int _kill(int pid, int sig)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f86:	f009 fd67 	bl	800aa58 <__errno>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2216      	movs	r2, #22
 8000f8e:	601a      	str	r2, [r3, #0]
  return -1;
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <_exit>:

void _exit (int status)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ffe7 	bl	8000f7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fae:	bf00      	nop
 8000fb0:	e7fd      	b.n	8000fae <_exit+0x12>

08000fb2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	e00a      	b.n	8000fda <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fc4:	f3af 8000 	nop.w
 8000fc8:	4601      	mov	r1, r0
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	1c5a      	adds	r2, r3, #1
 8000fce:	60ba      	str	r2, [r7, #8]
 8000fd0:	b2ca      	uxtb	r2, r1
 8000fd2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	dbf0      	blt.n	8000fc4 <_read+0x12>
  }

  return len;
 8000fe2:	687b      	ldr	r3, [r7, #4]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	e009      	b.n	8001012 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	1c5a      	adds	r2, r3, #1
 8001002:	60ba      	str	r2, [r7, #8]
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fe84 	bl	8000d14 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	3301      	adds	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	429a      	cmp	r2, r3
 8001018:	dbf1      	blt.n	8000ffe <_write+0x12>
  }
  return len;
 800101a:	687b      	ldr	r3, [r7, #4]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <_close>:

int _close(int file)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800102c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800104c:	605a      	str	r2, [r3, #4]
  return 0;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <_isatty>:

int _isatty(int file)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001064:	2301      	movs	r3, #1
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001072:	b480      	push	{r7}
 8001074:	b085      	sub	sp, #20
 8001076:	af00      	add	r7, sp, #0
 8001078:	60f8      	str	r0, [r7, #12]
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001094:	4a14      	ldr	r2, [pc, #80]	@ (80010e8 <_sbrk+0x5c>)
 8001096:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <_sbrk+0x60>)
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a0:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d102      	bne.n	80010ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a8:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <_sbrk+0x64>)
 80010aa:	4a12      	ldr	r2, [pc, #72]	@ (80010f4 <_sbrk+0x68>)
 80010ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ae:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <_sbrk+0x64>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d207      	bcs.n	80010cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010bc:	f009 fccc 	bl	800aa58 <__errno>
 80010c0:	4603      	mov	r3, r0
 80010c2:	220c      	movs	r2, #12
 80010c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010ca:	e009      	b.n	80010e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010cc:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <_sbrk+0x64>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d2:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	4a05      	ldr	r2, [pc, #20]	@ (80010f0 <_sbrk+0x64>)
 80010dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20020000 	.word	0x20020000
 80010ec:	00000400 	.word	0x00000400
 80010f0:	200003ec 	.word	0x200003ec
 80010f4:	20000c38 	.word	0x20000c38

080010f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010fc:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <SystemInit+0x20>)
 80010fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001102:	4a05      	ldr	r2, [pc, #20]	@ (8001118 <SystemInit+0x20>)
 8001104:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001108:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b09c      	sub	sp, #112	@ 0x70
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001122:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001130:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800113c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
 800114c:	615a      	str	r2, [r3, #20]
 800114e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	2234      	movs	r2, #52	@ 0x34
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f009 fc76 	bl	800aa48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800115c:	4b54      	ldr	r3, [pc, #336]	@ (80012b0 <MX_TIM1_Init+0x194>)
 800115e:	4a55      	ldr	r2, [pc, #340]	@ (80012b4 <MX_TIM1_Init+0x198>)
 8001160:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001162:	4b53      	ldr	r3, [pc, #332]	@ (80012b0 <MX_TIM1_Init+0x194>)
 8001164:	2200      	movs	r2, #0
 8001166:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001168:	4b51      	ldr	r3, [pc, #324]	@ (80012b0 <MX_TIM1_Init+0x194>)
 800116a:	2220      	movs	r2, #32
 800116c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 800116e:	4b50      	ldr	r3, [pc, #320]	@ (80012b0 <MX_TIM1_Init+0x194>)
 8001170:	f242 1233 	movw	r2, #8499	@ 0x2133
 8001174:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001176:	4b4e      	ldr	r3, [pc, #312]	@ (80012b0 <MX_TIM1_Init+0x194>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800117c:	4b4c      	ldr	r3, [pc, #304]	@ (80012b0 <MX_TIM1_Init+0x194>)
 800117e:	2200      	movs	r2, #0
 8001180:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001182:	4b4b      	ldr	r3, [pc, #300]	@ (80012b0 <MX_TIM1_Init+0x194>)
 8001184:	2280      	movs	r2, #128	@ 0x80
 8001186:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001188:	4849      	ldr	r0, [pc, #292]	@ (80012b0 <MX_TIM1_Init+0x194>)
 800118a:	f004 ff05 	bl	8005f98 <HAL_TIM_Base_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001194:	f7ff fdb8 	bl	8000d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001198:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800119c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800119e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011a2:	4619      	mov	r1, r3
 80011a4:	4842      	ldr	r0, [pc, #264]	@ (80012b0 <MX_TIM1_Init+0x194>)
 80011a6:	f005 fd15 	bl	8006bd4 <HAL_TIM_ConfigClockSource>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80011b0:	f7ff fdaa 	bl	8000d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011b4:	483e      	ldr	r0, [pc, #248]	@ (80012b0 <MX_TIM1_Init+0x194>)
 80011b6:	f005 f863 	bl	8006280 <HAL_TIM_PWM_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80011c0:	f7ff fda2 	bl	8000d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011c4:	2320      	movs	r3, #32
 80011c6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80011c8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80011cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011d6:	4619      	mov	r1, r3
 80011d8:	4835      	ldr	r0, [pc, #212]	@ (80012b0 <MX_TIM1_Init+0x194>)
 80011da:	f006 ff31 	bl	8008040 <HAL_TIMEx_MasterConfigSynchronization>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80011e4:	f7ff fd90 	bl	8000d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e8:	2360      	movs	r3, #96	@ 0x60
 80011ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f0:	2300      	movs	r3, #0
 80011f2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011f4:	2300      	movs	r3, #0
 80011f6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011fc:	2300      	movs	r3, #0
 80011fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001200:	2300      	movs	r3, #0
 8001202:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001204:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001208:	2200      	movs	r2, #0
 800120a:	4619      	mov	r1, r3
 800120c:	4828      	ldr	r0, [pc, #160]	@ (80012b0 <MX_TIM1_Init+0x194>)
 800120e:	f005 fbcd 	bl	80069ac <HAL_TIM_PWM_ConfigChannel>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001218:	f7ff fd76 	bl	8000d08 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 800121c:	4b24      	ldr	r3, [pc, #144]	@ (80012b0 <MX_TIM1_Init+0x194>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	699a      	ldr	r2, [r3, #24]
 8001222:	4b23      	ldr	r3, [pc, #140]	@ (80012b0 <MX_TIM1_Init+0x194>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 0208 	bic.w	r2, r2, #8
 800122a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800122c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001230:	2204      	movs	r2, #4
 8001232:	4619      	mov	r1, r3
 8001234:	481e      	ldr	r0, [pc, #120]	@ (80012b0 <MX_TIM1_Init+0x194>)
 8001236:	f005 fbb9 	bl	80069ac <HAL_TIM_PWM_ConfigChannel>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001240:	f7ff fd62 	bl	8000d08 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8001244:	4b1a      	ldr	r3, [pc, #104]	@ (80012b0 <MX_TIM1_Init+0x194>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	699a      	ldr	r2, [r3, #24]
 800124a:	4b19      	ldr	r3, [pc, #100]	@ (80012b0 <MX_TIM1_Init+0x194>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001252:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 17;
 8001260:	2311      	movs	r3, #17
 8001262:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001268:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800126c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800127a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800127e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001284:	2300      	movs	r3, #0
 8001286:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	4619      	mov	r1, r3
 8001290:	4807      	ldr	r0, [pc, #28]	@ (80012b0 <MX_TIM1_Init+0x194>)
 8001292:	f006 ff6b 	bl	800816c <HAL_TIMEx_ConfigBreakDeadTime>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 800129c:	f7ff fd34 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012a0:	4803      	ldr	r0, [pc, #12]	@ (80012b0 <MX_TIM1_Init+0x194>)
 80012a2:	f000 f963 	bl	800156c <HAL_TIM_MspPostInit>

}
 80012a6:	bf00      	nop
 80012a8:	3770      	adds	r7, #112	@ 0x70
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200003f0 	.word	0x200003f0
 80012b4:	40012c00 	.word	0x40012c00

080012b8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012d6:	4b1d      	ldr	r3, [pc, #116]	@ (800134c <MX_TIM2_Init+0x94>)
 80012d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012de:	4b1b      	ldr	r3, [pc, #108]	@ (800134c <MX_TIM2_Init+0x94>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e4:	4b19      	ldr	r3, [pc, #100]	@ (800134c <MX_TIM2_Init+0x94>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 169999;
 80012ea:	4b18      	ldr	r3, [pc, #96]	@ (800134c <MX_TIM2_Init+0x94>)
 80012ec:	4a18      	ldr	r2, [pc, #96]	@ (8001350 <MX_TIM2_Init+0x98>)
 80012ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f0:	4b16      	ldr	r3, [pc, #88]	@ (800134c <MX_TIM2_Init+0x94>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f6:	4b15      	ldr	r3, [pc, #84]	@ (800134c <MX_TIM2_Init+0x94>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012fc:	4813      	ldr	r0, [pc, #76]	@ (800134c <MX_TIM2_Init+0x94>)
 80012fe:	f004 fe4b 	bl	8005f98 <HAL_TIM_Base_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001308:	f7ff fcfe 	bl	8000d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800130c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001310:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001312:	f107 0310 	add.w	r3, r7, #16
 8001316:	4619      	mov	r1, r3
 8001318:	480c      	ldr	r0, [pc, #48]	@ (800134c <MX_TIM2_Init+0x94>)
 800131a:	f005 fc5b 	bl	8006bd4 <HAL_TIM_ConfigClockSource>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001324:	f7ff fcf0 	bl	8000d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	@ (800134c <MX_TIM2_Init+0x94>)
 8001336:	f006 fe83 	bl	8008040 <HAL_TIMEx_MasterConfigSynchronization>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001340:	f7ff fce2 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	3720      	adds	r7, #32
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200004bc 	.word	0x200004bc
 8001350:	0002980f 	.word	0x0002980f

08001354 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 800135a:	f107 0310 	add.w	r3, r7, #16
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001372:	4b1c      	ldr	r3, [pc, #112]	@ (80013e4 <MX_TIM3_Init+0x90>)
 8001374:	4a1c      	ldr	r2, [pc, #112]	@ (80013e8 <MX_TIM3_Init+0x94>)
 8001376:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001378:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <MX_TIM3_Init+0x90>)
 800137a:	2200      	movs	r2, #0
 800137c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137e:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <MX_TIM3_Init+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001384:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <MX_TIM3_Init+0x90>)
 8001386:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800138a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138c:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <MX_TIM3_Init+0x90>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001392:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <MX_TIM3_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	4619      	mov	r1, r3
 80013ae:	480d      	ldr	r0, [pc, #52]	@ (80013e4 <MX_TIM3_Init+0x90>)
 80013b0:	f006 fc6a 	bl	8007c88 <HAL_TIMEx_HallSensor_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80013ba:	f7ff fca5 	bl	8000d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80013be:	2350      	movs	r3, #80	@ 0x50
 80013c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	4619      	mov	r1, r3
 80013ca:	4806      	ldr	r0, [pc, #24]	@ (80013e4 <MX_TIM3_Init+0x90>)
 80013cc:	f006 fe38 	bl	8008040 <HAL_TIMEx_MasterConfigSynchronization>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80013d6:	f7ff fc97 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	3720      	adds	r7, #32
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000588 	.word	0x20000588
 80013e8:	40000400 	.word	0x40000400

080013ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	@ 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a25      	ldr	r2, [pc, #148]	@ (80014a0 <HAL_TIM_Base_MspInit+0xb4>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d12a      	bne.n	8001464 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800140e:	4b25      	ldr	r3, [pc, #148]	@ (80014a4 <HAL_TIM_Base_MspInit+0xb8>)
 8001410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001412:	4a24      	ldr	r2, [pc, #144]	@ (80014a4 <HAL_TIM_Base_MspInit+0xb8>)
 8001414:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001418:	6613      	str	r3, [r2, #96]	@ 0x60
 800141a:	4b22      	ldr	r3, [pc, #136]	@ (80014a4 <HAL_TIM_Base_MspInit+0xb8>)
 800141c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001426:	4b1f      	ldr	r3, [pc, #124]	@ (80014a4 <HAL_TIM_Base_MspInit+0xb8>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142a:	4a1e      	ldr	r2, [pc, #120]	@ (80014a4 <HAL_TIM_Base_MspInit+0xb8>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001432:	4b1c      	ldr	r3, [pc, #112]	@ (80014a4 <HAL_TIM_Base_MspInit+0xb8>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = W_PWM_H_Pin;
 800143e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001450:	2306      	movs	r3, #6
 8001452:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_H_GPIO_Port, &GPIO_InitStruct);
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4619      	mov	r1, r3
 800145a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800145e:	f003 fb61 	bl	8004b24 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001462:	e018      	b.n	8001496 <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800146c:	d113      	bne.n	8001496 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800146e:	4b0d      	ldr	r3, [pc, #52]	@ (80014a4 <HAL_TIM_Base_MspInit+0xb8>)
 8001470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001472:	4a0c      	ldr	r2, [pc, #48]	@ (80014a4 <HAL_TIM_Base_MspInit+0xb8>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6593      	str	r3, [r2, #88]	@ 0x58
 800147a:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <HAL_TIM_Base_MspInit+0xb8>)
 800147c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	201c      	movs	r0, #28
 800148c:	f002 fff0 	bl	8004470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001490:	201c      	movs	r0, #28
 8001492:	f003 f807 	bl	80044a4 <HAL_NVIC_EnableIRQ>
}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	@ 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40012c00 	.word	0x40012c00
 80014a4:	40021000 	.word	0x40021000

080014a8 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	@ 0x28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a26      	ldr	r2, [pc, #152]	@ (8001560 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d145      	bne.n	8001556 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014ca:	4b26      	ldr	r3, [pc, #152]	@ (8001564 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80014cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ce:	4a25      	ldr	r2, [pc, #148]	@ (8001564 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80014d6:	4b23      	ldr	r3, [pc, #140]	@ (8001564 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80014d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	4b20      	ldr	r3, [pc, #128]	@ (8001564 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001564 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001564 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001564 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fe:	4a19      	ldr	r2, [pc, #100]	@ (8001564 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001506:	4b17      	ldr	r3, [pc, #92]	@ (8001564 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001512:	2350      	movs	r3, #80	@ 0x50
 8001514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001522:	2302      	movs	r3, #2
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	4619      	mov	r1, r3
 800152c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001530:	f003 faf8 	bl	8004b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001534:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001546:	2302      	movs	r3, #2
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	@ (8001568 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001552:	f003 fae7 	bl	8004b24 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001556:	bf00      	nop
 8001558:	3728      	adds	r7, #40	@ 0x28
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40000400 	.word	0x40000400
 8001564:	40021000 	.word	0x40021000
 8001568:	48000800 	.word	0x48000800

0800156c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	@ 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a29      	ldr	r2, [pc, #164]	@ (8001630 <HAL_TIM_MspPostInit+0xc4>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d14b      	bne.n	8001626 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	4b29      	ldr	r3, [pc, #164]	@ (8001634 <HAL_TIM_MspPostInit+0xc8>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001592:	4a28      	ldr	r2, [pc, #160]	@ (8001634 <HAL_TIM_MspPostInit+0xc8>)
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800159a:	4b26      	ldr	r3, [pc, #152]	@ (8001634 <HAL_TIM_MspPostInit+0xc8>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	4b23      	ldr	r3, [pc, #140]	@ (8001634 <HAL_TIM_MspPostInit+0xc8>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	4a22      	ldr	r2, [pc, #136]	@ (8001634 <HAL_TIM_MspPostInit+0xc8>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015b2:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <HAL_TIM_MspPostInit+0xc8>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 80015be:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80015c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80015d0:	2306      	movs	r3, #6
 80015d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	4817      	ldr	r0, [pc, #92]	@ (8001638 <HAL_TIM_MspPostInit+0xcc>)
 80015dc:	f003 faa2 	bl	8004b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 80015e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80015f2:	2304      	movs	r3, #4
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	480e      	ldr	r0, [pc, #56]	@ (8001638 <HAL_TIM_MspPostInit+0xcc>)
 80015fe:	f003 fa91 	bl	8004b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin;
 8001602:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001614:	2306      	movs	r3, #6
 8001616:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001622:	f003 fa7f 	bl	8004b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001626:	bf00      	nop
 8001628:	3728      	adds	r7, #40	@ 0x28
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40012c00 	.word	0x40012c00
 8001634:	40021000 	.word	0x40021000
 8001638:	48000400 	.word	0x48000400

0800163c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001640:	4b22      	ldr	r3, [pc, #136]	@ (80016cc <MX_USART2_UART_Init+0x90>)
 8001642:	4a23      	ldr	r2, [pc, #140]	@ (80016d0 <MX_USART2_UART_Init+0x94>)
 8001644:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001646:	4b21      	ldr	r3, [pc, #132]	@ (80016cc <MX_USART2_UART_Init+0x90>)
 8001648:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800164c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800164e:	4b1f      	ldr	r3, [pc, #124]	@ (80016cc <MX_USART2_UART_Init+0x90>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001654:	4b1d      	ldr	r3, [pc, #116]	@ (80016cc <MX_USART2_UART_Init+0x90>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800165a:	4b1c      	ldr	r3, [pc, #112]	@ (80016cc <MX_USART2_UART_Init+0x90>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001660:	4b1a      	ldr	r3, [pc, #104]	@ (80016cc <MX_USART2_UART_Init+0x90>)
 8001662:	220c      	movs	r2, #12
 8001664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001666:	4b19      	ldr	r3, [pc, #100]	@ (80016cc <MX_USART2_UART_Init+0x90>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800166c:	4b17      	ldr	r3, [pc, #92]	@ (80016cc <MX_USART2_UART_Init+0x90>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001672:	4b16      	ldr	r3, [pc, #88]	@ (80016cc <MX_USART2_UART_Init+0x90>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001678:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <MX_USART2_UART_Init+0x90>)
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800167e:	4b13      	ldr	r3, [pc, #76]	@ (80016cc <MX_USART2_UART_Init+0x90>)
 8001680:	2200      	movs	r2, #0
 8001682:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001684:	4811      	ldr	r0, [pc, #68]	@ (80016cc <MX_USART2_UART_Init+0x90>)
 8001686:	f006 fe7a 	bl	800837e <HAL_UART_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001690:	f7ff fb3a 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001694:	2100      	movs	r1, #0
 8001696:	480d      	ldr	r0, [pc, #52]	@ (80016cc <MX_USART2_UART_Init+0x90>)
 8001698:	f008 fef1 	bl	800a47e <HAL_UARTEx_SetTxFifoThreshold>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80016a2:	f7ff fb31 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016a6:	2100      	movs	r1, #0
 80016a8:	4808      	ldr	r0, [pc, #32]	@ (80016cc <MX_USART2_UART_Init+0x90>)
 80016aa:	f008 ff26 	bl	800a4fa <HAL_UARTEx_SetRxFifoThreshold>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80016b4:	f7ff fb28 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80016b8:	4804      	ldr	r0, [pc, #16]	@ (80016cc <MX_USART2_UART_Init+0x90>)
 80016ba:	f008 fea7 	bl	800a40c <HAL_UARTEx_DisableFifoMode>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80016c4:	f7ff fb20 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000654 	.word	0x20000654
 80016d0:	40004400 	.word	0x40004400

080016d4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016d8:	4b22      	ldr	r3, [pc, #136]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 80016da:	4a23      	ldr	r2, [pc, #140]	@ (8001768 <MX_USART3_UART_Init+0x94>)
 80016dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016de:	4b21      	ldr	r3, [pc, #132]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 80016e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 80016fa:	220c      	movs	r2, #12
 80016fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fe:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001704:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800170a:	4b16      	ldr	r3, [pc, #88]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 800170c:	2200      	movs	r2, #0
 800170e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001710:	4b14      	ldr	r3, [pc, #80]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 8001712:	2200      	movs	r2, #0
 8001714:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001716:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 8001718:	2200      	movs	r2, #0
 800171a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800171c:	4811      	ldr	r0, [pc, #68]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 800171e:	f006 fe2e 	bl	800837e <HAL_UART_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001728:	f7ff faee 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800172c:	2100      	movs	r1, #0
 800172e:	480d      	ldr	r0, [pc, #52]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 8001730:	f008 fea5 	bl	800a47e <HAL_UARTEx_SetTxFifoThreshold>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800173a:	f7ff fae5 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800173e:	2100      	movs	r1, #0
 8001740:	4808      	ldr	r0, [pc, #32]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 8001742:	f008 feda 	bl	800a4fa <HAL_UARTEx_SetRxFifoThreshold>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800174c:	f7ff fadc 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001750:	4804      	ldr	r0, [pc, #16]	@ (8001764 <MX_USART3_UART_Init+0x90>)
 8001752:	f008 fe5b 	bl	800a40c <HAL_UARTEx_DisableFifoMode>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800175c:	f7ff fad4 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200006e8 	.word	0x200006e8
 8001768:	40004800 	.word	0x40004800

0800176c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b0a0      	sub	sp, #128	@ 0x80
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001784:	f107 0318 	add.w	r3, r7, #24
 8001788:	2254      	movs	r2, #84	@ 0x54
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f009 f95b 	bl	800aa48 <memset>
  if(uartHandle->Instance==USART2)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a45      	ldr	r2, [pc, #276]	@ (80018ac <HAL_UART_MspInit+0x140>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d13f      	bne.n	800181c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800179c:	2302      	movs	r3, #2
 800179e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a4:	f107 0318 	add.w	r3, r7, #24
 80017a8:	4618      	mov	r0, r3
 80017aa:	f004 f9a7 	bl	8005afc <HAL_RCCEx_PeriphCLKConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017b4:	f7ff faa8 	bl	8000d08 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017b8:	4b3d      	ldr	r3, [pc, #244]	@ (80018b0 <HAL_UART_MspInit+0x144>)
 80017ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017bc:	4a3c      	ldr	r2, [pc, #240]	@ (80018b0 <HAL_UART_MspInit+0x144>)
 80017be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80017c4:	4b3a      	ldr	r3, [pc, #232]	@ (80018b0 <HAL_UART_MspInit+0x144>)
 80017c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d0:	4b37      	ldr	r3, [pc, #220]	@ (80018b0 <HAL_UART_MspInit+0x144>)
 80017d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d4:	4a36      	ldr	r2, [pc, #216]	@ (80018b0 <HAL_UART_MspInit+0x144>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017dc:	4b34      	ldr	r3, [pc, #208]	@ (80018b0 <HAL_UART_MspInit+0x144>)
 80017de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017e8:	230c      	movs	r3, #12
 80017ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017f8:	2307      	movs	r3, #7
 80017fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001800:	4619      	mov	r1, r3
 8001802:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001806:	f003 f98d 	bl	8004b24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	2026      	movs	r0, #38	@ 0x26
 8001810:	f002 fe2e 	bl	8004470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001814:	2026      	movs	r0, #38	@ 0x26
 8001816:	f002 fe45 	bl	80044a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800181a:	e043      	b.n	80018a4 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a24      	ldr	r2, [pc, #144]	@ (80018b4 <HAL_UART_MspInit+0x148>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d13e      	bne.n	80018a4 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001826:	2304      	movs	r3, #4
 8001828:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800182e:	f107 0318 	add.w	r3, r7, #24
 8001832:	4618      	mov	r0, r3
 8001834:	f004 f962 	bl	8005afc <HAL_RCCEx_PeriphCLKConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800183e:	f7ff fa63 	bl	8000d08 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001842:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <HAL_UART_MspInit+0x144>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001846:	4a1a      	ldr	r2, [pc, #104]	@ (80018b0 <HAL_UART_MspInit+0x144>)
 8001848:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800184c:	6593      	str	r3, [r2, #88]	@ 0x58
 800184e:	4b18      	ldr	r3, [pc, #96]	@ (80018b0 <HAL_UART_MspInit+0x144>)
 8001850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001852:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <HAL_UART_MspInit+0x144>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185e:	4a14      	ldr	r2, [pc, #80]	@ (80018b0 <HAL_UART_MspInit+0x144>)
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001866:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <HAL_UART_MspInit+0x144>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001872:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001876:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001878:	2302      	movs	r3, #2
 800187a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	2300      	movs	r3, #0
 8001882:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001884:	2307      	movs	r3, #7
 8001886:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001888:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800188c:	4619      	mov	r1, r3
 800188e:	480a      	ldr	r0, [pc, #40]	@ (80018b8 <HAL_UART_MspInit+0x14c>)
 8001890:	f003 f948 	bl	8004b24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001894:	2200      	movs	r2, #0
 8001896:	2100      	movs	r1, #0
 8001898:	2027      	movs	r0, #39	@ 0x27
 800189a:	f002 fde9 	bl	8004470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800189e:	2027      	movs	r0, #39	@ 0x27
 80018a0:	f002 fe00 	bl	80044a4 <HAL_NVIC_EnableIRQ>
}
 80018a4:	bf00      	nop
 80018a6:	3780      	adds	r7, #128	@ 0x80
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40004400 	.word	0x40004400
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40004800 	.word	0x40004800
 80018b8:	48000800 	.word	0x48000800

080018bc <asservCourant>:
int32_t KI = 1;
int32_t KP = 1;
int32_t erreur[2] = {0,0}; //{ t, t-1 ,t-2...} On stocke les anciennes erreurs


void asservCourant(uint32_t* ADC_VAL){
 80018bc:	b480      	push	{r7}
 80018be:	b087      	sub	sp, #28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	// Valeur de courant I avec ADC
	int16_t I_MES_U = K_CAPT* (int16_t)ADC_VAL[0]; // Courant U
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	4b3f      	ldr	r3, [pc, #252]	@ (80019c8 <asservCourant+0x10c>)
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	fb12 f303 	smulbb	r3, r2, r3
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	82fb      	strh	r3, [r7, #22]
	int16_t I_MES_V = K_CAPT* (int16_t)ADC_VAL[1]; // Courant V
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3304      	adds	r3, #4
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	b29a      	uxth	r2, r3
 80018de:	4b3a      	ldr	r3, [pc, #232]	@ (80019c8 <asservCourant+0x10c>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	fb12 f303 	smulbb	r3, r2, r3
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	82bb      	strh	r3, [r7, #20]
	int16_t I_MES = abs(I_MES_U) > abs(I_MES_V) ? I_MES_U:I_MES_V;
 80018ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	bfb8      	it	lt
 80018f2:	425b      	neglt	r3, r3
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	bfb8      	it	lt
 80018fe:	425b      	neglt	r3, r3
 8001900:	b29b      	uxth	r3, r3
 8001902:	429a      	cmp	r2, r3
 8001904:	d902      	bls.n	800190c <asservCourant+0x50>
 8001906:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800190a:	e001      	b.n	8001910 <asservCourant+0x54>
 800190c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001910:	827b      	strh	r3, [r7, #18]

	// Fonction de transfertn U=f(I)
	erreur[0] = (int32_t)I_CONS - I_MES;
 8001912:	4b2e      	ldr	r3, [pc, #184]	@ (80019cc <asservCourant+0x110>)
 8001914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001918:	461a      	mov	r2, r3
 800191a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	4a2b      	ldr	r2, [pc, #172]	@ (80019d0 <asservCourant+0x114>)
 8001922:	6013      	str	r3, [r2, #0]
	int32_t U_COMMANDE = (int32_t)KP * erreur[0] + (int32_t)KI * erreur[1];
 8001924:	4b2a      	ldr	r3, [pc, #168]	@ (80019d0 <asservCourant+0x114>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a2a      	ldr	r2, [pc, #168]	@ (80019d4 <asservCourant+0x118>)
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	fb03 f202 	mul.w	r2, r3, r2
 8001930:	4b27      	ldr	r3, [pc, #156]	@ (80019d0 <asservCourant+0x114>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	4928      	ldr	r1, [pc, #160]	@ (80019d8 <asservCourant+0x11c>)
 8001936:	6809      	ldr	r1, [r1, #0]
 8001938:	fb01 f303 	mul.w	r3, r1, r3
 800193c:	4413      	add	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]
	erreur[1]=erreur[0];
 8001940:	4b23      	ldr	r3, [pc, #140]	@ (80019d0 <asservCourant+0x114>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a22      	ldr	r2, [pc, #136]	@ (80019d0 <asservCourant+0x114>)
 8001946:	6053      	str	r3, [r2, #4]
	// Transformation de U_COMMANDE en pulseGoal_1/2
	// A Verifier
	if(U_COMMANDE > 0){
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	dd19      	ble.n	8001982 <asservCourant+0xc6>
		pulseGoal_1 =  (uint32_t)((MAX_U_MOTOR*100 / U_COMMANDE) * htim1.Instance->ARR /100);
 800194e:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	fb92 f3f3 	sdiv	r3, r2, r3
 8001958:	461a      	mov	r2, r3
 800195a:	4b20      	ldr	r3, [pc, #128]	@ (80019dc <asservCourant+0x120>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001960:	fb02 f303 	mul.w	r3, r2, r3
 8001964:	4a1e      	ldr	r2, [pc, #120]	@ (80019e0 <asservCourant+0x124>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	095b      	lsrs	r3, r3, #5
 800196c:	4a1d      	ldr	r2, [pc, #116]	@ (80019e4 <asservCourant+0x128>)
 800196e:	6013      	str	r3, [r2, #0]
		pulseGoal_2 =  (uint32_t)(htim1.Instance->ARR - pulseGoal_1);
 8001970:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <asservCourant+0x120>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001976:	4b1b      	ldr	r3, [pc, #108]	@ (80019e4 <asservCourant+0x128>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	4a1a      	ldr	r2, [pc, #104]	@ (80019e8 <asservCourant+0x12c>)
 800197e:	6013      	str	r3, [r2, #0]
		pulseGoal_2 =  (uint32_t)((MAX_U_MOTOR*100 / abs(U_COMMANDE)) * htim1.Instance->ARR /100);
		pulseGoal_1 =  (uint32_t)(htim1.Instance->ARR - pulseGoal_2);
	}


}
 8001980:	e01b      	b.n	80019ba <asservCourant+0xfe>
		pulseGoal_2 =  (uint32_t)((MAX_U_MOTOR*100 / abs(U_COMMANDE)) * htim1.Instance->ARR /100);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	bfb8      	it	lt
 8001988:	425b      	neglt	r3, r3
 800198a:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 800198e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001992:	461a      	mov	r2, r3
 8001994:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <asservCourant+0x120>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199a:	fb02 f303 	mul.w	r3, r2, r3
 800199e:	4a10      	ldr	r2, [pc, #64]	@ (80019e0 <asservCourant+0x124>)
 80019a0:	fba2 2303 	umull	r2, r3, r2, r3
 80019a4:	095b      	lsrs	r3, r3, #5
 80019a6:	4a10      	ldr	r2, [pc, #64]	@ (80019e8 <asservCourant+0x12c>)
 80019a8:	6013      	str	r3, [r2, #0]
		pulseGoal_1 =  (uint32_t)(htim1.Instance->ARR - pulseGoal_2);
 80019aa:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <asservCourant+0x120>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019b0:	4b0d      	ldr	r3, [pc, #52]	@ (80019e8 <asservCourant+0x12c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	4a0b      	ldr	r2, [pc, #44]	@ (80019e4 <asservCourant+0x128>)
 80019b8:	6013      	str	r3, [r2, #0]
}
 80019ba:	bf00      	nop
 80019bc:	371c      	adds	r7, #28
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000004 	.word	0x20000004
 80019cc:	200007d8 	.word	0x200007d8
 80019d0:	2000077c 	.word	0x2000077c
 80019d4:	2000000c 	.word	0x2000000c
 80019d8:	20000008 	.word	0x20000008
 80019dc:	200003f0 	.word	0x200003f0
 80019e0:	51eb851f 	.word	0x51eb851f
 80019e4:	20000a60 	.word	0x20000a60
 80019e8:	20000a64 	.word	0x20000a64

080019ec <Shell_Init>:
		{"adc","Défini l'incrément  pour la transition de a consigne moteur","int:dPulse",subfunct_printADC},
		{"asservI","None","int: mA",subfunct_asservI},
};


void Shell_Init(void){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	memset(argv, 0, MAX_ARGS*sizeof(char*));
 80019f0:	2224      	movs	r2, #36	@ 0x24
 80019f2:	2100      	movs	r1, #0
 80019f4:	4816      	ldr	r0, [pc, #88]	@ (8001a50 <Shell_Init+0x64>)
 80019f6:	f009 f827 	bl	800aa48 <memset>
	memset(cmdBuffer, 0, CMD_BUFFER_SIZE*sizeof(char));
 80019fa:	2240      	movs	r2, #64	@ 0x40
 80019fc:	2100      	movs	r1, #0
 80019fe:	4815      	ldr	r0, [pc, #84]	@ (8001a54 <Shell_Init+0x68>)
 8001a00:	f009 f822 	bl	800aa48 <memset>
	memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE*sizeof(char));
 8001a04:	4b14      	ldr	r3, [pc, #80]	@ (8001a58 <Shell_Init+0x6c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE*sizeof(char));
 8001a0a:	2240      	movs	r2, #64	@ 0x40
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4813      	ldr	r0, [pc, #76]	@ (8001a5c <Shell_Init+0x70>)
 8001a10:	f009 f81a 	bl	800aa48 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001a14:	2201      	movs	r2, #1
 8001a16:	4910      	ldr	r1, [pc, #64]	@ (8001a58 <Shell_Init+0x6c>)
 8001a18:	4811      	ldr	r0, [pc, #68]	@ (8001a60 <Shell_Init+0x74>)
 8001a1a:	f006 fd8f 	bl	800853c <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8001a1e:	4811      	ldr	r0, [pc, #68]	@ (8001a64 <Shell_Init+0x78>)
 8001a20:	f7fe fbfe 	bl	8000220 <strlen>
 8001a24:	4603      	mov	r3, r0
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a2c:	490d      	ldr	r1, [pc, #52]	@ (8001a64 <Shell_Init+0x78>)
 8001a2e:	480c      	ldr	r0, [pc, #48]	@ (8001a60 <Shell_Init+0x74>)
 8001a30:	f006 fcf5 	bl	800841e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8001a34:	480c      	ldr	r0, [pc, #48]	@ (8001a68 <Shell_Init+0x7c>)
 8001a36:	f7fe fbf3 	bl	8000220 <strlen>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a42:	4909      	ldr	r1, [pc, #36]	@ (8001a68 <Shell_Init+0x7c>)
 8001a44:	4806      	ldr	r0, [pc, #24]	@ (8001a60 <Shell_Init+0x74>)
 8001a46:	f006 fcea 	bl	800841e <HAL_UART_Transmit>
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000aac 	.word	0x20000aac
 8001a54:	20000a68 	.word	0x20000a68
 8001a58:	20000788 	.word	0x20000788
 8001a5c:	2000078c 	.word	0x2000078c
 8001a60:	20000654 	.word	0x20000654
 8001a64:	2000002c 	.word	0x2000002c
 8001a68:	20000010 	.word	0x20000010

08001a6c <Shell_Loop>:

void Shell_Loop(void){
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0

	if(uartRxReceived==1){
 8001a72:	4b88      	ldr	r3, [pc, #544]	@ (8001c94 <Shell_Loop+0x228>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d17f      	bne.n	8001b7a <Shell_Loop+0x10e>
		switch(uartRxBuffer[0]){
 8001a7a:	4b87      	ldr	r3, [pc, #540]	@ (8001c98 <Shell_Loop+0x22c>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a80:	d051      	beq.n	8001b26 <Shell_Loop+0xba>
 8001a82:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a84:	dc63      	bgt.n	8001b4e <Shell_Loop+0xe2>
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d04d      	beq.n	8001b26 <Shell_Loop+0xba>
 8001a8a:	2b0d      	cmp	r3, #13
 8001a8c:	d15f      	bne.n	8001b4e <Shell_Loop+0xe2>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a92:	2203      	movs	r2, #3
 8001a94:	4981      	ldr	r1, [pc, #516]	@ (8001c9c <Shell_Loop+0x230>)
 8001a96:	4882      	ldr	r0, [pc, #520]	@ (8001ca0 <Shell_Loop+0x234>)
 8001a98:	f006 fcc1 	bl	800841e <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8001a9c:	4b81      	ldr	r3, [pc, #516]	@ (8001ca4 <Shell_Loop+0x238>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a81      	ldr	r2, [pc, #516]	@ (8001ca8 <Shell_Loop+0x23c>)
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	54d1      	strb	r1, [r2, r3]
			//On copie la commande dans l'historique
			strcpy(cmdHistory[cmdHistory_index_save % CMD_HISTORY_SIZE], cmdBuffer);
 8001aa6:	4b81      	ldr	r3, [pc, #516]	@ (8001cac <Shell_Loop+0x240>)
 8001aa8:	781a      	ldrb	r2, [r3, #0]
 8001aaa:	4b81      	ldr	r3, [pc, #516]	@ (8001cb0 <Shell_Loop+0x244>)
 8001aac:	fba3 1302 	umull	r1, r3, r3, r2
 8001ab0:	08d9      	lsrs	r1, r3, #3
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	019b      	lsls	r3, r3, #6
 8001ac0:	4a7c      	ldr	r2, [pc, #496]	@ (8001cb4 <Shell_Loop+0x248>)
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4978      	ldr	r1, [pc, #480]	@ (8001ca8 <Shell_Loop+0x23c>)
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f008 fff3 	bl	800aab2 <strcpy>
			cmdHistory_index_save++;
 8001acc:	4b77      	ldr	r3, [pc, #476]	@ (8001cac <Shell_Loop+0x240>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	4b75      	ldr	r3, [pc, #468]	@ (8001cac <Shell_Loop+0x240>)
 8001ad6:	701a      	strb	r2, [r3, #0]
			argc = 0;
 8001ad8:	4b77      	ldr	r3, [pc, #476]	@ (8001cb8 <Shell_Loop+0x24c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8001ade:	4977      	ldr	r1, [pc, #476]	@ (8001cbc <Shell_Loop+0x250>)
 8001ae0:	4871      	ldr	r0, [pc, #452]	@ (8001ca8 <Shell_Loop+0x23c>)
 8001ae2:	f008 ff55 	bl	800a990 <strtok>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4a75      	ldr	r2, [pc, #468]	@ (8001cc0 <Shell_Loop+0x254>)
 8001aea:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8001aec:	e010      	b.n	8001b10 <Shell_Loop+0xa4>
				argv[argc++] = token;
 8001aee:	4b72      	ldr	r3, [pc, #456]	@ (8001cb8 <Shell_Loop+0x24c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	4970      	ldr	r1, [pc, #448]	@ (8001cb8 <Shell_Loop+0x24c>)
 8001af6:	600a      	str	r2, [r1, #0]
 8001af8:	4a71      	ldr	r2, [pc, #452]	@ (8001cc0 <Shell_Loop+0x254>)
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	4971      	ldr	r1, [pc, #452]	@ (8001cc4 <Shell_Loop+0x258>)
 8001afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8001b02:	496e      	ldr	r1, [pc, #440]	@ (8001cbc <Shell_Loop+0x250>)
 8001b04:	2000      	movs	r0, #0
 8001b06:	f008 ff43 	bl	800a990 <strtok>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4a6c      	ldr	r2, [pc, #432]	@ (8001cc0 <Shell_Loop+0x254>)
 8001b0e:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8001b10:	4b6b      	ldr	r3, [pc, #428]	@ (8001cc0 <Shell_Loop+0x254>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1ea      	bne.n	8001aee <Shell_Loop+0x82>
			}
			idx_cmd = 0;
 8001b18:	4b62      	ldr	r3, [pc, #392]	@ (8001ca4 <Shell_Loop+0x238>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8001b1e:	4b6a      	ldr	r3, [pc, #424]	@ (8001cc8 <Shell_Loop+0x25c>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	601a      	str	r2, [r3, #0]
			break;
 8001b24:	e025      	b.n	8001b72 <Shell_Loop+0x106>
		case ASCII_BACK: case ASCII_BACK_BIS: // Suppression du dernier caractère
			if (idx_cmd==0){break;}
 8001b26:	4b5f      	ldr	r3, [pc, #380]	@ (8001ca4 <Shell_Loop+0x238>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d020      	beq.n	8001b70 <Shell_Loop+0x104>
			cmdBuffer[idx_cmd--] = '\0';
 8001b2e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ca4 <Shell_Loop+0x238>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	1e5a      	subs	r2, r3, #1
 8001b34:	495b      	ldr	r1, [pc, #364]	@ (8001ca4 <Shell_Loop+0x238>)
 8001b36:	600a      	str	r2, [r1, #0]
 8001b38:	4a5b      	ldr	r2, [pc, #364]	@ (8001ca8 <Shell_Loop+0x23c>)
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b42:	2204      	movs	r2, #4
 8001b44:	4961      	ldr	r1, [pc, #388]	@ (8001ccc <Shell_Loop+0x260>)
 8001b46:	4856      	ldr	r0, [pc, #344]	@ (8001ca0 <Shell_Loop+0x234>)
 8001b48:	f006 fc69 	bl	800841e <HAL_UART_Transmit>
			break;
 8001b4c:	e011      	b.n	8001b72 <Shell_Loop+0x106>
		default:
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8001b4e:	4b55      	ldr	r3, [pc, #340]	@ (8001ca4 <Shell_Loop+0x238>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	4953      	ldr	r1, [pc, #332]	@ (8001ca4 <Shell_Loop+0x238>)
 8001b56:	600a      	str	r2, [r1, #0]
 8001b58:	4a4f      	ldr	r2, [pc, #316]	@ (8001c98 <Shell_Loop+0x22c>)
 8001b5a:	7811      	ldrb	r1, [r2, #0]
 8001b5c:	4a52      	ldr	r2, [pc, #328]	@ (8001ca8 <Shell_Loop+0x23c>)
 8001b5e:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001b60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b64:	2201      	movs	r2, #1
 8001b66:	494c      	ldr	r1, [pc, #304]	@ (8001c98 <Shell_Loop+0x22c>)
 8001b68:	484d      	ldr	r0, [pc, #308]	@ (8001ca0 <Shell_Loop+0x234>)
 8001b6a:	f006 fc58 	bl	800841e <HAL_UART_Transmit>
 8001b6e:	e000      	b.n	8001b72 <Shell_Loop+0x106>
			if (idx_cmd==0){break;}
 8001b70:	bf00      	nop
		}
		uartRxReceived = 0;
 8001b72:	4b48      	ldr	r3, [pc, #288]	@ (8001c94 <Shell_Loop+0x228>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
 8001b78:	e04b      	b.n	8001c12 <Shell_Loop+0x1a6>
	}


	else if(uartRxReceived==2){
 8001b7a:	4b46      	ldr	r3, [pc, #280]	@ (8001c94 <Shell_Loop+0x228>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d147      	bne.n	8001c12 <Shell_Loop+0x1a6>
		uartRxReceived=1;
 8001b82:	4b44      	ldr	r3, [pc, #272]	@ (8001c94 <Shell_Loop+0x228>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	701a      	strb	r2, [r3, #0]
		switch (escState) {
 8001b88:	4b51      	ldr	r3, [pc, #324]	@ (8001cd0 <Shell_Loop+0x264>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d01f      	beq.n	8001bd0 <Shell_Loop+0x164>
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d13e      	bne.n	8001c12 <Shell_Loop+0x1a6>

		case ARROW_DOWN:
			if(cmdHistory_index_nav==0){break;}
 8001b94:	4b4f      	ldr	r3, [pc, #316]	@ (8001cd4 <Shell_Loop+0x268>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d037      	beq.n	8001c0c <Shell_Loop+0x1a0>
			strcpy(uartRxBuffer,cmdHistory[cmdHistory_index_nav]);			//On recupere le messsage sauvegarde et on l'associe au buffer actuel
 8001b9c:	4b4d      	ldr	r3, [pc, #308]	@ (8001cd4 <Shell_Loop+0x268>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	019b      	lsls	r3, r3, #6
 8001ba2:	4a44      	ldr	r2, [pc, #272]	@ (8001cb4 <Shell_Loop+0x248>)
 8001ba4:	4413      	add	r3, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	483b      	ldr	r0, [pc, #236]	@ (8001c98 <Shell_Loop+0x22c>)
 8001baa:	f008 ff82 	bl	800aab2 <strcpy>
			idx_cmd = sizeof(cmdHistory[cmdHistory_index_nav])/sizeof(cmdHistory[cmdHistory_index_nav][0]);			//On actualise le idx_cmd pour pouvoir ecrire ou modifier le msg
 8001bae:	4b3d      	ldr	r3, [pc, #244]	@ (8001ca4 <Shell_Loop+0x238>)
 8001bb0:	2240      	movs	r2, #64	@ 0x40
 8001bb2:	601a      	str	r2, [r3, #0]
			cmdHistory_index_nav--;
 8001bb4:	4b47      	ldr	r3, [pc, #284]	@ (8001cd4 <Shell_Loop+0x268>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	4b45      	ldr	r3, [pc, #276]	@ (8001cd4 <Shell_Loop+0x268>)
 8001bbe:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4934      	ldr	r1, [pc, #208]	@ (8001c98 <Shell_Loop+0x22c>)
 8001bc8:	4835      	ldr	r0, [pc, #212]	@ (8001ca0 <Shell_Loop+0x234>)
 8001bca:	f006 fc28 	bl	800841e <HAL_UART_Transmit>
			break;
 8001bce:	e020      	b.n	8001c12 <Shell_Loop+0x1a6>
		case ARROW_UP:
			if(cmdHistory_index_nav==CMD_HISTORY_SIZE){break;}
 8001bd0:	4b40      	ldr	r3, [pc, #256]	@ (8001cd4 <Shell_Loop+0x268>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b0a      	cmp	r3, #10
 8001bd6:	d01b      	beq.n	8001c10 <Shell_Loop+0x1a4>
			strcpy(uartRxBuffer,cmdHistory[cmdHistory_index_nav]);			//On recupere le messsage sauvegarde et on l'associe au buffer actuel
 8001bd8:	4b3e      	ldr	r3, [pc, #248]	@ (8001cd4 <Shell_Loop+0x268>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	019b      	lsls	r3, r3, #6
 8001bde:	4a35      	ldr	r2, [pc, #212]	@ (8001cb4 <Shell_Loop+0x248>)
 8001be0:	4413      	add	r3, r2
 8001be2:	4619      	mov	r1, r3
 8001be4:	482c      	ldr	r0, [pc, #176]	@ (8001c98 <Shell_Loop+0x22c>)
 8001be6:	f008 ff64 	bl	800aab2 <strcpy>
			idx_cmd = sizeof(cmdHistory[cmdHistory_index_nav])/sizeof(cmdHistory[cmdHistory_index_nav][0]);			//On actualise le idx_cmd pour pouvoir ecrire ou modifier le msg
 8001bea:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca4 <Shell_Loop+0x238>)
 8001bec:	2240      	movs	r2, #64	@ 0x40
 8001bee:	601a      	str	r2, [r3, #0]
			cmdHistory_index_nav++;
 8001bf0:	4b38      	ldr	r3, [pc, #224]	@ (8001cd4 <Shell_Loop+0x268>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	4b36      	ldr	r3, [pc, #216]	@ (8001cd4 <Shell_Loop+0x268>)
 8001bfa:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001bfc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c00:	2201      	movs	r2, #1
 8001c02:	4925      	ldr	r1, [pc, #148]	@ (8001c98 <Shell_Loop+0x22c>)
 8001c04:	4826      	ldr	r0, [pc, #152]	@ (8001ca0 <Shell_Loop+0x234>)
 8001c06:	f006 fc0a 	bl	800841e <HAL_UART_Transmit>
			break;
 8001c0a:	e002      	b.n	8001c12 <Shell_Loop+0x1a6>
			if(cmdHistory_index_nav==0){break;}
 8001c0c:	bf00      	nop
 8001c0e:	e000      	b.n	8001c12 <Shell_Loop+0x1a6>
			if(cmdHistory_index_nav==CMD_HISTORY_SIZE){break;}
 8001c10:	bf00      	nop
	}




	if(newCmdReady){
 8001c12:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc8 <Shell_Loop+0x25c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d038      	beq.n	8001c8c <Shell_Loop+0x220>
		for (int i=0;i<sizeof(mapping) / sizeof(mapping[0]);i++){
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	e01a      	b.n	8001c56 <Shell_Loop+0x1ea>
			if (strcmp(argv[0],mapping[i].name)==0){
 8001c20:	4b28      	ldr	r3, [pc, #160]	@ (8001cc4 <Shell_Loop+0x258>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	492c      	ldr	r1, [pc, #176]	@ (8001cd8 <Shell_Loop+0x26c>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	440b      	add	r3, r1
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4610      	mov	r0, r2
 8001c32:	f7fe fafd 	bl	8000230 <strcmp>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d109      	bne.n	8001c50 <Shell_Loop+0x1e4>
				mapping[i].funct();
 8001c3c:	4a26      	ldr	r2, [pc, #152]	@ (8001cd8 <Shell_Loop+0x26c>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	4413      	add	r3, r2
 8001c44:	330c      	adds	r3, #12
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4798      	blx	r3
				isFind=1;
 8001c4a:	4b24      	ldr	r3, [pc, #144]	@ (8001cdc <Shell_Loop+0x270>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
		for (int i=0;i<sizeof(mapping) / sizeof(mapping[0]);i++){
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3301      	adds	r3, #1
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b06      	cmp	r3, #6
 8001c5a:	d9e1      	bls.n	8001c20 <Shell_Loop+0x1b4>
			}
		}
		if(!isFind){
 8001c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cdc <Shell_Loop+0x270>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d106      	bne.n	8001c72 <Shell_Loop+0x206>
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001c64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c68:	2214      	movs	r2, #20
 8001c6a:	491d      	ldr	r1, [pc, #116]	@ (8001ce0 <Shell_Loop+0x274>)
 8001c6c:	480c      	ldr	r0, [pc, #48]	@ (8001ca0 <Shell_Loop+0x234>)
 8001c6e:	f006 fbd6 	bl	800841e <HAL_UART_Transmit>
		}

		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c76:	221c      	movs	r2, #28
 8001c78:	491a      	ldr	r1, [pc, #104]	@ (8001ce4 <Shell_Loop+0x278>)
 8001c7a:	4809      	ldr	r0, [pc, #36]	@ (8001ca0 <Shell_Loop+0x234>)
 8001c7c:	f006 fbcf 	bl	800841e <HAL_UART_Transmit>
		newCmdReady = 0;
 8001c80:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <Shell_Loop+0x25c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
		isFind=0;
 8001c86:	4b15      	ldr	r3, [pc, #84]	@ (8001cdc <Shell_Loop+0x270>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
	}
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000785 	.word	0x20000785
 8001c98:	20000788 	.word	0x20000788
 8001c9c:	20000094 	.word	0x20000094
 8001ca0:	20000654 	.word	0x20000654
 8001ca4:	20000aa8 	.word	0x20000aa8
 8001ca8:	20000a68 	.word	0x20000a68
 8001cac:	20000a5c 	.word	0x20000a5c
 8001cb0:	cccccccd 	.word	0xcccccccd
 8001cb4:	200007dc 	.word	0x200007dc
 8001cb8:	20000ad0 	.word	0x20000ad0
 8001cbc:	0800baa4 	.word	0x0800baa4
 8001cc0:	20000ad4 	.word	0x20000ad4
 8001cc4:	20000aac 	.word	0x20000aac
 8001cc8:	20000ad8 	.word	0x20000ad8
 8001ccc:	20000098 	.word	0x20000098
 8001cd0:	20000784 	.word	0x20000784
 8001cd4:	20000a5d 	.word	0x20000a5d
 8001cd8:	200000f0 	.word	0x200000f0
 8001cdc:	20000adc 	.word	0x20000adc
 8001ce0:	2000009c 	.word	0x2000009c
 8001ce4:	20000010 	.word	0x20000010

08001ce8 <HAL_UART_RxCpltCallback>:
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
}
#endif

#ifdef V1
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

	uartRxReceived=1;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <HAL_UART_RxCpltCallback+0x20>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	4904      	ldr	r1, [pc, #16]	@ (8001d0c <HAL_UART_RxCpltCallback+0x24>)
 8001cfa:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <HAL_UART_RxCpltCallback+0x28>)
 8001cfc:	f006 fc1e 	bl	800853c <HAL_UART_Receive_IT>

}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000785 	.word	0x20000785
 8001d0c:	20000788 	.word	0x20000788
 8001d10:	20000654 	.word	0x20000654

08001d14 <subfunct_WherisBrian>:
#endif
/************************************************************************************************
 * 										SUBFUNCTIONS
 *************************************************************************************************/
void subfunct_WherisBrian(void){
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	printf(brian);
 8001d18:	4802      	ldr	r0, [pc, #8]	@ (8001d24 <subfunct_WherisBrian+0x10>)
 8001d1a:	f008 fe27 	bl	800a96c <iprintf>

}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200000b0 	.word	0x200000b0

08001d28 <subfunct_help>:
void subfunct_help(void){
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af04      	add	r7, sp, #16
	printf("%s%-15s | %-10s | %-50s\r\n%s%s", GRAS,"Fonctions", "Params", "Description",RESET,separator);
 8001d2e:	4b19      	ldr	r3, [pc, #100]	@ (8001d94 <subfunct_help+0x6c>)
 8001d30:	9302      	str	r3, [sp, #8]
 8001d32:	4b19      	ldr	r3, [pc, #100]	@ (8001d98 <subfunct_help+0x70>)
 8001d34:	9301      	str	r3, [sp, #4]
 8001d36:	4b19      	ldr	r3, [pc, #100]	@ (8001d9c <subfunct_help+0x74>)
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	4b19      	ldr	r3, [pc, #100]	@ (8001da0 <subfunct_help+0x78>)
 8001d3c:	4a19      	ldr	r2, [pc, #100]	@ (8001da4 <subfunct_help+0x7c>)
 8001d3e:	491a      	ldr	r1, [pc, #104]	@ (8001da8 <subfunct_help+0x80>)
 8001d40:	481a      	ldr	r0, [pc, #104]	@ (8001dac <subfunct_help+0x84>)
 8001d42:	f008 fe13 	bl	800a96c <iprintf>
	for (int i=0;i<sizeof(mapping) / sizeof(mapping[0]);i++){
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	e01b      	b.n	8001d84 <subfunct_help+0x5c>
		printf("%s%-15s%s | %-10s | %-50s\r\n",FUNCTION, mapping[i].name,RESET, mapping[i].params, mapping[i].resume);
 8001d4c:	4a18      	ldr	r2, [pc, #96]	@ (8001db0 <subfunct_help+0x88>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	4413      	add	r3, r2
 8001d54:	6819      	ldr	r1, [r3, #0]
 8001d56:	4a16      	ldr	r2, [pc, #88]	@ (8001db0 <subfunct_help+0x88>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	011b      	lsls	r3, r3, #4
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3308      	adds	r3, #8
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4813      	ldr	r0, [pc, #76]	@ (8001db0 <subfunct_help+0x88>)
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	4402      	add	r2, r0
 8001d6a:	3204      	adds	r2, #4
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	9201      	str	r2, [sp, #4]
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <subfunct_help+0x70>)
 8001d74:	460a      	mov	r2, r1
 8001d76:	490f      	ldr	r1, [pc, #60]	@ (8001db4 <subfunct_help+0x8c>)
 8001d78:	480f      	ldr	r0, [pc, #60]	@ (8001db8 <subfunct_help+0x90>)
 8001d7a:	f008 fdf7 	bl	800a96c <iprintf>
	for (int i=0;i<sizeof(mapping) / sizeof(mapping[0]);i++){
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3301      	adds	r3, #1
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b06      	cmp	r3, #6
 8001d88:	d9e0      	bls.n	8001d4c <subfunct_help+0x24>
	}
}
 8001d8a:	bf00      	nop
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	0800bae4 	.word	0x0800bae4
 8001d98:	0800bb34 	.word	0x0800bb34
 8001d9c:	0800bb3c 	.word	0x0800bb3c
 8001da0:	0800baa8 	.word	0x0800baa8
 8001da4:	0800bab0 	.word	0x0800bab0
 8001da8:	0800babc 	.word	0x0800babc
 8001dac:	0800bac4 	.word	0x0800bac4
 8001db0:	200000f0 	.word	0x200000f0
 8001db4:	0800bb48 	.word	0x0800bb48
 8001db8:	0800bb50 	.word	0x0800bb50

08001dbc <subfunct_speed>:
void subfunct_speed(void){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
	uint32_t alpha = atoi(argv[1]);
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e00 <subfunct_speed+0x44>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f008 fc86 	bl	800a6d8 <atoi>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	607b      	str	r3, [r7, #4]

	pulseGoal_1 = alpha * htim1.Instance->ARR /100;
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <subfunct_speed+0x48>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	fb02 f303 	mul.w	r3, r2, r3
 8001ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8001e08 <subfunct_speed+0x4c>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	095b      	lsrs	r3, r3, #5
 8001de4:	4a09      	ldr	r2, [pc, #36]	@ (8001e0c <subfunct_speed+0x50>)
 8001de6:	6013      	str	r3, [r2, #0]
	pulseGoal_2 = htim1.Instance->ARR - pulseGoal_1;
 8001de8:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <subfunct_speed+0x48>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dee:	4b07      	ldr	r3, [pc, #28]	@ (8001e0c <subfunct_speed+0x50>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	4a06      	ldr	r2, [pc, #24]	@ (8001e10 <subfunct_speed+0x54>)
 8001df6:	6013      	str	r3, [r2, #0]
	/*
	 * htim2 is going to actualise pulses every 1ms: CHECK Interruptions for more details
	 */
}
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000aac 	.word	0x20000aac
 8001e04:	200003f0 	.word	0x200003f0
 8001e08:	51eb851f 	.word	0x51eb851f
 8001e0c:	20000a60 	.word	0x20000a60
 8001e10:	20000a64 	.word	0x20000a64

08001e14 <subfunct_start>:
void subfunct_start(void){
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
	if (isStarted){debug(WARNING,alreadyStarted);return;}
 8001e18:	4b4d      	ldr	r3, [pc, #308]	@ (8001f50 <subfunct_start+0x13c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d006      	beq.n	8001e2e <subfunct_start+0x1a>
 8001e20:	4b4c      	ldr	r3, [pc, #304]	@ (8001f54 <subfunct_start+0x140>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4619      	mov	r1, r3
 8001e26:	484c      	ldr	r0, [pc, #304]	@ (8001f58 <subfunct_start+0x144>)
 8001e28:	f000 f984 	bl	8002134 <debug>
 8001e2c:	e08f      	b.n	8001f4e <subfunct_start+0x13a>
	HAL_TIM_Base_Start(&htim1)!=HAL_OK? debug(ERROR,error):debug(START,info_PWMs);
 8001e2e:	484b      	ldr	r0, [pc, #300]	@ (8001f5c <subfunct_start+0x148>)
 8001e30:	f004 f916 	bl	8006060 <HAL_TIM_Base_Start>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d006      	beq.n	8001e48 <subfunct_start+0x34>
 8001e3a:	4b49      	ldr	r3, [pc, #292]	@ (8001f60 <subfunct_start+0x14c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4848      	ldr	r0, [pc, #288]	@ (8001f64 <subfunct_start+0x150>)
 8001e42:	f000 f977 	bl	8002134 <debug>
 8001e46:	e005      	b.n	8001e54 <subfunct_start+0x40>
 8001e48:	4b47      	ldr	r3, [pc, #284]	@ (8001f68 <subfunct_start+0x154>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4847      	ldr	r0, [pc, #284]	@ (8001f6c <subfunct_start+0x158>)
 8001e50:	f000 f970 	bl	8002134 <debug>
	HAL_TIM_Base_Start_IT(&htim2)!=HAL_OK? debug(ERROR,error):debug(START,info_TIMERs);//Timer for smooth transition pulses
 8001e54:	4846      	ldr	r0, [pc, #280]	@ (8001f70 <subfunct_start+0x15c>)
 8001e56:	f004 f99b 	bl	8006190 <HAL_TIM_Base_Start_IT>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d006      	beq.n	8001e6e <subfunct_start+0x5a>
 8001e60:	4b3f      	ldr	r3, [pc, #252]	@ (8001f60 <subfunct_start+0x14c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4619      	mov	r1, r3
 8001e66:	483f      	ldr	r0, [pc, #252]	@ (8001f64 <subfunct_start+0x150>)
 8001e68:	f000 f964 	bl	8002134 <debug>
 8001e6c:	e005      	b.n	8001e7a <subfunct_start+0x66>
 8001e6e:	4b41      	ldr	r3, [pc, #260]	@ (8001f74 <subfunct_start+0x160>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4619      	mov	r1, r3
 8001e74:	483d      	ldr	r0, [pc, #244]	@ (8001f6c <subfunct_start+0x158>)
 8001e76:	f000 f95d 	bl	8002134 <debug>


	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulseGoal_1);
 8001e7a:	4b38      	ldr	r3, [pc, #224]	@ (8001f5c <subfunct_start+0x148>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a3e      	ldr	r2, [pc, #248]	@ (8001f78 <subfunct_start+0x164>)
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulseGoal_2);
 8001e84:	4b35      	ldr	r3, [pc, #212]	@ (8001f5c <subfunct_start+0x148>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a3c      	ldr	r2, [pc, #240]	@ (8001f7c <subfunct_start+0x168>)
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	639a      	str	r2, [r3, #56]	@ 0x38
	//Channel 1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1)!=HAL_OK? debug(ERROR,error):debug(START,info_PWM_1);
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4832      	ldr	r0, [pc, #200]	@ (8001f5c <subfunct_start+0x148>)
 8001e92:	f004 fa63 	bl	800635c <HAL_TIM_PWM_Start>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d006      	beq.n	8001eaa <subfunct_start+0x96>
 8001e9c:	4b30      	ldr	r3, [pc, #192]	@ (8001f60 <subfunct_start+0x14c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4830      	ldr	r0, [pc, #192]	@ (8001f64 <subfunct_start+0x150>)
 8001ea4:	f000 f946 	bl	8002134 <debug>
 8001ea8:	e005      	b.n	8001eb6 <subfunct_start+0xa2>
 8001eaa:	4b35      	ldr	r3, [pc, #212]	@ (8001f80 <subfunct_start+0x16c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4619      	mov	r1, r3
 8001eb0:	482e      	ldr	r0, [pc, #184]	@ (8001f6c <subfunct_start+0x158>)
 8001eb2:	f000 f93f 	bl	8002134 <debug>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1)!=HAL_OK? debug(ERROR,error):debug(START,info_PWMN_1);
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4828      	ldr	r0, [pc, #160]	@ (8001f5c <subfunct_start+0x148>)
 8001eba:	f005 ffa1 	bl	8007e00 <HAL_TIMEx_PWMN_Start>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d006      	beq.n	8001ed2 <subfunct_start+0xbe>
 8001ec4:	4b26      	ldr	r3, [pc, #152]	@ (8001f60 <subfunct_start+0x14c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4826      	ldr	r0, [pc, #152]	@ (8001f64 <subfunct_start+0x150>)
 8001ecc:	f000 f932 	bl	8002134 <debug>
 8001ed0:	e005      	b.n	8001ede <subfunct_start+0xca>
 8001ed2:	4b2c      	ldr	r3, [pc, #176]	@ (8001f84 <subfunct_start+0x170>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4824      	ldr	r0, [pc, #144]	@ (8001f6c <subfunct_start+0x158>)
 8001eda:	f000 f92b 	bl	8002134 <debug>

	//Channel 2
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2)!=HAL_OK? debug(ERROR,error):debug(START,info_PWM_2);
 8001ede:	2104      	movs	r1, #4
 8001ee0:	481e      	ldr	r0, [pc, #120]	@ (8001f5c <subfunct_start+0x148>)
 8001ee2:	f004 fa3b 	bl	800635c <HAL_TIM_PWM_Start>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d006      	beq.n	8001efa <subfunct_start+0xe6>
 8001eec:	4b1c      	ldr	r3, [pc, #112]	@ (8001f60 <subfunct_start+0x14c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	481c      	ldr	r0, [pc, #112]	@ (8001f64 <subfunct_start+0x150>)
 8001ef4:	f000 f91e 	bl	8002134 <debug>
 8001ef8:	e005      	b.n	8001f06 <subfunct_start+0xf2>
 8001efa:	4b23      	ldr	r3, [pc, #140]	@ (8001f88 <subfunct_start+0x174>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4619      	mov	r1, r3
 8001f00:	481a      	ldr	r0, [pc, #104]	@ (8001f6c <subfunct_start+0x158>)
 8001f02:	f000 f917 	bl	8002134 <debug>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2)!=HAL_OK? debug(ERROR,error):debug(START,info_PWMN_2);
 8001f06:	2104      	movs	r1, #4
 8001f08:	4814      	ldr	r0, [pc, #80]	@ (8001f5c <subfunct_start+0x148>)
 8001f0a:	f005 ff79 	bl	8007e00 <HAL_TIMEx_PWMN_Start>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d006      	beq.n	8001f22 <subfunct_start+0x10e>
 8001f14:	4b12      	ldr	r3, [pc, #72]	@ (8001f60 <subfunct_start+0x14c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4812      	ldr	r0, [pc, #72]	@ (8001f64 <subfunct_start+0x150>)
 8001f1c:	f000 f90a 	bl	8002134 <debug>
 8001f20:	e005      	b.n	8001f2e <subfunct_start+0x11a>
 8001f22:	4b1a      	ldr	r3, [pc, #104]	@ (8001f8c <subfunct_start+0x178>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4619      	mov	r1, r3
 8001f28:	4810      	ldr	r0, [pc, #64]	@ (8001f6c <subfunct_start+0x158>)
 8001f2a:	f000 f903 	bl	8002134 <debug>
	isStarted=1;
 8001f2e:	4b08      	ldr	r3, [pc, #32]	@ (8001f50 <subfunct_start+0x13c>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	601a      	str	r2, [r3, #0]
	pulseGoal_1= htim1.Instance->ARR;
 8001f34:	4b09      	ldr	r3, [pc, #36]	@ (8001f5c <subfunct_start+0x148>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3a:	4a0f      	ldr	r2, [pc, #60]	@ (8001f78 <subfunct_start+0x164>)
 8001f3c:	6013      	str	r3, [r2, #0]
	pulseGoal_2 = htim1.Instance->ARR - pulseGoal_1;
 8001f3e:	4b07      	ldr	r3, [pc, #28]	@ (8001f5c <subfunct_start+0x148>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f44:	4b0c      	ldr	r3, [pc, #48]	@ (8001f78 <subfunct_start+0x164>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8001f7c <subfunct_start+0x168>)
 8001f4c:	6013      	str	r3, [r2, #0]
}
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000ae0 	.word	0x20000ae0
 8001f54:	200000e8 	.word	0x200000e8
 8001f58:	0800bb6c 	.word	0x0800bb6c
 8001f5c:	200003f0 	.word	0x200003f0
 8001f60:	200000cc 	.word	0x200000cc
 8001f64:	0800bb7c 	.word	0x0800bb7c
 8001f68:	200000d0 	.word	0x200000d0
 8001f6c:	0800bb88 	.word	0x0800bb88
 8001f70:	200004bc 	.word	0x200004bc
 8001f74:	200000d4 	.word	0x200000d4
 8001f78:	20000a60 	.word	0x20000a60
 8001f7c:	20000a64 	.word	0x20000a64
 8001f80:	200000d8 	.word	0x200000d8
 8001f84:	200000dc 	.word	0x200000dc
 8001f88:	200000e4 	.word	0x200000e4
 8001f8c:	200000e0 	.word	0x200000e0

08001f90 <subfunct_stop>:
void subfunct_stop(void){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
	if (!isStarted){debug(WARNING,alreadyStop);return;}
 8001f94:	4b45      	ldr	r3, [pc, #276]	@ (80020ac <subfunct_stop+0x11c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d106      	bne.n	8001faa <subfunct_stop+0x1a>
 8001f9c:	4b44      	ldr	r3, [pc, #272]	@ (80020b0 <subfunct_stop+0x120>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4844      	ldr	r0, [pc, #272]	@ (80020b4 <subfunct_stop+0x124>)
 8001fa4:	f000 f8c6 	bl	8002134 <debug>
 8001fa8:	e07e      	b.n	80020a8 <subfunct_stop+0x118>
	HAL_TIM_Base_Stop(&htim1)!=HAL_OK? debug(ERROR,error):debug(STOP,info_PWMs);
 8001faa:	4843      	ldr	r0, [pc, #268]	@ (80020b8 <subfunct_stop+0x128>)
 8001fac:	f004 f8c8 	bl	8006140 <HAL_TIM_Base_Stop>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d006      	beq.n	8001fc4 <subfunct_stop+0x34>
 8001fb6:	4b41      	ldr	r3, [pc, #260]	@ (80020bc <subfunct_stop+0x12c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4840      	ldr	r0, [pc, #256]	@ (80020c0 <subfunct_stop+0x130>)
 8001fbe:	f000 f8b9 	bl	8002134 <debug>
 8001fc2:	e005      	b.n	8001fd0 <subfunct_stop+0x40>
 8001fc4:	4b3f      	ldr	r3, [pc, #252]	@ (80020c4 <subfunct_stop+0x134>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	483f      	ldr	r0, [pc, #252]	@ (80020c8 <subfunct_stop+0x138>)
 8001fcc:	f000 f8b2 	bl	8002134 <debug>
	HAL_TIM_Base_Stop(&htim2)!=HAL_OK? debug(ERROR,error):debug(STOP,info_TIMERs);//Timer for smooth transition pulses
 8001fd0:	483e      	ldr	r0, [pc, #248]	@ (80020cc <subfunct_stop+0x13c>)
 8001fd2:	f004 f8b5 	bl	8006140 <HAL_TIM_Base_Stop>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d006      	beq.n	8001fea <subfunct_stop+0x5a>
 8001fdc:	4b37      	ldr	r3, [pc, #220]	@ (80020bc <subfunct_stop+0x12c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4837      	ldr	r0, [pc, #220]	@ (80020c0 <subfunct_stop+0x130>)
 8001fe4:	f000 f8a6 	bl	8002134 <debug>
 8001fe8:	e005      	b.n	8001ff6 <subfunct_stop+0x66>
 8001fea:	4b39      	ldr	r3, [pc, #228]	@ (80020d0 <subfunct_stop+0x140>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4835      	ldr	r0, [pc, #212]	@ (80020c8 <subfunct_stop+0x138>)
 8001ff2:	f000 f89f 	bl	8002134 <debug>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1)!=HAL_OK? debug(ERROR,error):debug(STOP,info_PWM_1);
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	482f      	ldr	r0, [pc, #188]	@ (80020b8 <subfunct_stop+0x128>)
 8001ffa:	f004 fac1 	bl	8006580 <HAL_TIM_PWM_Stop>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d006      	beq.n	8002012 <subfunct_stop+0x82>
 8002004:	4b2d      	ldr	r3, [pc, #180]	@ (80020bc <subfunct_stop+0x12c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	482d      	ldr	r0, [pc, #180]	@ (80020c0 <subfunct_stop+0x130>)
 800200c:	f000 f892 	bl	8002134 <debug>
 8002010:	e005      	b.n	800201e <subfunct_stop+0x8e>
 8002012:	4b30      	ldr	r3, [pc, #192]	@ (80020d4 <subfunct_stop+0x144>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4619      	mov	r1, r3
 8002018:	482b      	ldr	r0, [pc, #172]	@ (80020c8 <subfunct_stop+0x138>)
 800201a:	f000 f88b 	bl	8002134 <debug>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1)!=HAL_OK? debug(ERROR,error):debug(STOP,info_PWMN_1);
 800201e:	2100      	movs	r1, #0
 8002020:	4825      	ldr	r0, [pc, #148]	@ (80020b8 <subfunct_stop+0x128>)
 8002022:	f005 ffaf 	bl	8007f84 <HAL_TIMEx_PWMN_Stop>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d006      	beq.n	800203a <subfunct_stop+0xaa>
 800202c:	4b23      	ldr	r3, [pc, #140]	@ (80020bc <subfunct_stop+0x12c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4619      	mov	r1, r3
 8002032:	4823      	ldr	r0, [pc, #140]	@ (80020c0 <subfunct_stop+0x130>)
 8002034:	f000 f87e 	bl	8002134 <debug>
 8002038:	e005      	b.n	8002046 <subfunct_stop+0xb6>
 800203a:	4b27      	ldr	r3, [pc, #156]	@ (80020d8 <subfunct_stop+0x148>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4619      	mov	r1, r3
 8002040:	4821      	ldr	r0, [pc, #132]	@ (80020c8 <subfunct_stop+0x138>)
 8002042:	f000 f877 	bl	8002134 <debug>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2)!=HAL_OK? debug(ERROR,error):debug(STOP,info_PWM_2);
 8002046:	2104      	movs	r1, #4
 8002048:	481b      	ldr	r0, [pc, #108]	@ (80020b8 <subfunct_stop+0x128>)
 800204a:	f004 fa99 	bl	8006580 <HAL_TIM_PWM_Stop>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <subfunct_stop+0xd2>
 8002054:	4b19      	ldr	r3, [pc, #100]	@ (80020bc <subfunct_stop+0x12c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4619      	mov	r1, r3
 800205a:	4819      	ldr	r0, [pc, #100]	@ (80020c0 <subfunct_stop+0x130>)
 800205c:	f000 f86a 	bl	8002134 <debug>
 8002060:	e005      	b.n	800206e <subfunct_stop+0xde>
 8002062:	4b1e      	ldr	r3, [pc, #120]	@ (80020dc <subfunct_stop+0x14c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4619      	mov	r1, r3
 8002068:	4817      	ldr	r0, [pc, #92]	@ (80020c8 <subfunct_stop+0x138>)
 800206a:	f000 f863 	bl	8002134 <debug>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2)!=HAL_OK? debug(ERROR,error):debug(STOP,info_PWMN_2);
 800206e:	2104      	movs	r1, #4
 8002070:	4811      	ldr	r0, [pc, #68]	@ (80020b8 <subfunct_stop+0x128>)
 8002072:	f005 ff87 	bl	8007f84 <HAL_TIMEx_PWMN_Stop>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <subfunct_stop+0xfa>
 800207c:	4b0f      	ldr	r3, [pc, #60]	@ (80020bc <subfunct_stop+0x12c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4619      	mov	r1, r3
 8002082:	480f      	ldr	r0, [pc, #60]	@ (80020c0 <subfunct_stop+0x130>)
 8002084:	f000 f856 	bl	8002134 <debug>
 8002088:	e005      	b.n	8002096 <subfunct_stop+0x106>
 800208a:	4b15      	ldr	r3, [pc, #84]	@ (80020e0 <subfunct_stop+0x150>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4619      	mov	r1, r3
 8002090:	480d      	ldr	r0, [pc, #52]	@ (80020c8 <subfunct_stop+0x138>)
 8002092:	f000 f84f 	bl	8002134 <debug>
	HAL_ADC_Stop_DMA(&hadc1);
 8002096:	4813      	ldr	r0, [pc, #76]	@ (80020e4 <subfunct_stop+0x154>)
 8002098:	f000 fdde 	bl	8002c58 <HAL_ADC_Stop_DMA>

	isStarted=0;
 800209c:	4b03      	ldr	r3, [pc, #12]	@ (80020ac <subfunct_stop+0x11c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
	isASSERV_I=0;
 80020a2:	4b11      	ldr	r3, [pc, #68]	@ (80020e8 <subfunct_stop+0x158>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
}
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000ae0 	.word	0x20000ae0
 80020b0:	200000ec 	.word	0x200000ec
 80020b4:	0800bb6c 	.word	0x0800bb6c
 80020b8:	200003f0 	.word	0x200003f0
 80020bc:	200000cc 	.word	0x200000cc
 80020c0:	0800bb7c 	.word	0x0800bb7c
 80020c4:	200000d0 	.word	0x200000d0
 80020c8:	0800bb94 	.word	0x0800bb94
 80020cc:	200004bc 	.word	0x200004bc
 80020d0:	200000d4 	.word	0x200000d4
 80020d4:	200000d8 	.word	0x200000d8
 80020d8:	200000dc 	.word	0x200000dc
 80020dc:	200000e4 	.word	0x200000e4
 80020e0:	200000e0 	.word	0x200000e0
 80020e4:	200001e0 	.word	0x200001e0
 80020e8:	20000ae4 	.word	0x20000ae4

080020ec <subfunct_printADC>:
void subfunct_printADC(void){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1,ADC_VAL,3);
 80020f0:	2203      	movs	r2, #3
 80020f2:	4903      	ldr	r1, [pc, #12]	@ (8002100 <subfunct_printADC+0x14>)
 80020f4:	4803      	ldr	r0, [pc, #12]	@ (8002104 <subfunct_printADC+0x18>)
 80020f6:	f000 fcdb 	bl	8002ab0 <HAL_ADC_Start_DMA>
	return;
 80020fa:	bf00      	nop
}
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	200007cc 	.word	0x200007cc
 8002104:	200001e0 	.word	0x200001e0

08002108 <subfunct_asservI>:
void subfunct_asservI(void){
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
	I_CONS =(int16_t)atoi(argv[1]);
 800210c:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <subfunct_asservI+0x20>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4618      	mov	r0, r3
 8002112:	f008 fae1 	bl	800a6d8 <atoi>
 8002116:	4603      	mov	r3, r0
 8002118:	b21a      	sxth	r2, r3
 800211a:	4b04      	ldr	r3, [pc, #16]	@ (800212c <subfunct_asservI+0x24>)
 800211c:	801a      	strh	r2, [r3, #0]
	isASSERV_I=1;
 800211e:	4b04      	ldr	r3, [pc, #16]	@ (8002130 <subfunct_asservI+0x28>)
 8002120:	2201      	movs	r2, #1
 8002122:	601a      	str	r2, [r3, #0]
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000aac 	.word	0x20000aac
 800212c:	200007d8 	.word	0x200007d8
 8002130:	20000ae4 	.word	0x20000ae4

08002134 <debug>:
/************************************************************************************************
 * 										DEBUG
 *************************************************************************************************/


void debug(char* debugType,char* message){
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]

	printf("%-15s%s| %s\r\n",debugType,RESET,message);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	4a04      	ldr	r2, [pc, #16]	@ (8002154 <debug+0x20>)
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4804      	ldr	r0, [pc, #16]	@ (8002158 <debug+0x24>)
 8002146:	f008 fc11 	bl	800a96c <iprintf>

}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	0800bb34 	.word	0x0800bb34
 8002158:	0800bba0 	.word	0x0800bba0

0800215c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800215c:	480d      	ldr	r0, [pc, #52]	@ (8002194 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800215e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002160:	480d      	ldr	r0, [pc, #52]	@ (8002198 <LoopForever+0x6>)
  ldr r1, =_edata
 8002162:	490e      	ldr	r1, [pc, #56]	@ (800219c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002164:	4a0e      	ldr	r2, [pc, #56]	@ (80021a0 <LoopForever+0xe>)
  movs r3, #0
 8002166:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002168:	e002      	b.n	8002170 <LoopCopyDataInit>

0800216a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800216a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800216c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800216e:	3304      	adds	r3, #4

08002170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002174:	d3f9      	bcc.n	800216a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002176:	4a0b      	ldr	r2, [pc, #44]	@ (80021a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002178:	4c0b      	ldr	r4, [pc, #44]	@ (80021a8 <LoopForever+0x16>)
  movs r3, #0
 800217a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800217c:	e001      	b.n	8002182 <LoopFillZerobss>

0800217e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800217e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002180:	3204      	adds	r2, #4

08002182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002184:	d3fb      	bcc.n	800217e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002186:	f7fe ffb7 	bl	80010f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800218a:	f008 fc6b 	bl	800aa64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800218e:	f7fe fd2f 	bl	8000bf0 <main>

08002192 <LoopForever>:

LoopForever:
    b LoopForever
 8002192:	e7fe      	b.n	8002192 <LoopForever>
  ldr   r0, =_estack
 8002194:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800219c:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 80021a0:	0800bde4 	.word	0x0800bde4
  ldr r2, =_sbss
 80021a4:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 80021a8:	20000c38 	.word	0x20000c38

080021ac <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021ac:	e7fe      	b.n	80021ac <ADC3_IRQHandler>

080021ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b8:	2003      	movs	r0, #3
 80021ba:	f002 f94e 	bl	800445a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021be:	200f      	movs	r0, #15
 80021c0:	f7fe fdde 	bl	8000d80 <HAL_InitTick>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	71fb      	strb	r3, [r7, #7]
 80021ce:	e001      	b.n	80021d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021d0:	f7fe fdb2 	bl	8000d38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021d4:	79fb      	ldrb	r3, [r7, #7]

}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e4:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <HAL_IncTick+0x1c>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <HAL_IncTick+0x20>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4413      	add	r3, r2
 80021ee:	4a03      	ldr	r2, [pc, #12]	@ (80021fc <HAL_IncTick+0x1c>)
 80021f0:	6013      	str	r3, [r2, #0]
}
 80021f2:	bf00      	nop
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	20000ae8 	.word	0x20000ae8
 8002200:	20000164 	.word	0x20000164

08002204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return uwTick;
 8002208:	4b03      	ldr	r3, [pc, #12]	@ (8002218 <HAL_GetTick+0x14>)
 800220a:	681b      	ldr	r3, [r3, #0]
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20000ae8 	.word	0x20000ae8

0800221c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	609a      	str	r2, [r3, #8]
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	609a      	str	r2, [r3, #8]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
 8002290:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	3360      	adds	r3, #96	@ 0x60
 8002296:	461a      	mov	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4b08      	ldr	r3, [pc, #32]	@ (80022c8 <LL_ADC_SetOffset+0x44>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	4313      	orrs	r3, r2
 80022b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022bc:	bf00      	nop
 80022be:	371c      	adds	r7, #28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	03fff000 	.word	0x03fff000

080022cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3360      	adds	r3, #96	@ 0x60
 80022da:	461a      	mov	r2, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	3360      	adds	r3, #96	@ 0x60
 8002308:	461a      	mov	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	431a      	orrs	r2, r3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002322:	bf00      	nop
 8002324:	371c      	adds	r7, #28
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800232e:	b480      	push	{r7}
 8002330:	b087      	sub	sp, #28
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	3360      	adds	r3, #96	@ 0x60
 800233e:	461a      	mov	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	431a      	orrs	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002358:	bf00      	nop
 800235a:	371c      	adds	r7, #28
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	3360      	adds	r3, #96	@ 0x60
 8002374:	461a      	mov	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	431a      	orrs	r2, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800238e:	bf00      	nop
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	615a      	str	r2, [r3, #20]
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80023d4:	2301      	movs	r3, #1
 80023d6:	e000      	b.n	80023da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b087      	sub	sp, #28
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	3330      	adds	r3, #48	@ 0x30
 80023f6:	461a      	mov	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	4413      	add	r3, r2
 8002404:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	211f      	movs	r1, #31
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	401a      	ands	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	0e9b      	lsrs	r3, r3, #26
 800241e:	f003 011f 	and.w	r1, r3, #31
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	fa01 f303 	lsl.w	r3, r1, r3
 800242c:	431a      	orrs	r2, r3
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002432:	bf00      	nop
 8002434:	371c      	adds	r7, #28
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	3314      	adds	r3, #20
 8002474:	461a      	mov	r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	0e5b      	lsrs	r3, r3, #25
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	4413      	add	r3, r2
 8002482:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	0d1b      	lsrs	r3, r3, #20
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	2107      	movs	r1, #7
 8002492:	fa01 f303 	lsl.w	r3, r1, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	401a      	ands	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	0d1b      	lsrs	r3, r3, #20
 800249e:	f003 031f 	and.w	r3, r3, #31
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	fa01 f303 	lsl.w	r3, r1, r3
 80024a8:	431a      	orrs	r2, r3
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024ae:	bf00      	nop
 80024b0:	371c      	adds	r7, #28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
	...

080024bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d4:	43db      	mvns	r3, r3
 80024d6:	401a      	ands	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f003 0318 	and.w	r3, r3, #24
 80024de:	4908      	ldr	r1, [pc, #32]	@ (8002500 <LL_ADC_SetChannelSingleDiff+0x44>)
 80024e0:	40d9      	lsrs	r1, r3
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	400b      	ands	r3, r1
 80024e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ea:	431a      	orrs	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80024f2:	bf00      	nop
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	0007ffff 	.word	0x0007ffff

08002504 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 031f 	and.w	r3, r3, #31
}
 8002514:	4618      	mov	r0, r3
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800254c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6093      	str	r3, [r2, #8]
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002570:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002574:	d101      	bne.n	800257a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002598:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800259c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025c4:	d101      	bne.n	80025ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025ec:	f043 0201 	orr.w	r2, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002610:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002614:	f043 0202 	orr.w	r2, r3, #2
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <LL_ADC_IsEnabled+0x18>
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <LL_ADC_IsEnabled+0x1a>
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b02      	cmp	r3, #2
 8002660:	d101      	bne.n	8002666 <LL_ADC_IsDisableOngoing+0x18>
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <LL_ADC_IsDisableOngoing+0x1a>
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002684:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002688:	f043 0204 	orr.w	r2, r3, #4
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026b0:	f043 0210 	orr.w	r2, r3, #16
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d101      	bne.n	80026dc <LL_ADC_REG_IsConversionOngoing+0x18>
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026fa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026fe:	f043 0220 	orr.w	r2, r3, #32
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b08      	cmp	r3, #8
 8002724:	d101      	bne.n	800272a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002738:	b590      	push	{r4, r7, lr}
 800273a:	b089      	sub	sp, #36	@ 0x24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e1a9      	b.n	8002aa6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800275c:	2b00      	cmp	r3, #0
 800275e:	d109      	bne.n	8002774 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7fe f83d 	bl	80007e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fef1 	bl	8002560 <LL_ADC_IsDeepPowerDownEnabled>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d004      	beq.n	800278e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fed7 	bl	800253c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff ff0c 	bl	80025b0 <LL_ADC_IsInternalRegulatorEnabled>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d115      	bne.n	80027ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff fef0 	bl	8002588 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027a8:	4b9c      	ldr	r3, [pc, #624]	@ (8002a1c <HAL_ADC_Init+0x2e4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	099b      	lsrs	r3, r3, #6
 80027ae:	4a9c      	ldr	r2, [pc, #624]	@ (8002a20 <HAL_ADC_Init+0x2e8>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	099b      	lsrs	r3, r3, #6
 80027b6:	3301      	adds	r3, #1
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027bc:	e002      	b.n	80027c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f9      	bne.n	80027be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff feee 	bl	80025b0 <LL_ADC_IsInternalRegulatorEnabled>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10d      	bne.n	80027f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027de:	f043 0210 	orr.w	r2, r3, #16
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ea:	f043 0201 	orr.w	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff ff62 	bl	80026c4 <LL_ADC_REG_IsConversionOngoing>
 8002800:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002806:	f003 0310 	and.w	r3, r3, #16
 800280a:	2b00      	cmp	r3, #0
 800280c:	f040 8142 	bne.w	8002a94 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2b00      	cmp	r3, #0
 8002814:	f040 813e 	bne.w	8002a94 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002820:	f043 0202 	orr.w	r2, r3, #2
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fefb 	bl	8002628 <LL_ADC_IsEnabled>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d141      	bne.n	80028bc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002840:	d004      	beq.n	800284c <HAL_ADC_Init+0x114>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a77      	ldr	r2, [pc, #476]	@ (8002a24 <HAL_ADC_Init+0x2ec>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d10f      	bne.n	800286c <HAL_ADC_Init+0x134>
 800284c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002850:	f7ff feea 	bl	8002628 <LL_ADC_IsEnabled>
 8002854:	4604      	mov	r4, r0
 8002856:	4873      	ldr	r0, [pc, #460]	@ (8002a24 <HAL_ADC_Init+0x2ec>)
 8002858:	f7ff fee6 	bl	8002628 <LL_ADC_IsEnabled>
 800285c:	4603      	mov	r3, r0
 800285e:	4323      	orrs	r3, r4
 8002860:	2b00      	cmp	r3, #0
 8002862:	bf0c      	ite	eq
 8002864:	2301      	moveq	r3, #1
 8002866:	2300      	movne	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	e012      	b.n	8002892 <HAL_ADC_Init+0x15a>
 800286c:	486e      	ldr	r0, [pc, #440]	@ (8002a28 <HAL_ADC_Init+0x2f0>)
 800286e:	f7ff fedb 	bl	8002628 <LL_ADC_IsEnabled>
 8002872:	4604      	mov	r4, r0
 8002874:	486d      	ldr	r0, [pc, #436]	@ (8002a2c <HAL_ADC_Init+0x2f4>)
 8002876:	f7ff fed7 	bl	8002628 <LL_ADC_IsEnabled>
 800287a:	4603      	mov	r3, r0
 800287c:	431c      	orrs	r4, r3
 800287e:	486c      	ldr	r0, [pc, #432]	@ (8002a30 <HAL_ADC_Init+0x2f8>)
 8002880:	f7ff fed2 	bl	8002628 <LL_ADC_IsEnabled>
 8002884:	4603      	mov	r3, r0
 8002886:	4323      	orrs	r3, r4
 8002888:	2b00      	cmp	r3, #0
 800288a:	bf0c      	ite	eq
 800288c:	2301      	moveq	r3, #1
 800288e:	2300      	movne	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d012      	beq.n	80028bc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800289e:	d004      	beq.n	80028aa <HAL_ADC_Init+0x172>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a5f      	ldr	r2, [pc, #380]	@ (8002a24 <HAL_ADC_Init+0x2ec>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d101      	bne.n	80028ae <HAL_ADC_Init+0x176>
 80028aa:	4a62      	ldr	r2, [pc, #392]	@ (8002a34 <HAL_ADC_Init+0x2fc>)
 80028ac:	e000      	b.n	80028b0 <HAL_ADC_Init+0x178>
 80028ae:	4a62      	ldr	r2, [pc, #392]	@ (8002a38 <HAL_ADC_Init+0x300>)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	4619      	mov	r1, r3
 80028b6:	4610      	mov	r0, r2
 80028b8:	f7ff fcb0 	bl	800221c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	7f5b      	ldrb	r3, [r3, #29]
 80028c0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028c6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80028cc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80028d2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028da:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d106      	bne.n	80028f8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ee:	3b01      	subs	r3, #1
 80028f0:	045b      	lsls	r3, r3, #17
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d009      	beq.n	8002914 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002904:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	4b48      	ldr	r3, [pc, #288]	@ (8002a3c <HAL_ADC_Init+0x304>)
 800291c:	4013      	ands	r3, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	69b9      	ldr	r1, [r7, #24]
 8002924:	430b      	orrs	r3, r1
 8002926:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fee5 	bl	8002712 <LL_ADC_INJ_IsConversionOngoing>
 8002948:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d17f      	bne.n	8002a50 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d17c      	bne.n	8002a50 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800295a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002962:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002972:	f023 0302 	bic.w	r3, r3, #2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	69b9      	ldr	r1, [r7, #24]
 800297c:	430b      	orrs	r3, r1
 800297e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d017      	beq.n	80029b8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691a      	ldr	r2, [r3, #16]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002996:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80029a0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80029a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6911      	ldr	r1, [r2, #16]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	430b      	orrs	r3, r1
 80029b2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80029b6:	e013      	b.n	80029e0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80029c6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80029d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029dc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d12a      	bne.n	8002a40 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80029f4:	f023 0304 	bic.w	r3, r3, #4
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a00:	4311      	orrs	r1, r2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a06:	4311      	orrs	r1, r2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0201 	orr.w	r2, r2, #1
 8002a18:	611a      	str	r2, [r3, #16]
 8002a1a:	e019      	b.n	8002a50 <HAL_ADC_Init+0x318>
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	053e2d63 	.word	0x053e2d63
 8002a24:	50000100 	.word	0x50000100
 8002a28:	50000400 	.word	0x50000400
 8002a2c:	50000500 	.word	0x50000500
 8002a30:	50000600 	.word	0x50000600
 8002a34:	50000300 	.word	0x50000300
 8002a38:	50000700 	.word	0x50000700
 8002a3c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691a      	ldr	r2, [r3, #16]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0201 	bic.w	r2, r2, #1
 8002a4e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d10c      	bne.n	8002a72 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5e:	f023 010f 	bic.w	r1, r3, #15
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	1e5a      	subs	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a70:	e007      	b.n	8002a82 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 020f 	bic.w	r2, r2, #15
 8002a80:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a86:	f023 0303 	bic.w	r3, r3, #3
 8002a8a:	f043 0201 	orr.w	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a92:	e007      	b.n	8002aa4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a98:	f043 0210 	orr.w	r2, r3, #16
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002aa4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3724      	adds	r7, #36	@ 0x24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd90      	pop	{r4, r7, pc}
 8002aae:	bf00      	nop

08002ab0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ac4:	d004      	beq.n	8002ad0 <HAL_ADC_Start_DMA+0x20>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a5a      	ldr	r2, [pc, #360]	@ (8002c34 <HAL_ADC_Start_DMA+0x184>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d101      	bne.n	8002ad4 <HAL_ADC_Start_DMA+0x24>
 8002ad0:	4b59      	ldr	r3, [pc, #356]	@ (8002c38 <HAL_ADC_Start_DMA+0x188>)
 8002ad2:	e000      	b.n	8002ad6 <HAL_ADC_Start_DMA+0x26>
 8002ad4:	4b59      	ldr	r3, [pc, #356]	@ (8002c3c <HAL_ADC_Start_DMA+0x18c>)
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fd14 	bl	8002504 <LL_ADC_GetMultimode>
 8002adc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fdee 	bl	80026c4 <LL_ADC_REG_IsConversionOngoing>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f040 809b 	bne.w	8002c26 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_ADC_Start_DMA+0x4e>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e096      	b.n	8002c2c <HAL_ADC_Start_DMA+0x17c>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a4d      	ldr	r2, [pc, #308]	@ (8002c40 <HAL_ADC_Start_DMA+0x190>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d008      	beq.n	8002b22 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	2b05      	cmp	r3, #5
 8002b1a:	d002      	beq.n	8002b22 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b09      	cmp	r3, #9
 8002b20:	d17a      	bne.n	8002c18 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f001 f874 	bl	8003c10 <ADC_Enable>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002b2c:	7dfb      	ldrb	r3, [r7, #23]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d16d      	bne.n	8002c0e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b36:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b3a:	f023 0301 	bic.w	r3, r3, #1
 8002b3e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a3a      	ldr	r2, [pc, #232]	@ (8002c34 <HAL_ADC_Start_DMA+0x184>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d009      	beq.n	8002b64 <HAL_ADC_Start_DMA+0xb4>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a3b      	ldr	r2, [pc, #236]	@ (8002c44 <HAL_ADC_Start_DMA+0x194>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d002      	beq.n	8002b60 <HAL_ADC_Start_DMA+0xb0>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	e003      	b.n	8002b68 <HAL_ADC_Start_DMA+0xb8>
 8002b60:	4b39      	ldr	r3, [pc, #228]	@ (8002c48 <HAL_ADC_Start_DMA+0x198>)
 8002b62:	e001      	b.n	8002b68 <HAL_ADC_Start_DMA+0xb8>
 8002b64:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d002      	beq.n	8002b76 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d105      	bne.n	8002b82 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d006      	beq.n	8002b9c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b92:	f023 0206 	bic.w	r2, r3, #6
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	661a      	str	r2, [r3, #96]	@ 0x60
 8002b9a:	e002      	b.n	8002ba2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba6:	4a29      	ldr	r2, [pc, #164]	@ (8002c4c <HAL_ADC_Start_DMA+0x19c>)
 8002ba8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bae:	4a28      	ldr	r2, [pc, #160]	@ (8002c50 <HAL_ADC_Start_DMA+0x1a0>)
 8002bb0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb6:	4a27      	ldr	r2, [pc, #156]	@ (8002c54 <HAL_ADC_Start_DMA+0x1a4>)
 8002bb8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	221c      	movs	r2, #28
 8002bc0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 0210 	orr.w	r2, r2, #16
 8002bd8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 0201 	orr.w	r2, r2, #1
 8002be8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	3340      	adds	r3, #64	@ 0x40
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f001 fd09 	bl	8004610 <HAL_DMA_Start_IT>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fd34 	bl	8002674 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002c0c:	e00d      	b.n	8002c2a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002c16:	e008      	b.n	8002c2a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002c24:	e001      	b.n	8002c2a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c26:	2302      	movs	r3, #2
 8002c28:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	50000100 	.word	0x50000100
 8002c38:	50000300 	.word	0x50000300
 8002c3c:	50000700 	.word	0x50000700
 8002c40:	50000600 	.word	0x50000600
 8002c44:	50000500 	.word	0x50000500
 8002c48:	50000400 	.word	0x50000400
 8002c4c:	08003dfb 	.word	0x08003dfb
 8002c50:	08003ed3 	.word	0x08003ed3
 8002c54:	08003eef 	.word	0x08003eef

08002c58 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_ADC_Stop_DMA+0x16>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e051      	b.n	8002d12 <HAL_ADC_Stop_DMA+0xba>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002c76:	2103      	movs	r1, #3
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 ff0d 	bl	8003a98 <ADC_ConversionStop>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d13f      	bne.n	8002d08 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0201 	bic.w	r2, r2, #1
 8002c96:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c9c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d10f      	bne.n	8002cc6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002caa:	4618      	mov	r0, r3
 8002cac:	f001 fd2b 	bl	8004706 <HAL_DMA_Abort>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d005      	beq.n	8002cc6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cbe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0210 	bic.w	r2, r2, #16
 8002cd4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d105      	bne.n	8002ce8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f001 f82d 	bl	8003d3c <ADC_Disable>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	73fb      	strb	r3, [r7, #15]
 8002ce6:	e002      	b.n	8002cee <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f001 f827 	bl	8003d3c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d109      	bne.n	8002d08 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002cfc:	f023 0301 	bic.w	r3, r3, #1
 8002d00:	f043 0201 	orr.w	r2, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08a      	sub	sp, #40	@ 0x28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002d24:	2300      	movs	r3, #0
 8002d26:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d40:	d004      	beq.n	8002d4c <HAL_ADC_IRQHandler+0x30>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a8e      	ldr	r2, [pc, #568]	@ (8002f80 <HAL_ADC_IRQHandler+0x264>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d101      	bne.n	8002d50 <HAL_ADC_IRQHandler+0x34>
 8002d4c:	4b8d      	ldr	r3, [pc, #564]	@ (8002f84 <HAL_ADC_IRQHandler+0x268>)
 8002d4e:	e000      	b.n	8002d52 <HAL_ADC_IRQHandler+0x36>
 8002d50:	4b8d      	ldr	r3, [pc, #564]	@ (8002f88 <HAL_ADC_IRQHandler+0x26c>)
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fbd6 	bl	8002504 <LL_ADC_GetMultimode>
 8002d58:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d017      	beq.n	8002d94 <HAL_ADC_IRQHandler+0x78>
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d012      	beq.n	8002d94 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d105      	bne.n	8002d86 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f001 f9a8 	bl	80040dc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2202      	movs	r2, #2
 8002d92:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d004      	beq.n	8002da8 <HAL_ADC_IRQHandler+0x8c>
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10b      	bne.n	8002dc0 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 8094 	beq.w	8002edc <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 808e 	beq.w	8002edc <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d105      	bne.n	8002dd8 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff faef 	bl	80023c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d072      	beq.n	8002ece <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a64      	ldr	r2, [pc, #400]	@ (8002f80 <HAL_ADC_IRQHandler+0x264>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d009      	beq.n	8002e06 <HAL_ADC_IRQHandler+0xea>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a65      	ldr	r2, [pc, #404]	@ (8002f8c <HAL_ADC_IRQHandler+0x270>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d002      	beq.n	8002e02 <HAL_ADC_IRQHandler+0xe6>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	e003      	b.n	8002e0a <HAL_ADC_IRQHandler+0xee>
 8002e02:	4b63      	ldr	r3, [pc, #396]	@ (8002f90 <HAL_ADC_IRQHandler+0x274>)
 8002e04:	e001      	b.n	8002e0a <HAL_ADC_IRQHandler+0xee>
 8002e06:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d008      	beq.n	8002e24 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	2b05      	cmp	r3, #5
 8002e1c:	d002      	beq.n	8002e24 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2b09      	cmp	r3, #9
 8002e22:	d104      	bne.n	8002e2e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	623b      	str	r3, [r7, #32]
 8002e2c:	e014      	b.n	8002e58 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a53      	ldr	r2, [pc, #332]	@ (8002f80 <HAL_ADC_IRQHandler+0x264>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d009      	beq.n	8002e4c <HAL_ADC_IRQHandler+0x130>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a53      	ldr	r2, [pc, #332]	@ (8002f8c <HAL_ADC_IRQHandler+0x270>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d002      	beq.n	8002e48 <HAL_ADC_IRQHandler+0x12c>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	e003      	b.n	8002e50 <HAL_ADC_IRQHandler+0x134>
 8002e48:	4b51      	ldr	r3, [pc, #324]	@ (8002f90 <HAL_ADC_IRQHandler+0x274>)
 8002e4a:	e001      	b.n	8002e50 <HAL_ADC_IRQHandler+0x134>
 8002e4c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e50:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d135      	bne.n	8002ece <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d12e      	bne.n	8002ece <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fc25 	bl	80026c4 <LL_ADC_REG_IsConversionOngoing>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d11a      	bne.n	8002eb6 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 020c 	bic.w	r2, r2, #12
 8002e8e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d112      	bne.n	8002ece <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eac:	f043 0201 	orr.w	r2, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002eb4:	e00b      	b.n	8002ece <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eba:	f043 0210 	orr.w	r2, r3, #16
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ec6:	f043 0201 	orr.w	r2, r3, #1
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f007 fbea 	bl	800a6a8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	220c      	movs	r2, #12
 8002eda:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d004      	beq.n	8002ef0 <HAL_ADC_IRQHandler+0x1d4>
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10b      	bne.n	8002f08 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 80b3 	beq.w	8003062 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 80ad 	beq.w	8003062 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d105      	bne.n	8002f20 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f18:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff fa8a 	bl	800243e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002f2a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fa45 	bl	80023c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f36:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a10      	ldr	r2, [pc, #64]	@ (8002f80 <HAL_ADC_IRQHandler+0x264>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d009      	beq.n	8002f56 <HAL_ADC_IRQHandler+0x23a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a11      	ldr	r2, [pc, #68]	@ (8002f8c <HAL_ADC_IRQHandler+0x270>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d002      	beq.n	8002f52 <HAL_ADC_IRQHandler+0x236>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	e003      	b.n	8002f5a <HAL_ADC_IRQHandler+0x23e>
 8002f52:	4b0f      	ldr	r3, [pc, #60]	@ (8002f90 <HAL_ADC_IRQHandler+0x274>)
 8002f54:	e001      	b.n	8002f5a <HAL_ADC_IRQHandler+0x23e>
 8002f56:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d008      	beq.n	8002f74 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2b06      	cmp	r3, #6
 8002f6c:	d002      	beq.n	8002f74 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2b07      	cmp	r3, #7
 8002f72:	d10f      	bne.n	8002f94 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	623b      	str	r3, [r7, #32]
 8002f7c:	e01f      	b.n	8002fbe <HAL_ADC_IRQHandler+0x2a2>
 8002f7e:	bf00      	nop
 8002f80:	50000100 	.word	0x50000100
 8002f84:	50000300 	.word	0x50000300
 8002f88:	50000700 	.word	0x50000700
 8002f8c:	50000500 	.word	0x50000500
 8002f90:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a8b      	ldr	r2, [pc, #556]	@ (80031c8 <HAL_ADC_IRQHandler+0x4ac>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d009      	beq.n	8002fb2 <HAL_ADC_IRQHandler+0x296>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a8a      	ldr	r2, [pc, #552]	@ (80031cc <HAL_ADC_IRQHandler+0x4b0>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d002      	beq.n	8002fae <HAL_ADC_IRQHandler+0x292>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	e003      	b.n	8002fb6 <HAL_ADC_IRQHandler+0x29a>
 8002fae:	4b88      	ldr	r3, [pc, #544]	@ (80031d0 <HAL_ADC_IRQHandler+0x4b4>)
 8002fb0:	e001      	b.n	8002fb6 <HAL_ADC_IRQHandler+0x29a>
 8002fb2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002fb6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d047      	beq.n	8003054 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d007      	beq.n	8002fde <HAL_ADC_IRQHandler+0x2c2>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d03f      	beq.n	8003054 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d13a      	bne.n	8003054 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe8:	2b40      	cmp	r3, #64	@ 0x40
 8002fea:	d133      	bne.n	8003054 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d12e      	bne.n	8003054 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fb89 	bl	8002712 <LL_ADC_INJ_IsConversionOngoing>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d11a      	bne.n	800303c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003014:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d112      	bne.n	8003054 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003032:	f043 0201 	orr.w	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	65da      	str	r2, [r3, #92]	@ 0x5c
 800303a:	e00b      	b.n	8003054 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003040:	f043 0210 	orr.w	r2, r3, #16
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800304c:	f043 0201 	orr.w	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f001 f819 	bl	800408c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2260      	movs	r2, #96	@ 0x60
 8003060:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003068:	2b00      	cmp	r3, #0
 800306a:	d011      	beq.n	8003090 <HAL_ADC_IRQHandler+0x374>
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00c      	beq.n	8003090 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f8b4 	bl	80031f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2280      	movs	r2, #128	@ 0x80
 800308e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d012      	beq.n	80030c0 <HAL_ADC_IRQHandler+0x3a4>
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00d      	beq.n	80030c0 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 ffff 	bl	80040b4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d012      	beq.n	80030f0 <HAL_ADC_IRQHandler+0x3d4>
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00d      	beq.n	80030f0 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 fff1 	bl	80040c8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f003 0310 	and.w	r3, r3, #16
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d043      	beq.n	8003182 <HAL_ADC_IRQHandler+0x466>
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	f003 0310 	and.w	r3, r3, #16
 8003100:	2b00      	cmp	r3, #0
 8003102:	d03e      	beq.n	8003182 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003108:	2b00      	cmp	r3, #0
 800310a:	d102      	bne.n	8003112 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 800310c:	2301      	movs	r3, #1
 800310e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003110:	e021      	b.n	8003156 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d015      	beq.n	8003144 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003120:	d004      	beq.n	800312c <HAL_ADC_IRQHandler+0x410>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a28      	ldr	r2, [pc, #160]	@ (80031c8 <HAL_ADC_IRQHandler+0x4ac>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d101      	bne.n	8003130 <HAL_ADC_IRQHandler+0x414>
 800312c:	4b29      	ldr	r3, [pc, #164]	@ (80031d4 <HAL_ADC_IRQHandler+0x4b8>)
 800312e:	e000      	b.n	8003132 <HAL_ADC_IRQHandler+0x416>
 8003130:	4b29      	ldr	r3, [pc, #164]	@ (80031d8 <HAL_ADC_IRQHandler+0x4bc>)
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff f9f4 	bl	8002520 <LL_ADC_GetMultiDMATransfer>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00b      	beq.n	8003156 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800313e:	2301      	movs	r3, #1
 8003140:	627b      	str	r3, [r7, #36]	@ 0x24
 8003142:	e008      	b.n	8003156 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003152:	2301      	movs	r3, #1
 8003154:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003158:	2b01      	cmp	r3, #1
 800315a:	d10e      	bne.n	800317a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003160:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800316c:	f043 0202 	orr.w	r2, r3, #2
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f845 	bl	8003204 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2210      	movs	r2, #16
 8003180:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003188:	2b00      	cmp	r3, #0
 800318a:	d018      	beq.n	80031be <HAL_ADC_IRQHandler+0x4a2>
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003192:	2b00      	cmp	r3, #0
 8003194:	d013      	beq.n	80031be <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031a6:	f043 0208 	orr.w	r2, r3, #8
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031b6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 ff71 	bl	80040a0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80031be:	bf00      	nop
 80031c0:	3728      	adds	r7, #40	@ 0x28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	50000100 	.word	0x50000100
 80031cc:	50000500 	.word	0x50000500
 80031d0:	50000400 	.word	0x50000400
 80031d4:	50000300 	.word	0x50000300
 80031d8:	50000700 	.word	0x50000700

080031dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b0b6      	sub	sp, #216	@ 0xd8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003228:	2300      	movs	r3, #0
 800322a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003232:	2b01      	cmp	r3, #1
 8003234:	d102      	bne.n	800323c <HAL_ADC_ConfigChannel+0x24>
 8003236:	2302      	movs	r3, #2
 8003238:	f000 bc13 	b.w	8003a62 <HAL_ADC_ConfigChannel+0x84a>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff fa3b 	bl	80026c4 <LL_ADC_REG_IsConversionOngoing>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	f040 83f3 	bne.w	8003a3c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	6859      	ldr	r1, [r3, #4]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	f7ff f8bf 	bl	80023e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fa29 	bl	80026c4 <LL_ADC_REG_IsConversionOngoing>
 8003272:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fa49 	bl	8002712 <LL_ADC_INJ_IsConversionOngoing>
 8003280:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003284:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003288:	2b00      	cmp	r3, #0
 800328a:	f040 81d9 	bne.w	8003640 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800328e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003292:	2b00      	cmp	r3, #0
 8003294:	f040 81d4 	bne.w	8003640 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80032a0:	d10f      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2200      	movs	r2, #0
 80032ac:	4619      	mov	r1, r3
 80032ae:	f7ff f8d9 	bl	8002464 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff f86d 	bl	800239a <LL_ADC_SetSamplingTimeCommonConfig>
 80032c0:	e00e      	b.n	80032e0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6818      	ldr	r0, [r3, #0]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	6819      	ldr	r1, [r3, #0]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	461a      	mov	r2, r3
 80032d0:	f7ff f8c8 	bl	8002464 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2100      	movs	r1, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff f85d 	bl	800239a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	695a      	ldr	r2, [r3, #20]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	08db      	lsrs	r3, r3, #3
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d022      	beq.n	8003348 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6818      	ldr	r0, [r3, #0]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	6919      	ldr	r1, [r3, #16]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003312:	f7fe ffb7 	bl	8002284 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6919      	ldr	r1, [r3, #16]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	461a      	mov	r2, r3
 8003324:	f7ff f803 	bl	800232e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6818      	ldr	r0, [r3, #0]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003334:	2b01      	cmp	r3, #1
 8003336:	d102      	bne.n	800333e <HAL_ADC_ConfigChannel+0x126>
 8003338:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800333c:	e000      	b.n	8003340 <HAL_ADC_ConfigChannel+0x128>
 800333e:	2300      	movs	r3, #0
 8003340:	461a      	mov	r2, r3
 8003342:	f7ff f80f 	bl	8002364 <LL_ADC_SetOffsetSaturation>
 8003346:	e17b      	b.n	8003640 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2100      	movs	r1, #0
 800334e:	4618      	mov	r0, r3
 8003350:	f7fe ffbc 	bl	80022cc <LL_ADC_GetOffsetChannel>
 8003354:	4603      	mov	r3, r0
 8003356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10a      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x15c>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2100      	movs	r1, #0
 8003364:	4618      	mov	r0, r3
 8003366:	f7fe ffb1 	bl	80022cc <LL_ADC_GetOffsetChannel>
 800336a:	4603      	mov	r3, r0
 800336c:	0e9b      	lsrs	r3, r3, #26
 800336e:	f003 021f 	and.w	r2, r3, #31
 8003372:	e01e      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x19a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2100      	movs	r1, #0
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe ffa6 	bl	80022cc <LL_ADC_GetOffsetChannel>
 8003380:	4603      	mov	r3, r0
 8003382:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800338a:	fa93 f3a3 	rbit	r3, r3
 800338e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003392:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003396:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800339a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80033a2:	2320      	movs	r3, #32
 80033a4:	e004      	b.n	80033b0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80033a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033aa:	fab3 f383 	clz	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d105      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x1b2>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	0e9b      	lsrs	r3, r3, #26
 80033c4:	f003 031f 	and.w	r3, r3, #31
 80033c8:	e018      	b.n	80033fc <HAL_ADC_ConfigChannel+0x1e4>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80033d6:	fa93 f3a3 	rbit	r3, r3
 80033da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80033de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80033e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80033ee:	2320      	movs	r3, #32
 80033f0:	e004      	b.n	80033fc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80033f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80033f6:	fab3 f383 	clz	r3, r3
 80033fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d106      	bne.n	800340e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2200      	movs	r2, #0
 8003406:	2100      	movs	r1, #0
 8003408:	4618      	mov	r0, r3
 800340a:	f7fe ff75 	bl	80022f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2101      	movs	r1, #1
 8003414:	4618      	mov	r0, r3
 8003416:	f7fe ff59 	bl	80022cc <LL_ADC_GetOffsetChannel>
 800341a:	4603      	mov	r3, r0
 800341c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10a      	bne.n	800343a <HAL_ADC_ConfigChannel+0x222>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2101      	movs	r1, #1
 800342a:	4618      	mov	r0, r3
 800342c:	f7fe ff4e 	bl	80022cc <LL_ADC_GetOffsetChannel>
 8003430:	4603      	mov	r3, r0
 8003432:	0e9b      	lsrs	r3, r3, #26
 8003434:	f003 021f 	and.w	r2, r3, #31
 8003438:	e01e      	b.n	8003478 <HAL_ADC_ConfigChannel+0x260>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2101      	movs	r1, #1
 8003440:	4618      	mov	r0, r3
 8003442:	f7fe ff43 	bl	80022cc <LL_ADC_GetOffsetChannel>
 8003446:	4603      	mov	r3, r0
 8003448:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003450:	fa93 f3a3 	rbit	r3, r3
 8003454:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003458:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800345c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003460:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003468:	2320      	movs	r3, #32
 800346a:	e004      	b.n	8003476 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800346c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003470:	fab3 f383 	clz	r3, r3
 8003474:	b2db      	uxtb	r3, r3
 8003476:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003480:	2b00      	cmp	r3, #0
 8003482:	d105      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x278>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	0e9b      	lsrs	r3, r3, #26
 800348a:	f003 031f 	and.w	r3, r3, #31
 800348e:	e018      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x2aa>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003498:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800349c:	fa93 f3a3 	rbit	r3, r3
 80034a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80034a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80034ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80034b4:	2320      	movs	r3, #32
 80034b6:	e004      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80034b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034bc:	fab3 f383 	clz	r3, r3
 80034c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d106      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2200      	movs	r2, #0
 80034cc:	2101      	movs	r1, #1
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe ff12 	bl	80022f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2102      	movs	r1, #2
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fe fef6 	bl	80022cc <LL_ADC_GetOffsetChannel>
 80034e0:	4603      	mov	r3, r0
 80034e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10a      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x2e8>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2102      	movs	r1, #2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fe feeb 	bl	80022cc <LL_ADC_GetOffsetChannel>
 80034f6:	4603      	mov	r3, r0
 80034f8:	0e9b      	lsrs	r3, r3, #26
 80034fa:	f003 021f 	and.w	r2, r3, #31
 80034fe:	e01e      	b.n	800353e <HAL_ADC_ConfigChannel+0x326>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2102      	movs	r1, #2
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe fee0 	bl	80022cc <LL_ADC_GetOffsetChannel>
 800350c:	4603      	mov	r3, r0
 800350e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003516:	fa93 f3a3 	rbit	r3, r3
 800351a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800351e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003522:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003526:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800352e:	2320      	movs	r3, #32
 8003530:	e004      	b.n	800353c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003532:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003536:	fab3 f383 	clz	r3, r3
 800353a:	b2db      	uxtb	r3, r3
 800353c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003546:	2b00      	cmp	r3, #0
 8003548:	d105      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x33e>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	0e9b      	lsrs	r3, r3, #26
 8003550:	f003 031f 	and.w	r3, r3, #31
 8003554:	e016      	b.n	8003584 <HAL_ADC_ConfigChannel+0x36c>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003562:	fa93 f3a3 	rbit	r3, r3
 8003566:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003568:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800356a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800356e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003576:	2320      	movs	r3, #32
 8003578:	e004      	b.n	8003584 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800357a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800357e:	fab3 f383 	clz	r3, r3
 8003582:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003584:	429a      	cmp	r2, r3
 8003586:	d106      	bne.n	8003596 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2200      	movs	r2, #0
 800358e:	2102      	movs	r1, #2
 8003590:	4618      	mov	r0, r3
 8003592:	f7fe feb1 	bl	80022f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2103      	movs	r1, #3
 800359c:	4618      	mov	r0, r3
 800359e:	f7fe fe95 	bl	80022cc <LL_ADC_GetOffsetChannel>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10a      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x3aa>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2103      	movs	r1, #3
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fe fe8a 	bl	80022cc <LL_ADC_GetOffsetChannel>
 80035b8:	4603      	mov	r3, r0
 80035ba:	0e9b      	lsrs	r3, r3, #26
 80035bc:	f003 021f 	and.w	r2, r3, #31
 80035c0:	e017      	b.n	80035f2 <HAL_ADC_ConfigChannel+0x3da>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2103      	movs	r1, #3
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fe fe7f 	bl	80022cc <LL_ADC_GetOffsetChannel>
 80035ce:	4603      	mov	r3, r0
 80035d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035d4:	fa93 f3a3 	rbit	r3, r3
 80035d8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80035da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035dc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80035de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80035e4:	2320      	movs	r3, #32
 80035e6:	e003      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80035e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035ea:	fab3 f383 	clz	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d105      	bne.n	800360a <HAL_ADC_ConfigChannel+0x3f2>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	0e9b      	lsrs	r3, r3, #26
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	e011      	b.n	800362e <HAL_ADC_ConfigChannel+0x416>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003610:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003612:	fa93 f3a3 	rbit	r3, r3
 8003616:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003618:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800361a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800361c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003622:	2320      	movs	r3, #32
 8003624:	e003      	b.n	800362e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003626:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003628:	fab3 f383 	clz	r3, r3
 800362c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800362e:	429a      	cmp	r2, r3
 8003630:	d106      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2200      	movs	r2, #0
 8003638:	2103      	movs	r1, #3
 800363a:	4618      	mov	r0, r3
 800363c:	f7fe fe5c 	bl	80022f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f7fe ffef 	bl	8002628 <LL_ADC_IsEnabled>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	f040 813d 	bne.w	80038cc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	6819      	ldr	r1, [r3, #0]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	461a      	mov	r2, r3
 8003660:	f7fe ff2c 	bl	80024bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4aa2      	ldr	r2, [pc, #648]	@ (80038f4 <HAL_ADC_ConfigChannel+0x6dc>)
 800366a:	4293      	cmp	r3, r2
 800366c:	f040 812e 	bne.w	80038cc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10b      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x480>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	0e9b      	lsrs	r3, r3, #26
 8003686:	3301      	adds	r3, #1
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	2b09      	cmp	r3, #9
 800368e:	bf94      	ite	ls
 8003690:	2301      	movls	r3, #1
 8003692:	2300      	movhi	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	e019      	b.n	80036cc <HAL_ADC_ConfigChannel+0x4b4>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036a0:	fa93 f3a3 	rbit	r3, r3
 80036a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80036a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036a8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80036aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80036b0:	2320      	movs	r3, #32
 80036b2:	e003      	b.n	80036bc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80036b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036b6:	fab3 f383 	clz	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	3301      	adds	r3, #1
 80036be:	f003 031f 	and.w	r3, r3, #31
 80036c2:	2b09      	cmp	r3, #9
 80036c4:	bf94      	ite	ls
 80036c6:	2301      	movls	r3, #1
 80036c8:	2300      	movhi	r3, #0
 80036ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d079      	beq.n	80037c4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d107      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x4d4>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	0e9b      	lsrs	r3, r3, #26
 80036e2:	3301      	adds	r3, #1
 80036e4:	069b      	lsls	r3, r3, #26
 80036e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036ea:	e015      	b.n	8003718 <HAL_ADC_ConfigChannel+0x500>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036f4:	fa93 f3a3 	rbit	r3, r3
 80036f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80036fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036fc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80036fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003704:	2320      	movs	r3, #32
 8003706:	e003      	b.n	8003710 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800370a:	fab3 f383 	clz	r3, r3
 800370e:	b2db      	uxtb	r3, r3
 8003710:	3301      	adds	r3, #1
 8003712:	069b      	lsls	r3, r3, #26
 8003714:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003720:	2b00      	cmp	r3, #0
 8003722:	d109      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x520>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	0e9b      	lsrs	r3, r3, #26
 800372a:	3301      	adds	r3, #1
 800372c:	f003 031f 	and.w	r3, r3, #31
 8003730:	2101      	movs	r1, #1
 8003732:	fa01 f303 	lsl.w	r3, r1, r3
 8003736:	e017      	b.n	8003768 <HAL_ADC_ConfigChannel+0x550>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003740:	fa93 f3a3 	rbit	r3, r3
 8003744:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003746:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003748:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800374a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003750:	2320      	movs	r3, #32
 8003752:	e003      	b.n	800375c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003754:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003756:	fab3 f383 	clz	r3, r3
 800375a:	b2db      	uxtb	r3, r3
 800375c:	3301      	adds	r3, #1
 800375e:	f003 031f 	and.w	r3, r3, #31
 8003762:	2101      	movs	r1, #1
 8003764:	fa01 f303 	lsl.w	r3, r1, r3
 8003768:	ea42 0103 	orr.w	r1, r2, r3
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10a      	bne.n	800378e <HAL_ADC_ConfigChannel+0x576>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	0e9b      	lsrs	r3, r3, #26
 800377e:	3301      	adds	r3, #1
 8003780:	f003 021f 	and.w	r2, r3, #31
 8003784:	4613      	mov	r3, r2
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	4413      	add	r3, r2
 800378a:	051b      	lsls	r3, r3, #20
 800378c:	e018      	b.n	80037c0 <HAL_ADC_ConfigChannel+0x5a8>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003796:	fa93 f3a3 	rbit	r3, r3
 800379a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800379c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800379e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80037a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80037a6:	2320      	movs	r3, #32
 80037a8:	e003      	b.n	80037b2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80037aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ac:	fab3 f383 	clz	r3, r3
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	3301      	adds	r3, #1
 80037b4:	f003 021f 	and.w	r2, r3, #31
 80037b8:	4613      	mov	r3, r2
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	4413      	add	r3, r2
 80037be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037c0:	430b      	orrs	r3, r1
 80037c2:	e07e      	b.n	80038c2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d107      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x5c8>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	0e9b      	lsrs	r3, r3, #26
 80037d6:	3301      	adds	r3, #1
 80037d8:	069b      	lsls	r3, r3, #26
 80037da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037de:	e015      	b.n	800380c <HAL_ADC_ConfigChannel+0x5f4>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e8:	fa93 f3a3 	rbit	r3, r3
 80037ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80037ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80037f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80037f8:	2320      	movs	r3, #32
 80037fa:	e003      	b.n	8003804 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80037fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fe:	fab3 f383 	clz	r3, r3
 8003802:	b2db      	uxtb	r3, r3
 8003804:	3301      	adds	r3, #1
 8003806:	069b      	lsls	r3, r3, #26
 8003808:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003814:	2b00      	cmp	r3, #0
 8003816:	d109      	bne.n	800382c <HAL_ADC_ConfigChannel+0x614>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	0e9b      	lsrs	r3, r3, #26
 800381e:	3301      	adds	r3, #1
 8003820:	f003 031f 	and.w	r3, r3, #31
 8003824:	2101      	movs	r1, #1
 8003826:	fa01 f303 	lsl.w	r3, r1, r3
 800382a:	e017      	b.n	800385c <HAL_ADC_ConfigChannel+0x644>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	fa93 f3a3 	rbit	r3, r3
 8003838:	61fb      	str	r3, [r7, #28]
  return result;
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800383e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003844:	2320      	movs	r3, #32
 8003846:	e003      	b.n	8003850 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384a:	fab3 f383 	clz	r3, r3
 800384e:	b2db      	uxtb	r3, r3
 8003850:	3301      	adds	r3, #1
 8003852:	f003 031f 	and.w	r3, r3, #31
 8003856:	2101      	movs	r1, #1
 8003858:	fa01 f303 	lsl.w	r3, r1, r3
 800385c:	ea42 0103 	orr.w	r1, r2, r3
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10d      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x670>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	0e9b      	lsrs	r3, r3, #26
 8003872:	3301      	adds	r3, #1
 8003874:	f003 021f 	and.w	r2, r3, #31
 8003878:	4613      	mov	r3, r2
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	4413      	add	r3, r2
 800387e:	3b1e      	subs	r3, #30
 8003880:	051b      	lsls	r3, r3, #20
 8003882:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003886:	e01b      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x6a8>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	fa93 f3a3 	rbit	r3, r3
 8003894:	613b      	str	r3, [r7, #16]
  return result;
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80038a0:	2320      	movs	r3, #32
 80038a2:	e003      	b.n	80038ac <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	fab3 f383 	clz	r3, r3
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	3301      	adds	r3, #1
 80038ae:	f003 021f 	and.w	r2, r3, #31
 80038b2:	4613      	mov	r3, r2
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	4413      	add	r3, r2
 80038b8:	3b1e      	subs	r3, #30
 80038ba:	051b      	lsls	r3, r3, #20
 80038bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038c0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038c6:	4619      	mov	r1, r3
 80038c8:	f7fe fdcc 	bl	8002464 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	4b09      	ldr	r3, [pc, #36]	@ (80038f8 <HAL_ADC_ConfigChannel+0x6e0>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80be 	beq.w	8003a56 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038e2:	d004      	beq.n	80038ee <HAL_ADC_ConfigChannel+0x6d6>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a04      	ldr	r2, [pc, #16]	@ (80038fc <HAL_ADC_ConfigChannel+0x6e4>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d10a      	bne.n	8003904 <HAL_ADC_ConfigChannel+0x6ec>
 80038ee:	4b04      	ldr	r3, [pc, #16]	@ (8003900 <HAL_ADC_ConfigChannel+0x6e8>)
 80038f0:	e009      	b.n	8003906 <HAL_ADC_ConfigChannel+0x6ee>
 80038f2:	bf00      	nop
 80038f4:	407f0000 	.word	0x407f0000
 80038f8:	80080000 	.word	0x80080000
 80038fc:	50000100 	.word	0x50000100
 8003900:	50000300 	.word	0x50000300
 8003904:	4b59      	ldr	r3, [pc, #356]	@ (8003a6c <HAL_ADC_ConfigChannel+0x854>)
 8003906:	4618      	mov	r0, r3
 8003908:	f7fe fcae 	bl	8002268 <LL_ADC_GetCommonPathInternalCh>
 800390c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a56      	ldr	r2, [pc, #344]	@ (8003a70 <HAL_ADC_ConfigChannel+0x858>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d004      	beq.n	8003924 <HAL_ADC_ConfigChannel+0x70c>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a55      	ldr	r2, [pc, #340]	@ (8003a74 <HAL_ADC_ConfigChannel+0x85c>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d13a      	bne.n	800399a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003924:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003928:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d134      	bne.n	800399a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003938:	d005      	beq.n	8003946 <HAL_ADC_ConfigChannel+0x72e>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a4e      	ldr	r2, [pc, #312]	@ (8003a78 <HAL_ADC_ConfigChannel+0x860>)
 8003940:	4293      	cmp	r3, r2
 8003942:	f040 8085 	bne.w	8003a50 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800394e:	d004      	beq.n	800395a <HAL_ADC_ConfigChannel+0x742>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a49      	ldr	r2, [pc, #292]	@ (8003a7c <HAL_ADC_ConfigChannel+0x864>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d101      	bne.n	800395e <HAL_ADC_ConfigChannel+0x746>
 800395a:	4a49      	ldr	r2, [pc, #292]	@ (8003a80 <HAL_ADC_ConfigChannel+0x868>)
 800395c:	e000      	b.n	8003960 <HAL_ADC_ConfigChannel+0x748>
 800395e:	4a43      	ldr	r2, [pc, #268]	@ (8003a6c <HAL_ADC_ConfigChannel+0x854>)
 8003960:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003964:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003968:	4619      	mov	r1, r3
 800396a:	4610      	mov	r0, r2
 800396c:	f7fe fc69 	bl	8002242 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003970:	4b44      	ldr	r3, [pc, #272]	@ (8003a84 <HAL_ADC_ConfigChannel+0x86c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	099b      	lsrs	r3, r3, #6
 8003976:	4a44      	ldr	r2, [pc, #272]	@ (8003a88 <HAL_ADC_ConfigChannel+0x870>)
 8003978:	fba2 2303 	umull	r2, r3, r2, r3
 800397c:	099b      	lsrs	r3, r3, #6
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	4613      	mov	r3, r2
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800398a:	e002      	b.n	8003992 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3b01      	subs	r3, #1
 8003990:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f9      	bne.n	800398c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003998:	e05a      	b.n	8003a50 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a3b      	ldr	r2, [pc, #236]	@ (8003a8c <HAL_ADC_ConfigChannel+0x874>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d125      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d11f      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a31      	ldr	r2, [pc, #196]	@ (8003a7c <HAL_ADC_ConfigChannel+0x864>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d104      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x7ac>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a34      	ldr	r2, [pc, #208]	@ (8003a90 <HAL_ADC_ConfigChannel+0x878>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d047      	beq.n	8003a54 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039cc:	d004      	beq.n	80039d8 <HAL_ADC_ConfigChannel+0x7c0>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a2a      	ldr	r2, [pc, #168]	@ (8003a7c <HAL_ADC_ConfigChannel+0x864>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d101      	bne.n	80039dc <HAL_ADC_ConfigChannel+0x7c4>
 80039d8:	4a29      	ldr	r2, [pc, #164]	@ (8003a80 <HAL_ADC_ConfigChannel+0x868>)
 80039da:	e000      	b.n	80039de <HAL_ADC_ConfigChannel+0x7c6>
 80039dc:	4a23      	ldr	r2, [pc, #140]	@ (8003a6c <HAL_ADC_ConfigChannel+0x854>)
 80039de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039e6:	4619      	mov	r1, r3
 80039e8:	4610      	mov	r0, r2
 80039ea:	f7fe fc2a 	bl	8002242 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039ee:	e031      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a27      	ldr	r2, [pc, #156]	@ (8003a94 <HAL_ADC_ConfigChannel+0x87c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d12d      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d127      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8003a7c <HAL_ADC_ConfigChannel+0x864>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d022      	beq.n	8003a56 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a18:	d004      	beq.n	8003a24 <HAL_ADC_ConfigChannel+0x80c>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a17      	ldr	r2, [pc, #92]	@ (8003a7c <HAL_ADC_ConfigChannel+0x864>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d101      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x810>
 8003a24:	4a16      	ldr	r2, [pc, #88]	@ (8003a80 <HAL_ADC_ConfigChannel+0x868>)
 8003a26:	e000      	b.n	8003a2a <HAL_ADC_ConfigChannel+0x812>
 8003a28:	4a10      	ldr	r2, [pc, #64]	@ (8003a6c <HAL_ADC_ConfigChannel+0x854>)
 8003a2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a2e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a32:	4619      	mov	r1, r3
 8003a34:	4610      	mov	r0, r2
 8003a36:	f7fe fc04 	bl	8002242 <LL_ADC_SetCommonPathInternalCh>
 8003a3a:	e00c      	b.n	8003a56 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a40:	f043 0220 	orr.w	r2, r3, #32
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003a4e:	e002      	b.n	8003a56 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a50:	bf00      	nop
 8003a52:	e000      	b.n	8003a56 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a54:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a5e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	37d8      	adds	r7, #216	@ 0xd8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	50000700 	.word	0x50000700
 8003a70:	c3210000 	.word	0xc3210000
 8003a74:	90c00010 	.word	0x90c00010
 8003a78:	50000600 	.word	0x50000600
 8003a7c:	50000100 	.word	0x50000100
 8003a80:	50000300 	.word	0x50000300
 8003a84:	20000000 	.word	0x20000000
 8003a88:	053e2d63 	.word	0x053e2d63
 8003a8c:	c7520000 	.word	0xc7520000
 8003a90:	50000500 	.word	0x50000500
 8003a94:	cb840000 	.word	0xcb840000

08003a98 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fe fe08 	bl	80026c4 <LL_ADC_REG_IsConversionOngoing>
 8003ab4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe fe29 	bl	8002712 <LL_ADC_INJ_IsConversionOngoing>
 8003ac0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d103      	bne.n	8003ad0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 8098 	beq.w	8003c00 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d02a      	beq.n	8003b34 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	7f5b      	ldrb	r3, [r3, #29]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d126      	bne.n	8003b34 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	7f1b      	ldrb	r3, [r3, #28]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d122      	bne.n	8003b34 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003aee:	2301      	movs	r3, #1
 8003af0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003af2:	e014      	b.n	8003b1e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	4a45      	ldr	r2, [pc, #276]	@ (8003c0c <ADC_ConversionStop+0x174>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d90d      	bls.n	8003b18 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b00:	f043 0210 	orr.w	r2, r3, #16
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b0c:	f043 0201 	orr.w	r2, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e074      	b.n	8003c02 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b28:	2b40      	cmp	r3, #64	@ 0x40
 8003b2a:	d1e3      	bne.n	8003af4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2240      	movs	r2, #64	@ 0x40
 8003b32:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d014      	beq.n	8003b64 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fe fdc0 	bl	80026c4 <LL_ADC_REG_IsConversionOngoing>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00c      	beq.n	8003b64 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fe fd7d 	bl	800264e <LL_ADC_IsDisableOngoing>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d104      	bne.n	8003b64 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fe fd9c 	bl	800269c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d014      	beq.n	8003b94 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fe fdcf 	bl	8002712 <LL_ADC_INJ_IsConversionOngoing>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00c      	beq.n	8003b94 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fe fd65 	bl	800264e <LL_ADC_IsDisableOngoing>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d104      	bne.n	8003b94 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fe fdab 	bl	80026ea <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d005      	beq.n	8003ba6 <ADC_ConversionStop+0x10e>
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d105      	bne.n	8003bac <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003ba0:	230c      	movs	r3, #12
 8003ba2:	617b      	str	r3, [r7, #20]
        break;
 8003ba4:	e005      	b.n	8003bb2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003ba6:	2308      	movs	r3, #8
 8003ba8:	617b      	str	r3, [r7, #20]
        break;
 8003baa:	e002      	b.n	8003bb2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003bac:	2304      	movs	r3, #4
 8003bae:	617b      	str	r3, [r7, #20]
        break;
 8003bb0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003bb2:	f7fe fb27 	bl	8002204 <HAL_GetTick>
 8003bb6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003bb8:	e01b      	b.n	8003bf2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003bba:	f7fe fb23 	bl	8002204 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b05      	cmp	r3, #5
 8003bc6:	d914      	bls.n	8003bf2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689a      	ldr	r2, [r3, #8]
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00d      	beq.n	8003bf2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bda:	f043 0210 	orr.w	r2, r3, #16
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003be6:	f043 0201 	orr.w	r2, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e007      	b.n	8003c02 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1dc      	bne.n	8003bba <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3720      	adds	r7, #32
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	a33fffff 	.word	0xa33fffff

08003c10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fe fd01 	bl	8002628 <LL_ADC_IsEnabled>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d176      	bne.n	8003d1a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	4b3c      	ldr	r3, [pc, #240]	@ (8003d24 <ADC_Enable+0x114>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00d      	beq.n	8003c56 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c3e:	f043 0210 	orr.w	r2, r3, #16
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c4a:	f043 0201 	orr.w	r2, r3, #1
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e062      	b.n	8003d1c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fe fcbc 	bl	80025d8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c68:	d004      	beq.n	8003c74 <ADC_Enable+0x64>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a2e      	ldr	r2, [pc, #184]	@ (8003d28 <ADC_Enable+0x118>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d101      	bne.n	8003c78 <ADC_Enable+0x68>
 8003c74:	4b2d      	ldr	r3, [pc, #180]	@ (8003d2c <ADC_Enable+0x11c>)
 8003c76:	e000      	b.n	8003c7a <ADC_Enable+0x6a>
 8003c78:	4b2d      	ldr	r3, [pc, #180]	@ (8003d30 <ADC_Enable+0x120>)
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fe faf4 	bl	8002268 <LL_ADC_GetCommonPathInternalCh>
 8003c80:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003c82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d013      	beq.n	8003cb2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8003d34 <ADC_Enable+0x124>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	099b      	lsrs	r3, r3, #6
 8003c90:	4a29      	ldr	r2, [pc, #164]	@ (8003d38 <ADC_Enable+0x128>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	099b      	lsrs	r3, r3, #6
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	4413      	add	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ca4:	e002      	b.n	8003cac <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f9      	bne.n	8003ca6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003cb2:	f7fe faa7 	bl	8002204 <HAL_GetTick>
 8003cb6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cb8:	e028      	b.n	8003d0c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fe fcb2 	bl	8002628 <LL_ADC_IsEnabled>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d104      	bne.n	8003cd4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fe fc82 	bl	80025d8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003cd4:	f7fe fa96 	bl	8002204 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d914      	bls.n	8003d0c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d00d      	beq.n	8003d0c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf4:	f043 0210 	orr.w	r2, r3, #16
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d00:	f043 0201 	orr.w	r2, r3, #1
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e007      	b.n	8003d1c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d1cf      	bne.n	8003cba <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	8000003f 	.word	0x8000003f
 8003d28:	50000100 	.word	0x50000100
 8003d2c:	50000300 	.word	0x50000300
 8003d30:	50000700 	.word	0x50000700
 8003d34:	20000000 	.word	0x20000000
 8003d38:	053e2d63 	.word	0x053e2d63

08003d3c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fe fc80 	bl	800264e <LL_ADC_IsDisableOngoing>
 8003d4e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fe fc67 	bl	8002628 <LL_ADC_IsEnabled>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d047      	beq.n	8003df0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d144      	bne.n	8003df0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 030d 	and.w	r3, r3, #13
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d10c      	bne.n	8003d8e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fe fc41 	bl	8002600 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2203      	movs	r2, #3
 8003d84:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d86:	f7fe fa3d 	bl	8002204 <HAL_GetTick>
 8003d8a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d8c:	e029      	b.n	8003de2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d92:	f043 0210 	orr.w	r2, r3, #16
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d9e:	f043 0201 	orr.w	r2, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e023      	b.n	8003df2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003daa:	f7fe fa2b 	bl	8002204 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d914      	bls.n	8003de2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00d      	beq.n	8003de2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dca:	f043 0210 	orr.w	r2, r3, #16
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dd6:	f043 0201 	orr.w	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e007      	b.n	8003df2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1dc      	bne.n	8003daa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b084      	sub	sp, #16
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e0c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d14b      	bne.n	8003eac <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e18:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d021      	beq.n	8003e72 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fe fac4 	bl	80023c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d032      	beq.n	8003ea4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d12b      	bne.n	8003ea4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d11f      	bne.n	8003ea4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e68:	f043 0201 	orr.w	r2, r3, #1
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e70:	e018      	b.n	8003ea4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d111      	bne.n	8003ea4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d105      	bne.n	8003ea4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9c:	f043 0201 	orr.w	r2, r3, #1
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f006 fbff 	bl	800a6a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003eaa:	e00e      	b.n	8003eca <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb0:	f003 0310 	and.w	r3, r3, #16
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f7ff f9a3 	bl	8003204 <HAL_ADC_ErrorCallback>
}
 8003ebe:	e004      	b.n	8003eca <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	4798      	blx	r3
}
 8003eca:	bf00      	nop
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f7ff f97b 	bl	80031dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ee6:	bf00      	nop
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f00:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f0c:	f043 0204 	orr.w	r2, r3, #4
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f7ff f975 	bl	8003204 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f1a:	bf00      	nop
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <LL_ADC_IsEnabled>:
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <LL_ADC_IsEnabled+0x18>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <LL_ADC_IsEnabled+0x1a>
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <LL_ADC_StartCalibration>:
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003f5a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	609a      	str	r2, [r3, #8]
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <LL_ADC_IsCalibrationOnGoing>:
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f8e:	d101      	bne.n	8003f94 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d101      	bne.n	8003fba <LL_ADC_REG_IsConversionOngoing+0x18>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_ADCEx_Calibration_Start+0x1c>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e04d      	b.n	8004080 <HAL_ADCEx_Calibration_Start+0xb8>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff fea5 	bl	8003d3c <ADC_Disable>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003ff6:	7bfb      	ldrb	r3, [r7, #15]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d136      	bne.n	800406a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004000:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004004:	f023 0302 	bic.w	r3, r3, #2
 8004008:	f043 0202 	orr.w	r2, r3, #2
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6839      	ldr	r1, [r7, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff ff96 	bl	8003f48 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800401c:	e014      	b.n	8004048 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	3301      	adds	r3, #1
 8004022:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	4a18      	ldr	r2, [pc, #96]	@ (8004088 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d90d      	bls.n	8004048 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004030:	f023 0312 	bic.w	r3, r3, #18
 8004034:	f043 0210 	orr.w	r2, r3, #16
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e01b      	b.n	8004080 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff ff94 	bl	8003f7a <LL_ADC_IsCalibrationOnGoing>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e2      	bne.n	800401e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800405c:	f023 0303 	bic.w	r3, r3, #3
 8004060:	f043 0201 	orr.w	r2, r3, #1
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004068:	e005      	b.n	8004076 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800406e:	f043 0210 	orr.w	r2, r3, #16
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800407e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	0004de01 	.word	0x0004de01

0800408c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80040f0:	b590      	push	{r4, r7, lr}
 80040f2:	b0a1      	sub	sp, #132	@ 0x84
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800410a:	2302      	movs	r3, #2
 800410c:	e0e7      	b.n	80042de <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004116:	2300      	movs	r3, #0
 8004118:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800411a:	2300      	movs	r3, #0
 800411c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004126:	d102      	bne.n	800412e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004128:	4b6f      	ldr	r3, [pc, #444]	@ (80042e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800412a:	60bb      	str	r3, [r7, #8]
 800412c:	e009      	b.n	8004142 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a6e      	ldr	r2, [pc, #440]	@ (80042ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d102      	bne.n	800413e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004138:	4b6d      	ldr	r3, [pc, #436]	@ (80042f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	e001      	b.n	8004142 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800413e:	2300      	movs	r3, #0
 8004140:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10b      	bne.n	8004160 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414c:	f043 0220 	orr.w	r2, r3, #32
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0be      	b.n	80042de <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4618      	mov	r0, r3
 8004164:	f7ff ff1d 	bl	8003fa2 <LL_ADC_REG_IsConversionOngoing>
 8004168:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff ff17 	bl	8003fa2 <LL_ADC_REG_IsConversionOngoing>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	f040 80a0 	bne.w	80042bc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800417c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800417e:	2b00      	cmp	r3, #0
 8004180:	f040 809c 	bne.w	80042bc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800418c:	d004      	beq.n	8004198 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a55      	ldr	r2, [pc, #340]	@ (80042e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d101      	bne.n	800419c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004198:	4b56      	ldr	r3, [pc, #344]	@ (80042f4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800419a:	e000      	b.n	800419e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800419c:	4b56      	ldr	r3, [pc, #344]	@ (80042f8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800419e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d04b      	beq.n	8004240 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80041a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	6859      	ldr	r1, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80041ba:	035b      	lsls	r3, r3, #13
 80041bc:	430b      	orrs	r3, r1
 80041be:	431a      	orrs	r2, r3
 80041c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041c2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041cc:	d004      	beq.n	80041d8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a45      	ldr	r2, [pc, #276]	@ (80042e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d10f      	bne.n	80041f8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80041d8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80041dc:	f7ff fea1 	bl	8003f22 <LL_ADC_IsEnabled>
 80041e0:	4604      	mov	r4, r0
 80041e2:	4841      	ldr	r0, [pc, #260]	@ (80042e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80041e4:	f7ff fe9d 	bl	8003f22 <LL_ADC_IsEnabled>
 80041e8:	4603      	mov	r3, r0
 80041ea:	4323      	orrs	r3, r4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	bf0c      	ite	eq
 80041f0:	2301      	moveq	r3, #1
 80041f2:	2300      	movne	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	e012      	b.n	800421e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80041f8:	483c      	ldr	r0, [pc, #240]	@ (80042ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80041fa:	f7ff fe92 	bl	8003f22 <LL_ADC_IsEnabled>
 80041fe:	4604      	mov	r4, r0
 8004200:	483b      	ldr	r0, [pc, #236]	@ (80042f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004202:	f7ff fe8e 	bl	8003f22 <LL_ADC_IsEnabled>
 8004206:	4603      	mov	r3, r0
 8004208:	431c      	orrs	r4, r3
 800420a:	483c      	ldr	r0, [pc, #240]	@ (80042fc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800420c:	f7ff fe89 	bl	8003f22 <LL_ADC_IsEnabled>
 8004210:	4603      	mov	r3, r0
 8004212:	4323      	orrs	r3, r4
 8004214:	2b00      	cmp	r3, #0
 8004216:	bf0c      	ite	eq
 8004218:	2301      	moveq	r3, #1
 800421a:	2300      	movne	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d056      	beq.n	80042d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004222:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800422a:	f023 030f 	bic.w	r3, r3, #15
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	6811      	ldr	r1, [r2, #0]
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	6892      	ldr	r2, [r2, #8]
 8004236:	430a      	orrs	r2, r1
 8004238:	431a      	orrs	r2, r3
 800423a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800423c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800423e:	e047      	b.n	80042d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004240:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004248:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800424a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004254:	d004      	beq.n	8004260 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a23      	ldr	r2, [pc, #140]	@ (80042e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d10f      	bne.n	8004280 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004260:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004264:	f7ff fe5d 	bl	8003f22 <LL_ADC_IsEnabled>
 8004268:	4604      	mov	r4, r0
 800426a:	481f      	ldr	r0, [pc, #124]	@ (80042e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800426c:	f7ff fe59 	bl	8003f22 <LL_ADC_IsEnabled>
 8004270:	4603      	mov	r3, r0
 8004272:	4323      	orrs	r3, r4
 8004274:	2b00      	cmp	r3, #0
 8004276:	bf0c      	ite	eq
 8004278:	2301      	moveq	r3, #1
 800427a:	2300      	movne	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	e012      	b.n	80042a6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004280:	481a      	ldr	r0, [pc, #104]	@ (80042ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004282:	f7ff fe4e 	bl	8003f22 <LL_ADC_IsEnabled>
 8004286:	4604      	mov	r4, r0
 8004288:	4819      	ldr	r0, [pc, #100]	@ (80042f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800428a:	f7ff fe4a 	bl	8003f22 <LL_ADC_IsEnabled>
 800428e:	4603      	mov	r3, r0
 8004290:	431c      	orrs	r4, r3
 8004292:	481a      	ldr	r0, [pc, #104]	@ (80042fc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004294:	f7ff fe45 	bl	8003f22 <LL_ADC_IsEnabled>
 8004298:	4603      	mov	r3, r0
 800429a:	4323      	orrs	r3, r4
 800429c:	2b00      	cmp	r3, #0
 800429e:	bf0c      	ite	eq
 80042a0:	2301      	moveq	r3, #1
 80042a2:	2300      	movne	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d012      	beq.n	80042d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80042aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80042b2:	f023 030f 	bic.w	r3, r3, #15
 80042b6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80042b8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80042ba:	e009      	b.n	80042d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c0:	f043 0220 	orr.w	r2, r3, #32
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80042ce:	e000      	b.n	80042d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80042d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80042da:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3784      	adds	r7, #132	@ 0x84
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd90      	pop	{r4, r7, pc}
 80042e6:	bf00      	nop
 80042e8:	50000100 	.word	0x50000100
 80042ec:	50000400 	.word	0x50000400
 80042f0:	50000500 	.word	0x50000500
 80042f4:	50000300 	.word	0x50000300
 80042f8:	50000700 	.word	0x50000700
 80042fc:	50000600 	.word	0x50000600

08004300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004310:	4b0c      	ldr	r3, [pc, #48]	@ (8004344 <__NVIC_SetPriorityGrouping+0x44>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800431c:	4013      	ands	r3, r2
 800431e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004328:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800432c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004332:	4a04      	ldr	r2, [pc, #16]	@ (8004344 <__NVIC_SetPriorityGrouping+0x44>)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	60d3      	str	r3, [r2, #12]
}
 8004338:	bf00      	nop
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	e000ed00 	.word	0xe000ed00

08004348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800434c:	4b04      	ldr	r3, [pc, #16]	@ (8004360 <__NVIC_GetPriorityGrouping+0x18>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	0a1b      	lsrs	r3, r3, #8
 8004352:	f003 0307 	and.w	r3, r3, #7
}
 8004356:	4618      	mov	r0, r3
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	e000ed00 	.word	0xe000ed00

08004364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	4603      	mov	r3, r0
 800436c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004372:	2b00      	cmp	r3, #0
 8004374:	db0b      	blt.n	800438e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	f003 021f 	and.w	r2, r3, #31
 800437c:	4907      	ldr	r1, [pc, #28]	@ (800439c <__NVIC_EnableIRQ+0x38>)
 800437e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	2001      	movs	r0, #1
 8004386:	fa00 f202 	lsl.w	r2, r0, r2
 800438a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	e000e100 	.word	0xe000e100

080043a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	6039      	str	r1, [r7, #0]
 80043aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	db0a      	blt.n	80043ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	490c      	ldr	r1, [pc, #48]	@ (80043ec <__NVIC_SetPriority+0x4c>)
 80043ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043be:	0112      	lsls	r2, r2, #4
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	440b      	add	r3, r1
 80043c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043c8:	e00a      	b.n	80043e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	4908      	ldr	r1, [pc, #32]	@ (80043f0 <__NVIC_SetPriority+0x50>)
 80043d0:	79fb      	ldrb	r3, [r7, #7]
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	3b04      	subs	r3, #4
 80043d8:	0112      	lsls	r2, r2, #4
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	440b      	add	r3, r1
 80043de:	761a      	strb	r2, [r3, #24]
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	e000e100 	.word	0xe000e100
 80043f0:	e000ed00 	.word	0xe000ed00

080043f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b089      	sub	sp, #36	@ 0x24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f1c3 0307 	rsb	r3, r3, #7
 800440e:	2b04      	cmp	r3, #4
 8004410:	bf28      	it	cs
 8004412:	2304      	movcs	r3, #4
 8004414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	3304      	adds	r3, #4
 800441a:	2b06      	cmp	r3, #6
 800441c:	d902      	bls.n	8004424 <NVIC_EncodePriority+0x30>
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	3b03      	subs	r3, #3
 8004422:	e000      	b.n	8004426 <NVIC_EncodePriority+0x32>
 8004424:	2300      	movs	r3, #0
 8004426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004428:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	43da      	mvns	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	401a      	ands	r2, r3
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800443c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	fa01 f303 	lsl.w	r3, r1, r3
 8004446:	43d9      	mvns	r1, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800444c:	4313      	orrs	r3, r2
         );
}
 800444e:	4618      	mov	r0, r3
 8004450:	3724      	adds	r7, #36	@ 0x24
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b082      	sub	sp, #8
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7ff ff4c 	bl	8004300 <__NVIC_SetPriorityGrouping>
}
 8004468:	bf00      	nop
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800447e:	f7ff ff63 	bl	8004348 <__NVIC_GetPriorityGrouping>
 8004482:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	68b9      	ldr	r1, [r7, #8]
 8004488:	6978      	ldr	r0, [r7, #20]
 800448a:	f7ff ffb3 	bl	80043f4 <NVIC_EncodePriority>
 800448e:	4602      	mov	r2, r0
 8004490:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004494:	4611      	mov	r1, r2
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff ff82 	bl	80043a0 <__NVIC_SetPriority>
}
 800449c:	bf00      	nop
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff ff56 	bl	8004364 <__NVIC_EnableIRQ>
}
 80044b8:	bf00      	nop
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e08d      	b.n	80045ee <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	4b47      	ldr	r3, [pc, #284]	@ (80045f8 <HAL_DMA_Init+0x138>)
 80044da:	429a      	cmp	r2, r3
 80044dc:	d80f      	bhi.n	80044fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	461a      	mov	r2, r3
 80044e4:	4b45      	ldr	r3, [pc, #276]	@ (80045fc <HAL_DMA_Init+0x13c>)
 80044e6:	4413      	add	r3, r2
 80044e8:	4a45      	ldr	r2, [pc, #276]	@ (8004600 <HAL_DMA_Init+0x140>)
 80044ea:	fba2 2303 	umull	r2, r3, r2, r3
 80044ee:	091b      	lsrs	r3, r3, #4
 80044f0:	009a      	lsls	r2, r3, #2
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a42      	ldr	r2, [pc, #264]	@ (8004604 <HAL_DMA_Init+0x144>)
 80044fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80044fc:	e00e      	b.n	800451c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	4b40      	ldr	r3, [pc, #256]	@ (8004608 <HAL_DMA_Init+0x148>)
 8004506:	4413      	add	r3, r2
 8004508:	4a3d      	ldr	r2, [pc, #244]	@ (8004600 <HAL_DMA_Init+0x140>)
 800450a:	fba2 2303 	umull	r2, r3, r2, r3
 800450e:	091b      	lsrs	r3, r3, #4
 8004510:	009a      	lsls	r2, r3, #2
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a3c      	ldr	r2, [pc, #240]	@ (800460c <HAL_DMA_Init+0x14c>)
 800451a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004536:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004540:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800454c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004558:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fa76 	bl	8004a60 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800457c:	d102      	bne.n	8004584 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004598:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d010      	beq.n	80045c4 <HAL_DMA_Init+0x104>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d80c      	bhi.n	80045c4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fa96 	bl	8004adc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	e008      	b.n	80045d6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40020407 	.word	0x40020407
 80045fc:	bffdfff8 	.word	0xbffdfff8
 8004600:	cccccccd 	.word	0xcccccccd
 8004604:	40020000 	.word	0x40020000
 8004608:	bffdfbf8 	.word	0xbffdfbf8
 800460c:	40020400 	.word	0x40020400

08004610 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_DMA_Start_IT+0x20>
 800462c:	2302      	movs	r3, #2
 800462e:	e066      	b.n	80046fe <HAL_DMA_Start_IT+0xee>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b01      	cmp	r3, #1
 8004642:	d155      	bne.n	80046f0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0201 	bic.w	r2, r2, #1
 8004660:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	68b9      	ldr	r1, [r7, #8]
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f9bb 	bl	80049e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004672:	2b00      	cmp	r3, #0
 8004674:	d008      	beq.n	8004688 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 020e 	orr.w	r2, r2, #14
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e00f      	b.n	80046a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0204 	bic.w	r2, r2, #4
 8004696:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 020a 	orr.w	r2, r2, #10
 80046a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d007      	beq.n	80046c6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046c4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d007      	beq.n	80046de <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046dc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f042 0201 	orr.w	r2, r2, #1
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	e005      	b.n	80046fc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80046f8:	2302      	movs	r3, #2
 80046fa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80046fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004706:	b480      	push	{r7}
 8004708:	b085      	sub	sp, #20
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d005      	beq.n	800472a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2204      	movs	r2, #4
 8004722:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	73fb      	strb	r3, [r7, #15]
 8004728:	e037      	b.n	800479a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 020e 	bic.w	r2, r2, #14
 8004738:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004744:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004748:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0201 	bic.w	r2, r2, #1
 8004758:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475e:	f003 021f 	and.w	r2, r3, #31
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004766:	2101      	movs	r1, #1
 8004768:	fa01 f202 	lsl.w	r2, r1, r2
 800476c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004776:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00c      	beq.n	800479a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800478a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800478e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004798:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d00d      	beq.n	80047ec <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2204      	movs	r2, #4
 80047d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	73fb      	strb	r3, [r7, #15]
 80047ea:	e047      	b.n	800487c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 020e 	bic.w	r2, r2, #14
 80047fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0201 	bic.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004816:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800481a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004820:	f003 021f 	and.w	r2, r3, #31
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004828:	2101      	movs	r1, #1
 800482a:	fa01 f202 	lsl.w	r2, r1, r2
 800482e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004838:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00c      	beq.n	800485c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800484c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004850:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800485a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	4798      	blx	r3
    }
  }
  return status;
 800487c:	7bfb      	ldrb	r3, [r7, #15]
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b084      	sub	sp, #16
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a2:	f003 031f 	and.w	r3, r3, #31
 80048a6:	2204      	movs	r2, #4
 80048a8:	409a      	lsls	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4013      	ands	r3, r2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d026      	beq.n	8004900 <HAL_DMA_IRQHandler+0x7a>
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d021      	beq.n	8004900 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d107      	bne.n	80048da <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0204 	bic.w	r2, r2, #4
 80048d8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048de:	f003 021f 	and.w	r2, r3, #31
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e6:	2104      	movs	r1, #4
 80048e8:	fa01 f202 	lsl.w	r2, r1, r2
 80048ec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d071      	beq.n	80049da <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80048fe:	e06c      	b.n	80049da <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004904:	f003 031f 	and.w	r3, r3, #31
 8004908:	2202      	movs	r2, #2
 800490a:	409a      	lsls	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4013      	ands	r3, r2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d02e      	beq.n	8004972 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d029      	beq.n	8004972 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0320 	and.w	r3, r3, #32
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10b      	bne.n	8004944 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 020a 	bic.w	r2, r2, #10
 800493a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004948:	f003 021f 	and.w	r2, r3, #31
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004950:	2102      	movs	r1, #2
 8004952:	fa01 f202 	lsl.w	r2, r1, r2
 8004956:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004964:	2b00      	cmp	r3, #0
 8004966:	d038      	beq.n	80049da <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004970:	e033      	b.n	80049da <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004976:	f003 031f 	and.w	r3, r3, #31
 800497a:	2208      	movs	r2, #8
 800497c:	409a      	lsls	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4013      	ands	r3, r2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d02a      	beq.n	80049dc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f003 0308 	and.w	r3, r3, #8
 800498c:	2b00      	cmp	r3, #0
 800498e:	d025      	beq.n	80049dc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 020e 	bic.w	r2, r2, #14
 800499e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a4:	f003 021f 	and.w	r2, r3, #31
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ac:	2101      	movs	r1, #1
 80049ae:	fa01 f202 	lsl.w	r2, r1, r2
 80049b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d004      	beq.n	80049dc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80049da:	bf00      	nop
 80049dc:	bf00      	nop
}
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80049fa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d004      	beq.n	8004a0e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a0c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a12:	f003 021f 	and.w	r2, r3, #31
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a20:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2b10      	cmp	r3, #16
 8004a30:	d108      	bne.n	8004a44 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a42:	e007      	b.n	8004a54 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	60da      	str	r2, [r3, #12]
}
 8004a54:	bf00      	nop
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	4b16      	ldr	r3, [pc, #88]	@ (8004ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d802      	bhi.n	8004a7a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004a74:	4b15      	ldr	r3, [pc, #84]	@ (8004acc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	e001      	b.n	8004a7e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004a7a:	4b15      	ldr	r3, [pc, #84]	@ (8004ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004a7c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	3b08      	subs	r3, #8
 8004a8a:	4a12      	ldr	r2, [pc, #72]	@ (8004ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a90:	091b      	lsrs	r3, r3, #4
 8004a92:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a98:	089b      	lsrs	r3, r3, #2
 8004a9a:	009a      	lsls	r2, r3, #2
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a0b      	ldr	r2, [pc, #44]	@ (8004ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004aaa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f003 031f 	and.w	r3, r3, #31
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	409a      	lsls	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004aba:	bf00      	nop
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	40020407 	.word	0x40020407
 8004acc:	40020800 	.word	0x40020800
 8004ad0:	40020820 	.word	0x40020820
 8004ad4:	cccccccd 	.word	0xcccccccd
 8004ad8:	40020880 	.word	0x40020880

08004adc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	4b0b      	ldr	r3, [pc, #44]	@ (8004b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	461a      	mov	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a08      	ldr	r2, [pc, #32]	@ (8004b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004afe:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	f003 031f 	and.w	r3, r3, #31
 8004b08:	2201      	movs	r2, #1
 8004b0a:	409a      	lsls	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004b10:	bf00      	nop
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	1000823f 	.word	0x1000823f
 8004b20:	40020940 	.word	0x40020940

08004b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b32:	e15a      	b.n	8004dea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	2101      	movs	r1, #1
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b40:	4013      	ands	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 814c 	beq.w	8004de4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f003 0303 	and.w	r3, r3, #3
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d005      	beq.n	8004b64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d130      	bne.n	8004bc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	2203      	movs	r2, #3
 8004b70:	fa02 f303 	lsl.w	r3, r2, r3
 8004b74:	43db      	mvns	r3, r3
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	091b      	lsrs	r3, r3, #4
 8004bb0:	f003 0201 	and.w	r2, r3, #1
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d017      	beq.n	8004c02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	2203      	movs	r2, #3
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	43db      	mvns	r3, r3
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4013      	ands	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d123      	bne.n	8004c56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	08da      	lsrs	r2, r3, #3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3208      	adds	r2, #8
 8004c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	220f      	movs	r2, #15
 8004c26:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2a:	43db      	mvns	r3, r3
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	08da      	lsrs	r2, r3, #3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3208      	adds	r2, #8
 8004c50:	6939      	ldr	r1, [r7, #16]
 8004c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	2203      	movs	r2, #3
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	43db      	mvns	r3, r3
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f003 0203 	and.w	r2, r3, #3
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 80a6 	beq.w	8004de4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c98:	4b5b      	ldr	r3, [pc, #364]	@ (8004e08 <HAL_GPIO_Init+0x2e4>)
 8004c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c9c:	4a5a      	ldr	r2, [pc, #360]	@ (8004e08 <HAL_GPIO_Init+0x2e4>)
 8004c9e:	f043 0301 	orr.w	r3, r3, #1
 8004ca2:	6613      	str	r3, [r2, #96]	@ 0x60
 8004ca4:	4b58      	ldr	r3, [pc, #352]	@ (8004e08 <HAL_GPIO_Init+0x2e4>)
 8004ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cb0:	4a56      	ldr	r2, [pc, #344]	@ (8004e0c <HAL_GPIO_Init+0x2e8>)
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	089b      	lsrs	r3, r3, #2
 8004cb6:	3302      	adds	r3, #2
 8004cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f003 0303 	and.w	r3, r3, #3
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	220f      	movs	r2, #15
 8004cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ccc:	43db      	mvns	r3, r3
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004cda:	d01f      	beq.n	8004d1c <HAL_GPIO_Init+0x1f8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a4c      	ldr	r2, [pc, #304]	@ (8004e10 <HAL_GPIO_Init+0x2ec>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d019      	beq.n	8004d18 <HAL_GPIO_Init+0x1f4>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a4b      	ldr	r2, [pc, #300]	@ (8004e14 <HAL_GPIO_Init+0x2f0>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d013      	beq.n	8004d14 <HAL_GPIO_Init+0x1f0>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a4a      	ldr	r2, [pc, #296]	@ (8004e18 <HAL_GPIO_Init+0x2f4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d00d      	beq.n	8004d10 <HAL_GPIO_Init+0x1ec>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a49      	ldr	r2, [pc, #292]	@ (8004e1c <HAL_GPIO_Init+0x2f8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d007      	beq.n	8004d0c <HAL_GPIO_Init+0x1e8>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a48      	ldr	r2, [pc, #288]	@ (8004e20 <HAL_GPIO_Init+0x2fc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d101      	bne.n	8004d08 <HAL_GPIO_Init+0x1e4>
 8004d04:	2305      	movs	r3, #5
 8004d06:	e00a      	b.n	8004d1e <HAL_GPIO_Init+0x1fa>
 8004d08:	2306      	movs	r3, #6
 8004d0a:	e008      	b.n	8004d1e <HAL_GPIO_Init+0x1fa>
 8004d0c:	2304      	movs	r3, #4
 8004d0e:	e006      	b.n	8004d1e <HAL_GPIO_Init+0x1fa>
 8004d10:	2303      	movs	r3, #3
 8004d12:	e004      	b.n	8004d1e <HAL_GPIO_Init+0x1fa>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e002      	b.n	8004d1e <HAL_GPIO_Init+0x1fa>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <HAL_GPIO_Init+0x1fa>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	f002 0203 	and.w	r2, r2, #3
 8004d24:	0092      	lsls	r2, r2, #2
 8004d26:	4093      	lsls	r3, r2
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d2e:	4937      	ldr	r1, [pc, #220]	@ (8004e0c <HAL_GPIO_Init+0x2e8>)
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	089b      	lsrs	r3, r3, #2
 8004d34:	3302      	adds	r3, #2
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d3c:	4b39      	ldr	r3, [pc, #228]	@ (8004e24 <HAL_GPIO_Init+0x300>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	43db      	mvns	r3, r3
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d60:	4a30      	ldr	r2, [pc, #192]	@ (8004e24 <HAL_GPIO_Init+0x300>)
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004d66:	4b2f      	ldr	r3, [pc, #188]	@ (8004e24 <HAL_GPIO_Init+0x300>)
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4013      	ands	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d8a:	4a26      	ldr	r2, [pc, #152]	@ (8004e24 <HAL_GPIO_Init+0x300>)
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004d90:	4b24      	ldr	r3, [pc, #144]	@ (8004e24 <HAL_GPIO_Init+0x300>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004db4:	4a1b      	ldr	r2, [pc, #108]	@ (8004e24 <HAL_GPIO_Init+0x300>)
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004dba:	4b1a      	ldr	r3, [pc, #104]	@ (8004e24 <HAL_GPIO_Init+0x300>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004dde:	4a11      	ldr	r2, [pc, #68]	@ (8004e24 <HAL_GPIO_Init+0x300>)
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	3301      	adds	r3, #1
 8004de8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	fa22 f303 	lsr.w	r3, r2, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f47f ae9d 	bne.w	8004b34 <HAL_GPIO_Init+0x10>
  }
}
 8004dfa:	bf00      	nop
 8004dfc:	bf00      	nop
 8004dfe:	371c      	adds	r7, #28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	40010000 	.word	0x40010000
 8004e10:	48000400 	.word	0x48000400
 8004e14:	48000800 	.word	0x48000800
 8004e18:	48000c00 	.word	0x48000c00
 8004e1c:	48001000 	.word	0x48001000
 8004e20:	48001400 	.word	0x48001400
 8004e24:	40010400 	.word	0x40010400

08004e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	460b      	mov	r3, r1
 8004e32:	807b      	strh	r3, [r7, #2]
 8004e34:	4613      	mov	r3, r2
 8004e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e38:	787b      	ldrb	r3, [r7, #1]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e3e:	887a      	ldrh	r2, [r7, #2]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e44:	e002      	b.n	8004e4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e46:	887a      	ldrh	r2, [r7, #2]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	460b      	mov	r3, r1
 8004e62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e6a:	887a      	ldrh	r2, [r7, #2]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	041a      	lsls	r2, r3, #16
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	43d9      	mvns	r1, r3
 8004e76:	887b      	ldrh	r3, [r7, #2]
 8004e78:	400b      	ands	r3, r1
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	619a      	str	r2, [r3, #24]
}
 8004e80:	bf00      	nop
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	4603      	mov	r3, r0
 8004e94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e96:	4b08      	ldr	r3, [pc, #32]	@ (8004eb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e98:	695a      	ldr	r2, [r3, #20]
 8004e9a:	88fb      	ldrh	r3, [r7, #6]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d006      	beq.n	8004eb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ea2:	4a05      	ldr	r2, [pc, #20]	@ (8004eb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ea4:	88fb      	ldrh	r3, [r7, #6]
 8004ea6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ea8:	88fb      	ldrh	r3, [r7, #6]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 f806 	bl	8004ebc <HAL_GPIO_EXTI_Callback>
  }
}
 8004eb0:	bf00      	nop
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40010400 	.word	0x40010400

08004ebc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
	...

08004ed4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d141      	bne.n	8004f66 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ee2:	4b4b      	ldr	r3, [pc, #300]	@ (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004eea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eee:	d131      	bne.n	8004f54 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ef0:	4b47      	ldr	r3, [pc, #284]	@ (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ef6:	4a46      	ldr	r2, [pc, #280]	@ (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004efc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f00:	4b43      	ldr	r3, [pc, #268]	@ (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f08:	4a41      	ldr	r2, [pc, #260]	@ (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f10:	4b40      	ldr	r3, [pc, #256]	@ (8005014 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2232      	movs	r2, #50	@ 0x32
 8004f16:	fb02 f303 	mul.w	r3, r2, r3
 8004f1a:	4a3f      	ldr	r2, [pc, #252]	@ (8005018 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f20:	0c9b      	lsrs	r3, r3, #18
 8004f22:	3301      	adds	r3, #1
 8004f24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f26:	e002      	b.n	8004f2e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f2e:	4b38      	ldr	r3, [pc, #224]	@ (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f3a:	d102      	bne.n	8004f42 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1f2      	bne.n	8004f28 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f42:	4b33      	ldr	r3, [pc, #204]	@ (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f4e:	d158      	bne.n	8005002 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e057      	b.n	8005004 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f54:	4b2e      	ldr	r3, [pc, #184]	@ (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f5a:	4a2d      	ldr	r2, [pc, #180]	@ (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f64:	e04d      	b.n	8005002 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f6c:	d141      	bne.n	8004ff2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f6e:	4b28      	ldr	r3, [pc, #160]	@ (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f7a:	d131      	bne.n	8004fe0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f7c:	4b24      	ldr	r3, [pc, #144]	@ (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f82:	4a23      	ldr	r2, [pc, #140]	@ (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f8c:	4b20      	ldr	r3, [pc, #128]	@ (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f94:	4a1e      	ldr	r2, [pc, #120]	@ (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8005014 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2232      	movs	r2, #50	@ 0x32
 8004fa2:	fb02 f303 	mul.w	r3, r2, r3
 8004fa6:	4a1c      	ldr	r2, [pc, #112]	@ (8005018 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fac:	0c9b      	lsrs	r3, r3, #18
 8004fae:	3301      	adds	r3, #1
 8004fb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fb2:	e002      	b.n	8004fba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fba:	4b15      	ldr	r3, [pc, #84]	@ (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fc6:	d102      	bne.n	8004fce <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f2      	bne.n	8004fb4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fce:	4b10      	ldr	r3, [pc, #64]	@ (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fda:	d112      	bne.n	8005002 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e011      	b.n	8005004 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ff0:	e007      	b.n	8005002 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ff2:	4b07      	ldr	r3, [pc, #28]	@ (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ffa:	4a05      	ldr	r2, [pc, #20]	@ (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ffc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005000:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	40007000 	.word	0x40007000
 8005014:	20000000 	.word	0x20000000
 8005018:	431bde83 	.word	0x431bde83

0800501c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005020:	4b05      	ldr	r3, [pc, #20]	@ (8005038 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	4a04      	ldr	r2, [pc, #16]	@ (8005038 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005026:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800502a:	6093      	str	r3, [r2, #8]
}
 800502c:	bf00      	nop
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	40007000 	.word	0x40007000

0800503c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b088      	sub	sp, #32
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e2fe      	b.n	800564c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d075      	beq.n	8005146 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800505a:	4b97      	ldr	r3, [pc, #604]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 030c 	and.w	r3, r3, #12
 8005062:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005064:	4b94      	ldr	r3, [pc, #592]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f003 0303 	and.w	r3, r3, #3
 800506c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	2b0c      	cmp	r3, #12
 8005072:	d102      	bne.n	800507a <HAL_RCC_OscConfig+0x3e>
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2b03      	cmp	r3, #3
 8005078:	d002      	beq.n	8005080 <HAL_RCC_OscConfig+0x44>
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	2b08      	cmp	r3, #8
 800507e:	d10b      	bne.n	8005098 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005080:	4b8d      	ldr	r3, [pc, #564]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d05b      	beq.n	8005144 <HAL_RCC_OscConfig+0x108>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d157      	bne.n	8005144 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e2d9      	b.n	800564c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050a0:	d106      	bne.n	80050b0 <HAL_RCC_OscConfig+0x74>
 80050a2:	4b85      	ldr	r3, [pc, #532]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a84      	ldr	r2, [pc, #528]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 80050a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	e01d      	b.n	80050ec <HAL_RCC_OscConfig+0xb0>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050b8:	d10c      	bne.n	80050d4 <HAL_RCC_OscConfig+0x98>
 80050ba:	4b7f      	ldr	r3, [pc, #508]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a7e      	ldr	r2, [pc, #504]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 80050c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	4b7c      	ldr	r3, [pc, #496]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a7b      	ldr	r2, [pc, #492]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 80050cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	e00b      	b.n	80050ec <HAL_RCC_OscConfig+0xb0>
 80050d4:	4b78      	ldr	r3, [pc, #480]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a77      	ldr	r2, [pc, #476]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 80050da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050de:	6013      	str	r3, [r2, #0]
 80050e0:	4b75      	ldr	r3, [pc, #468]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a74      	ldr	r2, [pc, #464]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 80050e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d013      	beq.n	800511c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f4:	f7fd f886 	bl	8002204 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050fc:	f7fd f882 	bl	8002204 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b64      	cmp	r3, #100	@ 0x64
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e29e      	b.n	800564c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800510e:	4b6a      	ldr	r3, [pc, #424]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d0f0      	beq.n	80050fc <HAL_RCC_OscConfig+0xc0>
 800511a:	e014      	b.n	8005146 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800511c:	f7fd f872 	bl	8002204 <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005124:	f7fd f86e 	bl	8002204 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b64      	cmp	r3, #100	@ 0x64
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e28a      	b.n	800564c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005136:	4b60      	ldr	r3, [pc, #384]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f0      	bne.n	8005124 <HAL_RCC_OscConfig+0xe8>
 8005142:	e000      	b.n	8005146 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d075      	beq.n	800523e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005152:	4b59      	ldr	r3, [pc, #356]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 030c 	and.w	r3, r3, #12
 800515a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800515c:	4b56      	ldr	r3, [pc, #344]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f003 0303 	and.w	r3, r3, #3
 8005164:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	2b0c      	cmp	r3, #12
 800516a:	d102      	bne.n	8005172 <HAL_RCC_OscConfig+0x136>
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	2b02      	cmp	r3, #2
 8005170:	d002      	beq.n	8005178 <HAL_RCC_OscConfig+0x13c>
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	2b04      	cmp	r3, #4
 8005176:	d11f      	bne.n	80051b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005178:	4b4f      	ldr	r3, [pc, #316]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005180:	2b00      	cmp	r3, #0
 8005182:	d005      	beq.n	8005190 <HAL_RCC_OscConfig+0x154>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e25d      	b.n	800564c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005190:	4b49      	ldr	r3, [pc, #292]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	061b      	lsls	r3, r3, #24
 800519e:	4946      	ldr	r1, [pc, #280]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80051a4:	4b45      	ldr	r3, [pc, #276]	@ (80052bc <HAL_RCC_OscConfig+0x280>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7fb fde9 	bl	8000d80 <HAL_InitTick>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d043      	beq.n	800523c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e249      	b.n	800564c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d023      	beq.n	8005208 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051c0:	4b3d      	ldr	r3, [pc, #244]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a3c      	ldr	r2, [pc, #240]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 80051c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051cc:	f7fd f81a 	bl	8002204 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051d4:	f7fd f816 	bl	8002204 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e232      	b.n	800564c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051e6:	4b34      	ldr	r3, [pc, #208]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d0f0      	beq.n	80051d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051f2:	4b31      	ldr	r3, [pc, #196]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	061b      	lsls	r3, r3, #24
 8005200:	492d      	ldr	r1, [pc, #180]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 8005202:	4313      	orrs	r3, r2
 8005204:	604b      	str	r3, [r1, #4]
 8005206:	e01a      	b.n	800523e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005208:	4b2b      	ldr	r3, [pc, #172]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a2a      	ldr	r2, [pc, #168]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 800520e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005214:	f7fc fff6 	bl	8002204 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800521c:	f7fc fff2 	bl	8002204 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e20e      	b.n	800564c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800522e:	4b22      	ldr	r3, [pc, #136]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1f0      	bne.n	800521c <HAL_RCC_OscConfig+0x1e0>
 800523a:	e000      	b.n	800523e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800523c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	2b00      	cmp	r3, #0
 8005248:	d041      	beq.n	80052ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d01c      	beq.n	800528c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005252:	4b19      	ldr	r3, [pc, #100]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 8005254:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005258:	4a17      	ldr	r2, [pc, #92]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 800525a:	f043 0301 	orr.w	r3, r3, #1
 800525e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005262:	f7fc ffcf 	bl	8002204 <HAL_GetTick>
 8005266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005268:	e008      	b.n	800527c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800526a:	f7fc ffcb 	bl	8002204 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e1e7      	b.n	800564c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800527c:	4b0e      	ldr	r3, [pc, #56]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 800527e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d0ef      	beq.n	800526a <HAL_RCC_OscConfig+0x22e>
 800528a:	e020      	b.n	80052ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800528c:	4b0a      	ldr	r3, [pc, #40]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 800528e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005292:	4a09      	ldr	r2, [pc, #36]	@ (80052b8 <HAL_RCC_OscConfig+0x27c>)
 8005294:	f023 0301 	bic.w	r3, r3, #1
 8005298:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800529c:	f7fc ffb2 	bl	8002204 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052a2:	e00d      	b.n	80052c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052a4:	f7fc ffae 	bl	8002204 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d906      	bls.n	80052c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e1ca      	b.n	800564c <HAL_RCC_OscConfig+0x610>
 80052b6:	bf00      	nop
 80052b8:	40021000 	.word	0x40021000
 80052bc:	20000160 	.word	0x20000160
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052c0:	4b8c      	ldr	r3, [pc, #560]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 80052c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1ea      	bne.n	80052a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 80a6 	beq.w	8005428 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052dc:	2300      	movs	r3, #0
 80052de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052e0:	4b84      	ldr	r3, [pc, #528]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 80052e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_RCC_OscConfig+0x2b4>
 80052ec:	2301      	movs	r3, #1
 80052ee:	e000      	b.n	80052f2 <HAL_RCC_OscConfig+0x2b6>
 80052f0:	2300      	movs	r3, #0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00d      	beq.n	8005312 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052f6:	4b7f      	ldr	r3, [pc, #508]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 80052f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052fa:	4a7e      	ldr	r2, [pc, #504]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 80052fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005300:	6593      	str	r3, [r2, #88]	@ 0x58
 8005302:	4b7c      	ldr	r3, [pc, #496]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 8005304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800530e:	2301      	movs	r3, #1
 8005310:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005312:	4b79      	ldr	r3, [pc, #484]	@ (80054f8 <HAL_RCC_OscConfig+0x4bc>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800531a:	2b00      	cmp	r3, #0
 800531c:	d118      	bne.n	8005350 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800531e:	4b76      	ldr	r3, [pc, #472]	@ (80054f8 <HAL_RCC_OscConfig+0x4bc>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a75      	ldr	r2, [pc, #468]	@ (80054f8 <HAL_RCC_OscConfig+0x4bc>)
 8005324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005328:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800532a:	f7fc ff6b 	bl	8002204 <HAL_GetTick>
 800532e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005330:	e008      	b.n	8005344 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005332:	f7fc ff67 	bl	8002204 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d901      	bls.n	8005344 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e183      	b.n	800564c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005344:	4b6c      	ldr	r3, [pc, #432]	@ (80054f8 <HAL_RCC_OscConfig+0x4bc>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0f0      	beq.n	8005332 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d108      	bne.n	800536a <HAL_RCC_OscConfig+0x32e>
 8005358:	4b66      	ldr	r3, [pc, #408]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 800535a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800535e:	4a65      	ldr	r2, [pc, #404]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 8005360:	f043 0301 	orr.w	r3, r3, #1
 8005364:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005368:	e024      	b.n	80053b4 <HAL_RCC_OscConfig+0x378>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	2b05      	cmp	r3, #5
 8005370:	d110      	bne.n	8005394 <HAL_RCC_OscConfig+0x358>
 8005372:	4b60      	ldr	r3, [pc, #384]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 8005374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005378:	4a5e      	ldr	r2, [pc, #376]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 800537a:	f043 0304 	orr.w	r3, r3, #4
 800537e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005382:	4b5c      	ldr	r3, [pc, #368]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 8005384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005388:	4a5a      	ldr	r2, [pc, #360]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 800538a:	f043 0301 	orr.w	r3, r3, #1
 800538e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005392:	e00f      	b.n	80053b4 <HAL_RCC_OscConfig+0x378>
 8005394:	4b57      	ldr	r3, [pc, #348]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 8005396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800539a:	4a56      	ldr	r2, [pc, #344]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 800539c:	f023 0301 	bic.w	r3, r3, #1
 80053a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053a4:	4b53      	ldr	r3, [pc, #332]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 80053a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053aa:	4a52      	ldr	r2, [pc, #328]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 80053ac:	f023 0304 	bic.w	r3, r3, #4
 80053b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d016      	beq.n	80053ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053bc:	f7fc ff22 	bl	8002204 <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053c2:	e00a      	b.n	80053da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053c4:	f7fc ff1e 	bl	8002204 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e138      	b.n	800564c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053da:	4b46      	ldr	r3, [pc, #280]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 80053dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0ed      	beq.n	80053c4 <HAL_RCC_OscConfig+0x388>
 80053e8:	e015      	b.n	8005416 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ea:	f7fc ff0b 	bl	8002204 <HAL_GetTick>
 80053ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053f0:	e00a      	b.n	8005408 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f2:	f7fc ff07 	bl	8002204 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005400:	4293      	cmp	r3, r2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e121      	b.n	800564c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005408:	4b3a      	ldr	r3, [pc, #232]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 800540a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1ed      	bne.n	80053f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005416:	7ffb      	ldrb	r3, [r7, #31]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d105      	bne.n	8005428 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800541c:	4b35      	ldr	r3, [pc, #212]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 800541e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005420:	4a34      	ldr	r2, [pc, #208]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 8005422:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005426:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0320 	and.w	r3, r3, #32
 8005430:	2b00      	cmp	r3, #0
 8005432:	d03c      	beq.n	80054ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d01c      	beq.n	8005476 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800543c:	4b2d      	ldr	r3, [pc, #180]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 800543e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005442:	4a2c      	ldr	r2, [pc, #176]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 8005444:	f043 0301 	orr.w	r3, r3, #1
 8005448:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800544c:	f7fc feda 	bl	8002204 <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005454:	f7fc fed6 	bl	8002204 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e0f2      	b.n	800564c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005466:	4b23      	ldr	r3, [pc, #140]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 8005468:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0ef      	beq.n	8005454 <HAL_RCC_OscConfig+0x418>
 8005474:	e01b      	b.n	80054ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005476:	4b1f      	ldr	r3, [pc, #124]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 8005478:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800547c:	4a1d      	ldr	r2, [pc, #116]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 800547e:	f023 0301 	bic.w	r3, r3, #1
 8005482:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005486:	f7fc febd 	bl	8002204 <HAL_GetTick>
 800548a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800548c:	e008      	b.n	80054a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800548e:	f7fc feb9 	bl	8002204 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e0d5      	b.n	800564c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054a0:	4b14      	ldr	r3, [pc, #80]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 80054a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1ef      	bne.n	800548e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 80c9 	beq.w	800564a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054b8:	4b0e      	ldr	r3, [pc, #56]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f003 030c 	and.w	r3, r3, #12
 80054c0:	2b0c      	cmp	r3, #12
 80054c2:	f000 8083 	beq.w	80055cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d15e      	bne.n	800558c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ce:	4b09      	ldr	r3, [pc, #36]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a08      	ldr	r2, [pc, #32]	@ (80054f4 <HAL_RCC_OscConfig+0x4b8>)
 80054d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054da:	f7fc fe93 	bl	8002204 <HAL_GetTick>
 80054de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054e0:	e00c      	b.n	80054fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e2:	f7fc fe8f 	bl	8002204 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d905      	bls.n	80054fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e0ab      	b.n	800564c <HAL_RCC_OscConfig+0x610>
 80054f4:	40021000 	.word	0x40021000
 80054f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054fc:	4b55      	ldr	r3, [pc, #340]	@ (8005654 <HAL_RCC_OscConfig+0x618>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1ec      	bne.n	80054e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005508:	4b52      	ldr	r3, [pc, #328]	@ (8005654 <HAL_RCC_OscConfig+0x618>)
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	4b52      	ldr	r3, [pc, #328]	@ (8005658 <HAL_RCC_OscConfig+0x61c>)
 800550e:	4013      	ands	r3, r2
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6a11      	ldr	r1, [r2, #32]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005518:	3a01      	subs	r2, #1
 800551a:	0112      	lsls	r2, r2, #4
 800551c:	4311      	orrs	r1, r2
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005522:	0212      	lsls	r2, r2, #8
 8005524:	4311      	orrs	r1, r2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800552a:	0852      	lsrs	r2, r2, #1
 800552c:	3a01      	subs	r2, #1
 800552e:	0552      	lsls	r2, r2, #21
 8005530:	4311      	orrs	r1, r2
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005536:	0852      	lsrs	r2, r2, #1
 8005538:	3a01      	subs	r2, #1
 800553a:	0652      	lsls	r2, r2, #25
 800553c:	4311      	orrs	r1, r2
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005542:	06d2      	lsls	r2, r2, #27
 8005544:	430a      	orrs	r2, r1
 8005546:	4943      	ldr	r1, [pc, #268]	@ (8005654 <HAL_RCC_OscConfig+0x618>)
 8005548:	4313      	orrs	r3, r2
 800554a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800554c:	4b41      	ldr	r3, [pc, #260]	@ (8005654 <HAL_RCC_OscConfig+0x618>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a40      	ldr	r2, [pc, #256]	@ (8005654 <HAL_RCC_OscConfig+0x618>)
 8005552:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005556:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005558:	4b3e      	ldr	r3, [pc, #248]	@ (8005654 <HAL_RCC_OscConfig+0x618>)
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	4a3d      	ldr	r2, [pc, #244]	@ (8005654 <HAL_RCC_OscConfig+0x618>)
 800555e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005562:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005564:	f7fc fe4e 	bl	8002204 <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800556c:	f7fc fe4a 	bl	8002204 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e066      	b.n	800564c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800557e:	4b35      	ldr	r3, [pc, #212]	@ (8005654 <HAL_RCC_OscConfig+0x618>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0f0      	beq.n	800556c <HAL_RCC_OscConfig+0x530>
 800558a:	e05e      	b.n	800564a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800558c:	4b31      	ldr	r3, [pc, #196]	@ (8005654 <HAL_RCC_OscConfig+0x618>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a30      	ldr	r2, [pc, #192]	@ (8005654 <HAL_RCC_OscConfig+0x618>)
 8005592:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005598:	f7fc fe34 	bl	8002204 <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055a0:	f7fc fe30 	bl	8002204 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e04c      	b.n	800564c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055b2:	4b28      	ldr	r3, [pc, #160]	@ (8005654 <HAL_RCC_OscConfig+0x618>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1f0      	bne.n	80055a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80055be:	4b25      	ldr	r3, [pc, #148]	@ (8005654 <HAL_RCC_OscConfig+0x618>)
 80055c0:	68da      	ldr	r2, [r3, #12]
 80055c2:	4924      	ldr	r1, [pc, #144]	@ (8005654 <HAL_RCC_OscConfig+0x618>)
 80055c4:	4b25      	ldr	r3, [pc, #148]	@ (800565c <HAL_RCC_OscConfig+0x620>)
 80055c6:	4013      	ands	r3, r2
 80055c8:	60cb      	str	r3, [r1, #12]
 80055ca:	e03e      	b.n	800564a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d101      	bne.n	80055d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e039      	b.n	800564c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80055d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005654 <HAL_RCC_OscConfig+0x618>)
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f003 0203 	and.w	r2, r3, #3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d12c      	bne.n	8005646 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f6:	3b01      	subs	r3, #1
 80055f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d123      	bne.n	8005646 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005608:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800560a:	429a      	cmp	r2, r3
 800560c:	d11b      	bne.n	8005646 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005618:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800561a:	429a      	cmp	r2, r3
 800561c:	d113      	bne.n	8005646 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005628:	085b      	lsrs	r3, r3, #1
 800562a:	3b01      	subs	r3, #1
 800562c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800562e:	429a      	cmp	r2, r3
 8005630:	d109      	bne.n	8005646 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800563c:	085b      	lsrs	r3, r3, #1
 800563e:	3b01      	subs	r3, #1
 8005640:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005642:	429a      	cmp	r2, r3
 8005644:	d001      	beq.n	800564a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e000      	b.n	800564c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3720      	adds	r7, #32
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	40021000 	.word	0x40021000
 8005658:	019f800c 	.word	0x019f800c
 800565c:	feeefffc 	.word	0xfeeefffc

08005660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800566a:	2300      	movs	r3, #0
 800566c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e11e      	b.n	80058b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005678:	4b91      	ldr	r3, [pc, #580]	@ (80058c0 <HAL_RCC_ClockConfig+0x260>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 030f 	and.w	r3, r3, #15
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	429a      	cmp	r2, r3
 8005684:	d910      	bls.n	80056a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005686:	4b8e      	ldr	r3, [pc, #568]	@ (80058c0 <HAL_RCC_ClockConfig+0x260>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f023 020f 	bic.w	r2, r3, #15
 800568e:	498c      	ldr	r1, [pc, #560]	@ (80058c0 <HAL_RCC_ClockConfig+0x260>)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	4313      	orrs	r3, r2
 8005694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005696:	4b8a      	ldr	r3, [pc, #552]	@ (80058c0 <HAL_RCC_ClockConfig+0x260>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d001      	beq.n	80056a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e106      	b.n	80058b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d073      	beq.n	800579c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d129      	bne.n	8005710 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056bc:	4b81      	ldr	r3, [pc, #516]	@ (80058c4 <HAL_RCC_ClockConfig+0x264>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e0f4      	b.n	80058b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80056cc:	f000 f9d0 	bl	8005a70 <RCC_GetSysClockFreqFromPLLSource>
 80056d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	4a7c      	ldr	r2, [pc, #496]	@ (80058c8 <HAL_RCC_ClockConfig+0x268>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d93f      	bls.n	800575a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80056da:	4b7a      	ldr	r3, [pc, #488]	@ (80058c4 <HAL_RCC_ClockConfig+0x264>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d009      	beq.n	80056fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d033      	beq.n	800575a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d12f      	bne.n	800575a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056fa:	4b72      	ldr	r3, [pc, #456]	@ (80058c4 <HAL_RCC_ClockConfig+0x264>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005702:	4a70      	ldr	r2, [pc, #448]	@ (80058c4 <HAL_RCC_ClockConfig+0x264>)
 8005704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005708:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800570a:	2380      	movs	r3, #128	@ 0x80
 800570c:	617b      	str	r3, [r7, #20]
 800570e:	e024      	b.n	800575a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	2b02      	cmp	r3, #2
 8005716:	d107      	bne.n	8005728 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005718:	4b6a      	ldr	r3, [pc, #424]	@ (80058c4 <HAL_RCC_ClockConfig+0x264>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d109      	bne.n	8005738 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e0c6      	b.n	80058b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005728:	4b66      	ldr	r3, [pc, #408]	@ (80058c4 <HAL_RCC_ClockConfig+0x264>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e0be      	b.n	80058b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005738:	f000 f8ce 	bl	80058d8 <HAL_RCC_GetSysClockFreq>
 800573c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	4a61      	ldr	r2, [pc, #388]	@ (80058c8 <HAL_RCC_ClockConfig+0x268>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d909      	bls.n	800575a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005746:	4b5f      	ldr	r3, [pc, #380]	@ (80058c4 <HAL_RCC_ClockConfig+0x264>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800574e:	4a5d      	ldr	r2, [pc, #372]	@ (80058c4 <HAL_RCC_ClockConfig+0x264>)
 8005750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005754:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005756:	2380      	movs	r3, #128	@ 0x80
 8005758:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800575a:	4b5a      	ldr	r3, [pc, #360]	@ (80058c4 <HAL_RCC_ClockConfig+0x264>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f023 0203 	bic.w	r2, r3, #3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	4957      	ldr	r1, [pc, #348]	@ (80058c4 <HAL_RCC_ClockConfig+0x264>)
 8005768:	4313      	orrs	r3, r2
 800576a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800576c:	f7fc fd4a 	bl	8002204 <HAL_GetTick>
 8005770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005772:	e00a      	b.n	800578a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005774:	f7fc fd46 	bl	8002204 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005782:	4293      	cmp	r3, r2
 8005784:	d901      	bls.n	800578a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e095      	b.n	80058b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800578a:	4b4e      	ldr	r3, [pc, #312]	@ (80058c4 <HAL_RCC_ClockConfig+0x264>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 020c 	and.w	r2, r3, #12
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	429a      	cmp	r2, r3
 800579a:	d1eb      	bne.n	8005774 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d023      	beq.n	80057f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d005      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057b4:	4b43      	ldr	r3, [pc, #268]	@ (80058c4 <HAL_RCC_ClockConfig+0x264>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	4a42      	ldr	r2, [pc, #264]	@ (80058c4 <HAL_RCC_ClockConfig+0x264>)
 80057ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80057be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0308 	and.w	r3, r3, #8
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d007      	beq.n	80057dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80057cc:	4b3d      	ldr	r3, [pc, #244]	@ (80058c4 <HAL_RCC_ClockConfig+0x264>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80057d4:	4a3b      	ldr	r2, [pc, #236]	@ (80058c4 <HAL_RCC_ClockConfig+0x264>)
 80057d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80057da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057dc:	4b39      	ldr	r3, [pc, #228]	@ (80058c4 <HAL_RCC_ClockConfig+0x264>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	4936      	ldr	r1, [pc, #216]	@ (80058c4 <HAL_RCC_ClockConfig+0x264>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	608b      	str	r3, [r1, #8]
 80057ee:	e008      	b.n	8005802 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	2b80      	cmp	r3, #128	@ 0x80
 80057f4:	d105      	bne.n	8005802 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80057f6:	4b33      	ldr	r3, [pc, #204]	@ (80058c4 <HAL_RCC_ClockConfig+0x264>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	4a32      	ldr	r2, [pc, #200]	@ (80058c4 <HAL_RCC_ClockConfig+0x264>)
 80057fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005800:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005802:	4b2f      	ldr	r3, [pc, #188]	@ (80058c0 <HAL_RCC_ClockConfig+0x260>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d21d      	bcs.n	800584c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005810:	4b2b      	ldr	r3, [pc, #172]	@ (80058c0 <HAL_RCC_ClockConfig+0x260>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f023 020f 	bic.w	r2, r3, #15
 8005818:	4929      	ldr	r1, [pc, #164]	@ (80058c0 <HAL_RCC_ClockConfig+0x260>)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	4313      	orrs	r3, r2
 800581e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005820:	f7fc fcf0 	bl	8002204 <HAL_GetTick>
 8005824:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005826:	e00a      	b.n	800583e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005828:	f7fc fcec 	bl	8002204 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005836:	4293      	cmp	r3, r2
 8005838:	d901      	bls.n	800583e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e03b      	b.n	80058b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800583e:	4b20      	ldr	r3, [pc, #128]	@ (80058c0 <HAL_RCC_ClockConfig+0x260>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d1ed      	bne.n	8005828 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b00      	cmp	r3, #0
 8005856:	d008      	beq.n	800586a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005858:	4b1a      	ldr	r3, [pc, #104]	@ (80058c4 <HAL_RCC_ClockConfig+0x264>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	4917      	ldr	r1, [pc, #92]	@ (80058c4 <HAL_RCC_ClockConfig+0x264>)
 8005866:	4313      	orrs	r3, r2
 8005868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0308 	and.w	r3, r3, #8
 8005872:	2b00      	cmp	r3, #0
 8005874:	d009      	beq.n	800588a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005876:	4b13      	ldr	r3, [pc, #76]	@ (80058c4 <HAL_RCC_ClockConfig+0x264>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	490f      	ldr	r1, [pc, #60]	@ (80058c4 <HAL_RCC_ClockConfig+0x264>)
 8005886:	4313      	orrs	r3, r2
 8005888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800588a:	f000 f825 	bl	80058d8 <HAL_RCC_GetSysClockFreq>
 800588e:	4602      	mov	r2, r0
 8005890:	4b0c      	ldr	r3, [pc, #48]	@ (80058c4 <HAL_RCC_ClockConfig+0x264>)
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	091b      	lsrs	r3, r3, #4
 8005896:	f003 030f 	and.w	r3, r3, #15
 800589a:	490c      	ldr	r1, [pc, #48]	@ (80058cc <HAL_RCC_ClockConfig+0x26c>)
 800589c:	5ccb      	ldrb	r3, [r1, r3]
 800589e:	f003 031f 	and.w	r3, r3, #31
 80058a2:	fa22 f303 	lsr.w	r3, r2, r3
 80058a6:	4a0a      	ldr	r2, [pc, #40]	@ (80058d0 <HAL_RCC_ClockConfig+0x270>)
 80058a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80058aa:	4b0a      	ldr	r3, [pc, #40]	@ (80058d4 <HAL_RCC_ClockConfig+0x274>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fb fa66 	bl	8000d80 <HAL_InitTick>
 80058b4:	4603      	mov	r3, r0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40022000 	.word	0x40022000
 80058c4:	40021000 	.word	0x40021000
 80058c8:	04c4b400 	.word	0x04c4b400
 80058cc:	0800bbb0 	.word	0x0800bbb0
 80058d0:	20000000 	.word	0x20000000
 80058d4:	20000160 	.word	0x20000160

080058d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80058de:	4b2c      	ldr	r3, [pc, #176]	@ (8005990 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f003 030c 	and.w	r3, r3, #12
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d102      	bne.n	80058f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058ea:	4b2a      	ldr	r3, [pc, #168]	@ (8005994 <HAL_RCC_GetSysClockFreq+0xbc>)
 80058ec:	613b      	str	r3, [r7, #16]
 80058ee:	e047      	b.n	8005980 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80058f0:	4b27      	ldr	r3, [pc, #156]	@ (8005990 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f003 030c 	and.w	r3, r3, #12
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	d102      	bne.n	8005902 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058fc:	4b26      	ldr	r3, [pc, #152]	@ (8005998 <HAL_RCC_GetSysClockFreq+0xc0>)
 80058fe:	613b      	str	r3, [r7, #16]
 8005900:	e03e      	b.n	8005980 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005902:	4b23      	ldr	r3, [pc, #140]	@ (8005990 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f003 030c 	and.w	r3, r3, #12
 800590a:	2b0c      	cmp	r3, #12
 800590c:	d136      	bne.n	800597c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800590e:	4b20      	ldr	r3, [pc, #128]	@ (8005990 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005918:	4b1d      	ldr	r3, [pc, #116]	@ (8005990 <HAL_RCC_GetSysClockFreq+0xb8>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	091b      	lsrs	r3, r3, #4
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	3301      	adds	r3, #1
 8005924:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b03      	cmp	r3, #3
 800592a:	d10c      	bne.n	8005946 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800592c:	4a1a      	ldr	r2, [pc, #104]	@ (8005998 <HAL_RCC_GetSysClockFreq+0xc0>)
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	fbb2 f3f3 	udiv	r3, r2, r3
 8005934:	4a16      	ldr	r2, [pc, #88]	@ (8005990 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005936:	68d2      	ldr	r2, [r2, #12]
 8005938:	0a12      	lsrs	r2, r2, #8
 800593a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800593e:	fb02 f303 	mul.w	r3, r2, r3
 8005942:	617b      	str	r3, [r7, #20]
      break;
 8005944:	e00c      	b.n	8005960 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005946:	4a13      	ldr	r2, [pc, #76]	@ (8005994 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	fbb2 f3f3 	udiv	r3, r2, r3
 800594e:	4a10      	ldr	r2, [pc, #64]	@ (8005990 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005950:	68d2      	ldr	r2, [r2, #12]
 8005952:	0a12      	lsrs	r2, r2, #8
 8005954:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005958:	fb02 f303 	mul.w	r3, r2, r3
 800595c:	617b      	str	r3, [r7, #20]
      break;
 800595e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005960:	4b0b      	ldr	r3, [pc, #44]	@ (8005990 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	0e5b      	lsrs	r3, r3, #25
 8005966:	f003 0303 	and.w	r3, r3, #3
 800596a:	3301      	adds	r3, #1
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	fbb2 f3f3 	udiv	r3, r2, r3
 8005978:	613b      	str	r3, [r7, #16]
 800597a:	e001      	b.n	8005980 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005980:	693b      	ldr	r3, [r7, #16]
}
 8005982:	4618      	mov	r0, r3
 8005984:	371c      	adds	r7, #28
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	40021000 	.word	0x40021000
 8005994:	00f42400 	.word	0x00f42400
 8005998:	016e3600 	.word	0x016e3600

0800599c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059a0:	4b03      	ldr	r3, [pc, #12]	@ (80059b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80059a2:	681b      	ldr	r3, [r3, #0]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	20000000 	.word	0x20000000

080059b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80059b8:	f7ff fff0 	bl	800599c <HAL_RCC_GetHCLKFreq>
 80059bc:	4602      	mov	r2, r0
 80059be:	4b06      	ldr	r3, [pc, #24]	@ (80059d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	0a1b      	lsrs	r3, r3, #8
 80059c4:	f003 0307 	and.w	r3, r3, #7
 80059c8:	4904      	ldr	r1, [pc, #16]	@ (80059dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80059ca:	5ccb      	ldrb	r3, [r1, r3]
 80059cc:	f003 031f 	and.w	r3, r3, #31
 80059d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	40021000 	.word	0x40021000
 80059dc:	0800bbc0 	.word	0x0800bbc0

080059e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059e4:	f7ff ffda 	bl	800599c <HAL_RCC_GetHCLKFreq>
 80059e8:	4602      	mov	r2, r0
 80059ea:	4b06      	ldr	r3, [pc, #24]	@ (8005a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	0adb      	lsrs	r3, r3, #11
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	4904      	ldr	r1, [pc, #16]	@ (8005a08 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059f6:	5ccb      	ldrb	r3, [r1, r3]
 80059f8:	f003 031f 	and.w	r3, r3, #31
 80059fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	40021000 	.word	0x40021000
 8005a08:	0800bbc0 	.word	0x0800bbc0

08005a0c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	220f      	movs	r2, #15
 8005a1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005a1c:	4b12      	ldr	r3, [pc, #72]	@ (8005a68 <HAL_RCC_GetClockConfig+0x5c>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f003 0203 	and.w	r2, r3, #3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005a28:	4b0f      	ldr	r3, [pc, #60]	@ (8005a68 <HAL_RCC_GetClockConfig+0x5c>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005a34:	4b0c      	ldr	r3, [pc, #48]	@ (8005a68 <HAL_RCC_GetClockConfig+0x5c>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005a40:	4b09      	ldr	r3, [pc, #36]	@ (8005a68 <HAL_RCC_GetClockConfig+0x5c>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	08db      	lsrs	r3, r3, #3
 8005a46:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005a4e:	4b07      	ldr	r3, [pc, #28]	@ (8005a6c <HAL_RCC_GetClockConfig+0x60>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 020f 	and.w	r2, r3, #15
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	601a      	str	r2, [r3, #0]
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	40021000 	.word	0x40021000
 8005a6c:	40022000 	.word	0x40022000

08005a70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a76:	4b1e      	ldr	r3, [pc, #120]	@ (8005af0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a80:	4b1b      	ldr	r3, [pc, #108]	@ (8005af0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	091b      	lsrs	r3, r3, #4
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	2b03      	cmp	r3, #3
 8005a92:	d10c      	bne.n	8005aae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a94:	4a17      	ldr	r2, [pc, #92]	@ (8005af4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9c:	4a14      	ldr	r2, [pc, #80]	@ (8005af0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a9e:	68d2      	ldr	r2, [r2, #12]
 8005aa0:	0a12      	lsrs	r2, r2, #8
 8005aa2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005aa6:	fb02 f303 	mul.w	r3, r2, r3
 8005aaa:	617b      	str	r3, [r7, #20]
    break;
 8005aac:	e00c      	b.n	8005ac8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005aae:	4a12      	ldr	r2, [pc, #72]	@ (8005af8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8005af0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ab8:	68d2      	ldr	r2, [r2, #12]
 8005aba:	0a12      	lsrs	r2, r2, #8
 8005abc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ac0:	fb02 f303 	mul.w	r3, r2, r3
 8005ac4:	617b      	str	r3, [r7, #20]
    break;
 8005ac6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ac8:	4b09      	ldr	r3, [pc, #36]	@ (8005af0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	0e5b      	lsrs	r3, r3, #25
 8005ace:	f003 0303 	and.w	r3, r3, #3
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005ae2:	687b      	ldr	r3, [r7, #4]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	371c      	adds	r7, #28
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	40021000 	.word	0x40021000
 8005af4:	016e3600 	.word	0x016e3600
 8005af8:	00f42400 	.word	0x00f42400

08005afc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b04:	2300      	movs	r3, #0
 8005b06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b08:	2300      	movs	r3, #0
 8005b0a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 8098 	beq.w	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b1e:	4b43      	ldr	r3, [pc, #268]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10d      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b2a:	4b40      	ldr	r3, [pc, #256]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b2e:	4a3f      	ldr	r2, [pc, #252]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b34:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b36:	4b3d      	ldr	r3, [pc, #244]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b3e:	60bb      	str	r3, [r7, #8]
 8005b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b42:	2301      	movs	r3, #1
 8005b44:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b46:	4b3a      	ldr	r3, [pc, #232]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a39      	ldr	r2, [pc, #228]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b52:	f7fc fb57 	bl	8002204 <HAL_GetTick>
 8005b56:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b58:	e009      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b5a:	f7fc fb53 	bl	8002204 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d902      	bls.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	74fb      	strb	r3, [r7, #19]
        break;
 8005b6c:	e005      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b6e:	4b30      	ldr	r3, [pc, #192]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0ef      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005b7a:	7cfb      	ldrb	r3, [r7, #19]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d159      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b80:	4b2a      	ldr	r3, [pc, #168]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b8a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d01e      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d019      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b9c:	4b23      	ldr	r3, [pc, #140]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ba6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ba8:	4b20      	ldr	r3, [pc, #128]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bae:	4a1f      	ldr	r2, [pc, #124]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bbe:	4a1b      	ldr	r2, [pc, #108]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005bc8:	4a18      	ldr	r2, [pc, #96]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d016      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bda:	f7fc fb13 	bl	8002204 <HAL_GetTick>
 8005bde:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005be0:	e00b      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005be2:	f7fc fb0f 	bl	8002204 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d902      	bls.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	74fb      	strb	r3, [r7, #19]
            break;
 8005bf8:	e006      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0ec      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005c08:	7cfb      	ldrb	r3, [r7, #19]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10b      	bne.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c0e:	4b07      	ldr	r3, [pc, #28]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c1c:	4903      	ldr	r1, [pc, #12]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005c24:	e008      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c26:	7cfb      	ldrb	r3, [r7, #19]
 8005c28:	74bb      	strb	r3, [r7, #18]
 8005c2a:	e005      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005c2c:	40021000 	.word	0x40021000
 8005c30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c34:	7cfb      	ldrb	r3, [r7, #19]
 8005c36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c38:	7c7b      	ldrb	r3, [r7, #17]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d105      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c3e:	4ba7      	ldr	r3, [pc, #668]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c42:	4aa6      	ldr	r2, [pc, #664]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c48:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00a      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c56:	4ba1      	ldr	r3, [pc, #644]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c5c:	f023 0203 	bic.w	r2, r3, #3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	499d      	ldr	r1, [pc, #628]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00a      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c78:	4b98      	ldr	r3, [pc, #608]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c7e:	f023 020c 	bic.w	r2, r3, #12
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	4995      	ldr	r1, [pc, #596]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0304 	and.w	r3, r3, #4
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00a      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c9a:	4b90      	ldr	r3, [pc, #576]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ca0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	498c      	ldr	r1, [pc, #560]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0308 	and.w	r3, r3, #8
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00a      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005cbc:	4b87      	ldr	r3, [pc, #540]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cc2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	4984      	ldr	r1, [pc, #528]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0310 	and.w	r3, r3, #16
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00a      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005cde:	4b7f      	ldr	r3, [pc, #508]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	497b      	ldr	r1, [pc, #492]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00a      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d00:	4b76      	ldr	r3, [pc, #472]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d06:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	4973      	ldr	r1, [pc, #460]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00a      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d22:	4b6e      	ldr	r3, [pc, #440]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d28:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	69db      	ldr	r3, [r3, #28]
 8005d30:	496a      	ldr	r1, [pc, #424]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00a      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d44:	4b65      	ldr	r3, [pc, #404]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d4a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	4962      	ldr	r1, [pc, #392]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00a      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d66:	4b5d      	ldr	r3, [pc, #372]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d6c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d74:	4959      	ldr	r1, [pc, #356]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00a      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d88:	4b54      	ldr	r3, [pc, #336]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d8e:	f023 0203 	bic.w	r2, r3, #3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d96:	4951      	ldr	r1, [pc, #324]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005daa:	4b4c      	ldr	r3, [pc, #304]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db8:	4948      	ldr	r1, [pc, #288]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d015      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005dcc:	4b43      	ldr	r3, [pc, #268]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dda:	4940      	ldr	r1, [pc, #256]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dea:	d105      	bne.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dec:	4b3b      	ldr	r3, [pc, #236]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	4a3a      	ldr	r2, [pc, #232]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005df6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d015      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e04:	4b35      	ldr	r3, [pc, #212]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e12:	4932      	ldr	r1, [pc, #200]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e22:	d105      	bne.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e24:	4b2d      	ldr	r3, [pc, #180]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	4a2c      	ldr	r2, [pc, #176]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e2e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d015      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e3c:	4b27      	ldr	r3, [pc, #156]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e42:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e4a:	4924      	ldr	r1, [pc, #144]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e5a:	d105      	bne.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	4a1e      	ldr	r2, [pc, #120]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e66:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d015      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e74:	4b19      	ldr	r3, [pc, #100]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e82:	4916      	ldr	r1, [pc, #88]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e84:	4313      	orrs	r3, r2
 8005e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e92:	d105      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e94:	4b11      	ldr	r3, [pc, #68]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	4a10      	ldr	r2, [pc, #64]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e9e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d019      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005eac:	4b0b      	ldr	r3, [pc, #44]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eba:	4908      	ldr	r1, [pc, #32]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005eca:	d109      	bne.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ecc:	4b03      	ldr	r3, [pc, #12]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	4a02      	ldr	r2, [pc, #8]	@ (8005edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ed6:	60d3      	str	r3, [r2, #12]
 8005ed8:	e002      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005eda:	bf00      	nop
 8005edc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d015      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005eec:	4b29      	ldr	r3, [pc, #164]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005efa:	4926      	ldr	r1, [pc, #152]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f0a:	d105      	bne.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f0c:	4b21      	ldr	r3, [pc, #132]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	4a20      	ldr	r2, [pc, #128]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f16:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d015      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005f24:	4b1b      	ldr	r3, [pc, #108]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f2a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f32:	4918      	ldr	r1, [pc, #96]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f42:	d105      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f44:	4b13      	ldr	r3, [pc, #76]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	4a12      	ldr	r2, [pc, #72]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f4e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d015      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f6a:	490a      	ldr	r1, [pc, #40]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f7a:	d105      	bne.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f7c:	4b05      	ldr	r3, [pc, #20]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	4a04      	ldr	r2, [pc, #16]	@ (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f86:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005f88:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3718      	adds	r7, #24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	40021000 	.word	0x40021000

08005f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e054      	b.n	8006054 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d111      	bne.n	8005fda <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f001 fdec 	bl	8007b9c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d102      	bne.n	8005fd2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a23      	ldr	r2, [pc, #140]	@ (800605c <HAL_TIM_Base_Init+0xc4>)
 8005fd0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2202      	movs	r2, #2
 8005fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3304      	adds	r3, #4
 8005fea:	4619      	mov	r1, r3
 8005fec:	4610      	mov	r0, r2
 8005fee:	f001 f8c1 	bl	8007174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	080013ed 	.word	0x080013ed

08006060 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b01      	cmp	r3, #1
 8006072:	d001      	beq.n	8006078 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e04c      	b.n	8006112 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a26      	ldr	r2, [pc, #152]	@ (8006120 <HAL_TIM_Base_Start+0xc0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d022      	beq.n	80060d0 <HAL_TIM_Base_Start+0x70>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006092:	d01d      	beq.n	80060d0 <HAL_TIM_Base_Start+0x70>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a22      	ldr	r2, [pc, #136]	@ (8006124 <HAL_TIM_Base_Start+0xc4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d018      	beq.n	80060d0 <HAL_TIM_Base_Start+0x70>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a21      	ldr	r2, [pc, #132]	@ (8006128 <HAL_TIM_Base_Start+0xc8>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d013      	beq.n	80060d0 <HAL_TIM_Base_Start+0x70>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a1f      	ldr	r2, [pc, #124]	@ (800612c <HAL_TIM_Base_Start+0xcc>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d00e      	beq.n	80060d0 <HAL_TIM_Base_Start+0x70>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a1e      	ldr	r2, [pc, #120]	@ (8006130 <HAL_TIM_Base_Start+0xd0>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d009      	beq.n	80060d0 <HAL_TIM_Base_Start+0x70>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a1c      	ldr	r2, [pc, #112]	@ (8006134 <HAL_TIM_Base_Start+0xd4>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d004      	beq.n	80060d0 <HAL_TIM_Base_Start+0x70>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006138 <HAL_TIM_Base_Start+0xd8>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d115      	bne.n	80060fc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	4b19      	ldr	r3, [pc, #100]	@ (800613c <HAL_TIM_Base_Start+0xdc>)
 80060d8:	4013      	ands	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2b06      	cmp	r3, #6
 80060e0:	d015      	beq.n	800610e <HAL_TIM_Base_Start+0xae>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060e8:	d011      	beq.n	800610e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f042 0201 	orr.w	r2, r2, #1
 80060f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060fa:	e008      	b.n	800610e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0201 	orr.w	r2, r2, #1
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	e000      	b.n	8006110 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800610e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	40012c00 	.word	0x40012c00
 8006124:	40000400 	.word	0x40000400
 8006128:	40000800 	.word	0x40000800
 800612c:	40000c00 	.word	0x40000c00
 8006130:	40013400 	.word	0x40013400
 8006134:	40014000 	.word	0x40014000
 8006138:	40015000 	.word	0x40015000
 800613c:	00010007 	.word	0x00010007

08006140 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6a1a      	ldr	r2, [r3, #32]
 800614e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006152:	4013      	ands	r3, r2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10f      	bne.n	8006178 <HAL_TIM_Base_Stop+0x38>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6a1a      	ldr	r2, [r3, #32]
 800615e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006162:	4013      	ands	r3, r2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d107      	bne.n	8006178 <HAL_TIM_Base_Stop+0x38>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0201 	bic.w	r2, r2, #1
 8006176:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
	...

08006190 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d001      	beq.n	80061a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e054      	b.n	8006252 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2202      	movs	r2, #2
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68da      	ldr	r2, [r3, #12]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0201 	orr.w	r2, r2, #1
 80061be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a26      	ldr	r2, [pc, #152]	@ (8006260 <HAL_TIM_Base_Start_IT+0xd0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d022      	beq.n	8006210 <HAL_TIM_Base_Start_IT+0x80>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061d2:	d01d      	beq.n	8006210 <HAL_TIM_Base_Start_IT+0x80>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a22      	ldr	r2, [pc, #136]	@ (8006264 <HAL_TIM_Base_Start_IT+0xd4>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d018      	beq.n	8006210 <HAL_TIM_Base_Start_IT+0x80>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a21      	ldr	r2, [pc, #132]	@ (8006268 <HAL_TIM_Base_Start_IT+0xd8>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d013      	beq.n	8006210 <HAL_TIM_Base_Start_IT+0x80>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a1f      	ldr	r2, [pc, #124]	@ (800626c <HAL_TIM_Base_Start_IT+0xdc>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d00e      	beq.n	8006210 <HAL_TIM_Base_Start_IT+0x80>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a1e      	ldr	r2, [pc, #120]	@ (8006270 <HAL_TIM_Base_Start_IT+0xe0>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d009      	beq.n	8006210 <HAL_TIM_Base_Start_IT+0x80>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a1c      	ldr	r2, [pc, #112]	@ (8006274 <HAL_TIM_Base_Start_IT+0xe4>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d004      	beq.n	8006210 <HAL_TIM_Base_Start_IT+0x80>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a1b      	ldr	r2, [pc, #108]	@ (8006278 <HAL_TIM_Base_Start_IT+0xe8>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d115      	bne.n	800623c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689a      	ldr	r2, [r3, #8]
 8006216:	4b19      	ldr	r3, [pc, #100]	@ (800627c <HAL_TIM_Base_Start_IT+0xec>)
 8006218:	4013      	ands	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b06      	cmp	r3, #6
 8006220:	d015      	beq.n	800624e <HAL_TIM_Base_Start_IT+0xbe>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006228:	d011      	beq.n	800624e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f042 0201 	orr.w	r2, r2, #1
 8006238:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623a:	e008      	b.n	800624e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f042 0201 	orr.w	r2, r2, #1
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	e000      	b.n	8006250 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800624e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	40012c00 	.word	0x40012c00
 8006264:	40000400 	.word	0x40000400
 8006268:	40000800 	.word	0x40000800
 800626c:	40000c00 	.word	0x40000c00
 8006270:	40013400 	.word	0x40013400
 8006274:	40014000 	.word	0x40014000
 8006278:	40015000 	.word	0x40015000
 800627c:	00010007 	.word	0x00010007

08006280 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e054      	b.n	800633c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d111      	bne.n	80062c2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f001 fc78 	bl	8007b9c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d102      	bne.n	80062ba <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a23      	ldr	r2, [pc, #140]	@ (8006344 <HAL_TIM_PWM_Init+0xc4>)
 80062b8:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2202      	movs	r2, #2
 80062c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	3304      	adds	r3, #4
 80062d2:	4619      	mov	r1, r3
 80062d4:	4610      	mov	r0, r2
 80062d6:	f000 ff4d 	bl	8007174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	08006349 	.word	0x08006349

08006348 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d109      	bne.n	8006380 <HAL_TIM_PWM_Start+0x24>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b01      	cmp	r3, #1
 8006376:	bf14      	ite	ne
 8006378:	2301      	movne	r3, #1
 800637a:	2300      	moveq	r3, #0
 800637c:	b2db      	uxtb	r3, r3
 800637e:	e03c      	b.n	80063fa <HAL_TIM_PWM_Start+0x9e>
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	2b04      	cmp	r3, #4
 8006384:	d109      	bne.n	800639a <HAL_TIM_PWM_Start+0x3e>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b01      	cmp	r3, #1
 8006390:	bf14      	ite	ne
 8006392:	2301      	movne	r3, #1
 8006394:	2300      	moveq	r3, #0
 8006396:	b2db      	uxtb	r3, r3
 8006398:	e02f      	b.n	80063fa <HAL_TIM_PWM_Start+0x9e>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2b08      	cmp	r3, #8
 800639e:	d109      	bne.n	80063b4 <HAL_TIM_PWM_Start+0x58>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	bf14      	ite	ne
 80063ac:	2301      	movne	r3, #1
 80063ae:	2300      	moveq	r3, #0
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	e022      	b.n	80063fa <HAL_TIM_PWM_Start+0x9e>
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	2b0c      	cmp	r3, #12
 80063b8:	d109      	bne.n	80063ce <HAL_TIM_PWM_Start+0x72>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	bf14      	ite	ne
 80063c6:	2301      	movne	r3, #1
 80063c8:	2300      	moveq	r3, #0
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	e015      	b.n	80063fa <HAL_TIM_PWM_Start+0x9e>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b10      	cmp	r3, #16
 80063d2:	d109      	bne.n	80063e8 <HAL_TIM_PWM_Start+0x8c>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b01      	cmp	r3, #1
 80063de:	bf14      	ite	ne
 80063e0:	2301      	movne	r3, #1
 80063e2:	2300      	moveq	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	e008      	b.n	80063fa <HAL_TIM_PWM_Start+0x9e>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	bf14      	ite	ne
 80063f4:	2301      	movne	r3, #1
 80063f6:	2300      	moveq	r3, #0
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e0a6      	b.n	8006550 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d104      	bne.n	8006412 <HAL_TIM_PWM_Start+0xb6>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006410:	e023      	b.n	800645a <HAL_TIM_PWM_Start+0xfe>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b04      	cmp	r3, #4
 8006416:	d104      	bne.n	8006422 <HAL_TIM_PWM_Start+0xc6>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006420:	e01b      	b.n	800645a <HAL_TIM_PWM_Start+0xfe>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b08      	cmp	r3, #8
 8006426:	d104      	bne.n	8006432 <HAL_TIM_PWM_Start+0xd6>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006430:	e013      	b.n	800645a <HAL_TIM_PWM_Start+0xfe>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b0c      	cmp	r3, #12
 8006436:	d104      	bne.n	8006442 <HAL_TIM_PWM_Start+0xe6>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006440:	e00b      	b.n	800645a <HAL_TIM_PWM_Start+0xfe>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b10      	cmp	r3, #16
 8006446:	d104      	bne.n	8006452 <HAL_TIM_PWM_Start+0xf6>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006450:	e003      	b.n	800645a <HAL_TIM_PWM_Start+0xfe>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2202      	movs	r2, #2
 8006456:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2201      	movs	r2, #1
 8006460:	6839      	ldr	r1, [r7, #0]
 8006462:	4618      	mov	r0, r3
 8006464:	f001 fb74 	bl	8007b50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a3a      	ldr	r2, [pc, #232]	@ (8006558 <HAL_TIM_PWM_Start+0x1fc>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d018      	beq.n	80064a4 <HAL_TIM_PWM_Start+0x148>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a39      	ldr	r2, [pc, #228]	@ (800655c <HAL_TIM_PWM_Start+0x200>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d013      	beq.n	80064a4 <HAL_TIM_PWM_Start+0x148>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a37      	ldr	r2, [pc, #220]	@ (8006560 <HAL_TIM_PWM_Start+0x204>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d00e      	beq.n	80064a4 <HAL_TIM_PWM_Start+0x148>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a36      	ldr	r2, [pc, #216]	@ (8006564 <HAL_TIM_PWM_Start+0x208>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d009      	beq.n	80064a4 <HAL_TIM_PWM_Start+0x148>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a34      	ldr	r2, [pc, #208]	@ (8006568 <HAL_TIM_PWM_Start+0x20c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d004      	beq.n	80064a4 <HAL_TIM_PWM_Start+0x148>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a33      	ldr	r2, [pc, #204]	@ (800656c <HAL_TIM_PWM_Start+0x210>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d101      	bne.n	80064a8 <HAL_TIM_PWM_Start+0x14c>
 80064a4:	2301      	movs	r3, #1
 80064a6:	e000      	b.n	80064aa <HAL_TIM_PWM_Start+0x14e>
 80064a8:	2300      	movs	r3, #0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d007      	beq.n	80064be <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a25      	ldr	r2, [pc, #148]	@ (8006558 <HAL_TIM_PWM_Start+0x1fc>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d022      	beq.n	800650e <HAL_TIM_PWM_Start+0x1b2>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064d0:	d01d      	beq.n	800650e <HAL_TIM_PWM_Start+0x1b2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a26      	ldr	r2, [pc, #152]	@ (8006570 <HAL_TIM_PWM_Start+0x214>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d018      	beq.n	800650e <HAL_TIM_PWM_Start+0x1b2>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a24      	ldr	r2, [pc, #144]	@ (8006574 <HAL_TIM_PWM_Start+0x218>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d013      	beq.n	800650e <HAL_TIM_PWM_Start+0x1b2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a23      	ldr	r2, [pc, #140]	@ (8006578 <HAL_TIM_PWM_Start+0x21c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00e      	beq.n	800650e <HAL_TIM_PWM_Start+0x1b2>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a19      	ldr	r2, [pc, #100]	@ (800655c <HAL_TIM_PWM_Start+0x200>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d009      	beq.n	800650e <HAL_TIM_PWM_Start+0x1b2>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a18      	ldr	r2, [pc, #96]	@ (8006560 <HAL_TIM_PWM_Start+0x204>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d004      	beq.n	800650e <HAL_TIM_PWM_Start+0x1b2>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a18      	ldr	r2, [pc, #96]	@ (800656c <HAL_TIM_PWM_Start+0x210>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d115      	bne.n	800653a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	4b19      	ldr	r3, [pc, #100]	@ (800657c <HAL_TIM_PWM_Start+0x220>)
 8006516:	4013      	ands	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2b06      	cmp	r3, #6
 800651e:	d015      	beq.n	800654c <HAL_TIM_PWM_Start+0x1f0>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006526:	d011      	beq.n	800654c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f042 0201 	orr.w	r2, r2, #1
 8006536:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006538:	e008      	b.n	800654c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f042 0201 	orr.w	r2, r2, #1
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	e000      	b.n	800654e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800654c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	40012c00 	.word	0x40012c00
 800655c:	40013400 	.word	0x40013400
 8006560:	40014000 	.word	0x40014000
 8006564:	40014400 	.word	0x40014400
 8006568:	40014800 	.word	0x40014800
 800656c:	40015000 	.word	0x40015000
 8006570:	40000400 	.word	0x40000400
 8006574:	40000800 	.word	0x40000800
 8006578:	40000c00 	.word	0x40000c00
 800657c:	00010007 	.word	0x00010007

08006580 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2200      	movs	r2, #0
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	4618      	mov	r0, r3
 8006594:	f001 fadc 	bl	8007b50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a40      	ldr	r2, [pc, #256]	@ (80066a0 <HAL_TIM_PWM_Stop+0x120>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d018      	beq.n	80065d4 <HAL_TIM_PWM_Stop+0x54>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a3f      	ldr	r2, [pc, #252]	@ (80066a4 <HAL_TIM_PWM_Stop+0x124>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d013      	beq.n	80065d4 <HAL_TIM_PWM_Stop+0x54>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a3d      	ldr	r2, [pc, #244]	@ (80066a8 <HAL_TIM_PWM_Stop+0x128>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d00e      	beq.n	80065d4 <HAL_TIM_PWM_Stop+0x54>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a3c      	ldr	r2, [pc, #240]	@ (80066ac <HAL_TIM_PWM_Stop+0x12c>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d009      	beq.n	80065d4 <HAL_TIM_PWM_Stop+0x54>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a3a      	ldr	r2, [pc, #232]	@ (80066b0 <HAL_TIM_PWM_Stop+0x130>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d004      	beq.n	80065d4 <HAL_TIM_PWM_Stop+0x54>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a39      	ldr	r2, [pc, #228]	@ (80066b4 <HAL_TIM_PWM_Stop+0x134>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d101      	bne.n	80065d8 <HAL_TIM_PWM_Stop+0x58>
 80065d4:	2301      	movs	r3, #1
 80065d6:	e000      	b.n	80065da <HAL_TIM_PWM_Stop+0x5a>
 80065d8:	2300      	movs	r3, #0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d017      	beq.n	800660e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6a1a      	ldr	r2, [r3, #32]
 80065e4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80065e8:	4013      	ands	r3, r2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10f      	bne.n	800660e <HAL_TIM_PWM_Stop+0x8e>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6a1a      	ldr	r2, [r3, #32]
 80065f4:	f244 4344 	movw	r3, #17476	@ 0x4444
 80065f8:	4013      	ands	r3, r2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d107      	bne.n	800660e <HAL_TIM_PWM_Stop+0x8e>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800660c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6a1a      	ldr	r2, [r3, #32]
 8006614:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006618:	4013      	ands	r3, r2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10f      	bne.n	800663e <HAL_TIM_PWM_Stop+0xbe>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6a1a      	ldr	r2, [r3, #32]
 8006624:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006628:	4013      	ands	r3, r2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d107      	bne.n	800663e <HAL_TIM_PWM_Stop+0xbe>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 0201 	bic.w	r2, r2, #1
 800663c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d104      	bne.n	800664e <HAL_TIM_PWM_Stop+0xce>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800664c:	e023      	b.n	8006696 <HAL_TIM_PWM_Stop+0x116>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b04      	cmp	r3, #4
 8006652:	d104      	bne.n	800665e <HAL_TIM_PWM_Stop+0xde>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800665c:	e01b      	b.n	8006696 <HAL_TIM_PWM_Stop+0x116>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b08      	cmp	r3, #8
 8006662:	d104      	bne.n	800666e <HAL_TIM_PWM_Stop+0xee>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800666c:	e013      	b.n	8006696 <HAL_TIM_PWM_Stop+0x116>
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b0c      	cmp	r3, #12
 8006672:	d104      	bne.n	800667e <HAL_TIM_PWM_Stop+0xfe>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800667c:	e00b      	b.n	8006696 <HAL_TIM_PWM_Stop+0x116>
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b10      	cmp	r3, #16
 8006682:	d104      	bne.n	800668e <HAL_TIM_PWM_Stop+0x10e>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800668c:	e003      	b.n	8006696 <HAL_TIM_PWM_Stop+0x116>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	40012c00 	.word	0x40012c00
 80066a4:	40013400 	.word	0x40013400
 80066a8:	40014000 	.word	0x40014000
 80066ac:	40014400 	.word	0x40014400
 80066b0:	40014800 	.word	0x40014800
 80066b4:	40015000 	.word	0x40015000

080066b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d026      	beq.n	8006728 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f003 0302 	and.w	r3, r3, #2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d021      	beq.n	8006728 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f06f 0202 	mvn.w	r2, #2
 80066ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	f003 0303 	and.w	r3, r3, #3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d005      	beq.n	800670e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	4798      	blx	r3
 800670c:	e009      	b.n	8006722 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f003 0304 	and.w	r3, r3, #4
 800672e:	2b00      	cmp	r3, #0
 8006730:	d026      	beq.n	8006780 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f003 0304 	and.w	r3, r3, #4
 8006738:	2b00      	cmp	r3, #0
 800673a:	d021      	beq.n	8006780 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f06f 0204 	mvn.w	r2, #4
 8006744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2202      	movs	r2, #2
 800674a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006756:	2b00      	cmp	r3, #0
 8006758:	d005      	beq.n	8006766 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	4798      	blx	r3
 8006764:	e009      	b.n	800677a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	f003 0308 	and.w	r3, r3, #8
 8006786:	2b00      	cmp	r3, #0
 8006788:	d026      	beq.n	80067d8 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f003 0308 	and.w	r3, r3, #8
 8006790:	2b00      	cmp	r3, #0
 8006792:	d021      	beq.n	80067d8 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f06f 0208 	mvn.w	r2, #8
 800679c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2204      	movs	r2, #4
 80067a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	f003 0303 	and.w	r3, r3, #3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d005      	beq.n	80067be <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	4798      	blx	r3
 80067bc:	e009      	b.n	80067d2 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	f003 0310 	and.w	r3, r3, #16
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d026      	beq.n	8006830 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f003 0310 	and.w	r3, r3, #16
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d021      	beq.n	8006830 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f06f 0210 	mvn.w	r2, #16
 80067f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2208      	movs	r2, #8
 80067fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	69db      	ldr	r3, [r3, #28]
 8006802:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006806:	2b00      	cmp	r3, #0
 8006808:	d005      	beq.n	8006816 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	4798      	blx	r3
 8006814:	e009      	b.n	800682a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00e      	beq.n	8006858 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b00      	cmp	r3, #0
 8006842:	d009      	beq.n	8006858 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f06f 0201 	mvn.w	r2, #1
 800684c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800685e:	2b00      	cmp	r3, #0
 8006860:	d104      	bne.n	800686c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00e      	beq.n	800688a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006872:	2b00      	cmp	r3, #0
 8006874:	d009      	beq.n	800688a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800687e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00e      	beq.n	80068b2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800689a:	2b00      	cmp	r3, #0
 800689c:	d009      	beq.n	80068b2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80068a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00e      	beq.n	80068da <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d009      	beq.n	80068da <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80068ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	f003 0320 	and.w	r3, r3, #32
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00e      	beq.n	8006902 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f003 0320 	and.w	r3, r3, #32
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d009      	beq.n	8006902 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f06f 0220 	mvn.w	r2, #32
 80068f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00e      	beq.n	800692a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d009      	beq.n	800692a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800691e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00e      	beq.n	8006952 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d009      	beq.n	8006952 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00e      	beq.n	800697a <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d009      	beq.n	800697a <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800696e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00e      	beq.n	80069a2 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d009      	beq.n	80069a2 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069a2:	bf00      	nop
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
	...

080069ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069b8:	2300      	movs	r3, #0
 80069ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d101      	bne.n	80069ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069c6:	2302      	movs	r3, #2
 80069c8:	e0ff      	b.n	8006bca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2b14      	cmp	r3, #20
 80069d6:	f200 80f0 	bhi.w	8006bba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80069da:	a201      	add	r2, pc, #4	@ (adr r2, 80069e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e0:	08006a35 	.word	0x08006a35
 80069e4:	08006bbb 	.word	0x08006bbb
 80069e8:	08006bbb 	.word	0x08006bbb
 80069ec:	08006bbb 	.word	0x08006bbb
 80069f0:	08006a75 	.word	0x08006a75
 80069f4:	08006bbb 	.word	0x08006bbb
 80069f8:	08006bbb 	.word	0x08006bbb
 80069fc:	08006bbb 	.word	0x08006bbb
 8006a00:	08006ab7 	.word	0x08006ab7
 8006a04:	08006bbb 	.word	0x08006bbb
 8006a08:	08006bbb 	.word	0x08006bbb
 8006a0c:	08006bbb 	.word	0x08006bbb
 8006a10:	08006af7 	.word	0x08006af7
 8006a14:	08006bbb 	.word	0x08006bbb
 8006a18:	08006bbb 	.word	0x08006bbb
 8006a1c:	08006bbb 	.word	0x08006bbb
 8006a20:	08006b39 	.word	0x08006b39
 8006a24:	08006bbb 	.word	0x08006bbb
 8006a28:	08006bbb 	.word	0x08006bbb
 8006a2c:	08006bbb 	.word	0x08006bbb
 8006a30:	08006b79 	.word	0x08006b79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68b9      	ldr	r1, [r7, #8]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 fc4e 	bl	80072dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	699a      	ldr	r2, [r3, #24]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f042 0208 	orr.w	r2, r2, #8
 8006a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	699a      	ldr	r2, [r3, #24]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0204 	bic.w	r2, r2, #4
 8006a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6999      	ldr	r1, [r3, #24]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	691a      	ldr	r2, [r3, #16]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	619a      	str	r2, [r3, #24]
      break;
 8006a72:	e0a5      	b.n	8006bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68b9      	ldr	r1, [r7, #8]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f000 fcc8 	bl	8007410 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	699a      	ldr	r2, [r3, #24]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699a      	ldr	r2, [r3, #24]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6999      	ldr	r1, [r3, #24]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	021a      	lsls	r2, r3, #8
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	619a      	str	r2, [r3, #24]
      break;
 8006ab4:	e084      	b.n	8006bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68b9      	ldr	r1, [r7, #8]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f000 fd3b 	bl	8007538 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	69da      	ldr	r2, [r3, #28]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f042 0208 	orr.w	r2, r2, #8
 8006ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	69da      	ldr	r2, [r3, #28]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f022 0204 	bic.w	r2, r2, #4
 8006ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	69d9      	ldr	r1, [r3, #28]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	691a      	ldr	r2, [r3, #16]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	430a      	orrs	r2, r1
 8006af2:	61da      	str	r2, [r3, #28]
      break;
 8006af4:	e064      	b.n	8006bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68b9      	ldr	r1, [r7, #8]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 fdad 	bl	800765c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	69da      	ldr	r2, [r3, #28]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	69da      	ldr	r2, [r3, #28]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69d9      	ldr	r1, [r3, #28]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	021a      	lsls	r2, r3, #8
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	61da      	str	r2, [r3, #28]
      break;
 8006b36:	e043      	b.n	8006bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68b9      	ldr	r1, [r7, #8]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f000 fe20 	bl	8007784 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f042 0208 	orr.w	r2, r2, #8
 8006b52:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0204 	bic.w	r2, r2, #4
 8006b62:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	691a      	ldr	r2, [r3, #16]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	430a      	orrs	r2, r1
 8006b74:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006b76:	e023      	b.n	8006bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68b9      	ldr	r1, [r7, #8]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 fe6a 	bl	8007858 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b92:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ba2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	021a      	lsls	r2, r3, #8
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006bb8:	e002      	b.n	8006bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	75fb      	strb	r3, [r7, #23]
      break;
 8006bbe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3718      	adds	r7, #24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop

08006bd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d101      	bne.n	8006bf0 <HAL_TIM_ConfigClockSource+0x1c>
 8006bec:	2302      	movs	r3, #2
 8006bee:	e0f6      	b.n	8006dde <HAL_TIM_ConfigClockSource+0x20a>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006c0e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a6f      	ldr	r2, [pc, #444]	@ (8006de8 <HAL_TIM_ConfigClockSource+0x214>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	f000 80c1 	beq.w	8006db2 <HAL_TIM_ConfigClockSource+0x1de>
 8006c30:	4a6d      	ldr	r2, [pc, #436]	@ (8006de8 <HAL_TIM_ConfigClockSource+0x214>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	f200 80c6 	bhi.w	8006dc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c38:	4a6c      	ldr	r2, [pc, #432]	@ (8006dec <HAL_TIM_ConfigClockSource+0x218>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	f000 80b9 	beq.w	8006db2 <HAL_TIM_ConfigClockSource+0x1de>
 8006c40:	4a6a      	ldr	r2, [pc, #424]	@ (8006dec <HAL_TIM_ConfigClockSource+0x218>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	f200 80be 	bhi.w	8006dc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c48:	4a69      	ldr	r2, [pc, #420]	@ (8006df0 <HAL_TIM_ConfigClockSource+0x21c>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	f000 80b1 	beq.w	8006db2 <HAL_TIM_ConfigClockSource+0x1de>
 8006c50:	4a67      	ldr	r2, [pc, #412]	@ (8006df0 <HAL_TIM_ConfigClockSource+0x21c>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	f200 80b6 	bhi.w	8006dc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c58:	4a66      	ldr	r2, [pc, #408]	@ (8006df4 <HAL_TIM_ConfigClockSource+0x220>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	f000 80a9 	beq.w	8006db2 <HAL_TIM_ConfigClockSource+0x1de>
 8006c60:	4a64      	ldr	r2, [pc, #400]	@ (8006df4 <HAL_TIM_ConfigClockSource+0x220>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	f200 80ae 	bhi.w	8006dc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c68:	4a63      	ldr	r2, [pc, #396]	@ (8006df8 <HAL_TIM_ConfigClockSource+0x224>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	f000 80a1 	beq.w	8006db2 <HAL_TIM_ConfigClockSource+0x1de>
 8006c70:	4a61      	ldr	r2, [pc, #388]	@ (8006df8 <HAL_TIM_ConfigClockSource+0x224>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	f200 80a6 	bhi.w	8006dc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c78:	4a60      	ldr	r2, [pc, #384]	@ (8006dfc <HAL_TIM_ConfigClockSource+0x228>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	f000 8099 	beq.w	8006db2 <HAL_TIM_ConfigClockSource+0x1de>
 8006c80:	4a5e      	ldr	r2, [pc, #376]	@ (8006dfc <HAL_TIM_ConfigClockSource+0x228>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	f200 809e 	bhi.w	8006dc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c88:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006c8c:	f000 8091 	beq.w	8006db2 <HAL_TIM_ConfigClockSource+0x1de>
 8006c90:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006c94:	f200 8096 	bhi.w	8006dc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c9c:	f000 8089 	beq.w	8006db2 <HAL_TIM_ConfigClockSource+0x1de>
 8006ca0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ca4:	f200 808e 	bhi.w	8006dc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ca8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cac:	d03e      	beq.n	8006d2c <HAL_TIM_ConfigClockSource+0x158>
 8006cae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cb2:	f200 8087 	bhi.w	8006dc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cba:	f000 8086 	beq.w	8006dca <HAL_TIM_ConfigClockSource+0x1f6>
 8006cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cc2:	d87f      	bhi.n	8006dc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cc4:	2b70      	cmp	r3, #112	@ 0x70
 8006cc6:	d01a      	beq.n	8006cfe <HAL_TIM_ConfigClockSource+0x12a>
 8006cc8:	2b70      	cmp	r3, #112	@ 0x70
 8006cca:	d87b      	bhi.n	8006dc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ccc:	2b60      	cmp	r3, #96	@ 0x60
 8006cce:	d050      	beq.n	8006d72 <HAL_TIM_ConfigClockSource+0x19e>
 8006cd0:	2b60      	cmp	r3, #96	@ 0x60
 8006cd2:	d877      	bhi.n	8006dc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cd4:	2b50      	cmp	r3, #80	@ 0x50
 8006cd6:	d03c      	beq.n	8006d52 <HAL_TIM_ConfigClockSource+0x17e>
 8006cd8:	2b50      	cmp	r3, #80	@ 0x50
 8006cda:	d873      	bhi.n	8006dc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cdc:	2b40      	cmp	r3, #64	@ 0x40
 8006cde:	d058      	beq.n	8006d92 <HAL_TIM_ConfigClockSource+0x1be>
 8006ce0:	2b40      	cmp	r3, #64	@ 0x40
 8006ce2:	d86f      	bhi.n	8006dc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ce4:	2b30      	cmp	r3, #48	@ 0x30
 8006ce6:	d064      	beq.n	8006db2 <HAL_TIM_ConfigClockSource+0x1de>
 8006ce8:	2b30      	cmp	r3, #48	@ 0x30
 8006cea:	d86b      	bhi.n	8006dc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cec:	2b20      	cmp	r3, #32
 8006cee:	d060      	beq.n	8006db2 <HAL_TIM_ConfigClockSource+0x1de>
 8006cf0:	2b20      	cmp	r3, #32
 8006cf2:	d867      	bhi.n	8006dc4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d05c      	beq.n	8006db2 <HAL_TIM_ConfigClockSource+0x1de>
 8006cf8:	2b10      	cmp	r3, #16
 8006cfa:	d05a      	beq.n	8006db2 <HAL_TIM_ConfigClockSource+0x1de>
 8006cfc:	e062      	b.n	8006dc4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d0e:	f000 feff 	bl	8007b10 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006d20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	609a      	str	r2, [r3, #8]
      break;
 8006d2a:	e04f      	b.n	8006dcc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d3c:	f000 fee8 	bl	8007b10 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689a      	ldr	r2, [r3, #8]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d4e:	609a      	str	r2, [r3, #8]
      break;
 8006d50:	e03c      	b.n	8006dcc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f000 fe5a 	bl	8007a18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2150      	movs	r1, #80	@ 0x50
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f000 feb3 	bl	8007ad6 <TIM_ITRx_SetConfig>
      break;
 8006d70:	e02c      	b.n	8006dcc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d7e:	461a      	mov	r2, r3
 8006d80:	f000 fe79 	bl	8007a76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2160      	movs	r1, #96	@ 0x60
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 fea3 	bl	8007ad6 <TIM_ITRx_SetConfig>
      break;
 8006d90:	e01c      	b.n	8006dcc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f000 fe3a 	bl	8007a18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2140      	movs	r1, #64	@ 0x40
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 fe93 	bl	8007ad6 <TIM_ITRx_SetConfig>
      break;
 8006db0:	e00c      	b.n	8006dcc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4619      	mov	r1, r3
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	f000 fe8a 	bl	8007ad6 <TIM_ITRx_SetConfig>
      break;
 8006dc2:	e003      	b.n	8006dcc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8006dc8:	e000      	b.n	8006dcc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006dca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	00100070 	.word	0x00100070
 8006dec:	00100060 	.word	0x00100060
 8006df0:	00100050 	.word	0x00100050
 8006df4:	00100040 	.word	0x00100040
 8006df8:	00100030 	.word	0x00100030
 8006dfc:	00100020 	.word	0x00100020

08006e00 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	607a      	str	r2, [r7, #4]
 8006ec0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e14a      	b.n	8007166 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	f040 80dd 	bne.w	8007098 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8006ede:	7afb      	ldrb	r3, [r7, #11]
 8006ee0:	2b1f      	cmp	r3, #31
 8006ee2:	f200 80d6 	bhi.w	8007092 <HAL_TIM_RegisterCallback+0x1de>
 8006ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8006eec <HAL_TIM_RegisterCallback+0x38>)
 8006ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eec:	08006f6d 	.word	0x08006f6d
 8006ef0:	08006f75 	.word	0x08006f75
 8006ef4:	08006f7d 	.word	0x08006f7d
 8006ef8:	08006f85 	.word	0x08006f85
 8006efc:	08006f8d 	.word	0x08006f8d
 8006f00:	08006f95 	.word	0x08006f95
 8006f04:	08006f9d 	.word	0x08006f9d
 8006f08:	08006fa5 	.word	0x08006fa5
 8006f0c:	08006fad 	.word	0x08006fad
 8006f10:	08006fb5 	.word	0x08006fb5
 8006f14:	08006fbd 	.word	0x08006fbd
 8006f18:	08006fc5 	.word	0x08006fc5
 8006f1c:	08006fcd 	.word	0x08006fcd
 8006f20:	08006fd5 	.word	0x08006fd5
 8006f24:	08006fdf 	.word	0x08006fdf
 8006f28:	08006fe9 	.word	0x08006fe9
 8006f2c:	08006ff3 	.word	0x08006ff3
 8006f30:	08006ffd 	.word	0x08006ffd
 8006f34:	08007007 	.word	0x08007007
 8006f38:	08007011 	.word	0x08007011
 8006f3c:	0800701b 	.word	0x0800701b
 8006f40:	08007025 	.word	0x08007025
 8006f44:	0800702f 	.word	0x0800702f
 8006f48:	08007039 	.word	0x08007039
 8006f4c:	08007043 	.word	0x08007043
 8006f50:	0800704d 	.word	0x0800704d
 8006f54:	08007057 	.word	0x08007057
 8006f58:	08007061 	.word	0x08007061
 8006f5c:	0800706b 	.word	0x0800706b
 8006f60:	08007075 	.word	0x08007075
 8006f64:	0800707f 	.word	0x0800707f
 8006f68:	08007089 	.word	0x08007089
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8006f72:	e0f7      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8006f7a:	e0f3      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8006f82:	e0ef      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8006f8a:	e0eb      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8006f92:	e0e7      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8006f9a:	e0e3      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006fa2:	e0df      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8006faa:	e0db      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006fb2:	e0d7      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8006fba:	e0d3      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8006fc2:	e0cf      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8006fca:	e0cb      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8006fd2:	e0c7      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8006fdc:	e0c2      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8006fe6:	e0bd      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8006ff0:	e0b8      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8006ffa:	e0b3      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007004:	e0ae      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800700e:	e0a9      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007018:	e0a4      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007022:	e09f      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800702c:	e09a      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007036:	e095      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007040:	e090      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800704a:	e08b      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007054:	e086      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800705e:	e081      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8007068:	e07c      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007072:	e077      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800707c:	e072      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007086:	e06d      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007090:	e068      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	75fb      	strb	r3, [r7, #23]
        break;
 8007096:	e065      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d15d      	bne.n	8007160 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80070a4:	7afb      	ldrb	r3, [r7, #11]
 80070a6:	2b0d      	cmp	r3, #13
 80070a8:	d857      	bhi.n	800715a <HAL_TIM_RegisterCallback+0x2a6>
 80070aa:	a201      	add	r2, pc, #4	@ (adr r2, 80070b0 <HAL_TIM_RegisterCallback+0x1fc>)
 80070ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b0:	080070e9 	.word	0x080070e9
 80070b4:	080070f1 	.word	0x080070f1
 80070b8:	080070f9 	.word	0x080070f9
 80070bc:	08007101 	.word	0x08007101
 80070c0:	08007109 	.word	0x08007109
 80070c4:	08007111 	.word	0x08007111
 80070c8:	08007119 	.word	0x08007119
 80070cc:	08007121 	.word	0x08007121
 80070d0:	08007129 	.word	0x08007129
 80070d4:	08007131 	.word	0x08007131
 80070d8:	08007139 	.word	0x08007139
 80070dc:	08007141 	.word	0x08007141
 80070e0:	08007149 	.word	0x08007149
 80070e4:	08007151 	.word	0x08007151
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80070ee:	e039      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80070f6:	e035      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80070fe:	e031      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007106:	e02d      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800710e:	e029      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007116:	e025      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800711e:	e021      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007126:	e01d      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800712e:	e019      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007136:	e015      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800713e:	e011      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007146:	e00d      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800714e:	e009      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007158:	e004      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	75fb      	strb	r3, [r7, #23]
        break;
 800715e:	e001      	b.n	8007164 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007164:	7dfb      	ldrb	r3, [r7, #23]
}
 8007166:	4618      	mov	r0, r3
 8007168:	371c      	adds	r7, #28
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop

08007174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a4c      	ldr	r2, [pc, #304]	@ (80072b8 <TIM_Base_SetConfig+0x144>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d017      	beq.n	80071bc <TIM_Base_SetConfig+0x48>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007192:	d013      	beq.n	80071bc <TIM_Base_SetConfig+0x48>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a49      	ldr	r2, [pc, #292]	@ (80072bc <TIM_Base_SetConfig+0x148>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d00f      	beq.n	80071bc <TIM_Base_SetConfig+0x48>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a48      	ldr	r2, [pc, #288]	@ (80072c0 <TIM_Base_SetConfig+0x14c>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d00b      	beq.n	80071bc <TIM_Base_SetConfig+0x48>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a47      	ldr	r2, [pc, #284]	@ (80072c4 <TIM_Base_SetConfig+0x150>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d007      	beq.n	80071bc <TIM_Base_SetConfig+0x48>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a46      	ldr	r2, [pc, #280]	@ (80072c8 <TIM_Base_SetConfig+0x154>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d003      	beq.n	80071bc <TIM_Base_SetConfig+0x48>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a45      	ldr	r2, [pc, #276]	@ (80072cc <TIM_Base_SetConfig+0x158>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d108      	bne.n	80071ce <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a39      	ldr	r2, [pc, #228]	@ (80072b8 <TIM_Base_SetConfig+0x144>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d023      	beq.n	800721e <TIM_Base_SetConfig+0xaa>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071dc:	d01f      	beq.n	800721e <TIM_Base_SetConfig+0xaa>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a36      	ldr	r2, [pc, #216]	@ (80072bc <TIM_Base_SetConfig+0x148>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d01b      	beq.n	800721e <TIM_Base_SetConfig+0xaa>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a35      	ldr	r2, [pc, #212]	@ (80072c0 <TIM_Base_SetConfig+0x14c>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d017      	beq.n	800721e <TIM_Base_SetConfig+0xaa>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a34      	ldr	r2, [pc, #208]	@ (80072c4 <TIM_Base_SetConfig+0x150>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d013      	beq.n	800721e <TIM_Base_SetConfig+0xaa>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a33      	ldr	r2, [pc, #204]	@ (80072c8 <TIM_Base_SetConfig+0x154>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d00f      	beq.n	800721e <TIM_Base_SetConfig+0xaa>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a33      	ldr	r2, [pc, #204]	@ (80072d0 <TIM_Base_SetConfig+0x15c>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d00b      	beq.n	800721e <TIM_Base_SetConfig+0xaa>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a32      	ldr	r2, [pc, #200]	@ (80072d4 <TIM_Base_SetConfig+0x160>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d007      	beq.n	800721e <TIM_Base_SetConfig+0xaa>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a31      	ldr	r2, [pc, #196]	@ (80072d8 <TIM_Base_SetConfig+0x164>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d003      	beq.n	800721e <TIM_Base_SetConfig+0xaa>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a2c      	ldr	r2, [pc, #176]	@ (80072cc <TIM_Base_SetConfig+0x158>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d108      	bne.n	8007230 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	4313      	orrs	r3, r2
 800722e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	4313      	orrs	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a18      	ldr	r2, [pc, #96]	@ (80072b8 <TIM_Base_SetConfig+0x144>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d013      	beq.n	8007284 <TIM_Base_SetConfig+0x110>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a1a      	ldr	r2, [pc, #104]	@ (80072c8 <TIM_Base_SetConfig+0x154>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d00f      	beq.n	8007284 <TIM_Base_SetConfig+0x110>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a1a      	ldr	r2, [pc, #104]	@ (80072d0 <TIM_Base_SetConfig+0x15c>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d00b      	beq.n	8007284 <TIM_Base_SetConfig+0x110>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a19      	ldr	r2, [pc, #100]	@ (80072d4 <TIM_Base_SetConfig+0x160>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d007      	beq.n	8007284 <TIM_Base_SetConfig+0x110>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a18      	ldr	r2, [pc, #96]	@ (80072d8 <TIM_Base_SetConfig+0x164>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d003      	beq.n	8007284 <TIM_Base_SetConfig+0x110>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a13      	ldr	r2, [pc, #76]	@ (80072cc <TIM_Base_SetConfig+0x158>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d103      	bne.n	800728c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	691a      	ldr	r2, [r3, #16]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	2b01      	cmp	r3, #1
 800729c:	d105      	bne.n	80072aa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	f023 0201 	bic.w	r2, r3, #1
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	611a      	str	r2, [r3, #16]
  }
}
 80072aa:	bf00      	nop
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	40012c00 	.word	0x40012c00
 80072bc:	40000400 	.word	0x40000400
 80072c0:	40000800 	.word	0x40000800
 80072c4:	40000c00 	.word	0x40000c00
 80072c8:	40013400 	.word	0x40013400
 80072cc:	40015000 	.word	0x40015000
 80072d0:	40014000 	.word	0x40014000
 80072d4:	40014400 	.word	0x40014400
 80072d8:	40014800 	.word	0x40014800

080072dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072dc:	b480      	push	{r7}
 80072de:	b087      	sub	sp, #28
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	f023 0201 	bic.w	r2, r3, #1
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800730a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800730e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f023 0303 	bic.w	r3, r3, #3
 8007316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	4313      	orrs	r3, r2
 8007320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f023 0302 	bic.w	r3, r3, #2
 8007328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	4313      	orrs	r3, r2
 8007332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a30      	ldr	r2, [pc, #192]	@ (80073f8 <TIM_OC1_SetConfig+0x11c>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d013      	beq.n	8007364 <TIM_OC1_SetConfig+0x88>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a2f      	ldr	r2, [pc, #188]	@ (80073fc <TIM_OC1_SetConfig+0x120>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d00f      	beq.n	8007364 <TIM_OC1_SetConfig+0x88>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a2e      	ldr	r2, [pc, #184]	@ (8007400 <TIM_OC1_SetConfig+0x124>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d00b      	beq.n	8007364 <TIM_OC1_SetConfig+0x88>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a2d      	ldr	r2, [pc, #180]	@ (8007404 <TIM_OC1_SetConfig+0x128>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d007      	beq.n	8007364 <TIM_OC1_SetConfig+0x88>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a2c      	ldr	r2, [pc, #176]	@ (8007408 <TIM_OC1_SetConfig+0x12c>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d003      	beq.n	8007364 <TIM_OC1_SetConfig+0x88>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a2b      	ldr	r2, [pc, #172]	@ (800740c <TIM_OC1_SetConfig+0x130>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d10c      	bne.n	800737e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f023 0308 	bic.w	r3, r3, #8
 800736a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	697a      	ldr	r2, [r7, #20]
 8007372:	4313      	orrs	r3, r2
 8007374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f023 0304 	bic.w	r3, r3, #4
 800737c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a1d      	ldr	r2, [pc, #116]	@ (80073f8 <TIM_OC1_SetConfig+0x11c>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d013      	beq.n	80073ae <TIM_OC1_SetConfig+0xd2>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a1c      	ldr	r2, [pc, #112]	@ (80073fc <TIM_OC1_SetConfig+0x120>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d00f      	beq.n	80073ae <TIM_OC1_SetConfig+0xd2>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a1b      	ldr	r2, [pc, #108]	@ (8007400 <TIM_OC1_SetConfig+0x124>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d00b      	beq.n	80073ae <TIM_OC1_SetConfig+0xd2>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a1a      	ldr	r2, [pc, #104]	@ (8007404 <TIM_OC1_SetConfig+0x128>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d007      	beq.n	80073ae <TIM_OC1_SetConfig+0xd2>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a19      	ldr	r2, [pc, #100]	@ (8007408 <TIM_OC1_SetConfig+0x12c>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d003      	beq.n	80073ae <TIM_OC1_SetConfig+0xd2>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a18      	ldr	r2, [pc, #96]	@ (800740c <TIM_OC1_SetConfig+0x130>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d111      	bne.n	80073d2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80073bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	621a      	str	r2, [r3, #32]
}
 80073ec:	bf00      	nop
 80073ee:	371c      	adds	r7, #28
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	40012c00 	.word	0x40012c00
 80073fc:	40013400 	.word	0x40013400
 8007400:	40014000 	.word	0x40014000
 8007404:	40014400 	.word	0x40014400
 8007408:	40014800 	.word	0x40014800
 800740c:	40015000 	.word	0x40015000

08007410 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007410:	b480      	push	{r7}
 8007412:	b087      	sub	sp, #28
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	f023 0210 	bic.w	r2, r3, #16
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800743e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800744a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	021b      	lsls	r3, r3, #8
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	4313      	orrs	r3, r2
 8007456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	f023 0320 	bic.w	r3, r3, #32
 800745e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	011b      	lsls	r3, r3, #4
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	4313      	orrs	r3, r2
 800746a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a2c      	ldr	r2, [pc, #176]	@ (8007520 <TIM_OC2_SetConfig+0x110>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d007      	beq.n	8007484 <TIM_OC2_SetConfig+0x74>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a2b      	ldr	r2, [pc, #172]	@ (8007524 <TIM_OC2_SetConfig+0x114>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d003      	beq.n	8007484 <TIM_OC2_SetConfig+0x74>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a2a      	ldr	r2, [pc, #168]	@ (8007528 <TIM_OC2_SetConfig+0x118>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d10d      	bne.n	80074a0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800748a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	4313      	orrs	r3, r2
 8007496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800749e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a1f      	ldr	r2, [pc, #124]	@ (8007520 <TIM_OC2_SetConfig+0x110>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d013      	beq.n	80074d0 <TIM_OC2_SetConfig+0xc0>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a1e      	ldr	r2, [pc, #120]	@ (8007524 <TIM_OC2_SetConfig+0x114>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d00f      	beq.n	80074d0 <TIM_OC2_SetConfig+0xc0>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a1e      	ldr	r2, [pc, #120]	@ (800752c <TIM_OC2_SetConfig+0x11c>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d00b      	beq.n	80074d0 <TIM_OC2_SetConfig+0xc0>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a1d      	ldr	r2, [pc, #116]	@ (8007530 <TIM_OC2_SetConfig+0x120>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d007      	beq.n	80074d0 <TIM_OC2_SetConfig+0xc0>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a1c      	ldr	r2, [pc, #112]	@ (8007534 <TIM_OC2_SetConfig+0x124>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d003      	beq.n	80074d0 <TIM_OC2_SetConfig+0xc0>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a17      	ldr	r2, [pc, #92]	@ (8007528 <TIM_OC2_SetConfig+0x118>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d113      	bne.n	80074f8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80074d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80074de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	693a      	ldr	r2, [r7, #16]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	621a      	str	r2, [r3, #32]
}
 8007512:	bf00      	nop
 8007514:	371c      	adds	r7, #28
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	40012c00 	.word	0x40012c00
 8007524:	40013400 	.word	0x40013400
 8007528:	40015000 	.word	0x40015000
 800752c:	40014000 	.word	0x40014000
 8007530:	40014400 	.word	0x40014400
 8007534:	40014800 	.word	0x40014800

08007538 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007538:	b480      	push	{r7}
 800753a:	b087      	sub	sp, #28
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a1b      	ldr	r3, [r3, #32]
 800754c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800756a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 0303 	bic.w	r3, r3, #3
 8007572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	4313      	orrs	r3, r2
 800757c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	021b      	lsls	r3, r3, #8
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	4313      	orrs	r3, r2
 8007590:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a2b      	ldr	r2, [pc, #172]	@ (8007644 <TIM_OC3_SetConfig+0x10c>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d007      	beq.n	80075aa <TIM_OC3_SetConfig+0x72>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a2a      	ldr	r2, [pc, #168]	@ (8007648 <TIM_OC3_SetConfig+0x110>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d003      	beq.n	80075aa <TIM_OC3_SetConfig+0x72>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a29      	ldr	r2, [pc, #164]	@ (800764c <TIM_OC3_SetConfig+0x114>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d10d      	bne.n	80075c6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80075b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	021b      	lsls	r3, r3, #8
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80075c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a1e      	ldr	r2, [pc, #120]	@ (8007644 <TIM_OC3_SetConfig+0x10c>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d013      	beq.n	80075f6 <TIM_OC3_SetConfig+0xbe>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a1d      	ldr	r2, [pc, #116]	@ (8007648 <TIM_OC3_SetConfig+0x110>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d00f      	beq.n	80075f6 <TIM_OC3_SetConfig+0xbe>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007650 <TIM_OC3_SetConfig+0x118>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d00b      	beq.n	80075f6 <TIM_OC3_SetConfig+0xbe>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a1c      	ldr	r2, [pc, #112]	@ (8007654 <TIM_OC3_SetConfig+0x11c>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d007      	beq.n	80075f6 <TIM_OC3_SetConfig+0xbe>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a1b      	ldr	r2, [pc, #108]	@ (8007658 <TIM_OC3_SetConfig+0x120>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d003      	beq.n	80075f6 <TIM_OC3_SetConfig+0xbe>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a16      	ldr	r2, [pc, #88]	@ (800764c <TIM_OC3_SetConfig+0x114>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d113      	bne.n	800761e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80075fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	011b      	lsls	r3, r3, #4
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	4313      	orrs	r3, r2
 8007610:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	011b      	lsls	r3, r3, #4
 8007618:	693a      	ldr	r2, [r7, #16]
 800761a:	4313      	orrs	r3, r2
 800761c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	621a      	str	r2, [r3, #32]
}
 8007638:	bf00      	nop
 800763a:	371c      	adds	r7, #28
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr
 8007644:	40012c00 	.word	0x40012c00
 8007648:	40013400 	.word	0x40013400
 800764c:	40015000 	.word	0x40015000
 8007650:	40014000 	.word	0x40014000
 8007654:	40014400 	.word	0x40014400
 8007658:	40014800 	.word	0x40014800

0800765c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800765c:	b480      	push	{r7}
 800765e:	b087      	sub	sp, #28
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a1b      	ldr	r3, [r3, #32]
 8007670:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	69db      	ldr	r3, [r3, #28]
 8007682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800768a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800768e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007696:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	021b      	lsls	r3, r3, #8
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80076aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	031b      	lsls	r3, r3, #12
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a2c      	ldr	r2, [pc, #176]	@ (800776c <TIM_OC4_SetConfig+0x110>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d007      	beq.n	80076d0 <TIM_OC4_SetConfig+0x74>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a2b      	ldr	r2, [pc, #172]	@ (8007770 <TIM_OC4_SetConfig+0x114>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d003      	beq.n	80076d0 <TIM_OC4_SetConfig+0x74>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a2a      	ldr	r2, [pc, #168]	@ (8007774 <TIM_OC4_SetConfig+0x118>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d10d      	bne.n	80076ec <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80076d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	031b      	lsls	r3, r3, #12
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a1f      	ldr	r2, [pc, #124]	@ (800776c <TIM_OC4_SetConfig+0x110>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d013      	beq.n	800771c <TIM_OC4_SetConfig+0xc0>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a1e      	ldr	r2, [pc, #120]	@ (8007770 <TIM_OC4_SetConfig+0x114>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d00f      	beq.n	800771c <TIM_OC4_SetConfig+0xc0>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a1e      	ldr	r2, [pc, #120]	@ (8007778 <TIM_OC4_SetConfig+0x11c>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d00b      	beq.n	800771c <TIM_OC4_SetConfig+0xc0>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a1d      	ldr	r2, [pc, #116]	@ (800777c <TIM_OC4_SetConfig+0x120>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d007      	beq.n	800771c <TIM_OC4_SetConfig+0xc0>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a1c      	ldr	r2, [pc, #112]	@ (8007780 <TIM_OC4_SetConfig+0x124>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d003      	beq.n	800771c <TIM_OC4_SetConfig+0xc0>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a17      	ldr	r2, [pc, #92]	@ (8007774 <TIM_OC4_SetConfig+0x118>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d113      	bne.n	8007744 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007722:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800772a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	019b      	lsls	r3, r3, #6
 8007732:	693a      	ldr	r2, [r7, #16]
 8007734:	4313      	orrs	r3, r2
 8007736:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	019b      	lsls	r3, r3, #6
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	4313      	orrs	r3, r2
 8007742:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	621a      	str	r2, [r3, #32]
}
 800775e:	bf00      	nop
 8007760:	371c      	adds	r7, #28
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	40012c00 	.word	0x40012c00
 8007770:	40013400 	.word	0x40013400
 8007774:	40015000 	.word	0x40015000
 8007778:	40014000 	.word	0x40014000
 800777c:	40014400 	.word	0x40014400
 8007780:	40014800 	.word	0x40014800

08007784 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007784:	b480      	push	{r7}
 8007786:	b087      	sub	sp, #28
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a1b      	ldr	r3, [r3, #32]
 8007792:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a1b      	ldr	r3, [r3, #32]
 8007798:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	4313      	orrs	r3, r2
 80077c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80077c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	041b      	lsls	r3, r3, #16
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a19      	ldr	r2, [pc, #100]	@ (8007840 <TIM_OC5_SetConfig+0xbc>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d013      	beq.n	8007806 <TIM_OC5_SetConfig+0x82>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a18      	ldr	r2, [pc, #96]	@ (8007844 <TIM_OC5_SetConfig+0xc0>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00f      	beq.n	8007806 <TIM_OC5_SetConfig+0x82>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a17      	ldr	r2, [pc, #92]	@ (8007848 <TIM_OC5_SetConfig+0xc4>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d00b      	beq.n	8007806 <TIM_OC5_SetConfig+0x82>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a16      	ldr	r2, [pc, #88]	@ (800784c <TIM_OC5_SetConfig+0xc8>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d007      	beq.n	8007806 <TIM_OC5_SetConfig+0x82>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a15      	ldr	r2, [pc, #84]	@ (8007850 <TIM_OC5_SetConfig+0xcc>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d003      	beq.n	8007806 <TIM_OC5_SetConfig+0x82>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a14      	ldr	r2, [pc, #80]	@ (8007854 <TIM_OC5_SetConfig+0xd0>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d109      	bne.n	800781a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800780c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	021b      	lsls	r3, r3, #8
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	4313      	orrs	r3, r2
 8007818:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	621a      	str	r2, [r3, #32]
}
 8007834:	bf00      	nop
 8007836:	371c      	adds	r7, #28
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	40012c00 	.word	0x40012c00
 8007844:	40013400 	.word	0x40013400
 8007848:	40014000 	.word	0x40014000
 800784c:	40014400 	.word	0x40014400
 8007850:	40014800 	.word	0x40014800
 8007854:	40015000 	.word	0x40015000

08007858 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007858:	b480      	push	{r7}
 800785a:	b087      	sub	sp, #28
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a1b      	ldr	r3, [r3, #32]
 800786c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800787e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007886:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800788a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	021b      	lsls	r3, r3, #8
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	4313      	orrs	r3, r2
 8007896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800789e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	051b      	lsls	r3, r3, #20
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a1a      	ldr	r2, [pc, #104]	@ (8007918 <TIM_OC6_SetConfig+0xc0>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d013      	beq.n	80078dc <TIM_OC6_SetConfig+0x84>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a19      	ldr	r2, [pc, #100]	@ (800791c <TIM_OC6_SetConfig+0xc4>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d00f      	beq.n	80078dc <TIM_OC6_SetConfig+0x84>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a18      	ldr	r2, [pc, #96]	@ (8007920 <TIM_OC6_SetConfig+0xc8>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d00b      	beq.n	80078dc <TIM_OC6_SetConfig+0x84>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a17      	ldr	r2, [pc, #92]	@ (8007924 <TIM_OC6_SetConfig+0xcc>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d007      	beq.n	80078dc <TIM_OC6_SetConfig+0x84>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a16      	ldr	r2, [pc, #88]	@ (8007928 <TIM_OC6_SetConfig+0xd0>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d003      	beq.n	80078dc <TIM_OC6_SetConfig+0x84>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a15      	ldr	r2, [pc, #84]	@ (800792c <TIM_OC6_SetConfig+0xd4>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d109      	bne.n	80078f0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	029b      	lsls	r3, r3, #10
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	685a      	ldr	r2, [r3, #4]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	621a      	str	r2, [r3, #32]
}
 800790a:	bf00      	nop
 800790c:	371c      	adds	r7, #28
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	40012c00 	.word	0x40012c00
 800791c:	40013400 	.word	0x40013400
 8007920:	40014000 	.word	0x40014000
 8007924:	40014400 	.word	0x40014400
 8007928:	40014800 	.word	0x40014800
 800792c:	40015000 	.word	0x40015000

08007930 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007930:	b480      	push	{r7}
 8007932:	b087      	sub	sp, #28
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
 800793c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6a1b      	ldr	r3, [r3, #32]
 8007948:	f023 0201 	bic.w	r2, r3, #1
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	4a28      	ldr	r2, [pc, #160]	@ (80079fc <TIM_TI1_SetConfig+0xcc>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d01b      	beq.n	8007996 <TIM_TI1_SetConfig+0x66>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007964:	d017      	beq.n	8007996 <TIM_TI1_SetConfig+0x66>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	4a25      	ldr	r2, [pc, #148]	@ (8007a00 <TIM_TI1_SetConfig+0xd0>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d013      	beq.n	8007996 <TIM_TI1_SetConfig+0x66>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	4a24      	ldr	r2, [pc, #144]	@ (8007a04 <TIM_TI1_SetConfig+0xd4>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d00f      	beq.n	8007996 <TIM_TI1_SetConfig+0x66>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	4a23      	ldr	r2, [pc, #140]	@ (8007a08 <TIM_TI1_SetConfig+0xd8>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d00b      	beq.n	8007996 <TIM_TI1_SetConfig+0x66>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	4a22      	ldr	r2, [pc, #136]	@ (8007a0c <TIM_TI1_SetConfig+0xdc>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d007      	beq.n	8007996 <TIM_TI1_SetConfig+0x66>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	4a21      	ldr	r2, [pc, #132]	@ (8007a10 <TIM_TI1_SetConfig+0xe0>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d003      	beq.n	8007996 <TIM_TI1_SetConfig+0x66>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	4a20      	ldr	r2, [pc, #128]	@ (8007a14 <TIM_TI1_SetConfig+0xe4>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d101      	bne.n	800799a <TIM_TI1_SetConfig+0x6a>
 8007996:	2301      	movs	r3, #1
 8007998:	e000      	b.n	800799c <TIM_TI1_SetConfig+0x6c>
 800799a:	2300      	movs	r3, #0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d008      	beq.n	80079b2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f023 0303 	bic.w	r3, r3, #3
 80079a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	617b      	str	r3, [r7, #20]
 80079b0:	e003      	b.n	80079ba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f043 0301 	orr.w	r3, r3, #1
 80079b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80079c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	011b      	lsls	r3, r3, #4
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	f023 030a 	bic.w	r3, r3, #10
 80079d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	f003 030a 	and.w	r3, r3, #10
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	4313      	orrs	r3, r2
 80079e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	621a      	str	r2, [r3, #32]
}
 80079ee:	bf00      	nop
 80079f0:	371c      	adds	r7, #28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	40012c00 	.word	0x40012c00
 8007a00:	40000400 	.word	0x40000400
 8007a04:	40000800 	.word	0x40000800
 8007a08:	40000c00 	.word	0x40000c00
 8007a0c:	40013400 	.word	0x40013400
 8007a10:	40014000 	.word	0x40014000
 8007a14:	40015000 	.word	0x40015000

08007a18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6a1b      	ldr	r3, [r3, #32]
 8007a28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	f023 0201 	bic.w	r2, r3, #1
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	011b      	lsls	r3, r3, #4
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	f023 030a 	bic.w	r3, r3, #10
 8007a54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	621a      	str	r2, [r3, #32]
}
 8007a6a:	bf00      	nop
 8007a6c:	371c      	adds	r7, #28
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b087      	sub	sp, #28
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	60f8      	str	r0, [r7, #12]
 8007a7e:	60b9      	str	r1, [r7, #8]
 8007a80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6a1b      	ldr	r3, [r3, #32]
 8007a86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6a1b      	ldr	r3, [r3, #32]
 8007a8c:	f023 0210 	bic.w	r2, r3, #16
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007aa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	031b      	lsls	r3, r3, #12
 8007aa6:	693a      	ldr	r2, [r7, #16]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007ab2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	011b      	lsls	r3, r3, #4
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	621a      	str	r2, [r3, #32]
}
 8007aca:	bf00      	nop
 8007acc:	371c      	adds	r7, #28
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b085      	sub	sp, #20
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007aec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007af0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	f043 0307 	orr.w	r3, r3, #7
 8007afc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	609a      	str	r2, [r3, #8]
}
 8007b04:	bf00      	nop
 8007b06:	3714      	adds	r7, #20
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b087      	sub	sp, #28
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	607a      	str	r2, [r7, #4]
 8007b1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	021a      	lsls	r2, r3, #8
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	431a      	orrs	r2, r3
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	609a      	str	r2, [r3, #8]
}
 8007b44:	bf00      	nop
 8007b46:	371c      	adds	r7, #28
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b087      	sub	sp, #28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	f003 031f 	and.w	r3, r3, #31
 8007b62:	2201      	movs	r2, #1
 8007b64:	fa02 f303 	lsl.w	r3, r2, r3
 8007b68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6a1a      	ldr	r2, [r3, #32]
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	43db      	mvns	r3, r3
 8007b72:	401a      	ands	r2, r3
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6a1a      	ldr	r2, [r3, #32]
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	f003 031f 	and.w	r3, r3, #31
 8007b82:	6879      	ldr	r1, [r7, #4]
 8007b84:	fa01 f303 	lsl.w	r3, r1, r3
 8007b88:	431a      	orrs	r2, r3
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	621a      	str	r2, [r3, #32]
}
 8007b8e:	bf00      	nop
 8007b90:	371c      	adds	r7, #28
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
	...

08007b9c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a26      	ldr	r2, [pc, #152]	@ (8007c40 <TIM_ResetCallback+0xa4>)
 8007ba8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a25      	ldr	r2, [pc, #148]	@ (8007c44 <TIM_ResetCallback+0xa8>)
 8007bb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a24      	ldr	r2, [pc, #144]	@ (8007c48 <TIM_ResetCallback+0xac>)
 8007bb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a23      	ldr	r2, [pc, #140]	@ (8007c4c <TIM_ResetCallback+0xb0>)
 8007bc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a22      	ldr	r2, [pc, #136]	@ (8007c50 <TIM_ResetCallback+0xb4>)
 8007bc8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a21      	ldr	r2, [pc, #132]	@ (8007c54 <TIM_ResetCallback+0xb8>)
 8007bd0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a20      	ldr	r2, [pc, #128]	@ (8007c58 <TIM_ResetCallback+0xbc>)
 8007bd8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a1f      	ldr	r2, [pc, #124]	@ (8007c5c <TIM_ResetCallback+0xc0>)
 8007be0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a1e      	ldr	r2, [pc, #120]	@ (8007c60 <TIM_ResetCallback+0xc4>)
 8007be8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a1d      	ldr	r2, [pc, #116]	@ (8007c64 <TIM_ResetCallback+0xc8>)
 8007bf0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a1c      	ldr	r2, [pc, #112]	@ (8007c68 <TIM_ResetCallback+0xcc>)
 8007bf8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a1b      	ldr	r2, [pc, #108]	@ (8007c6c <TIM_ResetCallback+0xd0>)
 8007c00:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a1a      	ldr	r2, [pc, #104]	@ (8007c70 <TIM_ResetCallback+0xd4>)
 8007c08:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a19      	ldr	r2, [pc, #100]	@ (8007c74 <TIM_ResetCallback+0xd8>)
 8007c10:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a18      	ldr	r2, [pc, #96]	@ (8007c78 <TIM_ResetCallback+0xdc>)
 8007c18:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a17      	ldr	r2, [pc, #92]	@ (8007c7c <TIM_ResetCallback+0xe0>)
 8007c20:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a16      	ldr	r2, [pc, #88]	@ (8007c80 <TIM_ResetCallback+0xe4>)
 8007c28:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a15      	ldr	r2, [pc, #84]	@ (8007c84 <TIM_ResetCallback+0xe8>)
 8007c30:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr
 8007c40:	08000ce1 	.word	0x08000ce1
 8007c44:	08006e01 	.word	0x08006e01
 8007c48:	08006e79 	.word	0x08006e79
 8007c4c:	08006e8d 	.word	0x08006e8d
 8007c50:	08006e29 	.word	0x08006e29
 8007c54:	08006e3d 	.word	0x08006e3d
 8007c58:	08006e15 	.word	0x08006e15
 8007c5c:	08006e51 	.word	0x08006e51
 8007c60:	08006e65 	.word	0x08006e65
 8007c64:	08006ea1 	.word	0x08006ea1
 8007c68:	08008295 	.word	0x08008295
 8007c6c:	080082a9 	.word	0x080082a9
 8007c70:	080082bd 	.word	0x080082bd
 8007c74:	080082d1 	.word	0x080082d1
 8007c78:	080082e5 	.word	0x080082e5
 8007c7c:	080082f9 	.word	0x080082f9
 8007c80:	0800830d 	.word	0x0800830d
 8007c84:	08008321 	.word	0x08008321

08007c88 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b08a      	sub	sp, #40	@ 0x28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d101      	bne.n	8007c9c <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e0ab      	b.n	8007df4 <HAL_TIMEx_HallSensor_Init+0x16c>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d111      	bne.n	8007ccc <HAL_TIMEx_HallSensor_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy week callbacks */
    TIM_ResetCallback(htim);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7ff ff73 	bl	8007b9c <TIM_ResetCallback>

    if (htim->HallSensor_MspInitCallback == NULL)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d102      	bne.n	8007cc4 <HAL_TIMEx_HallSensor_Init+0x3c>
    {
      htim->HallSensor_MspInitCallback = HAL_TIMEx_HallSensor_MspInit;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a4e      	ldr	r2, [pc, #312]	@ (8007dfc <HAL_TIMEx_HallSensor_Init+0x174>)
 8007cc2:	67da      	str	r2, [r3, #124]	@ 0x7c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	4798      	blx	r3
    HAL_TIMEx_HallSensor_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	3304      	adds	r3, #4
 8007cdc:	4619      	mov	r1, r3
 8007cde:	4610      	mov	r0, r2
 8007ce0:	f7ff fa48 	bl	8007174 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6818      	ldr	r0, [r3, #0]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	6819      	ldr	r1, [r3, #0]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	2203      	movs	r2, #3
 8007cf2:	f7ff fe1d 	bl	8007930 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	699a      	ldr	r2, [r3, #24]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f022 020c 	bic.w	r2, r2, #12
 8007d04:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	6999      	ldr	r1, [r3, #24]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	430a      	orrs	r2, r1
 8007d16:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007d26:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	6812      	ldr	r2, [r2, #0]
 8007d32:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d3a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	689a      	ldr	r2, [r3, #8]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d4a:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	6812      	ldr	r2, [r2, #0]
 8007d56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d5a:	f023 0307 	bic.w	r3, r3, #7
 8007d5e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	689a      	ldr	r2, [r3, #8]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f042 0204 	orr.w	r2, r2, #4
 8007d6e:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8007d70:	2300      	movs	r3, #0
 8007d72:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007d74:	2300      	movs	r3, #0
 8007d76:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8007d78:	2370      	movs	r3, #112	@ 0x70
 8007d7a:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007d80:	2300      	movs	r3, #0
 8007d82:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007d84:	2300      	movs	r3, #0
 8007d86:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f107 020c 	add.w	r2, r7, #12
 8007d96:	4611      	mov	r1, r2
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7ff fb39 	bl	8007410 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	6812      	ldr	r2, [r2, #0]
 8007da8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007db0:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	685a      	ldr	r2, [r3, #4]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8007dc0:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3728      	adds	r7, #40	@ 0x28
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	080014a9 	.word	0x080014a9

08007e00 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d109      	bne.n	8007e24 <HAL_TIMEx_PWMN_Start+0x24>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	bf14      	ite	ne
 8007e1c:	2301      	movne	r3, #1
 8007e1e:	2300      	moveq	r3, #0
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	e022      	b.n	8007e6a <HAL_TIMEx_PWMN_Start+0x6a>
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	2b04      	cmp	r3, #4
 8007e28:	d109      	bne.n	8007e3e <HAL_TIMEx_PWMN_Start+0x3e>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	bf14      	ite	ne
 8007e36:	2301      	movne	r3, #1
 8007e38:	2300      	moveq	r3, #0
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	e015      	b.n	8007e6a <HAL_TIMEx_PWMN_Start+0x6a>
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	2b08      	cmp	r3, #8
 8007e42:	d109      	bne.n	8007e58 <HAL_TIMEx_PWMN_Start+0x58>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	bf14      	ite	ne
 8007e50:	2301      	movne	r3, #1
 8007e52:	2300      	moveq	r3, #0
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	e008      	b.n	8007e6a <HAL_TIMEx_PWMN_Start+0x6a>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	bf14      	ite	ne
 8007e64:	2301      	movne	r3, #1
 8007e66:	2300      	moveq	r3, #0
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e073      	b.n	8007f5a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d104      	bne.n	8007e82 <HAL_TIMEx_PWMN_Start+0x82>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e80:	e013      	b.n	8007eaa <HAL_TIMEx_PWMN_Start+0xaa>
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	2b04      	cmp	r3, #4
 8007e86:	d104      	bne.n	8007e92 <HAL_TIMEx_PWMN_Start+0x92>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e90:	e00b      	b.n	8007eaa <HAL_TIMEx_PWMN_Start+0xaa>
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	2b08      	cmp	r3, #8
 8007e96:	d104      	bne.n	8007ea2 <HAL_TIMEx_PWMN_Start+0xa2>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007ea0:	e003      	b.n	8007eaa <HAL_TIMEx_PWMN_Start+0xaa>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2202      	movs	r2, #2
 8007ea6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2204      	movs	r2, #4
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 fa3e 	bl	8008334 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ec6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a25      	ldr	r2, [pc, #148]	@ (8007f64 <HAL_TIMEx_PWMN_Start+0x164>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d022      	beq.n	8007f18 <HAL_TIMEx_PWMN_Start+0x118>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eda:	d01d      	beq.n	8007f18 <HAL_TIMEx_PWMN_Start+0x118>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a21      	ldr	r2, [pc, #132]	@ (8007f68 <HAL_TIMEx_PWMN_Start+0x168>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d018      	beq.n	8007f18 <HAL_TIMEx_PWMN_Start+0x118>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a20      	ldr	r2, [pc, #128]	@ (8007f6c <HAL_TIMEx_PWMN_Start+0x16c>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d013      	beq.n	8007f18 <HAL_TIMEx_PWMN_Start+0x118>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a1e      	ldr	r2, [pc, #120]	@ (8007f70 <HAL_TIMEx_PWMN_Start+0x170>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d00e      	beq.n	8007f18 <HAL_TIMEx_PWMN_Start+0x118>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a1d      	ldr	r2, [pc, #116]	@ (8007f74 <HAL_TIMEx_PWMN_Start+0x174>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d009      	beq.n	8007f18 <HAL_TIMEx_PWMN_Start+0x118>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a1b      	ldr	r2, [pc, #108]	@ (8007f78 <HAL_TIMEx_PWMN_Start+0x178>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d004      	beq.n	8007f18 <HAL_TIMEx_PWMN_Start+0x118>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a1a      	ldr	r2, [pc, #104]	@ (8007f7c <HAL_TIMEx_PWMN_Start+0x17c>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d115      	bne.n	8007f44 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689a      	ldr	r2, [r3, #8]
 8007f1e:	4b18      	ldr	r3, [pc, #96]	@ (8007f80 <HAL_TIMEx_PWMN_Start+0x180>)
 8007f20:	4013      	ands	r3, r2
 8007f22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2b06      	cmp	r3, #6
 8007f28:	d015      	beq.n	8007f56 <HAL_TIMEx_PWMN_Start+0x156>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f30:	d011      	beq.n	8007f56 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f042 0201 	orr.w	r2, r2, #1
 8007f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f42:	e008      	b.n	8007f56 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f042 0201 	orr.w	r2, r2, #1
 8007f52:	601a      	str	r2, [r3, #0]
 8007f54:	e000      	b.n	8007f58 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	40012c00 	.word	0x40012c00
 8007f68:	40000400 	.word	0x40000400
 8007f6c:	40000800 	.word	0x40000800
 8007f70:	40000c00 	.word	0x40000c00
 8007f74:	40013400 	.word	0x40013400
 8007f78:	40014000 	.word	0x40014000
 8007f7c:	40015000 	.word	0x40015000
 8007f80:	00010007 	.word	0x00010007

08007f84 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2200      	movs	r2, #0
 8007f94:	6839      	ldr	r1, [r7, #0]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 f9cc 	bl	8008334 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6a1a      	ldr	r2, [r3, #32]
 8007fa2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10f      	bne.n	8007fcc <HAL_TIMEx_PWMN_Stop+0x48>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6a1a      	ldr	r2, [r3, #32]
 8007fb2:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d107      	bne.n	8007fcc <HAL_TIMEx_PWMN_Stop+0x48>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007fca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6a1a      	ldr	r2, [r3, #32]
 8007fd2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10f      	bne.n	8007ffc <HAL_TIMEx_PWMN_Stop+0x78>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6a1a      	ldr	r2, [r3, #32]
 8007fe2:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d107      	bne.n	8007ffc <HAL_TIMEx_PWMN_Stop+0x78>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f022 0201 	bic.w	r2, r2, #1
 8007ffa:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d104      	bne.n	800800c <HAL_TIMEx_PWMN_Stop+0x88>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800800a:	e013      	b.n	8008034 <HAL_TIMEx_PWMN_Stop+0xb0>
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	2b04      	cmp	r3, #4
 8008010:	d104      	bne.n	800801c <HAL_TIMEx_PWMN_Stop+0x98>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800801a:	e00b      	b.n	8008034 <HAL_TIMEx_PWMN_Stop+0xb0>
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	2b08      	cmp	r3, #8
 8008020:	d104      	bne.n	800802c <HAL_TIMEx_PWMN_Stop+0xa8>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800802a:	e003      	b.n	8008034 <HAL_TIMEx_PWMN_Stop+0xb0>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008050:	2b01      	cmp	r3, #1
 8008052:	d101      	bne.n	8008058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008054:	2302      	movs	r3, #2
 8008056:	e074      	b.n	8008142 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2202      	movs	r2, #2
 8008064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a34      	ldr	r2, [pc, #208]	@ (8008150 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d009      	beq.n	8008096 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a33      	ldr	r2, [pc, #204]	@ (8008154 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d004      	beq.n	8008096 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a31      	ldr	r2, [pc, #196]	@ (8008158 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d108      	bne.n	80080a8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800809c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80080ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a21      	ldr	r2, [pc, #132]	@ (8008150 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d022      	beq.n	8008116 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080d8:	d01d      	beq.n	8008116 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a1f      	ldr	r2, [pc, #124]	@ (800815c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d018      	beq.n	8008116 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008160 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d013      	beq.n	8008116 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a1c      	ldr	r2, [pc, #112]	@ (8008164 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d00e      	beq.n	8008116 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a15      	ldr	r2, [pc, #84]	@ (8008154 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d009      	beq.n	8008116 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a18      	ldr	r2, [pc, #96]	@ (8008168 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d004      	beq.n	8008116 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a11      	ldr	r2, [pc, #68]	@ (8008158 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d10c      	bne.n	8008130 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800811c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	4313      	orrs	r3, r2
 8008126:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	40012c00 	.word	0x40012c00
 8008154:	40013400 	.word	0x40013400
 8008158:	40015000 	.word	0x40015000
 800815c:	40000400 	.word	0x40000400
 8008160:	40000800 	.word	0x40000800
 8008164:	40000c00 	.word	0x40000c00
 8008168:	40014000 	.word	0x40014000

0800816c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008176:	2300      	movs	r3, #0
 8008178:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008180:	2b01      	cmp	r3, #1
 8008182:	d101      	bne.n	8008188 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008184:	2302      	movs	r3, #2
 8008186:	e078      	b.n	800827a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	4313      	orrs	r3, r2
 800819c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	695b      	ldr	r3, [r3, #20]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ee:	4313      	orrs	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	699b      	ldr	r3, [r3, #24]
 80081fc:	041b      	lsls	r3, r3, #16
 80081fe:	4313      	orrs	r3, r2
 8008200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	69db      	ldr	r3, [r3, #28]
 800820c:	4313      	orrs	r3, r2
 800820e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a1c      	ldr	r2, [pc, #112]	@ (8008288 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d009      	beq.n	800822e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a1b      	ldr	r2, [pc, #108]	@ (800828c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d004      	beq.n	800822e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a19      	ldr	r2, [pc, #100]	@ (8008290 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d11c      	bne.n	8008268 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008238:	051b      	lsls	r3, r3, #20
 800823a:	4313      	orrs	r3, r2
 800823c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	6a1b      	ldr	r3, [r3, #32]
 8008248:	4313      	orrs	r3, r2
 800824a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008256:	4313      	orrs	r3, r2
 8008258:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008264:	4313      	orrs	r3, r2
 8008266:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3714      	adds	r7, #20
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	40012c00 	.word	0x40012c00
 800828c:	40013400 	.word	0x40013400
 8008290:	40015000 	.word	0x40015000

08008294 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80082d8:	bf00      	nop
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80082ec:	bf00      	nop
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008314:	bf00      	nop
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008328:	bf00      	nop
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008334:	b480      	push	{r7}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	f003 030f 	and.w	r3, r3, #15
 8008346:	2204      	movs	r2, #4
 8008348:	fa02 f303 	lsl.w	r3, r2, r3
 800834c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6a1a      	ldr	r2, [r3, #32]
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	43db      	mvns	r3, r3
 8008356:	401a      	ands	r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6a1a      	ldr	r2, [r3, #32]
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f003 030f 	and.w	r3, r3, #15
 8008366:	6879      	ldr	r1, [r7, #4]
 8008368:	fa01 f303 	lsl.w	r3, r1, r3
 800836c:	431a      	orrs	r2, r3
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	621a      	str	r2, [r3, #32]
}
 8008372:	bf00      	nop
 8008374:	371c      	adds	r7, #28
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr

0800837e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b082      	sub	sp, #8
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d101      	bne.n	8008390 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	e042      	b.n	8008416 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008396:	2b00      	cmp	r3, #0
 8008398:	d106      	bne.n	80083a8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7f9 f9e2 	bl	800176c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2224      	movs	r2, #36	@ 0x24
 80083ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f022 0201 	bic.w	r2, r2, #1
 80083be:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 ff61 	bl	8009290 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fc62 	bl	8008c98 <UART_SetConfig>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d101      	bne.n	80083de <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e01b      	b.n	8008416 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80083ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	689a      	ldr	r2, [r3, #8]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f042 0201 	orr.w	r2, r2, #1
 800840c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 ffe0 	bl	80093d4 <UART_CheckIdleState>
 8008414:	4603      	mov	r3, r0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b08a      	sub	sp, #40	@ 0x28
 8008422:	af02      	add	r7, sp, #8
 8008424:	60f8      	str	r0, [r7, #12]
 8008426:	60b9      	str	r1, [r7, #8]
 8008428:	603b      	str	r3, [r7, #0]
 800842a:	4613      	mov	r3, r2
 800842c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008434:	2b20      	cmp	r3, #32
 8008436:	d17b      	bne.n	8008530 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d002      	beq.n	8008444 <HAL_UART_Transmit+0x26>
 800843e:	88fb      	ldrh	r3, [r7, #6]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d101      	bne.n	8008448 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e074      	b.n	8008532 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2221      	movs	r2, #33	@ 0x21
 8008454:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008458:	f7f9 fed4 	bl	8002204 <HAL_GetTick>
 800845c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	88fa      	ldrh	r2, [r7, #6]
 8008462:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	88fa      	ldrh	r2, [r7, #6]
 800846a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008476:	d108      	bne.n	800848a <HAL_UART_Transmit+0x6c>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d104      	bne.n	800848a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008480:	2300      	movs	r3, #0
 8008482:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	61bb      	str	r3, [r7, #24]
 8008488:	e003      	b.n	8008492 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800848e:	2300      	movs	r3, #0
 8008490:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008492:	e030      	b.n	80084f6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	2200      	movs	r2, #0
 800849c:	2180      	movs	r1, #128	@ 0x80
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f001 f842 	bl	8009528 <UART_WaitOnFlagUntilTimeout>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d005      	beq.n	80084b6 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2220      	movs	r2, #32
 80084ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e03d      	b.n	8008532 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10b      	bne.n	80084d4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	881b      	ldrh	r3, [r3, #0]
 80084c0:	461a      	mov	r2, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	3302      	adds	r3, #2
 80084d0:	61bb      	str	r3, [r7, #24]
 80084d2:	e007      	b.n	80084e4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	781a      	ldrb	r2, [r3, #0]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	3301      	adds	r3, #1
 80084e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	3b01      	subs	r3, #1
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1c8      	bne.n	8008494 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	2200      	movs	r2, #0
 800850a:	2140      	movs	r1, #64	@ 0x40
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f001 f80b 	bl	8009528 <UART_WaitOnFlagUntilTimeout>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d005      	beq.n	8008524 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2220      	movs	r2, #32
 800851c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	e006      	b.n	8008532 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2220      	movs	r2, #32
 8008528:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	e000      	b.n	8008532 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008530:	2302      	movs	r3, #2
  }
}
 8008532:	4618      	mov	r0, r3
 8008534:	3720      	adds	r7, #32
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
	...

0800853c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b08a      	sub	sp, #40	@ 0x28
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	4613      	mov	r3, r2
 8008548:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008550:	2b20      	cmp	r3, #32
 8008552:	d137      	bne.n	80085c4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d002      	beq.n	8008560 <HAL_UART_Receive_IT+0x24>
 800855a:	88fb      	ldrh	r3, [r7, #6]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d101      	bne.n	8008564 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e030      	b.n	80085c6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a18      	ldr	r2, [pc, #96]	@ (80085d0 <HAL_UART_Receive_IT+0x94>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d01f      	beq.n	80085b4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d018      	beq.n	80085b4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	e853 3f00 	ldrex	r3, [r3]
 800858e:	613b      	str	r3, [r7, #16]
   return(result);
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008596:	627b      	str	r3, [r7, #36]	@ 0x24
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	461a      	mov	r2, r3
 800859e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a0:	623b      	str	r3, [r7, #32]
 80085a2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a4:	69f9      	ldr	r1, [r7, #28]
 80085a6:	6a3a      	ldr	r2, [r7, #32]
 80085a8:	e841 2300 	strex	r3, r2, [r1]
 80085ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1e6      	bne.n	8008582 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80085b4:	88fb      	ldrh	r3, [r7, #6]
 80085b6:	461a      	mov	r2, r3
 80085b8:	68b9      	ldr	r1, [r7, #8]
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	f001 f822 	bl	8009604 <UART_Start_Receive_IT>
 80085c0:	4603      	mov	r3, r0
 80085c2:	e000      	b.n	80085c6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80085c4:	2302      	movs	r3, #2
  }
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3728      	adds	r7, #40	@ 0x28
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	40008000 	.word	0x40008000

080085d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b0ba      	sub	sp, #232	@ 0xe8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	69db      	ldr	r3, [r3, #28]
 80085e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80085fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80085fe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008602:	4013      	ands	r3, r2
 8008604:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008608:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800860c:	2b00      	cmp	r3, #0
 800860e:	d11b      	bne.n	8008648 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008614:	f003 0320 	and.w	r3, r3, #32
 8008618:	2b00      	cmp	r3, #0
 800861a:	d015      	beq.n	8008648 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800861c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008620:	f003 0320 	and.w	r3, r3, #32
 8008624:	2b00      	cmp	r3, #0
 8008626:	d105      	bne.n	8008634 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800862c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d009      	beq.n	8008648 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 8300 	beq.w	8008c3e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	4798      	blx	r3
      }
      return;
 8008646:	e2fa      	b.n	8008c3e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008648:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 8123 	beq.w	8008898 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008652:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008656:	4b8d      	ldr	r3, [pc, #564]	@ (800888c <HAL_UART_IRQHandler+0x2b8>)
 8008658:	4013      	ands	r3, r2
 800865a:	2b00      	cmp	r3, #0
 800865c:	d106      	bne.n	800866c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800865e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008662:	4b8b      	ldr	r3, [pc, #556]	@ (8008890 <HAL_UART_IRQHandler+0x2bc>)
 8008664:	4013      	ands	r3, r2
 8008666:	2b00      	cmp	r3, #0
 8008668:	f000 8116 	beq.w	8008898 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800866c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008670:	f003 0301 	and.w	r3, r3, #1
 8008674:	2b00      	cmp	r3, #0
 8008676:	d011      	beq.n	800869c <HAL_UART_IRQHandler+0xc8>
 8008678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800867c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00b      	beq.n	800869c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2201      	movs	r2, #1
 800868a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008692:	f043 0201 	orr.w	r2, r3, #1
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800869c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086a0:	f003 0302 	and.w	r3, r3, #2
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d011      	beq.n	80086cc <HAL_UART_IRQHandler+0xf8>
 80086a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00b      	beq.n	80086cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2202      	movs	r2, #2
 80086ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086c2:	f043 0204 	orr.w	r2, r3, #4
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086d0:	f003 0304 	and.w	r3, r3, #4
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d011      	beq.n	80086fc <HAL_UART_IRQHandler+0x128>
 80086d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086dc:	f003 0301 	and.w	r3, r3, #1
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00b      	beq.n	80086fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2204      	movs	r2, #4
 80086ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086f2:	f043 0202 	orr.w	r2, r3, #2
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80086fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008700:	f003 0308 	and.w	r3, r3, #8
 8008704:	2b00      	cmp	r3, #0
 8008706:	d017      	beq.n	8008738 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800870c:	f003 0320 	and.w	r3, r3, #32
 8008710:	2b00      	cmp	r3, #0
 8008712:	d105      	bne.n	8008720 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008714:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008718:	4b5c      	ldr	r3, [pc, #368]	@ (800888c <HAL_UART_IRQHandler+0x2b8>)
 800871a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00b      	beq.n	8008738 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2208      	movs	r2, #8
 8008726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800872e:	f043 0208 	orr.w	r2, r3, #8
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800873c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008740:	2b00      	cmp	r3, #0
 8008742:	d012      	beq.n	800876a <HAL_UART_IRQHandler+0x196>
 8008744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008748:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00c      	beq.n	800876a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008758:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008760:	f043 0220 	orr.w	r2, r3, #32
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 8266 	beq.w	8008c42 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800877a:	f003 0320 	and.w	r3, r3, #32
 800877e:	2b00      	cmp	r3, #0
 8008780:	d013      	beq.n	80087aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008786:	f003 0320 	and.w	r3, r3, #32
 800878a:	2b00      	cmp	r3, #0
 800878c:	d105      	bne.n	800879a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800878e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008796:	2b00      	cmp	r3, #0
 8008798:	d007      	beq.n	80087aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d003      	beq.n	80087aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087be:	2b40      	cmp	r3, #64	@ 0x40
 80087c0:	d005      	beq.n	80087ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80087c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80087c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d054      	beq.n	8008878 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f001 f83a 	bl	8009848 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087de:	2b40      	cmp	r3, #64	@ 0x40
 80087e0:	d146      	bne.n	8008870 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3308      	adds	r3, #8
 80087e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087f0:	e853 3f00 	ldrex	r3, [r3]
 80087f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80087f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80087fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008800:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	3308      	adds	r3, #8
 800880a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800880e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008812:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008816:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800881a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800881e:	e841 2300 	strex	r3, r2, [r1]
 8008822:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008826:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1d9      	bne.n	80087e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008834:	2b00      	cmp	r3, #0
 8008836:	d017      	beq.n	8008868 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800883e:	4a15      	ldr	r2, [pc, #84]	@ (8008894 <HAL_UART_IRQHandler+0x2c0>)
 8008840:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008848:	4618      	mov	r0, r3
 800884a:	f7fb ffb5 	bl	80047b8 <HAL_DMA_Abort_IT>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d019      	beq.n	8008888 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800885a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008862:	4610      	mov	r0, r2
 8008864:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008866:	e00f      	b.n	8008888 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f9ff 	bl	8008c6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800886e:	e00b      	b.n	8008888 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f9fb 	bl	8008c6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008876:	e007      	b.n	8008888 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f9f7 	bl	8008c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008886:	e1dc      	b.n	8008c42 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008888:	bf00      	nop
    return;
 800888a:	e1da      	b.n	8008c42 <HAL_UART_IRQHandler+0x66e>
 800888c:	10000001 	.word	0x10000001
 8008890:	04000120 	.word	0x04000120
 8008894:	08009915 	.word	0x08009915

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800889c:	2b01      	cmp	r3, #1
 800889e:	f040 8170 	bne.w	8008b82 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80088a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088a6:	f003 0310 	and.w	r3, r3, #16
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f000 8169 	beq.w	8008b82 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80088b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088b4:	f003 0310 	and.w	r3, r3, #16
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f000 8162 	beq.w	8008b82 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2210      	movs	r2, #16
 80088c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088d0:	2b40      	cmp	r3, #64	@ 0x40
 80088d2:	f040 80d8 	bne.w	8008a86 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f000 80af 	beq.w	8008a4c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80088f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088f8:	429a      	cmp	r2, r3
 80088fa:	f080 80a7 	bcs.w	8008a4c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008904:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 0320 	and.w	r3, r3, #32
 8008916:	2b00      	cmp	r3, #0
 8008918:	f040 8087 	bne.w	8008a2a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008924:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008928:	e853 3f00 	ldrex	r3, [r3]
 800892c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008930:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008934:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008938:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	461a      	mov	r2, r3
 8008942:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008946:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800894a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008952:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008956:	e841 2300 	strex	r3, r2, [r1]
 800895a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800895e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1da      	bne.n	800891c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	3308      	adds	r3, #8
 800896c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008970:	e853 3f00 	ldrex	r3, [r3]
 8008974:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008976:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008978:	f023 0301 	bic.w	r3, r3, #1
 800897c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3308      	adds	r3, #8
 8008986:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800898a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800898e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008990:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008992:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008996:	e841 2300 	strex	r3, r2, [r1]
 800899a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800899c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1e1      	bne.n	8008966 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	3308      	adds	r3, #8
 80089a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089ac:	e853 3f00 	ldrex	r3, [r3]
 80089b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80089b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3308      	adds	r3, #8
 80089c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80089c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80089c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80089cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80089ce:	e841 2300 	strex	r3, r2, [r1]
 80089d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80089d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1e3      	bne.n	80089a2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2220      	movs	r2, #32
 80089de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089f0:	e853 3f00 	ldrex	r3, [r3]
 80089f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80089f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089f8:	f023 0310 	bic.w	r3, r3, #16
 80089fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	461a      	mov	r2, r3
 8008a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a12:	e841 2300 	strex	r3, r2, [r1]
 8008a16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1e4      	bne.n	80089e8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7fb fe6e 	bl	8004706 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2202      	movs	r2, #2
 8008a2e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	1ad3      	subs	r3, r2, r3
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	4619      	mov	r1, r3
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f91b 	bl	8008c80 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008a4a:	e0fc      	b.n	8008c46 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a56:	429a      	cmp	r2, r3
 8008a58:	f040 80f5 	bne.w	8008c46 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 0320 	and.w	r3, r3, #32
 8008a6a:	2b20      	cmp	r3, #32
 8008a6c:	f040 80eb 	bne.w	8008c46 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2202      	movs	r2, #2
 8008a74:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f8fe 	bl	8008c80 <HAL_UARTEx_RxEventCallback>
      return;
 8008a84:	e0df      	b.n	8008c46 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 80d1 	beq.w	8008c4a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8008aa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f000 80cc 	beq.w	8008c4a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aba:	e853 3f00 	ldrex	r3, [r3]
 8008abe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ac2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ac6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008ad4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ad6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ada:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008adc:	e841 2300 	strex	r3, r2, [r1]
 8008ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1e4      	bne.n	8008ab2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	3308      	adds	r3, #8
 8008aee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af2:	e853 3f00 	ldrex	r3, [r3]
 8008af6:	623b      	str	r3, [r7, #32]
   return(result);
 8008af8:	6a3b      	ldr	r3, [r7, #32]
 8008afa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008afe:	f023 0301 	bic.w	r3, r3, #1
 8008b02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	3308      	adds	r3, #8
 8008b0c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008b10:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b18:	e841 2300 	strex	r3, r2, [r1]
 8008b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1e1      	bne.n	8008ae8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2220      	movs	r2, #32
 8008b28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	e853 3f00 	ldrex	r3, [r3]
 8008b44:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f023 0310 	bic.w	r3, r3, #16
 8008b4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	461a      	mov	r2, r3
 8008b56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008b5a:	61fb      	str	r3, [r7, #28]
 8008b5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5e:	69b9      	ldr	r1, [r7, #24]
 8008b60:	69fa      	ldr	r2, [r7, #28]
 8008b62:	e841 2300 	strex	r3, r2, [r1]
 8008b66:	617b      	str	r3, [r7, #20]
   return(result);
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1e4      	bne.n	8008b38 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2202      	movs	r2, #2
 8008b72:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f880 	bl	8008c80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b80:	e063      	b.n	8008c4a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00e      	beq.n	8008bac <HAL_UART_IRQHandler+0x5d8>
 8008b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d008      	beq.n	8008bac <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008ba2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f001 fc13 	bl	800a3d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008baa:	e051      	b.n	8008c50 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d014      	beq.n	8008be2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d105      	bne.n	8008bd0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d008      	beq.n	8008be2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d03a      	beq.n	8008c4e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	4798      	blx	r3
    }
    return;
 8008be0:	e035      	b.n	8008c4e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d009      	beq.n	8008c02 <HAL_UART_IRQHandler+0x62e>
 8008bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d003      	beq.n	8008c02 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fe9c 	bl	8009938 <UART_EndTransmit_IT>
    return;
 8008c00:	e026      	b.n	8008c50 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d009      	beq.n	8008c22 <HAL_UART_IRQHandler+0x64e>
 8008c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c12:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f001 fbec 	bl	800a3f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c20:	e016      	b.n	8008c50 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d010      	beq.n	8008c50 <HAL_UART_IRQHandler+0x67c>
 8008c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	da0c      	bge.n	8008c50 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f001 fbd4 	bl	800a3e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c3c:	e008      	b.n	8008c50 <HAL_UART_IRQHandler+0x67c>
      return;
 8008c3e:	bf00      	nop
 8008c40:	e006      	b.n	8008c50 <HAL_UART_IRQHandler+0x67c>
    return;
 8008c42:	bf00      	nop
 8008c44:	e004      	b.n	8008c50 <HAL_UART_IRQHandler+0x67c>
      return;
 8008c46:	bf00      	nop
 8008c48:	e002      	b.n	8008c50 <HAL_UART_IRQHandler+0x67c>
      return;
 8008c4a:	bf00      	nop
 8008c4c:	e000      	b.n	8008c50 <HAL_UART_IRQHandler+0x67c>
    return;
 8008c4e:	bf00      	nop
  }
}
 8008c50:	37e8      	adds	r7, #232	@ 0xe8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop

08008c58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008c74:	bf00      	nop
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c9c:	b08c      	sub	sp, #48	@ 0x30
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	689a      	ldr	r2, [r3, #8]
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	431a      	orrs	r2, r3
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	695b      	ldr	r3, [r3, #20]
 8008cb6:	431a      	orrs	r2, r3
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	69db      	ldr	r3, [r3, #28]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	4baa      	ldr	r3, [pc, #680]	@ (8008f70 <UART_SetConfig+0x2d8>)
 8008cc8:	4013      	ands	r3, r2
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	6812      	ldr	r2, [r2, #0]
 8008cce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cd0:	430b      	orrs	r3, r1
 8008cd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	68da      	ldr	r2, [r3, #12]
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	430a      	orrs	r2, r1
 8008ce8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	699b      	ldr	r3, [r3, #24]
 8008cee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a9f      	ldr	r2, [pc, #636]	@ (8008f74 <UART_SetConfig+0x2dc>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d004      	beq.n	8008d04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	6a1b      	ldr	r3, [r3, #32]
 8008cfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d00:	4313      	orrs	r3, r2
 8008d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008d0e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	6812      	ldr	r2, [r2, #0]
 8008d16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d18:	430b      	orrs	r3, r1
 8008d1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d22:	f023 010f 	bic.w	r1, r3, #15
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	430a      	orrs	r2, r1
 8008d30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a90      	ldr	r2, [pc, #576]	@ (8008f78 <UART_SetConfig+0x2e0>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d125      	bne.n	8008d88 <UART_SetConfig+0xf0>
 8008d3c:	4b8f      	ldr	r3, [pc, #572]	@ (8008f7c <UART_SetConfig+0x2e4>)
 8008d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d42:	f003 0303 	and.w	r3, r3, #3
 8008d46:	2b03      	cmp	r3, #3
 8008d48:	d81a      	bhi.n	8008d80 <UART_SetConfig+0xe8>
 8008d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d50 <UART_SetConfig+0xb8>)
 8008d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d50:	08008d61 	.word	0x08008d61
 8008d54:	08008d71 	.word	0x08008d71
 8008d58:	08008d69 	.word	0x08008d69
 8008d5c:	08008d79 	.word	0x08008d79
 8008d60:	2301      	movs	r3, #1
 8008d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d66:	e116      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008d68:	2302      	movs	r3, #2
 8008d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d6e:	e112      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008d70:	2304      	movs	r3, #4
 8008d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d76:	e10e      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008d78:	2308      	movs	r3, #8
 8008d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d7e:	e10a      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008d80:	2310      	movs	r3, #16
 8008d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d86:	e106      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a7c      	ldr	r2, [pc, #496]	@ (8008f80 <UART_SetConfig+0x2e8>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d138      	bne.n	8008e04 <UART_SetConfig+0x16c>
 8008d92:	4b7a      	ldr	r3, [pc, #488]	@ (8008f7c <UART_SetConfig+0x2e4>)
 8008d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d98:	f003 030c 	and.w	r3, r3, #12
 8008d9c:	2b0c      	cmp	r3, #12
 8008d9e:	d82d      	bhi.n	8008dfc <UART_SetConfig+0x164>
 8008da0:	a201      	add	r2, pc, #4	@ (adr r2, 8008da8 <UART_SetConfig+0x110>)
 8008da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da6:	bf00      	nop
 8008da8:	08008ddd 	.word	0x08008ddd
 8008dac:	08008dfd 	.word	0x08008dfd
 8008db0:	08008dfd 	.word	0x08008dfd
 8008db4:	08008dfd 	.word	0x08008dfd
 8008db8:	08008ded 	.word	0x08008ded
 8008dbc:	08008dfd 	.word	0x08008dfd
 8008dc0:	08008dfd 	.word	0x08008dfd
 8008dc4:	08008dfd 	.word	0x08008dfd
 8008dc8:	08008de5 	.word	0x08008de5
 8008dcc:	08008dfd 	.word	0x08008dfd
 8008dd0:	08008dfd 	.word	0x08008dfd
 8008dd4:	08008dfd 	.word	0x08008dfd
 8008dd8:	08008df5 	.word	0x08008df5
 8008ddc:	2300      	movs	r3, #0
 8008dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008de2:	e0d8      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008de4:	2302      	movs	r3, #2
 8008de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dea:	e0d4      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008dec:	2304      	movs	r3, #4
 8008dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008df2:	e0d0      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008df4:	2308      	movs	r3, #8
 8008df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dfa:	e0cc      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008dfc:	2310      	movs	r3, #16
 8008dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e02:	e0c8      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a5e      	ldr	r2, [pc, #376]	@ (8008f84 <UART_SetConfig+0x2ec>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d125      	bne.n	8008e5a <UART_SetConfig+0x1c2>
 8008e0e:	4b5b      	ldr	r3, [pc, #364]	@ (8008f7c <UART_SetConfig+0x2e4>)
 8008e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e14:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008e18:	2b30      	cmp	r3, #48	@ 0x30
 8008e1a:	d016      	beq.n	8008e4a <UART_SetConfig+0x1b2>
 8008e1c:	2b30      	cmp	r3, #48	@ 0x30
 8008e1e:	d818      	bhi.n	8008e52 <UART_SetConfig+0x1ba>
 8008e20:	2b20      	cmp	r3, #32
 8008e22:	d00a      	beq.n	8008e3a <UART_SetConfig+0x1a2>
 8008e24:	2b20      	cmp	r3, #32
 8008e26:	d814      	bhi.n	8008e52 <UART_SetConfig+0x1ba>
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d002      	beq.n	8008e32 <UART_SetConfig+0x19a>
 8008e2c:	2b10      	cmp	r3, #16
 8008e2e:	d008      	beq.n	8008e42 <UART_SetConfig+0x1aa>
 8008e30:	e00f      	b.n	8008e52 <UART_SetConfig+0x1ba>
 8008e32:	2300      	movs	r3, #0
 8008e34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e38:	e0ad      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008e3a:	2302      	movs	r3, #2
 8008e3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e40:	e0a9      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008e42:	2304      	movs	r3, #4
 8008e44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e48:	e0a5      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008e4a:	2308      	movs	r3, #8
 8008e4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e50:	e0a1      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008e52:	2310      	movs	r3, #16
 8008e54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e58:	e09d      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a4a      	ldr	r2, [pc, #296]	@ (8008f88 <UART_SetConfig+0x2f0>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d125      	bne.n	8008eb0 <UART_SetConfig+0x218>
 8008e64:	4b45      	ldr	r3, [pc, #276]	@ (8008f7c <UART_SetConfig+0x2e4>)
 8008e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e6a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008e6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e70:	d016      	beq.n	8008ea0 <UART_SetConfig+0x208>
 8008e72:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e74:	d818      	bhi.n	8008ea8 <UART_SetConfig+0x210>
 8008e76:	2b80      	cmp	r3, #128	@ 0x80
 8008e78:	d00a      	beq.n	8008e90 <UART_SetConfig+0x1f8>
 8008e7a:	2b80      	cmp	r3, #128	@ 0x80
 8008e7c:	d814      	bhi.n	8008ea8 <UART_SetConfig+0x210>
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d002      	beq.n	8008e88 <UART_SetConfig+0x1f0>
 8008e82:	2b40      	cmp	r3, #64	@ 0x40
 8008e84:	d008      	beq.n	8008e98 <UART_SetConfig+0x200>
 8008e86:	e00f      	b.n	8008ea8 <UART_SetConfig+0x210>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e8e:	e082      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008e90:	2302      	movs	r3, #2
 8008e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e96:	e07e      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008e98:	2304      	movs	r3, #4
 8008e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e9e:	e07a      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008ea0:	2308      	movs	r3, #8
 8008ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ea6:	e076      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008ea8:	2310      	movs	r3, #16
 8008eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eae:	e072      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a35      	ldr	r2, [pc, #212]	@ (8008f8c <UART_SetConfig+0x2f4>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d12a      	bne.n	8008f10 <UART_SetConfig+0x278>
 8008eba:	4b30      	ldr	r3, [pc, #192]	@ (8008f7c <UART_SetConfig+0x2e4>)
 8008ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ec0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ec4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ec8:	d01a      	beq.n	8008f00 <UART_SetConfig+0x268>
 8008eca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ece:	d81b      	bhi.n	8008f08 <UART_SetConfig+0x270>
 8008ed0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ed4:	d00c      	beq.n	8008ef0 <UART_SetConfig+0x258>
 8008ed6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008eda:	d815      	bhi.n	8008f08 <UART_SetConfig+0x270>
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d003      	beq.n	8008ee8 <UART_SetConfig+0x250>
 8008ee0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ee4:	d008      	beq.n	8008ef8 <UART_SetConfig+0x260>
 8008ee6:	e00f      	b.n	8008f08 <UART_SetConfig+0x270>
 8008ee8:	2300      	movs	r3, #0
 8008eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eee:	e052      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008ef0:	2302      	movs	r3, #2
 8008ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ef6:	e04e      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008ef8:	2304      	movs	r3, #4
 8008efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008efe:	e04a      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008f00:	2308      	movs	r3, #8
 8008f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f06:	e046      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008f08:	2310      	movs	r3, #16
 8008f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f0e:	e042      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a17      	ldr	r2, [pc, #92]	@ (8008f74 <UART_SetConfig+0x2dc>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d13a      	bne.n	8008f90 <UART_SetConfig+0x2f8>
 8008f1a:	4b18      	ldr	r3, [pc, #96]	@ (8008f7c <UART_SetConfig+0x2e4>)
 8008f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008f24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f28:	d01a      	beq.n	8008f60 <UART_SetConfig+0x2c8>
 8008f2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f2e:	d81b      	bhi.n	8008f68 <UART_SetConfig+0x2d0>
 8008f30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f34:	d00c      	beq.n	8008f50 <UART_SetConfig+0x2b8>
 8008f36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f3a:	d815      	bhi.n	8008f68 <UART_SetConfig+0x2d0>
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d003      	beq.n	8008f48 <UART_SetConfig+0x2b0>
 8008f40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f44:	d008      	beq.n	8008f58 <UART_SetConfig+0x2c0>
 8008f46:	e00f      	b.n	8008f68 <UART_SetConfig+0x2d0>
 8008f48:	2300      	movs	r3, #0
 8008f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f4e:	e022      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008f50:	2302      	movs	r3, #2
 8008f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f56:	e01e      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008f58:	2304      	movs	r3, #4
 8008f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f5e:	e01a      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008f60:	2308      	movs	r3, #8
 8008f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f66:	e016      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008f68:	2310      	movs	r3, #16
 8008f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f6e:	e012      	b.n	8008f96 <UART_SetConfig+0x2fe>
 8008f70:	cfff69f3 	.word	0xcfff69f3
 8008f74:	40008000 	.word	0x40008000
 8008f78:	40013800 	.word	0x40013800
 8008f7c:	40021000 	.word	0x40021000
 8008f80:	40004400 	.word	0x40004400
 8008f84:	40004800 	.word	0x40004800
 8008f88:	40004c00 	.word	0x40004c00
 8008f8c:	40005000 	.word	0x40005000
 8008f90:	2310      	movs	r3, #16
 8008f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4aae      	ldr	r2, [pc, #696]	@ (8009254 <UART_SetConfig+0x5bc>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	f040 8097 	bne.w	80090d0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008fa2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008fa6:	2b08      	cmp	r3, #8
 8008fa8:	d823      	bhi.n	8008ff2 <UART_SetConfig+0x35a>
 8008faa:	a201      	add	r2, pc, #4	@ (adr r2, 8008fb0 <UART_SetConfig+0x318>)
 8008fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb0:	08008fd5 	.word	0x08008fd5
 8008fb4:	08008ff3 	.word	0x08008ff3
 8008fb8:	08008fdd 	.word	0x08008fdd
 8008fbc:	08008ff3 	.word	0x08008ff3
 8008fc0:	08008fe3 	.word	0x08008fe3
 8008fc4:	08008ff3 	.word	0x08008ff3
 8008fc8:	08008ff3 	.word	0x08008ff3
 8008fcc:	08008ff3 	.word	0x08008ff3
 8008fd0:	08008feb 	.word	0x08008feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fd4:	f7fc fcee 	bl	80059b4 <HAL_RCC_GetPCLK1Freq>
 8008fd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008fda:	e010      	b.n	8008ffe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fdc:	4b9e      	ldr	r3, [pc, #632]	@ (8009258 <UART_SetConfig+0x5c0>)
 8008fde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008fe0:	e00d      	b.n	8008ffe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fe2:	f7fc fc79 	bl	80058d8 <HAL_RCC_GetSysClockFreq>
 8008fe6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008fe8:	e009      	b.n	8008ffe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ff0:	e005      	b.n	8008ffe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008ffc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009000:	2b00      	cmp	r3, #0
 8009002:	f000 8130 	beq.w	8009266 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800900a:	4a94      	ldr	r2, [pc, #592]	@ (800925c <UART_SetConfig+0x5c4>)
 800900c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009010:	461a      	mov	r2, r3
 8009012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009014:	fbb3 f3f2 	udiv	r3, r3, r2
 8009018:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	685a      	ldr	r2, [r3, #4]
 800901e:	4613      	mov	r3, r2
 8009020:	005b      	lsls	r3, r3, #1
 8009022:	4413      	add	r3, r2
 8009024:	69ba      	ldr	r2, [r7, #24]
 8009026:	429a      	cmp	r2, r3
 8009028:	d305      	bcc.n	8009036 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009030:	69ba      	ldr	r2, [r7, #24]
 8009032:	429a      	cmp	r2, r3
 8009034:	d903      	bls.n	800903e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800903c:	e113      	b.n	8009266 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800903e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009040:	2200      	movs	r2, #0
 8009042:	60bb      	str	r3, [r7, #8]
 8009044:	60fa      	str	r2, [r7, #12]
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800904a:	4a84      	ldr	r2, [pc, #528]	@ (800925c <UART_SetConfig+0x5c4>)
 800904c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009050:	b29b      	uxth	r3, r3
 8009052:	2200      	movs	r2, #0
 8009054:	603b      	str	r3, [r7, #0]
 8009056:	607a      	str	r2, [r7, #4]
 8009058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800905c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009060:	f7f7 f946 	bl	80002f0 <__aeabi_uldivmod>
 8009064:	4602      	mov	r2, r0
 8009066:	460b      	mov	r3, r1
 8009068:	4610      	mov	r0, r2
 800906a:	4619      	mov	r1, r3
 800906c:	f04f 0200 	mov.w	r2, #0
 8009070:	f04f 0300 	mov.w	r3, #0
 8009074:	020b      	lsls	r3, r1, #8
 8009076:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800907a:	0202      	lsls	r2, r0, #8
 800907c:	6979      	ldr	r1, [r7, #20]
 800907e:	6849      	ldr	r1, [r1, #4]
 8009080:	0849      	lsrs	r1, r1, #1
 8009082:	2000      	movs	r0, #0
 8009084:	460c      	mov	r4, r1
 8009086:	4605      	mov	r5, r0
 8009088:	eb12 0804 	adds.w	r8, r2, r4
 800908c:	eb43 0905 	adc.w	r9, r3, r5
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	469a      	mov	sl, r3
 8009098:	4693      	mov	fp, r2
 800909a:	4652      	mov	r2, sl
 800909c:	465b      	mov	r3, fp
 800909e:	4640      	mov	r0, r8
 80090a0:	4649      	mov	r1, r9
 80090a2:	f7f7 f925 	bl	80002f0 <__aeabi_uldivmod>
 80090a6:	4602      	mov	r2, r0
 80090a8:	460b      	mov	r3, r1
 80090aa:	4613      	mov	r3, r2
 80090ac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80090ae:	6a3b      	ldr	r3, [r7, #32]
 80090b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090b4:	d308      	bcc.n	80090c8 <UART_SetConfig+0x430>
 80090b6:	6a3b      	ldr	r3, [r7, #32]
 80090b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090bc:	d204      	bcs.n	80090c8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	6a3a      	ldr	r2, [r7, #32]
 80090c4:	60da      	str	r2, [r3, #12]
 80090c6:	e0ce      	b.n	8009266 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80090ce:	e0ca      	b.n	8009266 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	69db      	ldr	r3, [r3, #28]
 80090d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090d8:	d166      	bne.n	80091a8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80090da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80090de:	2b08      	cmp	r3, #8
 80090e0:	d827      	bhi.n	8009132 <UART_SetConfig+0x49a>
 80090e2:	a201      	add	r2, pc, #4	@ (adr r2, 80090e8 <UART_SetConfig+0x450>)
 80090e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e8:	0800910d 	.word	0x0800910d
 80090ec:	08009115 	.word	0x08009115
 80090f0:	0800911d 	.word	0x0800911d
 80090f4:	08009133 	.word	0x08009133
 80090f8:	08009123 	.word	0x08009123
 80090fc:	08009133 	.word	0x08009133
 8009100:	08009133 	.word	0x08009133
 8009104:	08009133 	.word	0x08009133
 8009108:	0800912b 	.word	0x0800912b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800910c:	f7fc fc52 	bl	80059b4 <HAL_RCC_GetPCLK1Freq>
 8009110:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009112:	e014      	b.n	800913e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009114:	f7fc fc64 	bl	80059e0 <HAL_RCC_GetPCLK2Freq>
 8009118:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800911a:	e010      	b.n	800913e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800911c:	4b4e      	ldr	r3, [pc, #312]	@ (8009258 <UART_SetConfig+0x5c0>)
 800911e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009120:	e00d      	b.n	800913e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009122:	f7fc fbd9 	bl	80058d8 <HAL_RCC_GetSysClockFreq>
 8009126:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009128:	e009      	b.n	800913e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800912a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800912e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009130:	e005      	b.n	800913e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009132:	2300      	movs	r3, #0
 8009134:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800913c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800913e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009140:	2b00      	cmp	r3, #0
 8009142:	f000 8090 	beq.w	8009266 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800914a:	4a44      	ldr	r2, [pc, #272]	@ (800925c <UART_SetConfig+0x5c4>)
 800914c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009150:	461a      	mov	r2, r3
 8009152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009154:	fbb3 f3f2 	udiv	r3, r3, r2
 8009158:	005a      	lsls	r2, r3, #1
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	085b      	lsrs	r3, r3, #1
 8009160:	441a      	add	r2, r3
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	fbb2 f3f3 	udiv	r3, r2, r3
 800916a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800916c:	6a3b      	ldr	r3, [r7, #32]
 800916e:	2b0f      	cmp	r3, #15
 8009170:	d916      	bls.n	80091a0 <UART_SetConfig+0x508>
 8009172:	6a3b      	ldr	r3, [r7, #32]
 8009174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009178:	d212      	bcs.n	80091a0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800917a:	6a3b      	ldr	r3, [r7, #32]
 800917c:	b29b      	uxth	r3, r3
 800917e:	f023 030f 	bic.w	r3, r3, #15
 8009182:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009184:	6a3b      	ldr	r3, [r7, #32]
 8009186:	085b      	lsrs	r3, r3, #1
 8009188:	b29b      	uxth	r3, r3
 800918a:	f003 0307 	and.w	r3, r3, #7
 800918e:	b29a      	uxth	r2, r3
 8009190:	8bfb      	ldrh	r3, [r7, #30]
 8009192:	4313      	orrs	r3, r2
 8009194:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	8bfa      	ldrh	r2, [r7, #30]
 800919c:	60da      	str	r2, [r3, #12]
 800919e:	e062      	b.n	8009266 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80091a6:	e05e      	b.n	8009266 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80091a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80091ac:	2b08      	cmp	r3, #8
 80091ae:	d828      	bhi.n	8009202 <UART_SetConfig+0x56a>
 80091b0:	a201      	add	r2, pc, #4	@ (adr r2, 80091b8 <UART_SetConfig+0x520>)
 80091b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b6:	bf00      	nop
 80091b8:	080091dd 	.word	0x080091dd
 80091bc:	080091e5 	.word	0x080091e5
 80091c0:	080091ed 	.word	0x080091ed
 80091c4:	08009203 	.word	0x08009203
 80091c8:	080091f3 	.word	0x080091f3
 80091cc:	08009203 	.word	0x08009203
 80091d0:	08009203 	.word	0x08009203
 80091d4:	08009203 	.word	0x08009203
 80091d8:	080091fb 	.word	0x080091fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091dc:	f7fc fbea 	bl	80059b4 <HAL_RCC_GetPCLK1Freq>
 80091e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091e2:	e014      	b.n	800920e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091e4:	f7fc fbfc 	bl	80059e0 <HAL_RCC_GetPCLK2Freq>
 80091e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091ea:	e010      	b.n	800920e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091ec:	4b1a      	ldr	r3, [pc, #104]	@ (8009258 <UART_SetConfig+0x5c0>)
 80091ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091f0:	e00d      	b.n	800920e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091f2:	f7fc fb71 	bl	80058d8 <HAL_RCC_GetSysClockFreq>
 80091f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091f8:	e009      	b.n	800920e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009200:	e005      	b.n	800920e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009202:	2300      	movs	r3, #0
 8009204:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800920c:	bf00      	nop
    }

    if (pclk != 0U)
 800920e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009210:	2b00      	cmp	r3, #0
 8009212:	d028      	beq.n	8009266 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009218:	4a10      	ldr	r2, [pc, #64]	@ (800925c <UART_SetConfig+0x5c4>)
 800921a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800921e:	461a      	mov	r2, r3
 8009220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009222:	fbb3 f2f2 	udiv	r2, r3, r2
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	085b      	lsrs	r3, r3, #1
 800922c:	441a      	add	r2, r3
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	fbb2 f3f3 	udiv	r3, r2, r3
 8009236:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009238:	6a3b      	ldr	r3, [r7, #32]
 800923a:	2b0f      	cmp	r3, #15
 800923c:	d910      	bls.n	8009260 <UART_SetConfig+0x5c8>
 800923e:	6a3b      	ldr	r3, [r7, #32]
 8009240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009244:	d20c      	bcs.n	8009260 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009246:	6a3b      	ldr	r3, [r7, #32]
 8009248:	b29a      	uxth	r2, r3
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	60da      	str	r2, [r3, #12]
 8009250:	e009      	b.n	8009266 <UART_SetConfig+0x5ce>
 8009252:	bf00      	nop
 8009254:	40008000 	.word	0x40008000
 8009258:	00f42400 	.word	0x00f42400
 800925c:	0800bbc8 	.word	0x0800bbc8
      }
      else
      {
        ret = HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	2201      	movs	r2, #1
 800926a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	2201      	movs	r2, #1
 8009272:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2200      	movs	r2, #0
 800927a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	2200      	movs	r2, #0
 8009280:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009282:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009286:	4618      	mov	r0, r3
 8009288:	3730      	adds	r7, #48	@ 0x30
 800928a:	46bd      	mov	sp, r7
 800928c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009290 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800929c:	f003 0308 	and.w	r3, r3, #8
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00a      	beq.n	80092ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	430a      	orrs	r2, r1
 80092b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092be:	f003 0301 	and.w	r3, r3, #1
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00a      	beq.n	80092dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	430a      	orrs	r2, r1
 80092da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e0:	f003 0302 	and.w	r3, r3, #2
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00a      	beq.n	80092fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	430a      	orrs	r2, r1
 80092fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009302:	f003 0304 	and.w	r3, r3, #4
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00a      	beq.n	8009320 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	430a      	orrs	r2, r1
 800931e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009324:	f003 0310 	and.w	r3, r3, #16
 8009328:	2b00      	cmp	r3, #0
 800932a:	d00a      	beq.n	8009342 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	430a      	orrs	r2, r1
 8009340:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009346:	f003 0320 	and.w	r3, r3, #32
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00a      	beq.n	8009364 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	430a      	orrs	r2, r1
 8009362:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800936c:	2b00      	cmp	r3, #0
 800936e:	d01a      	beq.n	80093a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	430a      	orrs	r2, r1
 8009384:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800938a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800938e:	d10a      	bne.n	80093a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	430a      	orrs	r2, r1
 80093a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00a      	beq.n	80093c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	430a      	orrs	r2, r1
 80093c6:	605a      	str	r2, [r3, #4]
  }
}
 80093c8:	bf00      	nop
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b098      	sub	sp, #96	@ 0x60
 80093d8:	af02      	add	r7, sp, #8
 80093da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093e4:	f7f8 ff0e 	bl	8002204 <HAL_GetTick>
 80093e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 0308 	and.w	r3, r3, #8
 80093f4:	2b08      	cmp	r3, #8
 80093f6:	d12f      	bne.n	8009458 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009400:	2200      	movs	r2, #0
 8009402:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f88e 	bl	8009528 <UART_WaitOnFlagUntilTimeout>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d022      	beq.n	8009458 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800941a:	e853 3f00 	ldrex	r3, [r3]
 800941e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009422:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009426:	653b      	str	r3, [r7, #80]	@ 0x50
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	461a      	mov	r2, r3
 800942e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009430:	647b      	str	r3, [r7, #68]	@ 0x44
 8009432:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009434:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009436:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009438:	e841 2300 	strex	r3, r2, [r1]
 800943c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800943e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1e6      	bne.n	8009412 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2220      	movs	r2, #32
 8009448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	e063      	b.n	8009520 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 0304 	and.w	r3, r3, #4
 8009462:	2b04      	cmp	r3, #4
 8009464:	d149      	bne.n	80094fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009466:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800946a:	9300      	str	r3, [sp, #0]
 800946c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800946e:	2200      	movs	r2, #0
 8009470:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 f857 	bl	8009528 <UART_WaitOnFlagUntilTimeout>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d03c      	beq.n	80094fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009488:	e853 3f00 	ldrex	r3, [r3]
 800948c:	623b      	str	r3, [r7, #32]
   return(result);
 800948e:	6a3b      	ldr	r3, [r7, #32]
 8009490:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009494:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	461a      	mov	r2, r3
 800949c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800949e:	633b      	str	r3, [r7, #48]	@ 0x30
 80094a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094a6:	e841 2300 	strex	r3, r2, [r1]
 80094aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1e6      	bne.n	8009480 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	3308      	adds	r3, #8
 80094b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	e853 3f00 	ldrex	r3, [r3]
 80094c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f023 0301 	bic.w	r3, r3, #1
 80094c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	3308      	adds	r3, #8
 80094d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094d2:	61fa      	str	r2, [r7, #28]
 80094d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d6:	69b9      	ldr	r1, [r7, #24]
 80094d8:	69fa      	ldr	r2, [r7, #28]
 80094da:	e841 2300 	strex	r3, r2, [r1]
 80094de:	617b      	str	r3, [r7, #20]
   return(result);
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1e5      	bne.n	80094b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2220      	movs	r2, #32
 80094ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094f6:	2303      	movs	r3, #3
 80094f8:	e012      	b.n	8009520 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2220      	movs	r2, #32
 80094fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2220      	movs	r2, #32
 8009506:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	3758      	adds	r7, #88	@ 0x58
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	603b      	str	r3, [r7, #0]
 8009534:	4613      	mov	r3, r2
 8009536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009538:	e04f      	b.n	80095da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009540:	d04b      	beq.n	80095da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009542:	f7f8 fe5f 	bl	8002204 <HAL_GetTick>
 8009546:	4602      	mov	r2, r0
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	1ad3      	subs	r3, r2, r3
 800954c:	69ba      	ldr	r2, [r7, #24]
 800954e:	429a      	cmp	r2, r3
 8009550:	d302      	bcc.n	8009558 <UART_WaitOnFlagUntilTimeout+0x30>
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d101      	bne.n	800955c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009558:	2303      	movs	r3, #3
 800955a:	e04e      	b.n	80095fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 0304 	and.w	r3, r3, #4
 8009566:	2b00      	cmp	r3, #0
 8009568:	d037      	beq.n	80095da <UART_WaitOnFlagUntilTimeout+0xb2>
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	2b80      	cmp	r3, #128	@ 0x80
 800956e:	d034      	beq.n	80095da <UART_WaitOnFlagUntilTimeout+0xb2>
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	2b40      	cmp	r3, #64	@ 0x40
 8009574:	d031      	beq.n	80095da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	69db      	ldr	r3, [r3, #28]
 800957c:	f003 0308 	and.w	r3, r3, #8
 8009580:	2b08      	cmp	r3, #8
 8009582:	d110      	bne.n	80095a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2208      	movs	r2, #8
 800958a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 f95b 	bl	8009848 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2208      	movs	r2, #8
 8009596:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e029      	b.n	80095fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	69db      	ldr	r3, [r3, #28]
 80095ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095b4:	d111      	bne.n	80095da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80095be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f000 f941 	bl	8009848 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2220      	movs	r2, #32
 80095ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80095d6:	2303      	movs	r3, #3
 80095d8:	e00f      	b.n	80095fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	69da      	ldr	r2, [r3, #28]
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	4013      	ands	r3, r2
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	bf0c      	ite	eq
 80095ea:	2301      	moveq	r3, #1
 80095ec:	2300      	movne	r3, #0
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	461a      	mov	r2, r3
 80095f2:	79fb      	ldrb	r3, [r7, #7]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d0a0      	beq.n	800953a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
	...

08009604 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009604:	b480      	push	{r7}
 8009606:	b0a3      	sub	sp, #140	@ 0x8c
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	4613      	mov	r3, r2
 8009610:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	88fa      	ldrh	r2, [r7, #6]
 800961c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	88fa      	ldrh	r2, [r7, #6]
 8009624:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009636:	d10e      	bne.n	8009656 <UART_Start_Receive_IT+0x52>
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d105      	bne.n	800964c <UART_Start_Receive_IT+0x48>
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009646:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800964a:	e02d      	b.n	80096a8 <UART_Start_Receive_IT+0xa4>
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	22ff      	movs	r2, #255	@ 0xff
 8009650:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009654:	e028      	b.n	80096a8 <UART_Start_Receive_IT+0xa4>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10d      	bne.n	800967a <UART_Start_Receive_IT+0x76>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d104      	bne.n	8009670 <UART_Start_Receive_IT+0x6c>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	22ff      	movs	r2, #255	@ 0xff
 800966a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800966e:	e01b      	b.n	80096a8 <UART_Start_Receive_IT+0xa4>
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	227f      	movs	r2, #127	@ 0x7f
 8009674:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009678:	e016      	b.n	80096a8 <UART_Start_Receive_IT+0xa4>
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009682:	d10d      	bne.n	80096a0 <UART_Start_Receive_IT+0x9c>
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d104      	bne.n	8009696 <UART_Start_Receive_IT+0x92>
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	227f      	movs	r2, #127	@ 0x7f
 8009690:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009694:	e008      	b.n	80096a8 <UART_Start_Receive_IT+0xa4>
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	223f      	movs	r2, #63	@ 0x3f
 800969a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800969e:	e003      	b.n	80096a8 <UART_Start_Receive_IT+0xa4>
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2222      	movs	r2, #34	@ 0x22
 80096b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	3308      	adds	r3, #8
 80096be:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096c2:	e853 3f00 	ldrex	r3, [r3]
 80096c6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80096c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80096ca:	f043 0301 	orr.w	r3, r3, #1
 80096ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	3308      	adds	r3, #8
 80096d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80096dc:	673a      	str	r2, [r7, #112]	@ 0x70
 80096de:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80096e2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80096e4:	e841 2300 	strex	r3, r2, [r1]
 80096e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80096ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1e3      	bne.n	80096b8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80096f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096f8:	d14f      	bne.n	800979a <UART_Start_Receive_IT+0x196>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009700:	88fa      	ldrh	r2, [r7, #6]
 8009702:	429a      	cmp	r2, r3
 8009704:	d349      	bcc.n	800979a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800970e:	d107      	bne.n	8009720 <UART_Start_Receive_IT+0x11c>
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d103      	bne.n	8009720 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	4a47      	ldr	r2, [pc, #284]	@ (8009838 <UART_Start_Receive_IT+0x234>)
 800971c:	675a      	str	r2, [r3, #116]	@ 0x74
 800971e:	e002      	b.n	8009726 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	4a46      	ldr	r2, [pc, #280]	@ (800983c <UART_Start_Receive_IT+0x238>)
 8009724:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	691b      	ldr	r3, [r3, #16]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d01a      	beq.n	8009764 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009734:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009736:	e853 3f00 	ldrex	r3, [r3]
 800973a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800973c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800973e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009742:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	461a      	mov	r2, r3
 800974c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009750:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009752:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009754:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009756:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009758:	e841 2300 	strex	r3, r2, [r1]
 800975c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800975e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1e4      	bne.n	800972e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3308      	adds	r3, #8
 800976a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800976e:	e853 3f00 	ldrex	r3, [r3]
 8009772:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800977a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3308      	adds	r3, #8
 8009782:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009784:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009786:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009788:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800978a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800978c:	e841 2300 	strex	r3, r2, [r1]
 8009790:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009792:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1e5      	bne.n	8009764 <UART_Start_Receive_IT+0x160>
 8009798:	e046      	b.n	8009828 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097a2:	d107      	bne.n	80097b4 <UART_Start_Receive_IT+0x1b0>
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d103      	bne.n	80097b4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	4a24      	ldr	r2, [pc, #144]	@ (8009840 <UART_Start_Receive_IT+0x23c>)
 80097b0:	675a      	str	r2, [r3, #116]	@ 0x74
 80097b2:	e002      	b.n	80097ba <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	4a23      	ldr	r2, [pc, #140]	@ (8009844 <UART_Start_Receive_IT+0x240>)
 80097b8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d019      	beq.n	80097f6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ca:	e853 3f00 	ldrex	r3, [r3]
 80097ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80097d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	461a      	mov	r2, r3
 80097de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80097e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80097e2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80097e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80097e8:	e841 2300 	strex	r3, r2, [r1]
 80097ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80097ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1e6      	bne.n	80097c2 <UART_Start_Receive_IT+0x1be>
 80097f4:	e018      	b.n	8009828 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	e853 3f00 	ldrex	r3, [r3]
 8009802:	613b      	str	r3, [r7, #16]
   return(result);
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	f043 0320 	orr.w	r3, r3, #32
 800980a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	461a      	mov	r2, r3
 8009812:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009814:	623b      	str	r3, [r7, #32]
 8009816:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009818:	69f9      	ldr	r1, [r7, #28]
 800981a:	6a3a      	ldr	r2, [r7, #32]
 800981c:	e841 2300 	strex	r3, r2, [r1]
 8009820:	61bb      	str	r3, [r7, #24]
   return(result);
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d1e6      	bne.n	80097f6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	378c      	adds	r7, #140	@ 0x8c
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	0800a065 	.word	0x0800a065
 800983c:	08009d01 	.word	0x08009d01
 8009840:	08009b49 	.word	0x08009b49
 8009844:	08009991 	.word	0x08009991

08009848 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009848:	b480      	push	{r7}
 800984a:	b095      	sub	sp, #84	@ 0x54
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009858:	e853 3f00 	ldrex	r3, [r3]
 800985c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800985e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009860:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009864:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	461a      	mov	r2, r3
 800986c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800986e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009870:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009872:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009874:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009876:	e841 2300 	strex	r3, r2, [r1]
 800987a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800987c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1e6      	bne.n	8009850 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	3308      	adds	r3, #8
 8009888:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988a:	6a3b      	ldr	r3, [r7, #32]
 800988c:	e853 3f00 	ldrex	r3, [r3]
 8009890:	61fb      	str	r3, [r7, #28]
   return(result);
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009898:	f023 0301 	bic.w	r3, r3, #1
 800989c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	3308      	adds	r3, #8
 80098a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80098a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098ae:	e841 2300 	strex	r3, r2, [r1]
 80098b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1e3      	bne.n	8009882 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d118      	bne.n	80098f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	e853 3f00 	ldrex	r3, [r3]
 80098ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	f023 0310 	bic.w	r3, r3, #16
 80098d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	461a      	mov	r2, r3
 80098de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098e0:	61bb      	str	r3, [r7, #24]
 80098e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e4:	6979      	ldr	r1, [r7, #20]
 80098e6:	69ba      	ldr	r2, [r7, #24]
 80098e8:	e841 2300 	strex	r3, r2, [r1]
 80098ec:	613b      	str	r3, [r7, #16]
   return(result);
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1e6      	bne.n	80098c2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2220      	movs	r2, #32
 80098f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009908:	bf00      	nop
 800990a:	3754      	adds	r7, #84	@ 0x54
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009920:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2200      	movs	r2, #0
 8009926:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800992a:	68f8      	ldr	r0, [r7, #12]
 800992c:	f7ff f99e 	bl	8008c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009930:	bf00      	nop
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b088      	sub	sp, #32
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	e853 3f00 	ldrex	r3, [r3]
 800994c:	60bb      	str	r3, [r7, #8]
   return(result);
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009954:	61fb      	str	r3, [r7, #28]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	461a      	mov	r2, r3
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	61bb      	str	r3, [r7, #24]
 8009960:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009962:	6979      	ldr	r1, [r7, #20]
 8009964:	69ba      	ldr	r2, [r7, #24]
 8009966:	e841 2300 	strex	r3, r2, [r1]
 800996a:	613b      	str	r3, [r7, #16]
   return(result);
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1e6      	bne.n	8009940 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2220      	movs	r2, #32
 8009976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7ff f969 	bl	8008c58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009986:	bf00      	nop
 8009988:	3720      	adds	r7, #32
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
	...

08009990 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b09c      	sub	sp, #112	@ 0x70
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800999e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099a8:	2b22      	cmp	r3, #34	@ 0x22
 80099aa:	f040 80be 	bne.w	8009b2a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80099b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80099bc:	b2d9      	uxtb	r1, r3
 80099be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80099c2:	b2da      	uxtb	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099c8:	400a      	ands	r2, r1
 80099ca:	b2d2      	uxtb	r2, r2
 80099cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099d2:	1c5a      	adds	r2, r3, #1
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099de:	b29b      	uxth	r3, r3
 80099e0:	3b01      	subs	r3, #1
 80099e2:	b29a      	uxth	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f040 80a1 	bne.w	8009b3a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a00:	e853 3f00 	ldrex	r3, [r3]
 8009a04:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	461a      	mov	r2, r3
 8009a14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a1e:	e841 2300 	strex	r3, r2, [r1]
 8009a22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1e6      	bne.n	80099f8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	3308      	adds	r3, #8
 8009a30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a34:	e853 3f00 	ldrex	r3, [r3]
 8009a38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a3c:	f023 0301 	bic.w	r3, r3, #1
 8009a40:	667b      	str	r3, [r7, #100]	@ 0x64
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	3308      	adds	r3, #8
 8009a48:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009a4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8009a4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a52:	e841 2300 	strex	r3, r2, [r1]
 8009a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1e5      	bne.n	8009a2a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2220      	movs	r2, #32
 8009a62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a33      	ldr	r2, [pc, #204]	@ (8009b44 <UART_RxISR_8BIT+0x1b4>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d01f      	beq.n	8009abc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d018      	beq.n	8009abc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a92:	e853 3f00 	ldrex	r3, [r3]
 8009a96:	623b      	str	r3, [r7, #32]
   return(result);
 8009a98:	6a3b      	ldr	r3, [r7, #32]
 8009a9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009a9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009aa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8009aaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009aae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ab0:	e841 2300 	strex	r3, r2, [r1]
 8009ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1e6      	bne.n	8009a8a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d12e      	bne.n	8009b22 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	e853 3f00 	ldrex	r3, [r3]
 8009ad6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f023 0310 	bic.w	r3, r3, #16
 8009ade:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ae8:	61fb      	str	r3, [r7, #28]
 8009aea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aec:	69b9      	ldr	r1, [r7, #24]
 8009aee:	69fa      	ldr	r2, [r7, #28]
 8009af0:	e841 2300 	strex	r3, r2, [r1]
 8009af4:	617b      	str	r3, [r7, #20]
   return(result);
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1e6      	bne.n	8009aca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	69db      	ldr	r3, [r3, #28]
 8009b02:	f003 0310 	and.w	r3, r3, #16
 8009b06:	2b10      	cmp	r3, #16
 8009b08:	d103      	bne.n	8009b12 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2210      	movs	r2, #16
 8009b10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b18:	4619      	mov	r1, r3
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7ff f8b0 	bl	8008c80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b20:	e00b      	b.n	8009b3a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f7f8 f8e0 	bl	8001ce8 <HAL_UART_RxCpltCallback>
}
 8009b28:	e007      	b.n	8009b3a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	699a      	ldr	r2, [r3, #24]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f042 0208 	orr.w	r2, r2, #8
 8009b38:	619a      	str	r2, [r3, #24]
}
 8009b3a:	bf00      	nop
 8009b3c:	3770      	adds	r7, #112	@ 0x70
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	40008000 	.word	0x40008000

08009b48 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b09c      	sub	sp, #112	@ 0x70
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009b56:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b60:	2b22      	cmp	r3, #34	@ 0x22
 8009b62:	f040 80be 	bne.w	8009ce2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b6c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b74:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009b76:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009b7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009b7e:	4013      	ands	r3, r2
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009b84:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b8a:	1c9a      	adds	r2, r3, #2
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	f040 80a1 	bne.w	8009cf2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bb8:	e853 3f00 	ldrex	r3, [r3]
 8009bbc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009bbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bc4:	667b      	str	r3, [r7, #100]	@ 0x64
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bce:	657b      	str	r3, [r7, #84]	@ 0x54
 8009bd0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009bd4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009bd6:	e841 2300 	strex	r3, r2, [r1]
 8009bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d1e6      	bne.n	8009bb0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	3308      	adds	r3, #8
 8009be8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bec:	e853 3f00 	ldrex	r3, [r3]
 8009bf0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf4:	f023 0301 	bic.w	r3, r3, #1
 8009bf8:	663b      	str	r3, [r7, #96]	@ 0x60
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	3308      	adds	r3, #8
 8009c00:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009c02:	643a      	str	r2, [r7, #64]	@ 0x40
 8009c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c0a:	e841 2300 	strex	r3, r2, [r1]
 8009c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1e5      	bne.n	8009be2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2220      	movs	r2, #32
 8009c1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a33      	ldr	r2, [pc, #204]	@ (8009cfc <UART_RxISR_16BIT+0x1b4>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d01f      	beq.n	8009c74 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d018      	beq.n	8009c74 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c48:	6a3b      	ldr	r3, [r7, #32]
 8009c4a:	e853 3f00 	ldrex	r3, [r3]
 8009c4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009c56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c62:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c68:	e841 2300 	strex	r3, r2, [r1]
 8009c6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1e6      	bne.n	8009c42 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d12e      	bne.n	8009cda <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	e853 3f00 	ldrex	r3, [r3]
 8009c8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	f023 0310 	bic.w	r3, r3, #16
 8009c96:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ca0:	61bb      	str	r3, [r7, #24]
 8009ca2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca4:	6979      	ldr	r1, [r7, #20]
 8009ca6:	69ba      	ldr	r2, [r7, #24]
 8009ca8:	e841 2300 	strex	r3, r2, [r1]
 8009cac:	613b      	str	r3, [r7, #16]
   return(result);
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d1e6      	bne.n	8009c82 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	69db      	ldr	r3, [r3, #28]
 8009cba:	f003 0310 	and.w	r3, r3, #16
 8009cbe:	2b10      	cmp	r3, #16
 8009cc0:	d103      	bne.n	8009cca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2210      	movs	r2, #16
 8009cc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7fe ffd4 	bl	8008c80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009cd8:	e00b      	b.n	8009cf2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f7f8 f804 	bl	8001ce8 <HAL_UART_RxCpltCallback>
}
 8009ce0:	e007      	b.n	8009cf2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	699a      	ldr	r2, [r3, #24]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f042 0208 	orr.w	r2, r2, #8
 8009cf0:	619a      	str	r2, [r3, #24]
}
 8009cf2:	bf00      	nop
 8009cf4:	3770      	adds	r7, #112	@ 0x70
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	40008000 	.word	0x40008000

08009d00 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b0ac      	sub	sp, #176	@ 0xb0
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009d0e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	69db      	ldr	r3, [r3, #28]
 8009d18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d36:	2b22      	cmp	r3, #34	@ 0x22
 8009d38:	f040 8183 	bne.w	800a042 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009d42:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d46:	e126      	b.n	8009f96 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d4e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009d52:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009d56:	b2d9      	uxtb	r1, r3
 8009d58:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009d5c:	b2da      	uxtb	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d62:	400a      	ands	r2, r1
 8009d64:	b2d2      	uxtb	r2, r2
 8009d66:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d6c:	1c5a      	adds	r2, r3, #1
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	b29a      	uxth	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	69db      	ldr	r3, [r3, #28]
 8009d8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009d8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d92:	f003 0307 	and.w	r3, r3, #7
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d053      	beq.n	8009e42 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d9e:	f003 0301 	and.w	r3, r3, #1
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d011      	beq.n	8009dca <UART_RxISR_8BIT_FIFOEN+0xca>
 8009da6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d00b      	beq.n	8009dca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2201      	movs	r2, #1
 8009db8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dc0:	f043 0201 	orr.w	r2, r3, #1
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009dca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009dce:	f003 0302 	and.w	r3, r3, #2
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d011      	beq.n	8009dfa <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009dda:	f003 0301 	and.w	r3, r3, #1
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00b      	beq.n	8009dfa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2202      	movs	r2, #2
 8009de8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009df0:	f043 0204 	orr.w	r2, r3, #4
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009dfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009dfe:	f003 0304 	and.w	r3, r3, #4
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d011      	beq.n	8009e2a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009e06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009e0a:	f003 0301 	and.w	r3, r3, #1
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00b      	beq.n	8009e2a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2204      	movs	r2, #4
 8009e18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e20:	f043 0202 	orr.w	r2, r3, #2
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d006      	beq.n	8009e42 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f7fe ff19 	bl	8008c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	f040 80a3 	bne.w	8009f96 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e58:	e853 3f00 	ldrex	r3, [r3]
 8009e5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009e5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e72:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009e74:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e76:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009e78:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009e7a:	e841 2300 	strex	r3, r2, [r1]
 8009e7e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009e80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d1e4      	bne.n	8009e50 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	3308      	adds	r3, #8
 8009e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e90:	e853 3f00 	ldrex	r3, [r3]
 8009e94:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009e96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e9c:	f023 0301 	bic.w	r3, r3, #1
 8009ea0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	3308      	adds	r3, #8
 8009eaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009eae:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009eb0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009eb4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009eb6:	e841 2300 	strex	r3, r2, [r1]
 8009eba:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009ebc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d1e1      	bne.n	8009e86 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2220      	movs	r2, #32
 8009ec6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a60      	ldr	r2, [pc, #384]	@ (800a05c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d021      	beq.n	8009f24 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d01a      	beq.n	8009f24 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ef6:	e853 3f00 	ldrex	r3, [r3]
 8009efa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009efc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009efe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009f02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009f10:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f12:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f14:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009f16:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009f18:	e841 2300 	strex	r3, r2, [r1]
 8009f1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009f1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d1e4      	bne.n	8009eee <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d130      	bne.n	8009f8e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f3a:	e853 3f00 	ldrex	r3, [r3]
 8009f3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f42:	f023 0310 	bic.w	r3, r3, #16
 8009f46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f54:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f56:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f5c:	e841 2300 	strex	r3, r2, [r1]
 8009f60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d1e4      	bne.n	8009f32 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	69db      	ldr	r3, [r3, #28]
 8009f6e:	f003 0310 	and.w	r3, r3, #16
 8009f72:	2b10      	cmp	r3, #16
 8009f74:	d103      	bne.n	8009f7e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2210      	movs	r2, #16
 8009f7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f84:	4619      	mov	r1, r3
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f7fe fe7a 	bl	8008c80 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009f8c:	e00e      	b.n	8009fac <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f7f7 feaa 	bl	8001ce8 <HAL_UART_RxCpltCallback>
        break;
 8009f94:	e00a      	b.n	8009fac <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f96:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d006      	beq.n	8009fac <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8009f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fa2:	f003 0320 	and.w	r3, r3, #32
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	f47f aece 	bne.w	8009d48 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009fb2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009fb6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d049      	beq.n	800a052 <UART_RxISR_8BIT_FIFOEN+0x352>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009fc4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d242      	bcs.n	800a052 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	3308      	adds	r3, #8
 8009fd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd4:	6a3b      	ldr	r3, [r7, #32]
 8009fd6:	e853 3f00 	ldrex	r3, [r3]
 8009fda:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009fe2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	3308      	adds	r3, #8
 8009fec:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009ff0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ff6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ff8:	e841 2300 	strex	r3, r2, [r1]
 8009ffc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a000:	2b00      	cmp	r3, #0
 800a002:	d1e3      	bne.n	8009fcc <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a16      	ldr	r2, [pc, #88]	@ (800a060 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800a008:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	e853 3f00 	ldrex	r3, [r3]
 800a016:	60bb      	str	r3, [r7, #8]
   return(result);
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	f043 0320 	orr.w	r3, r3, #32
 800a01e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	461a      	mov	r2, r3
 800a028:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a02c:	61bb      	str	r3, [r7, #24]
 800a02e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a030:	6979      	ldr	r1, [r7, #20]
 800a032:	69ba      	ldr	r2, [r7, #24]
 800a034:	e841 2300 	strex	r3, r2, [r1]
 800a038:	613b      	str	r3, [r7, #16]
   return(result);
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d1e4      	bne.n	800a00a <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a040:	e007      	b.n	800a052 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	699a      	ldr	r2, [r3, #24]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f042 0208 	orr.w	r2, r2, #8
 800a050:	619a      	str	r2, [r3, #24]
}
 800a052:	bf00      	nop
 800a054:	37b0      	adds	r7, #176	@ 0xb0
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	40008000 	.word	0x40008000
 800a060:	08009991 	.word	0x08009991

0800a064 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b0ae      	sub	sp, #184	@ 0xb8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a072:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	69db      	ldr	r3, [r3, #28]
 800a07c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a09a:	2b22      	cmp	r3, #34	@ 0x22
 800a09c:	f040 8187 	bne.w	800a3ae <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a0a6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a0aa:	e12a      	b.n	800a302 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0b2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a0be:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800a0c2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800a0c6:	4013      	ands	r3, r2
 800a0c8:	b29a      	uxth	r2, r3
 800a0ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a0ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0d4:	1c9a      	adds	r2, r3, #2
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	b29a      	uxth	r2, r3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	69db      	ldr	r3, [r3, #28]
 800a0f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a0f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a0fa:	f003 0307 	and.w	r3, r3, #7
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d053      	beq.n	800a1aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a102:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a106:	f003 0301 	and.w	r3, r3, #1
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d011      	beq.n	800a132 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a10e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00b      	beq.n	800a132 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2201      	movs	r2, #1
 800a120:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a128:	f043 0201 	orr.w	r2, r3, #1
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a132:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a136:	f003 0302 	and.w	r3, r3, #2
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d011      	beq.n	800a162 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a13e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a142:	f003 0301 	and.w	r3, r3, #1
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00b      	beq.n	800a162 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2202      	movs	r2, #2
 800a150:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a158:	f043 0204 	orr.w	r2, r3, #4
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a162:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a166:	f003 0304 	and.w	r3, r3, #4
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d011      	beq.n	800a192 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a16e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00b      	beq.n	800a192 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2204      	movs	r2, #4
 800a180:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a188:	f043 0202 	orr.w	r2, r3, #2
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d006      	beq.n	800a1aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f7fe fd65 	bl	8008c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	f040 80a5 	bne.w	800a302 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a1c0:	e853 3f00 	ldrex	r3, [r3]
 800a1c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a1c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a1c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a1cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a1da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a1de:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a1e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a1e6:	e841 2300 	strex	r3, r2, [r1]
 800a1ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a1ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1e2      	bne.n	800a1b8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	3308      	adds	r3, #8
 800a1f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a1fc:	e853 3f00 	ldrex	r3, [r3]
 800a200:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a202:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a204:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a208:	f023 0301 	bic.w	r3, r3, #1
 800a20c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	3308      	adds	r3, #8
 800a216:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a21a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a21c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a220:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a222:	e841 2300 	strex	r3, r2, [r1]
 800a226:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a228:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1e1      	bne.n	800a1f2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2220      	movs	r2, #32
 800a232:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a60      	ldr	r2, [pc, #384]	@ (800a3c8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d021      	beq.n	800a290 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a256:	2b00      	cmp	r3, #0
 800a258:	d01a      	beq.n	800a290 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a262:	e853 3f00 	ldrex	r3, [r3]
 800a266:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a268:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a26a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a26e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	461a      	mov	r2, r3
 800a278:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a27c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a27e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a280:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a282:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a284:	e841 2300 	strex	r3, r2, [r1]
 800a288:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a28a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d1e4      	bne.n	800a25a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a294:	2b01      	cmp	r3, #1
 800a296:	d130      	bne.n	800a2fa <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a6:	e853 3f00 	ldrex	r3, [r3]
 800a2aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a2ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2ae:	f023 0310 	bic.w	r3, r3, #16
 800a2b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a2c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a2c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2c8:	e841 2300 	strex	r3, r2, [r1]
 800a2cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a2ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d1e4      	bne.n	800a29e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	69db      	ldr	r3, [r3, #28]
 800a2da:	f003 0310 	and.w	r3, r3, #16
 800a2de:	2b10      	cmp	r3, #16
 800a2e0:	d103      	bne.n	800a2ea <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2210      	movs	r2, #16
 800a2e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f7fe fcc4 	bl	8008c80 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a2f8:	e00e      	b.n	800a318 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f7f7 fcf4 	bl	8001ce8 <HAL_UART_RxCpltCallback>
        break;
 800a300:	e00a      	b.n	800a318 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a302:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a306:	2b00      	cmp	r3, #0
 800a308:	d006      	beq.n	800a318 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800a30a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a30e:	f003 0320 	and.w	r3, r3, #32
 800a312:	2b00      	cmp	r3, #0
 800a314:	f47f aeca 	bne.w	800a0ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a31e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a322:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a326:	2b00      	cmp	r3, #0
 800a328:	d049      	beq.n	800a3be <UART_RxISR_16BIT_FIFOEN+0x35a>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a330:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a334:	429a      	cmp	r2, r3
 800a336:	d242      	bcs.n	800a3be <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	3308      	adds	r3, #8
 800a33e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a342:	e853 3f00 	ldrex	r3, [r3]
 800a346:	623b      	str	r3, [r7, #32]
   return(result);
 800a348:	6a3b      	ldr	r3, [r7, #32]
 800a34a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a34e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	3308      	adds	r3, #8
 800a358:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a35c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a35e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a360:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a362:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a364:	e841 2300 	strex	r3, r2, [r1]
 800a368:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a36a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d1e3      	bne.n	800a338 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a16      	ldr	r2, [pc, #88]	@ (800a3cc <UART_RxISR_16BIT_FIFOEN+0x368>)
 800a374:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	e853 3f00 	ldrex	r3, [r3]
 800a382:	60fb      	str	r3, [r7, #12]
   return(result);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f043 0320 	orr.w	r3, r3, #32
 800a38a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	461a      	mov	r2, r3
 800a394:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a398:	61fb      	str	r3, [r7, #28]
 800a39a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a39c:	69b9      	ldr	r1, [r7, #24]
 800a39e:	69fa      	ldr	r2, [r7, #28]
 800a3a0:	e841 2300 	strex	r3, r2, [r1]
 800a3a4:	617b      	str	r3, [r7, #20]
   return(result);
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1e4      	bne.n	800a376 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a3ac:	e007      	b.n	800a3be <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	699a      	ldr	r2, [r3, #24]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f042 0208 	orr.w	r2, r2, #8
 800a3bc:	619a      	str	r2, [r3, #24]
}
 800a3be:	bf00      	nop
 800a3c0:	37b8      	adds	r7, #184	@ 0xb8
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	40008000 	.word	0x40008000
 800a3cc:	08009b49 	.word	0x08009b49

0800a3d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a3d8:	bf00      	nop
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a3ec:	bf00      	nop
 800a3ee:	370c      	adds	r7, #12
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b085      	sub	sp, #20
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d101      	bne.n	800a422 <HAL_UARTEx_DisableFifoMode+0x16>
 800a41e:	2302      	movs	r3, #2
 800a420:	e027      	b.n	800a472 <HAL_UARTEx_DisableFifoMode+0x66>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2224      	movs	r2, #36	@ 0x24
 800a42e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f022 0201 	bic.w	r2, r2, #1
 800a448:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a450:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2220      	movs	r2, #32
 800a464:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3714      	adds	r7, #20
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b084      	sub	sp, #16
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d101      	bne.n	800a496 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a492:	2302      	movs	r3, #2
 800a494:	e02d      	b.n	800a4f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2201      	movs	r2, #1
 800a49a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2224      	movs	r2, #36	@ 0x24
 800a4a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f022 0201 	bic.w	r2, r2, #1
 800a4bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	683a      	ldr	r2, [r7, #0]
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 f850 	bl	800a578 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2220      	movs	r2, #32
 800a4e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b084      	sub	sp, #16
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d101      	bne.n	800a512 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a50e:	2302      	movs	r3, #2
 800a510:	e02d      	b.n	800a56e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2201      	movs	r2, #1
 800a516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2224      	movs	r2, #36	@ 0x24
 800a51e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f022 0201 	bic.w	r2, r2, #1
 800a538:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	683a      	ldr	r2, [r7, #0]
 800a54a:	430a      	orrs	r2, r1
 800a54c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 f812 	bl	800a578 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68fa      	ldr	r2, [r7, #12]
 800a55a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2220      	movs	r2, #32
 800a560:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
	...

0800a578 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a584:	2b00      	cmp	r3, #0
 800a586:	d108      	bne.n	800a59a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a598:	e031      	b.n	800a5fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a59a:	2308      	movs	r3, #8
 800a59c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a59e:	2308      	movs	r3, #8
 800a5a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	689b      	ldr	r3, [r3, #8]
 800a5a8:	0e5b      	lsrs	r3, r3, #25
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	f003 0307 	and.w	r3, r3, #7
 800a5b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	0f5b      	lsrs	r3, r3, #29
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	f003 0307 	and.w	r3, r3, #7
 800a5c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5c2:	7bbb      	ldrb	r3, [r7, #14]
 800a5c4:	7b3a      	ldrb	r2, [r7, #12]
 800a5c6:	4911      	ldr	r1, [pc, #68]	@ (800a60c <UARTEx_SetNbDataToProcess+0x94>)
 800a5c8:	5c8a      	ldrb	r2, [r1, r2]
 800a5ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a5ce:	7b3a      	ldrb	r2, [r7, #12]
 800a5d0:	490f      	ldr	r1, [pc, #60]	@ (800a610 <UARTEx_SetNbDataToProcess+0x98>)
 800a5d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5e0:	7bfb      	ldrb	r3, [r7, #15]
 800a5e2:	7b7a      	ldrb	r2, [r7, #13]
 800a5e4:	4909      	ldr	r1, [pc, #36]	@ (800a60c <UARTEx_SetNbDataToProcess+0x94>)
 800a5e6:	5c8a      	ldrb	r2, [r1, r2]
 800a5e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a5ec:	7b7a      	ldrb	r2, [r7, #13]
 800a5ee:	4908      	ldr	r1, [pc, #32]	@ (800a610 <UARTEx_SetNbDataToProcess+0x98>)
 800a5f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5f6:	b29a      	uxth	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a5fe:	bf00      	nop
 800a600:	3714      	adds	r7, #20
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr
 800a60a:	bf00      	nop
 800a60c:	0800bbe0 	.word	0x0800bbe0
 800a610:	0800bbe8 	.word	0x0800bbe8

0800a614 <CUSTOM_HAL_TIM_PeriodElapsedCallBack>:

extern int isADC;
extern uint32_t pulseGoal_1;
extern uint32_t pulseGoal_2;

void CUSTOM_HAL_TIM_PeriodElapsedCallBack(TIM_HandleTypeDef* htim){
 800a614:	b480      	push	{r7}
 800a616:	b087      	sub	sp, #28
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]

	if(htim->Instance== TIM2){ // Timer for smooth transition
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a624:	d133      	bne.n	800a68e <CUSTOM_HAL_TIM_PeriodElapsedCallBack+0x7a>
		uint32_t pulse_1 = htim1.Instance->CCR1;
 800a626:	4b1d      	ldr	r3, [pc, #116]	@ (800a69c <CUSTOM_HAL_TIM_PeriodElapsedCallBack+0x88>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a62c:	617b      	str	r3, [r7, #20]
		uint32_t pulse_2 = htim1.Instance->CCR2;
 800a62e:	4b1b      	ldr	r3, [pc, #108]	@ (800a69c <CUSTOM_HAL_TIM_PeriodElapsedCallBack+0x88>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a634:	613b      	str	r3, [r7, #16]

		if(pulse_1!= pulseGoal_1){
 800a636:	4b1a      	ldr	r3, [pc, #104]	@ (800a6a0 <CUSTOM_HAL_TIM_PeriodElapsedCallBack+0x8c>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	697a      	ldr	r2, [r7, #20]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d010      	beq.n	800a662 <CUSTOM_HAL_TIM_PeriodElapsedCallBack+0x4e>
			int8_t sign_1 = pulse_1 > pulseGoal_1?
 800a640:	4b17      	ldr	r3, [pc, #92]	@ (800a6a0 <CUSTOM_HAL_TIM_PeriodElapsedCallBack+0x8c>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	697a      	ldr	r2, [r7, #20]
 800a646:	429a      	cmp	r2, r3
 800a648:	d902      	bls.n	800a650 <CUSTOM_HAL_TIM_PeriodElapsedCallBack+0x3c>
 800a64a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a64e:	e000      	b.n	800a652 <CUSTOM_HAL_TIM_PeriodElapsedCallBack+0x3e>
 800a650:	2301      	movs	r3, #1
 800a652:	73fb      	strb	r3, [r7, #15]
					-1:1;
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse_1 + sign_1);
 800a654:	f997 100f 	ldrsb.w	r1, [r7, #15]
 800a658:	4b10      	ldr	r3, [pc, #64]	@ (800a69c <CUSTOM_HAL_TIM_PeriodElapsedCallBack+0x88>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	697a      	ldr	r2, [r7, #20]
 800a65e:	440a      	add	r2, r1
 800a660:	635a      	str	r2, [r3, #52]	@ 0x34
		}
		if(pulse_2!=pulseGoal_2){
 800a662:	4b10      	ldr	r3, [pc, #64]	@ (800a6a4 <CUSTOM_HAL_TIM_PeriodElapsedCallBack+0x90>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	693a      	ldr	r2, [r7, #16]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d010      	beq.n	800a68e <CUSTOM_HAL_TIM_PeriodElapsedCallBack+0x7a>
			int8_t sign_2 = pulse_2 > pulseGoal_2?
 800a66c:	4b0d      	ldr	r3, [pc, #52]	@ (800a6a4 <CUSTOM_HAL_TIM_PeriodElapsedCallBack+0x90>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	693a      	ldr	r2, [r7, #16]
 800a672:	429a      	cmp	r2, r3
 800a674:	d902      	bls.n	800a67c <CUSTOM_HAL_TIM_PeriodElapsedCallBack+0x68>
 800a676:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a67a:	e000      	b.n	800a67e <CUSTOM_HAL_TIM_PeriodElapsedCallBack+0x6a>
 800a67c:	2301      	movs	r3, #1
 800a67e:	73bb      	strb	r3, [r7, #14]
					-1:1;
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_2 + sign_2);
 800a680:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800a684:	4b05      	ldr	r3, [pc, #20]	@ (800a69c <CUSTOM_HAL_TIM_PeriodElapsedCallBack+0x88>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	693a      	ldr	r2, [r7, #16]
 800a68a:	440a      	add	r2, r1
 800a68c:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
}
 800a68e:	bf00      	nop
 800a690:	371c      	adds	r7, #28
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr
 800a69a:	bf00      	nop
 800a69c:	200003f0 	.word	0x200003f0
 800a6a0:	20000a60 	.word	0x20000a60
 800a6a4:	20000a64 	.word	0x20000a64

0800a6a8 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1){ //TIM1 Trigger the start of conversion
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a6b8:	d106      	bne.n	800a6c8 <HAL_ADC_ConvCpltCallback+0x20>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800a6ba:	2140      	movs	r1, #64	@ 0x40
 800a6bc:	4804      	ldr	r0, [pc, #16]	@ (800a6d0 <HAL_ADC_ConvCpltCallback+0x28>)
 800a6be:	f7fa fbcb 	bl	8004e58 <HAL_GPIO_TogglePin>
		isADC = 1;
 800a6c2:	4b04      	ldr	r3, [pc, #16]	@ (800a6d4 <HAL_ADC_ConvCpltCallback+0x2c>)
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	601a      	str	r2, [r3, #0]
	}
}
 800a6c8:	bf00      	nop
 800a6ca:	3708      	adds	r7, #8
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	48000800 	.word	0x48000800
 800a6d4:	2000031c 	.word	0x2000031c

0800a6d8 <atoi>:
 800a6d8:	220a      	movs	r2, #10
 800a6da:	2100      	movs	r1, #0
 800a6dc:	f000 b91e 	b.w	800a91c <strtol>

0800a6e0 <std>:
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	b510      	push	{r4, lr}
 800a6e4:	4604      	mov	r4, r0
 800a6e6:	e9c0 3300 	strd	r3, r3, [r0]
 800a6ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6ee:	6083      	str	r3, [r0, #8]
 800a6f0:	8181      	strh	r1, [r0, #12]
 800a6f2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a6f4:	81c2      	strh	r2, [r0, #14]
 800a6f6:	6183      	str	r3, [r0, #24]
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	2208      	movs	r2, #8
 800a6fc:	305c      	adds	r0, #92	@ 0x5c
 800a6fe:	f000 f9a3 	bl	800aa48 <memset>
 800a702:	4b0d      	ldr	r3, [pc, #52]	@ (800a738 <std+0x58>)
 800a704:	6263      	str	r3, [r4, #36]	@ 0x24
 800a706:	4b0d      	ldr	r3, [pc, #52]	@ (800a73c <std+0x5c>)
 800a708:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a70a:	4b0d      	ldr	r3, [pc, #52]	@ (800a740 <std+0x60>)
 800a70c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a70e:	4b0d      	ldr	r3, [pc, #52]	@ (800a744 <std+0x64>)
 800a710:	6323      	str	r3, [r4, #48]	@ 0x30
 800a712:	4b0d      	ldr	r3, [pc, #52]	@ (800a748 <std+0x68>)
 800a714:	6224      	str	r4, [r4, #32]
 800a716:	429c      	cmp	r4, r3
 800a718:	d006      	beq.n	800a728 <std+0x48>
 800a71a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a71e:	4294      	cmp	r4, r2
 800a720:	d002      	beq.n	800a728 <std+0x48>
 800a722:	33d0      	adds	r3, #208	@ 0xd0
 800a724:	429c      	cmp	r4, r3
 800a726:	d105      	bne.n	800a734 <std+0x54>
 800a728:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a72c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a730:	f000 b9bc 	b.w	800aaac <__retarget_lock_init_recursive>
 800a734:	bd10      	pop	{r4, pc}
 800a736:	bf00      	nop
 800a738:	0800b365 	.word	0x0800b365
 800a73c:	0800b387 	.word	0x0800b387
 800a740:	0800b3bf 	.word	0x0800b3bf
 800a744:	0800b3e3 	.word	0x0800b3e3
 800a748:	20000aec 	.word	0x20000aec

0800a74c <stdio_exit_handler>:
 800a74c:	4a02      	ldr	r2, [pc, #8]	@ (800a758 <stdio_exit_handler+0xc>)
 800a74e:	4903      	ldr	r1, [pc, #12]	@ (800a75c <stdio_exit_handler+0x10>)
 800a750:	4803      	ldr	r0, [pc, #12]	@ (800a760 <stdio_exit_handler+0x14>)
 800a752:	f000 b8ed 	b.w	800a930 <_fwalk_sglue>
 800a756:	bf00      	nop
 800a758:	20000168 	.word	0x20000168
 800a75c:	0800b2fd 	.word	0x0800b2fd
 800a760:	20000178 	.word	0x20000178

0800a764 <cleanup_stdio>:
 800a764:	6841      	ldr	r1, [r0, #4]
 800a766:	4b0c      	ldr	r3, [pc, #48]	@ (800a798 <cleanup_stdio+0x34>)
 800a768:	4299      	cmp	r1, r3
 800a76a:	b510      	push	{r4, lr}
 800a76c:	4604      	mov	r4, r0
 800a76e:	d001      	beq.n	800a774 <cleanup_stdio+0x10>
 800a770:	f000 fdc4 	bl	800b2fc <_fflush_r>
 800a774:	68a1      	ldr	r1, [r4, #8]
 800a776:	4b09      	ldr	r3, [pc, #36]	@ (800a79c <cleanup_stdio+0x38>)
 800a778:	4299      	cmp	r1, r3
 800a77a:	d002      	beq.n	800a782 <cleanup_stdio+0x1e>
 800a77c:	4620      	mov	r0, r4
 800a77e:	f000 fdbd 	bl	800b2fc <_fflush_r>
 800a782:	68e1      	ldr	r1, [r4, #12]
 800a784:	4b06      	ldr	r3, [pc, #24]	@ (800a7a0 <cleanup_stdio+0x3c>)
 800a786:	4299      	cmp	r1, r3
 800a788:	d004      	beq.n	800a794 <cleanup_stdio+0x30>
 800a78a:	4620      	mov	r0, r4
 800a78c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a790:	f000 bdb4 	b.w	800b2fc <_fflush_r>
 800a794:	bd10      	pop	{r4, pc}
 800a796:	bf00      	nop
 800a798:	20000aec 	.word	0x20000aec
 800a79c:	20000b54 	.word	0x20000b54
 800a7a0:	20000bbc 	.word	0x20000bbc

0800a7a4 <global_stdio_init.part.0>:
 800a7a4:	b510      	push	{r4, lr}
 800a7a6:	4b0b      	ldr	r3, [pc, #44]	@ (800a7d4 <global_stdio_init.part.0+0x30>)
 800a7a8:	4c0b      	ldr	r4, [pc, #44]	@ (800a7d8 <global_stdio_init.part.0+0x34>)
 800a7aa:	4a0c      	ldr	r2, [pc, #48]	@ (800a7dc <global_stdio_init.part.0+0x38>)
 800a7ac:	601a      	str	r2, [r3, #0]
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	2104      	movs	r1, #4
 800a7b4:	f7ff ff94 	bl	800a6e0 <std>
 800a7b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a7bc:	2201      	movs	r2, #1
 800a7be:	2109      	movs	r1, #9
 800a7c0:	f7ff ff8e 	bl	800a6e0 <std>
 800a7c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a7c8:	2202      	movs	r2, #2
 800a7ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7ce:	2112      	movs	r1, #18
 800a7d0:	f7ff bf86 	b.w	800a6e0 <std>
 800a7d4:	20000c24 	.word	0x20000c24
 800a7d8:	20000aec 	.word	0x20000aec
 800a7dc:	0800a74d 	.word	0x0800a74d

0800a7e0 <__sfp_lock_acquire>:
 800a7e0:	4801      	ldr	r0, [pc, #4]	@ (800a7e8 <__sfp_lock_acquire+0x8>)
 800a7e2:	f000 b964 	b.w	800aaae <__retarget_lock_acquire_recursive>
 800a7e6:	bf00      	nop
 800a7e8:	20000c29 	.word	0x20000c29

0800a7ec <__sfp_lock_release>:
 800a7ec:	4801      	ldr	r0, [pc, #4]	@ (800a7f4 <__sfp_lock_release+0x8>)
 800a7ee:	f000 b95f 	b.w	800aab0 <__retarget_lock_release_recursive>
 800a7f2:	bf00      	nop
 800a7f4:	20000c29 	.word	0x20000c29

0800a7f8 <__sinit>:
 800a7f8:	b510      	push	{r4, lr}
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	f7ff fff0 	bl	800a7e0 <__sfp_lock_acquire>
 800a800:	6a23      	ldr	r3, [r4, #32]
 800a802:	b11b      	cbz	r3, 800a80c <__sinit+0x14>
 800a804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a808:	f7ff bff0 	b.w	800a7ec <__sfp_lock_release>
 800a80c:	4b04      	ldr	r3, [pc, #16]	@ (800a820 <__sinit+0x28>)
 800a80e:	6223      	str	r3, [r4, #32]
 800a810:	4b04      	ldr	r3, [pc, #16]	@ (800a824 <__sinit+0x2c>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d1f5      	bne.n	800a804 <__sinit+0xc>
 800a818:	f7ff ffc4 	bl	800a7a4 <global_stdio_init.part.0>
 800a81c:	e7f2      	b.n	800a804 <__sinit+0xc>
 800a81e:	bf00      	nop
 800a820:	0800a765 	.word	0x0800a765
 800a824:	20000c24 	.word	0x20000c24

0800a828 <_strtol_l.constprop.0>:
 800a828:	2b24      	cmp	r3, #36	@ 0x24
 800a82a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a82e:	4686      	mov	lr, r0
 800a830:	4690      	mov	r8, r2
 800a832:	d801      	bhi.n	800a838 <_strtol_l.constprop.0+0x10>
 800a834:	2b01      	cmp	r3, #1
 800a836:	d106      	bne.n	800a846 <_strtol_l.constprop.0+0x1e>
 800a838:	f000 f90e 	bl	800aa58 <__errno>
 800a83c:	2316      	movs	r3, #22
 800a83e:	6003      	str	r3, [r0, #0]
 800a840:	2000      	movs	r0, #0
 800a842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a846:	4834      	ldr	r0, [pc, #208]	@ (800a918 <_strtol_l.constprop.0+0xf0>)
 800a848:	460d      	mov	r5, r1
 800a84a:	462a      	mov	r2, r5
 800a84c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a850:	5d06      	ldrb	r6, [r0, r4]
 800a852:	f016 0608 	ands.w	r6, r6, #8
 800a856:	d1f8      	bne.n	800a84a <_strtol_l.constprop.0+0x22>
 800a858:	2c2d      	cmp	r4, #45	@ 0x2d
 800a85a:	d12d      	bne.n	800a8b8 <_strtol_l.constprop.0+0x90>
 800a85c:	782c      	ldrb	r4, [r5, #0]
 800a85e:	2601      	movs	r6, #1
 800a860:	1c95      	adds	r5, r2, #2
 800a862:	f033 0210 	bics.w	r2, r3, #16
 800a866:	d109      	bne.n	800a87c <_strtol_l.constprop.0+0x54>
 800a868:	2c30      	cmp	r4, #48	@ 0x30
 800a86a:	d12a      	bne.n	800a8c2 <_strtol_l.constprop.0+0x9a>
 800a86c:	782a      	ldrb	r2, [r5, #0]
 800a86e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a872:	2a58      	cmp	r2, #88	@ 0x58
 800a874:	d125      	bne.n	800a8c2 <_strtol_l.constprop.0+0x9a>
 800a876:	786c      	ldrb	r4, [r5, #1]
 800a878:	2310      	movs	r3, #16
 800a87a:	3502      	adds	r5, #2
 800a87c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a880:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800a884:	2200      	movs	r2, #0
 800a886:	fbbc f9f3 	udiv	r9, ip, r3
 800a88a:	4610      	mov	r0, r2
 800a88c:	fb03 ca19 	mls	sl, r3, r9, ip
 800a890:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a894:	2f09      	cmp	r7, #9
 800a896:	d81b      	bhi.n	800a8d0 <_strtol_l.constprop.0+0xa8>
 800a898:	463c      	mov	r4, r7
 800a89a:	42a3      	cmp	r3, r4
 800a89c:	dd27      	ble.n	800a8ee <_strtol_l.constprop.0+0xc6>
 800a89e:	1c57      	adds	r7, r2, #1
 800a8a0:	d007      	beq.n	800a8b2 <_strtol_l.constprop.0+0x8a>
 800a8a2:	4581      	cmp	r9, r0
 800a8a4:	d320      	bcc.n	800a8e8 <_strtol_l.constprop.0+0xc0>
 800a8a6:	d101      	bne.n	800a8ac <_strtol_l.constprop.0+0x84>
 800a8a8:	45a2      	cmp	sl, r4
 800a8aa:	db1d      	blt.n	800a8e8 <_strtol_l.constprop.0+0xc0>
 800a8ac:	fb00 4003 	mla	r0, r0, r3, r4
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8b6:	e7eb      	b.n	800a890 <_strtol_l.constprop.0+0x68>
 800a8b8:	2c2b      	cmp	r4, #43	@ 0x2b
 800a8ba:	bf04      	itt	eq
 800a8bc:	782c      	ldrbeq	r4, [r5, #0]
 800a8be:	1c95      	addeq	r5, r2, #2
 800a8c0:	e7cf      	b.n	800a862 <_strtol_l.constprop.0+0x3a>
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d1da      	bne.n	800a87c <_strtol_l.constprop.0+0x54>
 800a8c6:	2c30      	cmp	r4, #48	@ 0x30
 800a8c8:	bf0c      	ite	eq
 800a8ca:	2308      	moveq	r3, #8
 800a8cc:	230a      	movne	r3, #10
 800a8ce:	e7d5      	b.n	800a87c <_strtol_l.constprop.0+0x54>
 800a8d0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a8d4:	2f19      	cmp	r7, #25
 800a8d6:	d801      	bhi.n	800a8dc <_strtol_l.constprop.0+0xb4>
 800a8d8:	3c37      	subs	r4, #55	@ 0x37
 800a8da:	e7de      	b.n	800a89a <_strtol_l.constprop.0+0x72>
 800a8dc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a8e0:	2f19      	cmp	r7, #25
 800a8e2:	d804      	bhi.n	800a8ee <_strtol_l.constprop.0+0xc6>
 800a8e4:	3c57      	subs	r4, #87	@ 0x57
 800a8e6:	e7d8      	b.n	800a89a <_strtol_l.constprop.0+0x72>
 800a8e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a8ec:	e7e1      	b.n	800a8b2 <_strtol_l.constprop.0+0x8a>
 800a8ee:	1c53      	adds	r3, r2, #1
 800a8f0:	d108      	bne.n	800a904 <_strtol_l.constprop.0+0xdc>
 800a8f2:	2322      	movs	r3, #34	@ 0x22
 800a8f4:	f8ce 3000 	str.w	r3, [lr]
 800a8f8:	4660      	mov	r0, ip
 800a8fa:	f1b8 0f00 	cmp.w	r8, #0
 800a8fe:	d0a0      	beq.n	800a842 <_strtol_l.constprop.0+0x1a>
 800a900:	1e69      	subs	r1, r5, #1
 800a902:	e006      	b.n	800a912 <_strtol_l.constprop.0+0xea>
 800a904:	b106      	cbz	r6, 800a908 <_strtol_l.constprop.0+0xe0>
 800a906:	4240      	negs	r0, r0
 800a908:	f1b8 0f00 	cmp.w	r8, #0
 800a90c:	d099      	beq.n	800a842 <_strtol_l.constprop.0+0x1a>
 800a90e:	2a00      	cmp	r2, #0
 800a910:	d1f6      	bne.n	800a900 <_strtol_l.constprop.0+0xd8>
 800a912:	f8c8 1000 	str.w	r1, [r8]
 800a916:	e794      	b.n	800a842 <_strtol_l.constprop.0+0x1a>
 800a918:	0800bc62 	.word	0x0800bc62

0800a91c <strtol>:
 800a91c:	4613      	mov	r3, r2
 800a91e:	460a      	mov	r2, r1
 800a920:	4601      	mov	r1, r0
 800a922:	4802      	ldr	r0, [pc, #8]	@ (800a92c <strtol+0x10>)
 800a924:	6800      	ldr	r0, [r0, #0]
 800a926:	f7ff bf7f 	b.w	800a828 <_strtol_l.constprop.0>
 800a92a:	bf00      	nop
 800a92c:	20000174 	.word	0x20000174

0800a930 <_fwalk_sglue>:
 800a930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a934:	4607      	mov	r7, r0
 800a936:	4688      	mov	r8, r1
 800a938:	4614      	mov	r4, r2
 800a93a:	2600      	movs	r6, #0
 800a93c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a940:	f1b9 0901 	subs.w	r9, r9, #1
 800a944:	d505      	bpl.n	800a952 <_fwalk_sglue+0x22>
 800a946:	6824      	ldr	r4, [r4, #0]
 800a948:	2c00      	cmp	r4, #0
 800a94a:	d1f7      	bne.n	800a93c <_fwalk_sglue+0xc>
 800a94c:	4630      	mov	r0, r6
 800a94e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a952:	89ab      	ldrh	r3, [r5, #12]
 800a954:	2b01      	cmp	r3, #1
 800a956:	d907      	bls.n	800a968 <_fwalk_sglue+0x38>
 800a958:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a95c:	3301      	adds	r3, #1
 800a95e:	d003      	beq.n	800a968 <_fwalk_sglue+0x38>
 800a960:	4629      	mov	r1, r5
 800a962:	4638      	mov	r0, r7
 800a964:	47c0      	blx	r8
 800a966:	4306      	orrs	r6, r0
 800a968:	3568      	adds	r5, #104	@ 0x68
 800a96a:	e7e9      	b.n	800a940 <_fwalk_sglue+0x10>

0800a96c <iprintf>:
 800a96c:	b40f      	push	{r0, r1, r2, r3}
 800a96e:	b507      	push	{r0, r1, r2, lr}
 800a970:	4906      	ldr	r1, [pc, #24]	@ (800a98c <iprintf+0x20>)
 800a972:	ab04      	add	r3, sp, #16
 800a974:	6808      	ldr	r0, [r1, #0]
 800a976:	f853 2b04 	ldr.w	r2, [r3], #4
 800a97a:	6881      	ldr	r1, [r0, #8]
 800a97c:	9301      	str	r3, [sp, #4]
 800a97e:	f000 f8e9 	bl	800ab54 <_vfiprintf_r>
 800a982:	b003      	add	sp, #12
 800a984:	f85d eb04 	ldr.w	lr, [sp], #4
 800a988:	b004      	add	sp, #16
 800a98a:	4770      	bx	lr
 800a98c:	20000174 	.word	0x20000174

0800a990 <strtok>:
 800a990:	4b16      	ldr	r3, [pc, #88]	@ (800a9ec <strtok+0x5c>)
 800a992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a996:	681f      	ldr	r7, [r3, #0]
 800a998:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800a99a:	4605      	mov	r5, r0
 800a99c:	460e      	mov	r6, r1
 800a99e:	b9ec      	cbnz	r4, 800a9dc <strtok+0x4c>
 800a9a0:	2050      	movs	r0, #80	@ 0x50
 800a9a2:	f000 f9ef 	bl	800ad84 <malloc>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	6478      	str	r0, [r7, #68]	@ 0x44
 800a9aa:	b920      	cbnz	r0, 800a9b6 <strtok+0x26>
 800a9ac:	4b10      	ldr	r3, [pc, #64]	@ (800a9f0 <strtok+0x60>)
 800a9ae:	4811      	ldr	r0, [pc, #68]	@ (800a9f4 <strtok+0x64>)
 800a9b0:	215b      	movs	r1, #91	@ 0x5b
 800a9b2:	f000 f887 	bl	800aac4 <__assert_func>
 800a9b6:	e9c0 4400 	strd	r4, r4, [r0]
 800a9ba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a9be:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a9c2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800a9c6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800a9ca:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800a9ce:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800a9d2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800a9d6:	6184      	str	r4, [r0, #24]
 800a9d8:	7704      	strb	r4, [r0, #28]
 800a9da:	6244      	str	r4, [r0, #36]	@ 0x24
 800a9dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a9de:	4631      	mov	r1, r6
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e8:	f000 b806 	b.w	800a9f8 <__strtok_r>
 800a9ec:	20000174 	.word	0x20000174
 800a9f0:	0800bbf0 	.word	0x0800bbf0
 800a9f4:	0800bc07 	.word	0x0800bc07

0800a9f8 <__strtok_r>:
 800a9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	b908      	cbnz	r0, 800aa02 <__strtok_r+0xa>
 800a9fe:	6814      	ldr	r4, [r2, #0]
 800aa00:	b144      	cbz	r4, 800aa14 <__strtok_r+0x1c>
 800aa02:	4620      	mov	r0, r4
 800aa04:	f814 5b01 	ldrb.w	r5, [r4], #1
 800aa08:	460f      	mov	r7, r1
 800aa0a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800aa0e:	b91e      	cbnz	r6, 800aa18 <__strtok_r+0x20>
 800aa10:	b965      	cbnz	r5, 800aa2c <__strtok_r+0x34>
 800aa12:	6015      	str	r5, [r2, #0]
 800aa14:	2000      	movs	r0, #0
 800aa16:	e005      	b.n	800aa24 <__strtok_r+0x2c>
 800aa18:	42b5      	cmp	r5, r6
 800aa1a:	d1f6      	bne.n	800aa0a <__strtok_r+0x12>
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d1f0      	bne.n	800aa02 <__strtok_r+0xa>
 800aa20:	6014      	str	r4, [r2, #0]
 800aa22:	7003      	strb	r3, [r0, #0]
 800aa24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa26:	461c      	mov	r4, r3
 800aa28:	e00c      	b.n	800aa44 <__strtok_r+0x4c>
 800aa2a:	b915      	cbnz	r5, 800aa32 <__strtok_r+0x3a>
 800aa2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aa30:	460e      	mov	r6, r1
 800aa32:	f816 5b01 	ldrb.w	r5, [r6], #1
 800aa36:	42ab      	cmp	r3, r5
 800aa38:	d1f7      	bne.n	800aa2a <__strtok_r+0x32>
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d0f3      	beq.n	800aa26 <__strtok_r+0x2e>
 800aa3e:	2300      	movs	r3, #0
 800aa40:	f804 3c01 	strb.w	r3, [r4, #-1]
 800aa44:	6014      	str	r4, [r2, #0]
 800aa46:	e7ed      	b.n	800aa24 <__strtok_r+0x2c>

0800aa48 <memset>:
 800aa48:	4402      	add	r2, r0
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d100      	bne.n	800aa52 <memset+0xa>
 800aa50:	4770      	bx	lr
 800aa52:	f803 1b01 	strb.w	r1, [r3], #1
 800aa56:	e7f9      	b.n	800aa4c <memset+0x4>

0800aa58 <__errno>:
 800aa58:	4b01      	ldr	r3, [pc, #4]	@ (800aa60 <__errno+0x8>)
 800aa5a:	6818      	ldr	r0, [r3, #0]
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	20000174 	.word	0x20000174

0800aa64 <__libc_init_array>:
 800aa64:	b570      	push	{r4, r5, r6, lr}
 800aa66:	4d0d      	ldr	r5, [pc, #52]	@ (800aa9c <__libc_init_array+0x38>)
 800aa68:	4c0d      	ldr	r4, [pc, #52]	@ (800aaa0 <__libc_init_array+0x3c>)
 800aa6a:	1b64      	subs	r4, r4, r5
 800aa6c:	10a4      	asrs	r4, r4, #2
 800aa6e:	2600      	movs	r6, #0
 800aa70:	42a6      	cmp	r6, r4
 800aa72:	d109      	bne.n	800aa88 <__libc_init_array+0x24>
 800aa74:	4d0b      	ldr	r5, [pc, #44]	@ (800aaa4 <__libc_init_array+0x40>)
 800aa76:	4c0c      	ldr	r4, [pc, #48]	@ (800aaa8 <__libc_init_array+0x44>)
 800aa78:	f000 fece 	bl	800b818 <_init>
 800aa7c:	1b64      	subs	r4, r4, r5
 800aa7e:	10a4      	asrs	r4, r4, #2
 800aa80:	2600      	movs	r6, #0
 800aa82:	42a6      	cmp	r6, r4
 800aa84:	d105      	bne.n	800aa92 <__libc_init_array+0x2e>
 800aa86:	bd70      	pop	{r4, r5, r6, pc}
 800aa88:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa8c:	4798      	blx	r3
 800aa8e:	3601      	adds	r6, #1
 800aa90:	e7ee      	b.n	800aa70 <__libc_init_array+0xc>
 800aa92:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa96:	4798      	blx	r3
 800aa98:	3601      	adds	r6, #1
 800aa9a:	e7f2      	b.n	800aa82 <__libc_init_array+0x1e>
 800aa9c:	0800bddc 	.word	0x0800bddc
 800aaa0:	0800bddc 	.word	0x0800bddc
 800aaa4:	0800bddc 	.word	0x0800bddc
 800aaa8:	0800bde0 	.word	0x0800bde0

0800aaac <__retarget_lock_init_recursive>:
 800aaac:	4770      	bx	lr

0800aaae <__retarget_lock_acquire_recursive>:
 800aaae:	4770      	bx	lr

0800aab0 <__retarget_lock_release_recursive>:
 800aab0:	4770      	bx	lr

0800aab2 <strcpy>:
 800aab2:	4603      	mov	r3, r0
 800aab4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aab8:	f803 2b01 	strb.w	r2, [r3], #1
 800aabc:	2a00      	cmp	r2, #0
 800aabe:	d1f9      	bne.n	800aab4 <strcpy+0x2>
 800aac0:	4770      	bx	lr
	...

0800aac4 <__assert_func>:
 800aac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aac6:	4614      	mov	r4, r2
 800aac8:	461a      	mov	r2, r3
 800aaca:	4b09      	ldr	r3, [pc, #36]	@ (800aaf0 <__assert_func+0x2c>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4605      	mov	r5, r0
 800aad0:	68d8      	ldr	r0, [r3, #12]
 800aad2:	b954      	cbnz	r4, 800aaea <__assert_func+0x26>
 800aad4:	4b07      	ldr	r3, [pc, #28]	@ (800aaf4 <__assert_func+0x30>)
 800aad6:	461c      	mov	r4, r3
 800aad8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aadc:	9100      	str	r1, [sp, #0]
 800aade:	462b      	mov	r3, r5
 800aae0:	4905      	ldr	r1, [pc, #20]	@ (800aaf8 <__assert_func+0x34>)
 800aae2:	f000 fc83 	bl	800b3ec <fiprintf>
 800aae6:	f000 fe01 	bl	800b6ec <abort>
 800aaea:	4b04      	ldr	r3, [pc, #16]	@ (800aafc <__assert_func+0x38>)
 800aaec:	e7f4      	b.n	800aad8 <__assert_func+0x14>
 800aaee:	bf00      	nop
 800aaf0:	20000174 	.word	0x20000174
 800aaf4:	0800bd9d 	.word	0x0800bd9d
 800aaf8:	0800bd6f 	.word	0x0800bd6f
 800aafc:	0800bd62 	.word	0x0800bd62

0800ab00 <__sfputc_r>:
 800ab00:	6893      	ldr	r3, [r2, #8]
 800ab02:	3b01      	subs	r3, #1
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	b410      	push	{r4}
 800ab08:	6093      	str	r3, [r2, #8]
 800ab0a:	da08      	bge.n	800ab1e <__sfputc_r+0x1e>
 800ab0c:	6994      	ldr	r4, [r2, #24]
 800ab0e:	42a3      	cmp	r3, r4
 800ab10:	db01      	blt.n	800ab16 <__sfputc_r+0x16>
 800ab12:	290a      	cmp	r1, #10
 800ab14:	d103      	bne.n	800ab1e <__sfputc_r+0x1e>
 800ab16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab1a:	f000 bc79 	b.w	800b410 <__swbuf_r>
 800ab1e:	6813      	ldr	r3, [r2, #0]
 800ab20:	1c58      	adds	r0, r3, #1
 800ab22:	6010      	str	r0, [r2, #0]
 800ab24:	7019      	strb	r1, [r3, #0]
 800ab26:	4608      	mov	r0, r1
 800ab28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab2c:	4770      	bx	lr

0800ab2e <__sfputs_r>:
 800ab2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab30:	4606      	mov	r6, r0
 800ab32:	460f      	mov	r7, r1
 800ab34:	4614      	mov	r4, r2
 800ab36:	18d5      	adds	r5, r2, r3
 800ab38:	42ac      	cmp	r4, r5
 800ab3a:	d101      	bne.n	800ab40 <__sfputs_r+0x12>
 800ab3c:	2000      	movs	r0, #0
 800ab3e:	e007      	b.n	800ab50 <__sfputs_r+0x22>
 800ab40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab44:	463a      	mov	r2, r7
 800ab46:	4630      	mov	r0, r6
 800ab48:	f7ff ffda 	bl	800ab00 <__sfputc_r>
 800ab4c:	1c43      	adds	r3, r0, #1
 800ab4e:	d1f3      	bne.n	800ab38 <__sfputs_r+0xa>
 800ab50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab54 <_vfiprintf_r>:
 800ab54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab58:	460d      	mov	r5, r1
 800ab5a:	b09d      	sub	sp, #116	@ 0x74
 800ab5c:	4614      	mov	r4, r2
 800ab5e:	4698      	mov	r8, r3
 800ab60:	4606      	mov	r6, r0
 800ab62:	b118      	cbz	r0, 800ab6c <_vfiprintf_r+0x18>
 800ab64:	6a03      	ldr	r3, [r0, #32]
 800ab66:	b90b      	cbnz	r3, 800ab6c <_vfiprintf_r+0x18>
 800ab68:	f7ff fe46 	bl	800a7f8 <__sinit>
 800ab6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab6e:	07d9      	lsls	r1, r3, #31
 800ab70:	d405      	bmi.n	800ab7e <_vfiprintf_r+0x2a>
 800ab72:	89ab      	ldrh	r3, [r5, #12]
 800ab74:	059a      	lsls	r2, r3, #22
 800ab76:	d402      	bmi.n	800ab7e <_vfiprintf_r+0x2a>
 800ab78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab7a:	f7ff ff98 	bl	800aaae <__retarget_lock_acquire_recursive>
 800ab7e:	89ab      	ldrh	r3, [r5, #12]
 800ab80:	071b      	lsls	r3, r3, #28
 800ab82:	d501      	bpl.n	800ab88 <_vfiprintf_r+0x34>
 800ab84:	692b      	ldr	r3, [r5, #16]
 800ab86:	b99b      	cbnz	r3, 800abb0 <_vfiprintf_r+0x5c>
 800ab88:	4629      	mov	r1, r5
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	f000 fc7e 	bl	800b48c <__swsetup_r>
 800ab90:	b170      	cbz	r0, 800abb0 <_vfiprintf_r+0x5c>
 800ab92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab94:	07dc      	lsls	r4, r3, #31
 800ab96:	d504      	bpl.n	800aba2 <_vfiprintf_r+0x4e>
 800ab98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab9c:	b01d      	add	sp, #116	@ 0x74
 800ab9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aba2:	89ab      	ldrh	r3, [r5, #12]
 800aba4:	0598      	lsls	r0, r3, #22
 800aba6:	d4f7      	bmi.n	800ab98 <_vfiprintf_r+0x44>
 800aba8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abaa:	f7ff ff81 	bl	800aab0 <__retarget_lock_release_recursive>
 800abae:	e7f3      	b.n	800ab98 <_vfiprintf_r+0x44>
 800abb0:	2300      	movs	r3, #0
 800abb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800abb4:	2320      	movs	r3, #32
 800abb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800abba:	f8cd 800c 	str.w	r8, [sp, #12]
 800abbe:	2330      	movs	r3, #48	@ 0x30
 800abc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ad70 <_vfiprintf_r+0x21c>
 800abc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800abc8:	f04f 0901 	mov.w	r9, #1
 800abcc:	4623      	mov	r3, r4
 800abce:	469a      	mov	sl, r3
 800abd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abd4:	b10a      	cbz	r2, 800abda <_vfiprintf_r+0x86>
 800abd6:	2a25      	cmp	r2, #37	@ 0x25
 800abd8:	d1f9      	bne.n	800abce <_vfiprintf_r+0x7a>
 800abda:	ebba 0b04 	subs.w	fp, sl, r4
 800abde:	d00b      	beq.n	800abf8 <_vfiprintf_r+0xa4>
 800abe0:	465b      	mov	r3, fp
 800abe2:	4622      	mov	r2, r4
 800abe4:	4629      	mov	r1, r5
 800abe6:	4630      	mov	r0, r6
 800abe8:	f7ff ffa1 	bl	800ab2e <__sfputs_r>
 800abec:	3001      	adds	r0, #1
 800abee:	f000 80a7 	beq.w	800ad40 <_vfiprintf_r+0x1ec>
 800abf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abf4:	445a      	add	r2, fp
 800abf6:	9209      	str	r2, [sp, #36]	@ 0x24
 800abf8:	f89a 3000 	ldrb.w	r3, [sl]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f000 809f 	beq.w	800ad40 <_vfiprintf_r+0x1ec>
 800ac02:	2300      	movs	r3, #0
 800ac04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ac08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac0c:	f10a 0a01 	add.w	sl, sl, #1
 800ac10:	9304      	str	r3, [sp, #16]
 800ac12:	9307      	str	r3, [sp, #28]
 800ac14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac18:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac1a:	4654      	mov	r4, sl
 800ac1c:	2205      	movs	r2, #5
 800ac1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac22:	4853      	ldr	r0, [pc, #332]	@ (800ad70 <_vfiprintf_r+0x21c>)
 800ac24:	f7f5 fb14 	bl	8000250 <memchr>
 800ac28:	9a04      	ldr	r2, [sp, #16]
 800ac2a:	b9d8      	cbnz	r0, 800ac64 <_vfiprintf_r+0x110>
 800ac2c:	06d1      	lsls	r1, r2, #27
 800ac2e:	bf44      	itt	mi
 800ac30:	2320      	movmi	r3, #32
 800ac32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac36:	0713      	lsls	r3, r2, #28
 800ac38:	bf44      	itt	mi
 800ac3a:	232b      	movmi	r3, #43	@ 0x2b
 800ac3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac40:	f89a 3000 	ldrb.w	r3, [sl]
 800ac44:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac46:	d015      	beq.n	800ac74 <_vfiprintf_r+0x120>
 800ac48:	9a07      	ldr	r2, [sp, #28]
 800ac4a:	4654      	mov	r4, sl
 800ac4c:	2000      	movs	r0, #0
 800ac4e:	f04f 0c0a 	mov.w	ip, #10
 800ac52:	4621      	mov	r1, r4
 800ac54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac58:	3b30      	subs	r3, #48	@ 0x30
 800ac5a:	2b09      	cmp	r3, #9
 800ac5c:	d94b      	bls.n	800acf6 <_vfiprintf_r+0x1a2>
 800ac5e:	b1b0      	cbz	r0, 800ac8e <_vfiprintf_r+0x13a>
 800ac60:	9207      	str	r2, [sp, #28]
 800ac62:	e014      	b.n	800ac8e <_vfiprintf_r+0x13a>
 800ac64:	eba0 0308 	sub.w	r3, r0, r8
 800ac68:	fa09 f303 	lsl.w	r3, r9, r3
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	9304      	str	r3, [sp, #16]
 800ac70:	46a2      	mov	sl, r4
 800ac72:	e7d2      	b.n	800ac1a <_vfiprintf_r+0xc6>
 800ac74:	9b03      	ldr	r3, [sp, #12]
 800ac76:	1d19      	adds	r1, r3, #4
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	9103      	str	r1, [sp, #12]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	bfbb      	ittet	lt
 800ac80:	425b      	neglt	r3, r3
 800ac82:	f042 0202 	orrlt.w	r2, r2, #2
 800ac86:	9307      	strge	r3, [sp, #28]
 800ac88:	9307      	strlt	r3, [sp, #28]
 800ac8a:	bfb8      	it	lt
 800ac8c:	9204      	strlt	r2, [sp, #16]
 800ac8e:	7823      	ldrb	r3, [r4, #0]
 800ac90:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac92:	d10a      	bne.n	800acaa <_vfiprintf_r+0x156>
 800ac94:	7863      	ldrb	r3, [r4, #1]
 800ac96:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac98:	d132      	bne.n	800ad00 <_vfiprintf_r+0x1ac>
 800ac9a:	9b03      	ldr	r3, [sp, #12]
 800ac9c:	1d1a      	adds	r2, r3, #4
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	9203      	str	r2, [sp, #12]
 800aca2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aca6:	3402      	adds	r4, #2
 800aca8:	9305      	str	r3, [sp, #20]
 800acaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ad80 <_vfiprintf_r+0x22c>
 800acae:	7821      	ldrb	r1, [r4, #0]
 800acb0:	2203      	movs	r2, #3
 800acb2:	4650      	mov	r0, sl
 800acb4:	f7f5 facc 	bl	8000250 <memchr>
 800acb8:	b138      	cbz	r0, 800acca <_vfiprintf_r+0x176>
 800acba:	9b04      	ldr	r3, [sp, #16]
 800acbc:	eba0 000a 	sub.w	r0, r0, sl
 800acc0:	2240      	movs	r2, #64	@ 0x40
 800acc2:	4082      	lsls	r2, r0
 800acc4:	4313      	orrs	r3, r2
 800acc6:	3401      	adds	r4, #1
 800acc8:	9304      	str	r3, [sp, #16]
 800acca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acce:	4829      	ldr	r0, [pc, #164]	@ (800ad74 <_vfiprintf_r+0x220>)
 800acd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800acd4:	2206      	movs	r2, #6
 800acd6:	f7f5 fabb 	bl	8000250 <memchr>
 800acda:	2800      	cmp	r0, #0
 800acdc:	d03f      	beq.n	800ad5e <_vfiprintf_r+0x20a>
 800acde:	4b26      	ldr	r3, [pc, #152]	@ (800ad78 <_vfiprintf_r+0x224>)
 800ace0:	bb1b      	cbnz	r3, 800ad2a <_vfiprintf_r+0x1d6>
 800ace2:	9b03      	ldr	r3, [sp, #12]
 800ace4:	3307      	adds	r3, #7
 800ace6:	f023 0307 	bic.w	r3, r3, #7
 800acea:	3308      	adds	r3, #8
 800acec:	9303      	str	r3, [sp, #12]
 800acee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acf0:	443b      	add	r3, r7
 800acf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800acf4:	e76a      	b.n	800abcc <_vfiprintf_r+0x78>
 800acf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800acfa:	460c      	mov	r4, r1
 800acfc:	2001      	movs	r0, #1
 800acfe:	e7a8      	b.n	800ac52 <_vfiprintf_r+0xfe>
 800ad00:	2300      	movs	r3, #0
 800ad02:	3401      	adds	r4, #1
 800ad04:	9305      	str	r3, [sp, #20]
 800ad06:	4619      	mov	r1, r3
 800ad08:	f04f 0c0a 	mov.w	ip, #10
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad12:	3a30      	subs	r2, #48	@ 0x30
 800ad14:	2a09      	cmp	r2, #9
 800ad16:	d903      	bls.n	800ad20 <_vfiprintf_r+0x1cc>
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d0c6      	beq.n	800acaa <_vfiprintf_r+0x156>
 800ad1c:	9105      	str	r1, [sp, #20]
 800ad1e:	e7c4      	b.n	800acaa <_vfiprintf_r+0x156>
 800ad20:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad24:	4604      	mov	r4, r0
 800ad26:	2301      	movs	r3, #1
 800ad28:	e7f0      	b.n	800ad0c <_vfiprintf_r+0x1b8>
 800ad2a:	ab03      	add	r3, sp, #12
 800ad2c:	9300      	str	r3, [sp, #0]
 800ad2e:	462a      	mov	r2, r5
 800ad30:	4b12      	ldr	r3, [pc, #72]	@ (800ad7c <_vfiprintf_r+0x228>)
 800ad32:	a904      	add	r1, sp, #16
 800ad34:	4630      	mov	r0, r6
 800ad36:	f3af 8000 	nop.w
 800ad3a:	4607      	mov	r7, r0
 800ad3c:	1c78      	adds	r0, r7, #1
 800ad3e:	d1d6      	bne.n	800acee <_vfiprintf_r+0x19a>
 800ad40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad42:	07d9      	lsls	r1, r3, #31
 800ad44:	d405      	bmi.n	800ad52 <_vfiprintf_r+0x1fe>
 800ad46:	89ab      	ldrh	r3, [r5, #12]
 800ad48:	059a      	lsls	r2, r3, #22
 800ad4a:	d402      	bmi.n	800ad52 <_vfiprintf_r+0x1fe>
 800ad4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad4e:	f7ff feaf 	bl	800aab0 <__retarget_lock_release_recursive>
 800ad52:	89ab      	ldrh	r3, [r5, #12]
 800ad54:	065b      	lsls	r3, r3, #25
 800ad56:	f53f af1f 	bmi.w	800ab98 <_vfiprintf_r+0x44>
 800ad5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad5c:	e71e      	b.n	800ab9c <_vfiprintf_r+0x48>
 800ad5e:	ab03      	add	r3, sp, #12
 800ad60:	9300      	str	r3, [sp, #0]
 800ad62:	462a      	mov	r2, r5
 800ad64:	4b05      	ldr	r3, [pc, #20]	@ (800ad7c <_vfiprintf_r+0x228>)
 800ad66:	a904      	add	r1, sp, #16
 800ad68:	4630      	mov	r0, r6
 800ad6a:	f000 f923 	bl	800afb4 <_printf_i>
 800ad6e:	e7e4      	b.n	800ad3a <_vfiprintf_r+0x1e6>
 800ad70:	0800bd9e 	.word	0x0800bd9e
 800ad74:	0800bda8 	.word	0x0800bda8
 800ad78:	00000000 	.word	0x00000000
 800ad7c:	0800ab2f 	.word	0x0800ab2f
 800ad80:	0800bda4 	.word	0x0800bda4

0800ad84 <malloc>:
 800ad84:	4b02      	ldr	r3, [pc, #8]	@ (800ad90 <malloc+0xc>)
 800ad86:	4601      	mov	r1, r0
 800ad88:	6818      	ldr	r0, [r3, #0]
 800ad8a:	f000 b825 	b.w	800add8 <_malloc_r>
 800ad8e:	bf00      	nop
 800ad90:	20000174 	.word	0x20000174

0800ad94 <sbrk_aligned>:
 800ad94:	b570      	push	{r4, r5, r6, lr}
 800ad96:	4e0f      	ldr	r6, [pc, #60]	@ (800add4 <sbrk_aligned+0x40>)
 800ad98:	460c      	mov	r4, r1
 800ad9a:	6831      	ldr	r1, [r6, #0]
 800ad9c:	4605      	mov	r5, r0
 800ad9e:	b911      	cbnz	r1, 800ada6 <sbrk_aligned+0x12>
 800ada0:	f000 fc82 	bl	800b6a8 <_sbrk_r>
 800ada4:	6030      	str	r0, [r6, #0]
 800ada6:	4621      	mov	r1, r4
 800ada8:	4628      	mov	r0, r5
 800adaa:	f000 fc7d 	bl	800b6a8 <_sbrk_r>
 800adae:	1c43      	adds	r3, r0, #1
 800adb0:	d103      	bne.n	800adba <sbrk_aligned+0x26>
 800adb2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800adb6:	4620      	mov	r0, r4
 800adb8:	bd70      	pop	{r4, r5, r6, pc}
 800adba:	1cc4      	adds	r4, r0, #3
 800adbc:	f024 0403 	bic.w	r4, r4, #3
 800adc0:	42a0      	cmp	r0, r4
 800adc2:	d0f8      	beq.n	800adb6 <sbrk_aligned+0x22>
 800adc4:	1a21      	subs	r1, r4, r0
 800adc6:	4628      	mov	r0, r5
 800adc8:	f000 fc6e 	bl	800b6a8 <_sbrk_r>
 800adcc:	3001      	adds	r0, #1
 800adce:	d1f2      	bne.n	800adb6 <sbrk_aligned+0x22>
 800add0:	e7ef      	b.n	800adb2 <sbrk_aligned+0x1e>
 800add2:	bf00      	nop
 800add4:	20000c2c 	.word	0x20000c2c

0800add8 <_malloc_r>:
 800add8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800addc:	1ccd      	adds	r5, r1, #3
 800adde:	f025 0503 	bic.w	r5, r5, #3
 800ade2:	3508      	adds	r5, #8
 800ade4:	2d0c      	cmp	r5, #12
 800ade6:	bf38      	it	cc
 800ade8:	250c      	movcc	r5, #12
 800adea:	2d00      	cmp	r5, #0
 800adec:	4606      	mov	r6, r0
 800adee:	db01      	blt.n	800adf4 <_malloc_r+0x1c>
 800adf0:	42a9      	cmp	r1, r5
 800adf2:	d904      	bls.n	800adfe <_malloc_r+0x26>
 800adf4:	230c      	movs	r3, #12
 800adf6:	6033      	str	r3, [r6, #0]
 800adf8:	2000      	movs	r0, #0
 800adfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aed4 <_malloc_r+0xfc>
 800ae02:	f000 faa3 	bl	800b34c <__malloc_lock>
 800ae06:	f8d8 3000 	ldr.w	r3, [r8]
 800ae0a:	461c      	mov	r4, r3
 800ae0c:	bb44      	cbnz	r4, 800ae60 <_malloc_r+0x88>
 800ae0e:	4629      	mov	r1, r5
 800ae10:	4630      	mov	r0, r6
 800ae12:	f7ff ffbf 	bl	800ad94 <sbrk_aligned>
 800ae16:	1c43      	adds	r3, r0, #1
 800ae18:	4604      	mov	r4, r0
 800ae1a:	d158      	bne.n	800aece <_malloc_r+0xf6>
 800ae1c:	f8d8 4000 	ldr.w	r4, [r8]
 800ae20:	4627      	mov	r7, r4
 800ae22:	2f00      	cmp	r7, #0
 800ae24:	d143      	bne.n	800aeae <_malloc_r+0xd6>
 800ae26:	2c00      	cmp	r4, #0
 800ae28:	d04b      	beq.n	800aec2 <_malloc_r+0xea>
 800ae2a:	6823      	ldr	r3, [r4, #0]
 800ae2c:	4639      	mov	r1, r7
 800ae2e:	4630      	mov	r0, r6
 800ae30:	eb04 0903 	add.w	r9, r4, r3
 800ae34:	f000 fc38 	bl	800b6a8 <_sbrk_r>
 800ae38:	4581      	cmp	r9, r0
 800ae3a:	d142      	bne.n	800aec2 <_malloc_r+0xea>
 800ae3c:	6821      	ldr	r1, [r4, #0]
 800ae3e:	1a6d      	subs	r5, r5, r1
 800ae40:	4629      	mov	r1, r5
 800ae42:	4630      	mov	r0, r6
 800ae44:	f7ff ffa6 	bl	800ad94 <sbrk_aligned>
 800ae48:	3001      	adds	r0, #1
 800ae4a:	d03a      	beq.n	800aec2 <_malloc_r+0xea>
 800ae4c:	6823      	ldr	r3, [r4, #0]
 800ae4e:	442b      	add	r3, r5
 800ae50:	6023      	str	r3, [r4, #0]
 800ae52:	f8d8 3000 	ldr.w	r3, [r8]
 800ae56:	685a      	ldr	r2, [r3, #4]
 800ae58:	bb62      	cbnz	r2, 800aeb4 <_malloc_r+0xdc>
 800ae5a:	f8c8 7000 	str.w	r7, [r8]
 800ae5e:	e00f      	b.n	800ae80 <_malloc_r+0xa8>
 800ae60:	6822      	ldr	r2, [r4, #0]
 800ae62:	1b52      	subs	r2, r2, r5
 800ae64:	d420      	bmi.n	800aea8 <_malloc_r+0xd0>
 800ae66:	2a0b      	cmp	r2, #11
 800ae68:	d917      	bls.n	800ae9a <_malloc_r+0xc2>
 800ae6a:	1961      	adds	r1, r4, r5
 800ae6c:	42a3      	cmp	r3, r4
 800ae6e:	6025      	str	r5, [r4, #0]
 800ae70:	bf18      	it	ne
 800ae72:	6059      	strne	r1, [r3, #4]
 800ae74:	6863      	ldr	r3, [r4, #4]
 800ae76:	bf08      	it	eq
 800ae78:	f8c8 1000 	streq.w	r1, [r8]
 800ae7c:	5162      	str	r2, [r4, r5]
 800ae7e:	604b      	str	r3, [r1, #4]
 800ae80:	4630      	mov	r0, r6
 800ae82:	f000 fa69 	bl	800b358 <__malloc_unlock>
 800ae86:	f104 000b 	add.w	r0, r4, #11
 800ae8a:	1d23      	adds	r3, r4, #4
 800ae8c:	f020 0007 	bic.w	r0, r0, #7
 800ae90:	1ac2      	subs	r2, r0, r3
 800ae92:	bf1c      	itt	ne
 800ae94:	1a1b      	subne	r3, r3, r0
 800ae96:	50a3      	strne	r3, [r4, r2]
 800ae98:	e7af      	b.n	800adfa <_malloc_r+0x22>
 800ae9a:	6862      	ldr	r2, [r4, #4]
 800ae9c:	42a3      	cmp	r3, r4
 800ae9e:	bf0c      	ite	eq
 800aea0:	f8c8 2000 	streq.w	r2, [r8]
 800aea4:	605a      	strne	r2, [r3, #4]
 800aea6:	e7eb      	b.n	800ae80 <_malloc_r+0xa8>
 800aea8:	4623      	mov	r3, r4
 800aeaa:	6864      	ldr	r4, [r4, #4]
 800aeac:	e7ae      	b.n	800ae0c <_malloc_r+0x34>
 800aeae:	463c      	mov	r4, r7
 800aeb0:	687f      	ldr	r7, [r7, #4]
 800aeb2:	e7b6      	b.n	800ae22 <_malloc_r+0x4a>
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	42a3      	cmp	r3, r4
 800aeba:	d1fb      	bne.n	800aeb4 <_malloc_r+0xdc>
 800aebc:	2300      	movs	r3, #0
 800aebe:	6053      	str	r3, [r2, #4]
 800aec0:	e7de      	b.n	800ae80 <_malloc_r+0xa8>
 800aec2:	230c      	movs	r3, #12
 800aec4:	6033      	str	r3, [r6, #0]
 800aec6:	4630      	mov	r0, r6
 800aec8:	f000 fa46 	bl	800b358 <__malloc_unlock>
 800aecc:	e794      	b.n	800adf8 <_malloc_r+0x20>
 800aece:	6005      	str	r5, [r0, #0]
 800aed0:	e7d6      	b.n	800ae80 <_malloc_r+0xa8>
 800aed2:	bf00      	nop
 800aed4:	20000c30 	.word	0x20000c30

0800aed8 <_printf_common>:
 800aed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aedc:	4616      	mov	r6, r2
 800aede:	4698      	mov	r8, r3
 800aee0:	688a      	ldr	r2, [r1, #8]
 800aee2:	690b      	ldr	r3, [r1, #16]
 800aee4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aee8:	4293      	cmp	r3, r2
 800aeea:	bfb8      	it	lt
 800aeec:	4613      	movlt	r3, r2
 800aeee:	6033      	str	r3, [r6, #0]
 800aef0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aef4:	4607      	mov	r7, r0
 800aef6:	460c      	mov	r4, r1
 800aef8:	b10a      	cbz	r2, 800aefe <_printf_common+0x26>
 800aefa:	3301      	adds	r3, #1
 800aefc:	6033      	str	r3, [r6, #0]
 800aefe:	6823      	ldr	r3, [r4, #0]
 800af00:	0699      	lsls	r1, r3, #26
 800af02:	bf42      	ittt	mi
 800af04:	6833      	ldrmi	r3, [r6, #0]
 800af06:	3302      	addmi	r3, #2
 800af08:	6033      	strmi	r3, [r6, #0]
 800af0a:	6825      	ldr	r5, [r4, #0]
 800af0c:	f015 0506 	ands.w	r5, r5, #6
 800af10:	d106      	bne.n	800af20 <_printf_common+0x48>
 800af12:	f104 0a19 	add.w	sl, r4, #25
 800af16:	68e3      	ldr	r3, [r4, #12]
 800af18:	6832      	ldr	r2, [r6, #0]
 800af1a:	1a9b      	subs	r3, r3, r2
 800af1c:	42ab      	cmp	r3, r5
 800af1e:	dc26      	bgt.n	800af6e <_printf_common+0x96>
 800af20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800af24:	6822      	ldr	r2, [r4, #0]
 800af26:	3b00      	subs	r3, #0
 800af28:	bf18      	it	ne
 800af2a:	2301      	movne	r3, #1
 800af2c:	0692      	lsls	r2, r2, #26
 800af2e:	d42b      	bmi.n	800af88 <_printf_common+0xb0>
 800af30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800af34:	4641      	mov	r1, r8
 800af36:	4638      	mov	r0, r7
 800af38:	47c8      	blx	r9
 800af3a:	3001      	adds	r0, #1
 800af3c:	d01e      	beq.n	800af7c <_printf_common+0xa4>
 800af3e:	6823      	ldr	r3, [r4, #0]
 800af40:	6922      	ldr	r2, [r4, #16]
 800af42:	f003 0306 	and.w	r3, r3, #6
 800af46:	2b04      	cmp	r3, #4
 800af48:	bf02      	ittt	eq
 800af4a:	68e5      	ldreq	r5, [r4, #12]
 800af4c:	6833      	ldreq	r3, [r6, #0]
 800af4e:	1aed      	subeq	r5, r5, r3
 800af50:	68a3      	ldr	r3, [r4, #8]
 800af52:	bf0c      	ite	eq
 800af54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af58:	2500      	movne	r5, #0
 800af5a:	4293      	cmp	r3, r2
 800af5c:	bfc4      	itt	gt
 800af5e:	1a9b      	subgt	r3, r3, r2
 800af60:	18ed      	addgt	r5, r5, r3
 800af62:	2600      	movs	r6, #0
 800af64:	341a      	adds	r4, #26
 800af66:	42b5      	cmp	r5, r6
 800af68:	d11a      	bne.n	800afa0 <_printf_common+0xc8>
 800af6a:	2000      	movs	r0, #0
 800af6c:	e008      	b.n	800af80 <_printf_common+0xa8>
 800af6e:	2301      	movs	r3, #1
 800af70:	4652      	mov	r2, sl
 800af72:	4641      	mov	r1, r8
 800af74:	4638      	mov	r0, r7
 800af76:	47c8      	blx	r9
 800af78:	3001      	adds	r0, #1
 800af7a:	d103      	bne.n	800af84 <_printf_common+0xac>
 800af7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af84:	3501      	adds	r5, #1
 800af86:	e7c6      	b.n	800af16 <_printf_common+0x3e>
 800af88:	18e1      	adds	r1, r4, r3
 800af8a:	1c5a      	adds	r2, r3, #1
 800af8c:	2030      	movs	r0, #48	@ 0x30
 800af8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800af92:	4422      	add	r2, r4
 800af94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800af98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800af9c:	3302      	adds	r3, #2
 800af9e:	e7c7      	b.n	800af30 <_printf_common+0x58>
 800afa0:	2301      	movs	r3, #1
 800afa2:	4622      	mov	r2, r4
 800afa4:	4641      	mov	r1, r8
 800afa6:	4638      	mov	r0, r7
 800afa8:	47c8      	blx	r9
 800afaa:	3001      	adds	r0, #1
 800afac:	d0e6      	beq.n	800af7c <_printf_common+0xa4>
 800afae:	3601      	adds	r6, #1
 800afb0:	e7d9      	b.n	800af66 <_printf_common+0x8e>
	...

0800afb4 <_printf_i>:
 800afb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afb8:	7e0f      	ldrb	r7, [r1, #24]
 800afba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800afbc:	2f78      	cmp	r7, #120	@ 0x78
 800afbe:	4691      	mov	r9, r2
 800afc0:	4680      	mov	r8, r0
 800afc2:	460c      	mov	r4, r1
 800afc4:	469a      	mov	sl, r3
 800afc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800afca:	d807      	bhi.n	800afdc <_printf_i+0x28>
 800afcc:	2f62      	cmp	r7, #98	@ 0x62
 800afce:	d80a      	bhi.n	800afe6 <_printf_i+0x32>
 800afd0:	2f00      	cmp	r7, #0
 800afd2:	f000 80d2 	beq.w	800b17a <_printf_i+0x1c6>
 800afd6:	2f58      	cmp	r7, #88	@ 0x58
 800afd8:	f000 80b9 	beq.w	800b14e <_printf_i+0x19a>
 800afdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800afe0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800afe4:	e03a      	b.n	800b05c <_printf_i+0xa8>
 800afe6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800afea:	2b15      	cmp	r3, #21
 800afec:	d8f6      	bhi.n	800afdc <_printf_i+0x28>
 800afee:	a101      	add	r1, pc, #4	@ (adr r1, 800aff4 <_printf_i+0x40>)
 800aff0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aff4:	0800b04d 	.word	0x0800b04d
 800aff8:	0800b061 	.word	0x0800b061
 800affc:	0800afdd 	.word	0x0800afdd
 800b000:	0800afdd 	.word	0x0800afdd
 800b004:	0800afdd 	.word	0x0800afdd
 800b008:	0800afdd 	.word	0x0800afdd
 800b00c:	0800b061 	.word	0x0800b061
 800b010:	0800afdd 	.word	0x0800afdd
 800b014:	0800afdd 	.word	0x0800afdd
 800b018:	0800afdd 	.word	0x0800afdd
 800b01c:	0800afdd 	.word	0x0800afdd
 800b020:	0800b161 	.word	0x0800b161
 800b024:	0800b08b 	.word	0x0800b08b
 800b028:	0800b11b 	.word	0x0800b11b
 800b02c:	0800afdd 	.word	0x0800afdd
 800b030:	0800afdd 	.word	0x0800afdd
 800b034:	0800b183 	.word	0x0800b183
 800b038:	0800afdd 	.word	0x0800afdd
 800b03c:	0800b08b 	.word	0x0800b08b
 800b040:	0800afdd 	.word	0x0800afdd
 800b044:	0800afdd 	.word	0x0800afdd
 800b048:	0800b123 	.word	0x0800b123
 800b04c:	6833      	ldr	r3, [r6, #0]
 800b04e:	1d1a      	adds	r2, r3, #4
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	6032      	str	r2, [r6, #0]
 800b054:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b058:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b05c:	2301      	movs	r3, #1
 800b05e:	e09d      	b.n	800b19c <_printf_i+0x1e8>
 800b060:	6833      	ldr	r3, [r6, #0]
 800b062:	6820      	ldr	r0, [r4, #0]
 800b064:	1d19      	adds	r1, r3, #4
 800b066:	6031      	str	r1, [r6, #0]
 800b068:	0606      	lsls	r6, r0, #24
 800b06a:	d501      	bpl.n	800b070 <_printf_i+0xbc>
 800b06c:	681d      	ldr	r5, [r3, #0]
 800b06e:	e003      	b.n	800b078 <_printf_i+0xc4>
 800b070:	0645      	lsls	r5, r0, #25
 800b072:	d5fb      	bpl.n	800b06c <_printf_i+0xb8>
 800b074:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b078:	2d00      	cmp	r5, #0
 800b07a:	da03      	bge.n	800b084 <_printf_i+0xd0>
 800b07c:	232d      	movs	r3, #45	@ 0x2d
 800b07e:	426d      	negs	r5, r5
 800b080:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b084:	4859      	ldr	r0, [pc, #356]	@ (800b1ec <_printf_i+0x238>)
 800b086:	230a      	movs	r3, #10
 800b088:	e011      	b.n	800b0ae <_printf_i+0xfa>
 800b08a:	6821      	ldr	r1, [r4, #0]
 800b08c:	6833      	ldr	r3, [r6, #0]
 800b08e:	0608      	lsls	r0, r1, #24
 800b090:	f853 5b04 	ldr.w	r5, [r3], #4
 800b094:	d402      	bmi.n	800b09c <_printf_i+0xe8>
 800b096:	0649      	lsls	r1, r1, #25
 800b098:	bf48      	it	mi
 800b09a:	b2ad      	uxthmi	r5, r5
 800b09c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b09e:	4853      	ldr	r0, [pc, #332]	@ (800b1ec <_printf_i+0x238>)
 800b0a0:	6033      	str	r3, [r6, #0]
 800b0a2:	bf14      	ite	ne
 800b0a4:	230a      	movne	r3, #10
 800b0a6:	2308      	moveq	r3, #8
 800b0a8:	2100      	movs	r1, #0
 800b0aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b0ae:	6866      	ldr	r6, [r4, #4]
 800b0b0:	60a6      	str	r6, [r4, #8]
 800b0b2:	2e00      	cmp	r6, #0
 800b0b4:	bfa2      	ittt	ge
 800b0b6:	6821      	ldrge	r1, [r4, #0]
 800b0b8:	f021 0104 	bicge.w	r1, r1, #4
 800b0bc:	6021      	strge	r1, [r4, #0]
 800b0be:	b90d      	cbnz	r5, 800b0c4 <_printf_i+0x110>
 800b0c0:	2e00      	cmp	r6, #0
 800b0c2:	d04b      	beq.n	800b15c <_printf_i+0x1a8>
 800b0c4:	4616      	mov	r6, r2
 800b0c6:	fbb5 f1f3 	udiv	r1, r5, r3
 800b0ca:	fb03 5711 	mls	r7, r3, r1, r5
 800b0ce:	5dc7      	ldrb	r7, [r0, r7]
 800b0d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b0d4:	462f      	mov	r7, r5
 800b0d6:	42bb      	cmp	r3, r7
 800b0d8:	460d      	mov	r5, r1
 800b0da:	d9f4      	bls.n	800b0c6 <_printf_i+0x112>
 800b0dc:	2b08      	cmp	r3, #8
 800b0de:	d10b      	bne.n	800b0f8 <_printf_i+0x144>
 800b0e0:	6823      	ldr	r3, [r4, #0]
 800b0e2:	07df      	lsls	r7, r3, #31
 800b0e4:	d508      	bpl.n	800b0f8 <_printf_i+0x144>
 800b0e6:	6923      	ldr	r3, [r4, #16]
 800b0e8:	6861      	ldr	r1, [r4, #4]
 800b0ea:	4299      	cmp	r1, r3
 800b0ec:	bfde      	ittt	le
 800b0ee:	2330      	movle	r3, #48	@ 0x30
 800b0f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b0f4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b0f8:	1b92      	subs	r2, r2, r6
 800b0fa:	6122      	str	r2, [r4, #16]
 800b0fc:	f8cd a000 	str.w	sl, [sp]
 800b100:	464b      	mov	r3, r9
 800b102:	aa03      	add	r2, sp, #12
 800b104:	4621      	mov	r1, r4
 800b106:	4640      	mov	r0, r8
 800b108:	f7ff fee6 	bl	800aed8 <_printf_common>
 800b10c:	3001      	adds	r0, #1
 800b10e:	d14a      	bne.n	800b1a6 <_printf_i+0x1f2>
 800b110:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b114:	b004      	add	sp, #16
 800b116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b11a:	6823      	ldr	r3, [r4, #0]
 800b11c:	f043 0320 	orr.w	r3, r3, #32
 800b120:	6023      	str	r3, [r4, #0]
 800b122:	4833      	ldr	r0, [pc, #204]	@ (800b1f0 <_printf_i+0x23c>)
 800b124:	2778      	movs	r7, #120	@ 0x78
 800b126:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b12a:	6823      	ldr	r3, [r4, #0]
 800b12c:	6831      	ldr	r1, [r6, #0]
 800b12e:	061f      	lsls	r7, r3, #24
 800b130:	f851 5b04 	ldr.w	r5, [r1], #4
 800b134:	d402      	bmi.n	800b13c <_printf_i+0x188>
 800b136:	065f      	lsls	r7, r3, #25
 800b138:	bf48      	it	mi
 800b13a:	b2ad      	uxthmi	r5, r5
 800b13c:	6031      	str	r1, [r6, #0]
 800b13e:	07d9      	lsls	r1, r3, #31
 800b140:	bf44      	itt	mi
 800b142:	f043 0320 	orrmi.w	r3, r3, #32
 800b146:	6023      	strmi	r3, [r4, #0]
 800b148:	b11d      	cbz	r5, 800b152 <_printf_i+0x19e>
 800b14a:	2310      	movs	r3, #16
 800b14c:	e7ac      	b.n	800b0a8 <_printf_i+0xf4>
 800b14e:	4827      	ldr	r0, [pc, #156]	@ (800b1ec <_printf_i+0x238>)
 800b150:	e7e9      	b.n	800b126 <_printf_i+0x172>
 800b152:	6823      	ldr	r3, [r4, #0]
 800b154:	f023 0320 	bic.w	r3, r3, #32
 800b158:	6023      	str	r3, [r4, #0]
 800b15a:	e7f6      	b.n	800b14a <_printf_i+0x196>
 800b15c:	4616      	mov	r6, r2
 800b15e:	e7bd      	b.n	800b0dc <_printf_i+0x128>
 800b160:	6833      	ldr	r3, [r6, #0]
 800b162:	6825      	ldr	r5, [r4, #0]
 800b164:	6961      	ldr	r1, [r4, #20]
 800b166:	1d18      	adds	r0, r3, #4
 800b168:	6030      	str	r0, [r6, #0]
 800b16a:	062e      	lsls	r6, r5, #24
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	d501      	bpl.n	800b174 <_printf_i+0x1c0>
 800b170:	6019      	str	r1, [r3, #0]
 800b172:	e002      	b.n	800b17a <_printf_i+0x1c6>
 800b174:	0668      	lsls	r0, r5, #25
 800b176:	d5fb      	bpl.n	800b170 <_printf_i+0x1bc>
 800b178:	8019      	strh	r1, [r3, #0]
 800b17a:	2300      	movs	r3, #0
 800b17c:	6123      	str	r3, [r4, #16]
 800b17e:	4616      	mov	r6, r2
 800b180:	e7bc      	b.n	800b0fc <_printf_i+0x148>
 800b182:	6833      	ldr	r3, [r6, #0]
 800b184:	1d1a      	adds	r2, r3, #4
 800b186:	6032      	str	r2, [r6, #0]
 800b188:	681e      	ldr	r6, [r3, #0]
 800b18a:	6862      	ldr	r2, [r4, #4]
 800b18c:	2100      	movs	r1, #0
 800b18e:	4630      	mov	r0, r6
 800b190:	f7f5 f85e 	bl	8000250 <memchr>
 800b194:	b108      	cbz	r0, 800b19a <_printf_i+0x1e6>
 800b196:	1b80      	subs	r0, r0, r6
 800b198:	6060      	str	r0, [r4, #4]
 800b19a:	6863      	ldr	r3, [r4, #4]
 800b19c:	6123      	str	r3, [r4, #16]
 800b19e:	2300      	movs	r3, #0
 800b1a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1a4:	e7aa      	b.n	800b0fc <_printf_i+0x148>
 800b1a6:	6923      	ldr	r3, [r4, #16]
 800b1a8:	4632      	mov	r2, r6
 800b1aa:	4649      	mov	r1, r9
 800b1ac:	4640      	mov	r0, r8
 800b1ae:	47d0      	blx	sl
 800b1b0:	3001      	adds	r0, #1
 800b1b2:	d0ad      	beq.n	800b110 <_printf_i+0x15c>
 800b1b4:	6823      	ldr	r3, [r4, #0]
 800b1b6:	079b      	lsls	r3, r3, #30
 800b1b8:	d413      	bmi.n	800b1e2 <_printf_i+0x22e>
 800b1ba:	68e0      	ldr	r0, [r4, #12]
 800b1bc:	9b03      	ldr	r3, [sp, #12]
 800b1be:	4298      	cmp	r0, r3
 800b1c0:	bfb8      	it	lt
 800b1c2:	4618      	movlt	r0, r3
 800b1c4:	e7a6      	b.n	800b114 <_printf_i+0x160>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	4632      	mov	r2, r6
 800b1ca:	4649      	mov	r1, r9
 800b1cc:	4640      	mov	r0, r8
 800b1ce:	47d0      	blx	sl
 800b1d0:	3001      	adds	r0, #1
 800b1d2:	d09d      	beq.n	800b110 <_printf_i+0x15c>
 800b1d4:	3501      	adds	r5, #1
 800b1d6:	68e3      	ldr	r3, [r4, #12]
 800b1d8:	9903      	ldr	r1, [sp, #12]
 800b1da:	1a5b      	subs	r3, r3, r1
 800b1dc:	42ab      	cmp	r3, r5
 800b1de:	dcf2      	bgt.n	800b1c6 <_printf_i+0x212>
 800b1e0:	e7eb      	b.n	800b1ba <_printf_i+0x206>
 800b1e2:	2500      	movs	r5, #0
 800b1e4:	f104 0619 	add.w	r6, r4, #25
 800b1e8:	e7f5      	b.n	800b1d6 <_printf_i+0x222>
 800b1ea:	bf00      	nop
 800b1ec:	0800bdaf 	.word	0x0800bdaf
 800b1f0:	0800bdc0 	.word	0x0800bdc0

0800b1f4 <__sflush_r>:
 800b1f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1fc:	0716      	lsls	r6, r2, #28
 800b1fe:	4605      	mov	r5, r0
 800b200:	460c      	mov	r4, r1
 800b202:	d454      	bmi.n	800b2ae <__sflush_r+0xba>
 800b204:	684b      	ldr	r3, [r1, #4]
 800b206:	2b00      	cmp	r3, #0
 800b208:	dc02      	bgt.n	800b210 <__sflush_r+0x1c>
 800b20a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	dd48      	ble.n	800b2a2 <__sflush_r+0xae>
 800b210:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b212:	2e00      	cmp	r6, #0
 800b214:	d045      	beq.n	800b2a2 <__sflush_r+0xae>
 800b216:	2300      	movs	r3, #0
 800b218:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b21c:	682f      	ldr	r7, [r5, #0]
 800b21e:	6a21      	ldr	r1, [r4, #32]
 800b220:	602b      	str	r3, [r5, #0]
 800b222:	d030      	beq.n	800b286 <__sflush_r+0x92>
 800b224:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b226:	89a3      	ldrh	r3, [r4, #12]
 800b228:	0759      	lsls	r1, r3, #29
 800b22a:	d505      	bpl.n	800b238 <__sflush_r+0x44>
 800b22c:	6863      	ldr	r3, [r4, #4]
 800b22e:	1ad2      	subs	r2, r2, r3
 800b230:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b232:	b10b      	cbz	r3, 800b238 <__sflush_r+0x44>
 800b234:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b236:	1ad2      	subs	r2, r2, r3
 800b238:	2300      	movs	r3, #0
 800b23a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b23c:	6a21      	ldr	r1, [r4, #32]
 800b23e:	4628      	mov	r0, r5
 800b240:	47b0      	blx	r6
 800b242:	1c43      	adds	r3, r0, #1
 800b244:	89a3      	ldrh	r3, [r4, #12]
 800b246:	d106      	bne.n	800b256 <__sflush_r+0x62>
 800b248:	6829      	ldr	r1, [r5, #0]
 800b24a:	291d      	cmp	r1, #29
 800b24c:	d82b      	bhi.n	800b2a6 <__sflush_r+0xb2>
 800b24e:	4a2a      	ldr	r2, [pc, #168]	@ (800b2f8 <__sflush_r+0x104>)
 800b250:	410a      	asrs	r2, r1
 800b252:	07d6      	lsls	r6, r2, #31
 800b254:	d427      	bmi.n	800b2a6 <__sflush_r+0xb2>
 800b256:	2200      	movs	r2, #0
 800b258:	6062      	str	r2, [r4, #4]
 800b25a:	04d9      	lsls	r1, r3, #19
 800b25c:	6922      	ldr	r2, [r4, #16]
 800b25e:	6022      	str	r2, [r4, #0]
 800b260:	d504      	bpl.n	800b26c <__sflush_r+0x78>
 800b262:	1c42      	adds	r2, r0, #1
 800b264:	d101      	bne.n	800b26a <__sflush_r+0x76>
 800b266:	682b      	ldr	r3, [r5, #0]
 800b268:	b903      	cbnz	r3, 800b26c <__sflush_r+0x78>
 800b26a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b26c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b26e:	602f      	str	r7, [r5, #0]
 800b270:	b1b9      	cbz	r1, 800b2a2 <__sflush_r+0xae>
 800b272:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b276:	4299      	cmp	r1, r3
 800b278:	d002      	beq.n	800b280 <__sflush_r+0x8c>
 800b27a:	4628      	mov	r0, r5
 800b27c:	f000 fa3e 	bl	800b6fc <_free_r>
 800b280:	2300      	movs	r3, #0
 800b282:	6363      	str	r3, [r4, #52]	@ 0x34
 800b284:	e00d      	b.n	800b2a2 <__sflush_r+0xae>
 800b286:	2301      	movs	r3, #1
 800b288:	4628      	mov	r0, r5
 800b28a:	47b0      	blx	r6
 800b28c:	4602      	mov	r2, r0
 800b28e:	1c50      	adds	r0, r2, #1
 800b290:	d1c9      	bne.n	800b226 <__sflush_r+0x32>
 800b292:	682b      	ldr	r3, [r5, #0]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d0c6      	beq.n	800b226 <__sflush_r+0x32>
 800b298:	2b1d      	cmp	r3, #29
 800b29a:	d001      	beq.n	800b2a0 <__sflush_r+0xac>
 800b29c:	2b16      	cmp	r3, #22
 800b29e:	d11e      	bne.n	800b2de <__sflush_r+0xea>
 800b2a0:	602f      	str	r7, [r5, #0]
 800b2a2:	2000      	movs	r0, #0
 800b2a4:	e022      	b.n	800b2ec <__sflush_r+0xf8>
 800b2a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2aa:	b21b      	sxth	r3, r3
 800b2ac:	e01b      	b.n	800b2e6 <__sflush_r+0xf2>
 800b2ae:	690f      	ldr	r7, [r1, #16]
 800b2b0:	2f00      	cmp	r7, #0
 800b2b2:	d0f6      	beq.n	800b2a2 <__sflush_r+0xae>
 800b2b4:	0793      	lsls	r3, r2, #30
 800b2b6:	680e      	ldr	r6, [r1, #0]
 800b2b8:	bf08      	it	eq
 800b2ba:	694b      	ldreq	r3, [r1, #20]
 800b2bc:	600f      	str	r7, [r1, #0]
 800b2be:	bf18      	it	ne
 800b2c0:	2300      	movne	r3, #0
 800b2c2:	eba6 0807 	sub.w	r8, r6, r7
 800b2c6:	608b      	str	r3, [r1, #8]
 800b2c8:	f1b8 0f00 	cmp.w	r8, #0
 800b2cc:	dde9      	ble.n	800b2a2 <__sflush_r+0xae>
 800b2ce:	6a21      	ldr	r1, [r4, #32]
 800b2d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b2d2:	4643      	mov	r3, r8
 800b2d4:	463a      	mov	r2, r7
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	47b0      	blx	r6
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	dc08      	bgt.n	800b2f0 <__sflush_r+0xfc>
 800b2de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2e6:	81a3      	strh	r3, [r4, #12]
 800b2e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2f0:	4407      	add	r7, r0
 800b2f2:	eba8 0800 	sub.w	r8, r8, r0
 800b2f6:	e7e7      	b.n	800b2c8 <__sflush_r+0xd4>
 800b2f8:	dfbffffe 	.word	0xdfbffffe

0800b2fc <_fflush_r>:
 800b2fc:	b538      	push	{r3, r4, r5, lr}
 800b2fe:	690b      	ldr	r3, [r1, #16]
 800b300:	4605      	mov	r5, r0
 800b302:	460c      	mov	r4, r1
 800b304:	b913      	cbnz	r3, 800b30c <_fflush_r+0x10>
 800b306:	2500      	movs	r5, #0
 800b308:	4628      	mov	r0, r5
 800b30a:	bd38      	pop	{r3, r4, r5, pc}
 800b30c:	b118      	cbz	r0, 800b316 <_fflush_r+0x1a>
 800b30e:	6a03      	ldr	r3, [r0, #32]
 800b310:	b90b      	cbnz	r3, 800b316 <_fflush_r+0x1a>
 800b312:	f7ff fa71 	bl	800a7f8 <__sinit>
 800b316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d0f3      	beq.n	800b306 <_fflush_r+0xa>
 800b31e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b320:	07d0      	lsls	r0, r2, #31
 800b322:	d404      	bmi.n	800b32e <_fflush_r+0x32>
 800b324:	0599      	lsls	r1, r3, #22
 800b326:	d402      	bmi.n	800b32e <_fflush_r+0x32>
 800b328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b32a:	f7ff fbc0 	bl	800aaae <__retarget_lock_acquire_recursive>
 800b32e:	4628      	mov	r0, r5
 800b330:	4621      	mov	r1, r4
 800b332:	f7ff ff5f 	bl	800b1f4 <__sflush_r>
 800b336:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b338:	07da      	lsls	r2, r3, #31
 800b33a:	4605      	mov	r5, r0
 800b33c:	d4e4      	bmi.n	800b308 <_fflush_r+0xc>
 800b33e:	89a3      	ldrh	r3, [r4, #12]
 800b340:	059b      	lsls	r3, r3, #22
 800b342:	d4e1      	bmi.n	800b308 <_fflush_r+0xc>
 800b344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b346:	f7ff fbb3 	bl	800aab0 <__retarget_lock_release_recursive>
 800b34a:	e7dd      	b.n	800b308 <_fflush_r+0xc>

0800b34c <__malloc_lock>:
 800b34c:	4801      	ldr	r0, [pc, #4]	@ (800b354 <__malloc_lock+0x8>)
 800b34e:	f7ff bbae 	b.w	800aaae <__retarget_lock_acquire_recursive>
 800b352:	bf00      	nop
 800b354:	20000c28 	.word	0x20000c28

0800b358 <__malloc_unlock>:
 800b358:	4801      	ldr	r0, [pc, #4]	@ (800b360 <__malloc_unlock+0x8>)
 800b35a:	f7ff bba9 	b.w	800aab0 <__retarget_lock_release_recursive>
 800b35e:	bf00      	nop
 800b360:	20000c28 	.word	0x20000c28

0800b364 <__sread>:
 800b364:	b510      	push	{r4, lr}
 800b366:	460c      	mov	r4, r1
 800b368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b36c:	f000 f98a 	bl	800b684 <_read_r>
 800b370:	2800      	cmp	r0, #0
 800b372:	bfab      	itete	ge
 800b374:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b376:	89a3      	ldrhlt	r3, [r4, #12]
 800b378:	181b      	addge	r3, r3, r0
 800b37a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b37e:	bfac      	ite	ge
 800b380:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b382:	81a3      	strhlt	r3, [r4, #12]
 800b384:	bd10      	pop	{r4, pc}

0800b386 <__swrite>:
 800b386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b38a:	461f      	mov	r7, r3
 800b38c:	898b      	ldrh	r3, [r1, #12]
 800b38e:	05db      	lsls	r3, r3, #23
 800b390:	4605      	mov	r5, r0
 800b392:	460c      	mov	r4, r1
 800b394:	4616      	mov	r6, r2
 800b396:	d505      	bpl.n	800b3a4 <__swrite+0x1e>
 800b398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b39c:	2302      	movs	r3, #2
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f000 f95e 	bl	800b660 <_lseek_r>
 800b3a4:	89a3      	ldrh	r3, [r4, #12]
 800b3a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b3ae:	81a3      	strh	r3, [r4, #12]
 800b3b0:	4632      	mov	r2, r6
 800b3b2:	463b      	mov	r3, r7
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ba:	f000 b985 	b.w	800b6c8 <_write_r>

0800b3be <__sseek>:
 800b3be:	b510      	push	{r4, lr}
 800b3c0:	460c      	mov	r4, r1
 800b3c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c6:	f000 f94b 	bl	800b660 <_lseek_r>
 800b3ca:	1c43      	adds	r3, r0, #1
 800b3cc:	89a3      	ldrh	r3, [r4, #12]
 800b3ce:	bf15      	itete	ne
 800b3d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b3d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b3d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b3da:	81a3      	strheq	r3, [r4, #12]
 800b3dc:	bf18      	it	ne
 800b3de:	81a3      	strhne	r3, [r4, #12]
 800b3e0:	bd10      	pop	{r4, pc}

0800b3e2 <__sclose>:
 800b3e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3e6:	f000 b909 	b.w	800b5fc <_close_r>
	...

0800b3ec <fiprintf>:
 800b3ec:	b40e      	push	{r1, r2, r3}
 800b3ee:	b503      	push	{r0, r1, lr}
 800b3f0:	4601      	mov	r1, r0
 800b3f2:	ab03      	add	r3, sp, #12
 800b3f4:	4805      	ldr	r0, [pc, #20]	@ (800b40c <fiprintf+0x20>)
 800b3f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3fa:	6800      	ldr	r0, [r0, #0]
 800b3fc:	9301      	str	r3, [sp, #4]
 800b3fe:	f7ff fba9 	bl	800ab54 <_vfiprintf_r>
 800b402:	b002      	add	sp, #8
 800b404:	f85d eb04 	ldr.w	lr, [sp], #4
 800b408:	b003      	add	sp, #12
 800b40a:	4770      	bx	lr
 800b40c:	20000174 	.word	0x20000174

0800b410 <__swbuf_r>:
 800b410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b412:	460e      	mov	r6, r1
 800b414:	4614      	mov	r4, r2
 800b416:	4605      	mov	r5, r0
 800b418:	b118      	cbz	r0, 800b422 <__swbuf_r+0x12>
 800b41a:	6a03      	ldr	r3, [r0, #32]
 800b41c:	b90b      	cbnz	r3, 800b422 <__swbuf_r+0x12>
 800b41e:	f7ff f9eb 	bl	800a7f8 <__sinit>
 800b422:	69a3      	ldr	r3, [r4, #24]
 800b424:	60a3      	str	r3, [r4, #8]
 800b426:	89a3      	ldrh	r3, [r4, #12]
 800b428:	071a      	lsls	r2, r3, #28
 800b42a:	d501      	bpl.n	800b430 <__swbuf_r+0x20>
 800b42c:	6923      	ldr	r3, [r4, #16]
 800b42e:	b943      	cbnz	r3, 800b442 <__swbuf_r+0x32>
 800b430:	4621      	mov	r1, r4
 800b432:	4628      	mov	r0, r5
 800b434:	f000 f82a 	bl	800b48c <__swsetup_r>
 800b438:	b118      	cbz	r0, 800b442 <__swbuf_r+0x32>
 800b43a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b43e:	4638      	mov	r0, r7
 800b440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b442:	6823      	ldr	r3, [r4, #0]
 800b444:	6922      	ldr	r2, [r4, #16]
 800b446:	1a98      	subs	r0, r3, r2
 800b448:	6963      	ldr	r3, [r4, #20]
 800b44a:	b2f6      	uxtb	r6, r6
 800b44c:	4283      	cmp	r3, r0
 800b44e:	4637      	mov	r7, r6
 800b450:	dc05      	bgt.n	800b45e <__swbuf_r+0x4e>
 800b452:	4621      	mov	r1, r4
 800b454:	4628      	mov	r0, r5
 800b456:	f7ff ff51 	bl	800b2fc <_fflush_r>
 800b45a:	2800      	cmp	r0, #0
 800b45c:	d1ed      	bne.n	800b43a <__swbuf_r+0x2a>
 800b45e:	68a3      	ldr	r3, [r4, #8]
 800b460:	3b01      	subs	r3, #1
 800b462:	60a3      	str	r3, [r4, #8]
 800b464:	6823      	ldr	r3, [r4, #0]
 800b466:	1c5a      	adds	r2, r3, #1
 800b468:	6022      	str	r2, [r4, #0]
 800b46a:	701e      	strb	r6, [r3, #0]
 800b46c:	6962      	ldr	r2, [r4, #20]
 800b46e:	1c43      	adds	r3, r0, #1
 800b470:	429a      	cmp	r2, r3
 800b472:	d004      	beq.n	800b47e <__swbuf_r+0x6e>
 800b474:	89a3      	ldrh	r3, [r4, #12]
 800b476:	07db      	lsls	r3, r3, #31
 800b478:	d5e1      	bpl.n	800b43e <__swbuf_r+0x2e>
 800b47a:	2e0a      	cmp	r6, #10
 800b47c:	d1df      	bne.n	800b43e <__swbuf_r+0x2e>
 800b47e:	4621      	mov	r1, r4
 800b480:	4628      	mov	r0, r5
 800b482:	f7ff ff3b 	bl	800b2fc <_fflush_r>
 800b486:	2800      	cmp	r0, #0
 800b488:	d0d9      	beq.n	800b43e <__swbuf_r+0x2e>
 800b48a:	e7d6      	b.n	800b43a <__swbuf_r+0x2a>

0800b48c <__swsetup_r>:
 800b48c:	b538      	push	{r3, r4, r5, lr}
 800b48e:	4b29      	ldr	r3, [pc, #164]	@ (800b534 <__swsetup_r+0xa8>)
 800b490:	4605      	mov	r5, r0
 800b492:	6818      	ldr	r0, [r3, #0]
 800b494:	460c      	mov	r4, r1
 800b496:	b118      	cbz	r0, 800b4a0 <__swsetup_r+0x14>
 800b498:	6a03      	ldr	r3, [r0, #32]
 800b49a:	b90b      	cbnz	r3, 800b4a0 <__swsetup_r+0x14>
 800b49c:	f7ff f9ac 	bl	800a7f8 <__sinit>
 800b4a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4a4:	0719      	lsls	r1, r3, #28
 800b4a6:	d422      	bmi.n	800b4ee <__swsetup_r+0x62>
 800b4a8:	06da      	lsls	r2, r3, #27
 800b4aa:	d407      	bmi.n	800b4bc <__swsetup_r+0x30>
 800b4ac:	2209      	movs	r2, #9
 800b4ae:	602a      	str	r2, [r5, #0]
 800b4b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4b4:	81a3      	strh	r3, [r4, #12]
 800b4b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b4ba:	e033      	b.n	800b524 <__swsetup_r+0x98>
 800b4bc:	0758      	lsls	r0, r3, #29
 800b4be:	d512      	bpl.n	800b4e6 <__swsetup_r+0x5a>
 800b4c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b4c2:	b141      	cbz	r1, 800b4d6 <__swsetup_r+0x4a>
 800b4c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4c8:	4299      	cmp	r1, r3
 800b4ca:	d002      	beq.n	800b4d2 <__swsetup_r+0x46>
 800b4cc:	4628      	mov	r0, r5
 800b4ce:	f000 f915 	bl	800b6fc <_free_r>
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b4d6:	89a3      	ldrh	r3, [r4, #12]
 800b4d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b4dc:	81a3      	strh	r3, [r4, #12]
 800b4de:	2300      	movs	r3, #0
 800b4e0:	6063      	str	r3, [r4, #4]
 800b4e2:	6923      	ldr	r3, [r4, #16]
 800b4e4:	6023      	str	r3, [r4, #0]
 800b4e6:	89a3      	ldrh	r3, [r4, #12]
 800b4e8:	f043 0308 	orr.w	r3, r3, #8
 800b4ec:	81a3      	strh	r3, [r4, #12]
 800b4ee:	6923      	ldr	r3, [r4, #16]
 800b4f0:	b94b      	cbnz	r3, 800b506 <__swsetup_r+0x7a>
 800b4f2:	89a3      	ldrh	r3, [r4, #12]
 800b4f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b4f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4fc:	d003      	beq.n	800b506 <__swsetup_r+0x7a>
 800b4fe:	4621      	mov	r1, r4
 800b500:	4628      	mov	r0, r5
 800b502:	f000 f83f 	bl	800b584 <__smakebuf_r>
 800b506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b50a:	f013 0201 	ands.w	r2, r3, #1
 800b50e:	d00a      	beq.n	800b526 <__swsetup_r+0x9a>
 800b510:	2200      	movs	r2, #0
 800b512:	60a2      	str	r2, [r4, #8]
 800b514:	6962      	ldr	r2, [r4, #20]
 800b516:	4252      	negs	r2, r2
 800b518:	61a2      	str	r2, [r4, #24]
 800b51a:	6922      	ldr	r2, [r4, #16]
 800b51c:	b942      	cbnz	r2, 800b530 <__swsetup_r+0xa4>
 800b51e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b522:	d1c5      	bne.n	800b4b0 <__swsetup_r+0x24>
 800b524:	bd38      	pop	{r3, r4, r5, pc}
 800b526:	0799      	lsls	r1, r3, #30
 800b528:	bf58      	it	pl
 800b52a:	6962      	ldrpl	r2, [r4, #20]
 800b52c:	60a2      	str	r2, [r4, #8]
 800b52e:	e7f4      	b.n	800b51a <__swsetup_r+0x8e>
 800b530:	2000      	movs	r0, #0
 800b532:	e7f7      	b.n	800b524 <__swsetup_r+0x98>
 800b534:	20000174 	.word	0x20000174

0800b538 <__swhatbuf_r>:
 800b538:	b570      	push	{r4, r5, r6, lr}
 800b53a:	460c      	mov	r4, r1
 800b53c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b540:	2900      	cmp	r1, #0
 800b542:	b096      	sub	sp, #88	@ 0x58
 800b544:	4615      	mov	r5, r2
 800b546:	461e      	mov	r6, r3
 800b548:	da0d      	bge.n	800b566 <__swhatbuf_r+0x2e>
 800b54a:	89a3      	ldrh	r3, [r4, #12]
 800b54c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b550:	f04f 0100 	mov.w	r1, #0
 800b554:	bf14      	ite	ne
 800b556:	2340      	movne	r3, #64	@ 0x40
 800b558:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b55c:	2000      	movs	r0, #0
 800b55e:	6031      	str	r1, [r6, #0]
 800b560:	602b      	str	r3, [r5, #0]
 800b562:	b016      	add	sp, #88	@ 0x58
 800b564:	bd70      	pop	{r4, r5, r6, pc}
 800b566:	466a      	mov	r2, sp
 800b568:	f000 f858 	bl	800b61c <_fstat_r>
 800b56c:	2800      	cmp	r0, #0
 800b56e:	dbec      	blt.n	800b54a <__swhatbuf_r+0x12>
 800b570:	9901      	ldr	r1, [sp, #4]
 800b572:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b576:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b57a:	4259      	negs	r1, r3
 800b57c:	4159      	adcs	r1, r3
 800b57e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b582:	e7eb      	b.n	800b55c <__swhatbuf_r+0x24>

0800b584 <__smakebuf_r>:
 800b584:	898b      	ldrh	r3, [r1, #12]
 800b586:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b588:	079d      	lsls	r5, r3, #30
 800b58a:	4606      	mov	r6, r0
 800b58c:	460c      	mov	r4, r1
 800b58e:	d507      	bpl.n	800b5a0 <__smakebuf_r+0x1c>
 800b590:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b594:	6023      	str	r3, [r4, #0]
 800b596:	6123      	str	r3, [r4, #16]
 800b598:	2301      	movs	r3, #1
 800b59a:	6163      	str	r3, [r4, #20]
 800b59c:	b003      	add	sp, #12
 800b59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5a0:	ab01      	add	r3, sp, #4
 800b5a2:	466a      	mov	r2, sp
 800b5a4:	f7ff ffc8 	bl	800b538 <__swhatbuf_r>
 800b5a8:	9f00      	ldr	r7, [sp, #0]
 800b5aa:	4605      	mov	r5, r0
 800b5ac:	4639      	mov	r1, r7
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	f7ff fc12 	bl	800add8 <_malloc_r>
 800b5b4:	b948      	cbnz	r0, 800b5ca <__smakebuf_r+0x46>
 800b5b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5ba:	059a      	lsls	r2, r3, #22
 800b5bc:	d4ee      	bmi.n	800b59c <__smakebuf_r+0x18>
 800b5be:	f023 0303 	bic.w	r3, r3, #3
 800b5c2:	f043 0302 	orr.w	r3, r3, #2
 800b5c6:	81a3      	strh	r3, [r4, #12]
 800b5c8:	e7e2      	b.n	800b590 <__smakebuf_r+0xc>
 800b5ca:	89a3      	ldrh	r3, [r4, #12]
 800b5cc:	6020      	str	r0, [r4, #0]
 800b5ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5d2:	81a3      	strh	r3, [r4, #12]
 800b5d4:	9b01      	ldr	r3, [sp, #4]
 800b5d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b5da:	b15b      	cbz	r3, 800b5f4 <__smakebuf_r+0x70>
 800b5dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5e0:	4630      	mov	r0, r6
 800b5e2:	f000 f82d 	bl	800b640 <_isatty_r>
 800b5e6:	b128      	cbz	r0, 800b5f4 <__smakebuf_r+0x70>
 800b5e8:	89a3      	ldrh	r3, [r4, #12]
 800b5ea:	f023 0303 	bic.w	r3, r3, #3
 800b5ee:	f043 0301 	orr.w	r3, r3, #1
 800b5f2:	81a3      	strh	r3, [r4, #12]
 800b5f4:	89a3      	ldrh	r3, [r4, #12]
 800b5f6:	431d      	orrs	r5, r3
 800b5f8:	81a5      	strh	r5, [r4, #12]
 800b5fa:	e7cf      	b.n	800b59c <__smakebuf_r+0x18>

0800b5fc <_close_r>:
 800b5fc:	b538      	push	{r3, r4, r5, lr}
 800b5fe:	4d06      	ldr	r5, [pc, #24]	@ (800b618 <_close_r+0x1c>)
 800b600:	2300      	movs	r3, #0
 800b602:	4604      	mov	r4, r0
 800b604:	4608      	mov	r0, r1
 800b606:	602b      	str	r3, [r5, #0]
 800b608:	f7f5 fd0c 	bl	8001024 <_close>
 800b60c:	1c43      	adds	r3, r0, #1
 800b60e:	d102      	bne.n	800b616 <_close_r+0x1a>
 800b610:	682b      	ldr	r3, [r5, #0]
 800b612:	b103      	cbz	r3, 800b616 <_close_r+0x1a>
 800b614:	6023      	str	r3, [r4, #0]
 800b616:	bd38      	pop	{r3, r4, r5, pc}
 800b618:	20000c34 	.word	0x20000c34

0800b61c <_fstat_r>:
 800b61c:	b538      	push	{r3, r4, r5, lr}
 800b61e:	4d07      	ldr	r5, [pc, #28]	@ (800b63c <_fstat_r+0x20>)
 800b620:	2300      	movs	r3, #0
 800b622:	4604      	mov	r4, r0
 800b624:	4608      	mov	r0, r1
 800b626:	4611      	mov	r1, r2
 800b628:	602b      	str	r3, [r5, #0]
 800b62a:	f7f5 fd07 	bl	800103c <_fstat>
 800b62e:	1c43      	adds	r3, r0, #1
 800b630:	d102      	bne.n	800b638 <_fstat_r+0x1c>
 800b632:	682b      	ldr	r3, [r5, #0]
 800b634:	b103      	cbz	r3, 800b638 <_fstat_r+0x1c>
 800b636:	6023      	str	r3, [r4, #0]
 800b638:	bd38      	pop	{r3, r4, r5, pc}
 800b63a:	bf00      	nop
 800b63c:	20000c34 	.word	0x20000c34

0800b640 <_isatty_r>:
 800b640:	b538      	push	{r3, r4, r5, lr}
 800b642:	4d06      	ldr	r5, [pc, #24]	@ (800b65c <_isatty_r+0x1c>)
 800b644:	2300      	movs	r3, #0
 800b646:	4604      	mov	r4, r0
 800b648:	4608      	mov	r0, r1
 800b64a:	602b      	str	r3, [r5, #0]
 800b64c:	f7f5 fd06 	bl	800105c <_isatty>
 800b650:	1c43      	adds	r3, r0, #1
 800b652:	d102      	bne.n	800b65a <_isatty_r+0x1a>
 800b654:	682b      	ldr	r3, [r5, #0]
 800b656:	b103      	cbz	r3, 800b65a <_isatty_r+0x1a>
 800b658:	6023      	str	r3, [r4, #0]
 800b65a:	bd38      	pop	{r3, r4, r5, pc}
 800b65c:	20000c34 	.word	0x20000c34

0800b660 <_lseek_r>:
 800b660:	b538      	push	{r3, r4, r5, lr}
 800b662:	4d07      	ldr	r5, [pc, #28]	@ (800b680 <_lseek_r+0x20>)
 800b664:	4604      	mov	r4, r0
 800b666:	4608      	mov	r0, r1
 800b668:	4611      	mov	r1, r2
 800b66a:	2200      	movs	r2, #0
 800b66c:	602a      	str	r2, [r5, #0]
 800b66e:	461a      	mov	r2, r3
 800b670:	f7f5 fcff 	bl	8001072 <_lseek>
 800b674:	1c43      	adds	r3, r0, #1
 800b676:	d102      	bne.n	800b67e <_lseek_r+0x1e>
 800b678:	682b      	ldr	r3, [r5, #0]
 800b67a:	b103      	cbz	r3, 800b67e <_lseek_r+0x1e>
 800b67c:	6023      	str	r3, [r4, #0]
 800b67e:	bd38      	pop	{r3, r4, r5, pc}
 800b680:	20000c34 	.word	0x20000c34

0800b684 <_read_r>:
 800b684:	b538      	push	{r3, r4, r5, lr}
 800b686:	4d07      	ldr	r5, [pc, #28]	@ (800b6a4 <_read_r+0x20>)
 800b688:	4604      	mov	r4, r0
 800b68a:	4608      	mov	r0, r1
 800b68c:	4611      	mov	r1, r2
 800b68e:	2200      	movs	r2, #0
 800b690:	602a      	str	r2, [r5, #0]
 800b692:	461a      	mov	r2, r3
 800b694:	f7f5 fc8d 	bl	8000fb2 <_read>
 800b698:	1c43      	adds	r3, r0, #1
 800b69a:	d102      	bne.n	800b6a2 <_read_r+0x1e>
 800b69c:	682b      	ldr	r3, [r5, #0]
 800b69e:	b103      	cbz	r3, 800b6a2 <_read_r+0x1e>
 800b6a0:	6023      	str	r3, [r4, #0]
 800b6a2:	bd38      	pop	{r3, r4, r5, pc}
 800b6a4:	20000c34 	.word	0x20000c34

0800b6a8 <_sbrk_r>:
 800b6a8:	b538      	push	{r3, r4, r5, lr}
 800b6aa:	4d06      	ldr	r5, [pc, #24]	@ (800b6c4 <_sbrk_r+0x1c>)
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	4604      	mov	r4, r0
 800b6b0:	4608      	mov	r0, r1
 800b6b2:	602b      	str	r3, [r5, #0]
 800b6b4:	f7f5 fcea 	bl	800108c <_sbrk>
 800b6b8:	1c43      	adds	r3, r0, #1
 800b6ba:	d102      	bne.n	800b6c2 <_sbrk_r+0x1a>
 800b6bc:	682b      	ldr	r3, [r5, #0]
 800b6be:	b103      	cbz	r3, 800b6c2 <_sbrk_r+0x1a>
 800b6c0:	6023      	str	r3, [r4, #0]
 800b6c2:	bd38      	pop	{r3, r4, r5, pc}
 800b6c4:	20000c34 	.word	0x20000c34

0800b6c8 <_write_r>:
 800b6c8:	b538      	push	{r3, r4, r5, lr}
 800b6ca:	4d07      	ldr	r5, [pc, #28]	@ (800b6e8 <_write_r+0x20>)
 800b6cc:	4604      	mov	r4, r0
 800b6ce:	4608      	mov	r0, r1
 800b6d0:	4611      	mov	r1, r2
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	602a      	str	r2, [r5, #0]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	f7f5 fc88 	bl	8000fec <_write>
 800b6dc:	1c43      	adds	r3, r0, #1
 800b6de:	d102      	bne.n	800b6e6 <_write_r+0x1e>
 800b6e0:	682b      	ldr	r3, [r5, #0]
 800b6e2:	b103      	cbz	r3, 800b6e6 <_write_r+0x1e>
 800b6e4:	6023      	str	r3, [r4, #0]
 800b6e6:	bd38      	pop	{r3, r4, r5, pc}
 800b6e8:	20000c34 	.word	0x20000c34

0800b6ec <abort>:
 800b6ec:	b508      	push	{r3, lr}
 800b6ee:	2006      	movs	r0, #6
 800b6f0:	f000 f876 	bl	800b7e0 <raise>
 800b6f4:	2001      	movs	r0, #1
 800b6f6:	f7f5 fc51 	bl	8000f9c <_exit>
	...

0800b6fc <_free_r>:
 800b6fc:	b538      	push	{r3, r4, r5, lr}
 800b6fe:	4605      	mov	r5, r0
 800b700:	2900      	cmp	r1, #0
 800b702:	d041      	beq.n	800b788 <_free_r+0x8c>
 800b704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b708:	1f0c      	subs	r4, r1, #4
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	bfb8      	it	lt
 800b70e:	18e4      	addlt	r4, r4, r3
 800b710:	f7ff fe1c 	bl	800b34c <__malloc_lock>
 800b714:	4a1d      	ldr	r2, [pc, #116]	@ (800b78c <_free_r+0x90>)
 800b716:	6813      	ldr	r3, [r2, #0]
 800b718:	b933      	cbnz	r3, 800b728 <_free_r+0x2c>
 800b71a:	6063      	str	r3, [r4, #4]
 800b71c:	6014      	str	r4, [r2, #0]
 800b71e:	4628      	mov	r0, r5
 800b720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b724:	f7ff be18 	b.w	800b358 <__malloc_unlock>
 800b728:	42a3      	cmp	r3, r4
 800b72a:	d908      	bls.n	800b73e <_free_r+0x42>
 800b72c:	6820      	ldr	r0, [r4, #0]
 800b72e:	1821      	adds	r1, r4, r0
 800b730:	428b      	cmp	r3, r1
 800b732:	bf01      	itttt	eq
 800b734:	6819      	ldreq	r1, [r3, #0]
 800b736:	685b      	ldreq	r3, [r3, #4]
 800b738:	1809      	addeq	r1, r1, r0
 800b73a:	6021      	streq	r1, [r4, #0]
 800b73c:	e7ed      	b.n	800b71a <_free_r+0x1e>
 800b73e:	461a      	mov	r2, r3
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	b10b      	cbz	r3, 800b748 <_free_r+0x4c>
 800b744:	42a3      	cmp	r3, r4
 800b746:	d9fa      	bls.n	800b73e <_free_r+0x42>
 800b748:	6811      	ldr	r1, [r2, #0]
 800b74a:	1850      	adds	r0, r2, r1
 800b74c:	42a0      	cmp	r0, r4
 800b74e:	d10b      	bne.n	800b768 <_free_r+0x6c>
 800b750:	6820      	ldr	r0, [r4, #0]
 800b752:	4401      	add	r1, r0
 800b754:	1850      	adds	r0, r2, r1
 800b756:	4283      	cmp	r3, r0
 800b758:	6011      	str	r1, [r2, #0]
 800b75a:	d1e0      	bne.n	800b71e <_free_r+0x22>
 800b75c:	6818      	ldr	r0, [r3, #0]
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	6053      	str	r3, [r2, #4]
 800b762:	4408      	add	r0, r1
 800b764:	6010      	str	r0, [r2, #0]
 800b766:	e7da      	b.n	800b71e <_free_r+0x22>
 800b768:	d902      	bls.n	800b770 <_free_r+0x74>
 800b76a:	230c      	movs	r3, #12
 800b76c:	602b      	str	r3, [r5, #0]
 800b76e:	e7d6      	b.n	800b71e <_free_r+0x22>
 800b770:	6820      	ldr	r0, [r4, #0]
 800b772:	1821      	adds	r1, r4, r0
 800b774:	428b      	cmp	r3, r1
 800b776:	bf04      	itt	eq
 800b778:	6819      	ldreq	r1, [r3, #0]
 800b77a:	685b      	ldreq	r3, [r3, #4]
 800b77c:	6063      	str	r3, [r4, #4]
 800b77e:	bf04      	itt	eq
 800b780:	1809      	addeq	r1, r1, r0
 800b782:	6021      	streq	r1, [r4, #0]
 800b784:	6054      	str	r4, [r2, #4]
 800b786:	e7ca      	b.n	800b71e <_free_r+0x22>
 800b788:	bd38      	pop	{r3, r4, r5, pc}
 800b78a:	bf00      	nop
 800b78c:	20000c30 	.word	0x20000c30

0800b790 <_raise_r>:
 800b790:	291f      	cmp	r1, #31
 800b792:	b538      	push	{r3, r4, r5, lr}
 800b794:	4605      	mov	r5, r0
 800b796:	460c      	mov	r4, r1
 800b798:	d904      	bls.n	800b7a4 <_raise_r+0x14>
 800b79a:	2316      	movs	r3, #22
 800b79c:	6003      	str	r3, [r0, #0]
 800b79e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b7a2:	bd38      	pop	{r3, r4, r5, pc}
 800b7a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b7a6:	b112      	cbz	r2, 800b7ae <_raise_r+0x1e>
 800b7a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7ac:	b94b      	cbnz	r3, 800b7c2 <_raise_r+0x32>
 800b7ae:	4628      	mov	r0, r5
 800b7b0:	f000 f830 	bl	800b814 <_getpid_r>
 800b7b4:	4622      	mov	r2, r4
 800b7b6:	4601      	mov	r1, r0
 800b7b8:	4628      	mov	r0, r5
 800b7ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7be:	f000 b817 	b.w	800b7f0 <_kill_r>
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d00a      	beq.n	800b7dc <_raise_r+0x4c>
 800b7c6:	1c59      	adds	r1, r3, #1
 800b7c8:	d103      	bne.n	800b7d2 <_raise_r+0x42>
 800b7ca:	2316      	movs	r3, #22
 800b7cc:	6003      	str	r3, [r0, #0]
 800b7ce:	2001      	movs	r0, #1
 800b7d0:	e7e7      	b.n	800b7a2 <_raise_r+0x12>
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b7d8:	4620      	mov	r0, r4
 800b7da:	4798      	blx	r3
 800b7dc:	2000      	movs	r0, #0
 800b7de:	e7e0      	b.n	800b7a2 <_raise_r+0x12>

0800b7e0 <raise>:
 800b7e0:	4b02      	ldr	r3, [pc, #8]	@ (800b7ec <raise+0xc>)
 800b7e2:	4601      	mov	r1, r0
 800b7e4:	6818      	ldr	r0, [r3, #0]
 800b7e6:	f7ff bfd3 	b.w	800b790 <_raise_r>
 800b7ea:	bf00      	nop
 800b7ec:	20000174 	.word	0x20000174

0800b7f0 <_kill_r>:
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	4d07      	ldr	r5, [pc, #28]	@ (800b810 <_kill_r+0x20>)
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	4608      	mov	r0, r1
 800b7fa:	4611      	mov	r1, r2
 800b7fc:	602b      	str	r3, [r5, #0]
 800b7fe:	f7f5 fbbd 	bl	8000f7c <_kill>
 800b802:	1c43      	adds	r3, r0, #1
 800b804:	d102      	bne.n	800b80c <_kill_r+0x1c>
 800b806:	682b      	ldr	r3, [r5, #0]
 800b808:	b103      	cbz	r3, 800b80c <_kill_r+0x1c>
 800b80a:	6023      	str	r3, [r4, #0]
 800b80c:	bd38      	pop	{r3, r4, r5, pc}
 800b80e:	bf00      	nop
 800b810:	20000c34 	.word	0x20000c34

0800b814 <_getpid_r>:
 800b814:	f7f5 bbaa 	b.w	8000f6c <_getpid>

0800b818 <_init>:
 800b818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b81a:	bf00      	nop
 800b81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b81e:	bc08      	pop	{r3}
 800b820:	469e      	mov	lr, r3
 800b822:	4770      	bx	lr

0800b824 <_fini>:
 800b824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b826:	bf00      	nop
 800b828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b82a:	bc08      	pop	{r3}
 800b82c:	469e      	mov	lr, r3
 800b82e:	4770      	bx	lr
