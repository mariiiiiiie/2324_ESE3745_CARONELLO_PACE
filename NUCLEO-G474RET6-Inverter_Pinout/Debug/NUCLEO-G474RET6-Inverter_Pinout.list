
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009400  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  080095e0  080095e0  0000a5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009744  08009744  0000b124  2**0
                  CONTENTS
  4 .ARM          00000008  08009744  08009744  0000a744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800974c  0800974c  0000b124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800974c  0800974c  0000a74c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009750  08009750  0000a750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  08009754  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  20000124  08009878  0000b124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000638  08009878  0000b638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a52f  00000000  00000000  0000b154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003630  00000000  00000000  00025683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  00028cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001123  00000000  00000000  0002a2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a243  00000000  00000000  0002b403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001abbd  00000000  00000000  00055646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001149a8  00000000  00000000  00070203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00184bab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000691c  00000000  00000000  00184bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0018b50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000124 	.word	0x20000124
 80001fc:	00000000 	.word	0x00000000
 8000200:	080095c8 	.word	0x080095c8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000128 	.word	0x20000128
 800021c:	080095c8 	.word	0x080095c8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2220      	movs	r2, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f007 ff4f 	bl	800849c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005fe:	4b32      	ldr	r3, [pc, #200]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000600:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000604:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000606:	4b30      	ldr	r3, [pc, #192]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000608:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800060c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060e:	4b2e      	ldr	r3, [pc, #184]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000614:	4b2c      	ldr	r3, [pc, #176]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800061a:	4b2b      	ldr	r3, [pc, #172]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000620:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000626:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000628:	2204      	movs	r2, #4
 800062a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800062c:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800062e:	2200      	movs	r2, #0
 8000630:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000632:	4b25      	ldr	r3, [pc, #148]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000634:	2200      	movs	r2, #0
 8000636:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000638:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800063a:	2201      	movs	r2, #1
 800063c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b22      	ldr	r3, [pc, #136]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800064c:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800064e:	2200      	movs	r2, #0
 8000650:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000652:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065a:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800065c:	2200      	movs	r2, #0
 800065e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4817      	ldr	r0, [pc, #92]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800066a:	f001 fb21 	bl	8001cb0 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000674:	f000 faa8 	bl	8000bc8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000680:	4619      	mov	r1, r3
 8000682:	4811      	ldr	r0, [pc, #68]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000684:	f002 f936 	bl	80028f4 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800068e:	f000 fa9b 	bl	8000bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <MX_ADC1_Init+0xec>)
 8000694:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	237f      	movs	r3, #127	@ 0x7f
 80006a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a2:	2304      	movs	r3, #4
 80006a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	4806      	ldr	r0, [pc, #24]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 80006b0:	f001 fcba 	bl	8002028 <HAL_ADC_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ba:	f000 fa85 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	3730      	adds	r7, #48	@ 0x30
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000140 	.word	0x20000140
 80006cc:	21800100 	.word	0x21800100

080006d0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2220      	movs	r2, #32
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f007 fedd 	bl	800849c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006e4:	4a2b      	ldr	r2, [pc, #172]	@ (8000794 <MX_ADC2_Init+0xc4>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e8:	4b29      	ldr	r3, [pc, #164]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006ea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006ee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006f0:	4b27      	ldr	r3, [pc, #156]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f6:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006fc:	4b24      	ldr	r3, [pc, #144]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000702:	4b23      	ldr	r3, [pc, #140]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000708:	4b21      	ldr	r3, [pc, #132]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800070a:	2204      	movs	r2, #4
 800070c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800070e:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000714:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000716:	2200      	movs	r2, #0
 8000718:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800071c:	2201      	movs	r2, #1
 800071e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000720:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000728:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800072a:	2200      	movs	r2, #0
 800072c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000730:	2200      	movs	r2, #0
 8000732:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000734:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800073e:	2200      	movs	r2, #0
 8000740:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000742:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800074a:	4811      	ldr	r0, [pc, #68]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800074c:	f001 fab0 	bl	8001cb0 <HAL_ADC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000756:	f000 fa37 	bl	8000bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_ADC2_Init+0xc8>)
 800075c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800075e:	2306      	movs	r3, #6
 8000760:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000766:	237f      	movs	r3, #127	@ 0x7f
 8000768:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076a:	2304      	movs	r3, #4
 800076c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	4619      	mov	r1, r3
 8000776:	4806      	ldr	r0, [pc, #24]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000778:	f001 fc56 	bl	8002028 <HAL_ADC_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000782:	f000 fa21 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	3720      	adds	r7, #32
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200001ac 	.word	0x200001ac
 8000794:	50000100 	.word	0x50000100
 8000798:	19200040 	.word	0x19200040

0800079c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0a4      	sub	sp, #144	@ 0x90
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007b8:	2254      	movs	r2, #84	@ 0x54
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f007 fe6d 	bl	800849c <memset>
  if(adcHandle->Instance==ADC1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80007ca:	d174      	bne.n	80008b6 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007d2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 fb03 	bl	8003de8 <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007e8:	f000 f9ee 	bl	8000bc8 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007ec:	4b63      	ldr	r3, [pc, #396]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	4a62      	ldr	r2, [pc, #392]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007f6:	4b61      	ldr	r3, [pc, #388]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d10b      	bne.n	8000816 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007fe:	4b60      	ldr	r3, [pc, #384]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a5f      	ldr	r2, [pc, #380]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000804:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b5d      	ldr	r3, [pc, #372]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
 8000814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b5a      	ldr	r3, [pc, #360]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a59      	ldr	r2, [pc, #356]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b57      	ldr	r3, [pc, #348]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	623b      	str	r3, [r7, #32]
 800082c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b54      	ldr	r3, [pc, #336]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a53      	ldr	r2, [pc, #332]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b51      	ldr	r3, [pc, #324]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	61fb      	str	r3, [r7, #28]
 8000844:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b4e      	ldr	r3, [pc, #312]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a4d      	ldr	r2, [pc, #308]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b4b      	ldr	r3, [pc, #300]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800085e:	2304      	movs	r3, #4
 8000860:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000862:	2303      	movs	r3, #3
 8000864:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000872:	4619      	mov	r1, r3
 8000874:	4843      	ldr	r0, [pc, #268]	@ (8000984 <HAL_ADC_MspInit+0x1e8>)
 8000876:	f002 fae5 	bl	8002e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 800087a:	2302      	movs	r3, #2
 800087c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087e:	2303      	movs	r3, #3
 8000880:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000894:	f002 fad6 	bl	8002e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000898:	2303      	movs	r3, #3
 800089a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089c:	2303      	movs	r3, #3
 800089e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008ac:	4619      	mov	r1, r3
 80008ae:	4836      	ldr	r0, [pc, #216]	@ (8000988 <HAL_ADC_MspInit+0x1ec>)
 80008b0:	f002 fac8 	bl	8002e44 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008b4:	e05e      	b.n	8000974 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a34      	ldr	r2, [pc, #208]	@ (800098c <HAL_ADC_MspInit+0x1f0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d159      	bne.n	8000974 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008c6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80008ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008d0:	4618      	mov	r0, r3
 80008d2:	f003 fa89 	bl	8003de8 <HAL_RCCEx_PeriphCLKConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80008dc:	f000 f974 	bl	8000bc8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008e0:	4b26      	ldr	r3, [pc, #152]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	4a25      	ldr	r2, [pc, #148]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008ea:	4b24      	ldr	r3, [pc, #144]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d10b      	bne.n	800090a <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008f2:	4b23      	ldr	r3, [pc, #140]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	4a22      	ldr	r2, [pc, #136]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 80008f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fe:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	4a1c      	ldr	r2, [pc, #112]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	4a16      	ldr	r2, [pc, #88]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092e:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800093a:	230b      	movs	r3, #11
 800093c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093e:	2303      	movs	r3, #3
 8000940:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800094e:	4619      	mov	r1, r3
 8000950:	480c      	ldr	r0, [pc, #48]	@ (8000984 <HAL_ADC_MspInit+0x1e8>)
 8000952:	f002 fa77 	bl	8002e44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000956:	2301      	movs	r3, #1
 8000958:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095a:	2303      	movs	r3, #3
 800095c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800096a:	4619      	mov	r1, r3
 800096c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000970:	f002 fa68 	bl	8002e44 <HAL_GPIO_Init>
}
 8000974:	bf00      	nop
 8000976:	3790      	adds	r7, #144	@ 0x90
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000218 	.word	0x20000218
 8000980:	40021000 	.word	0x40021000
 8000984:	48000800 	.word	0x48000800
 8000988:	48000400 	.word	0x48000400
 800098c:	50000100 	.word	0x50000100

08000990 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b3f      	ldr	r3, [pc, #252]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	4a3e      	ldr	r2, [pc, #248]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b2:	4b3c      	ldr	r3, [pc, #240]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009be:	4b39      	ldr	r3, [pc, #228]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	4a38      	ldr	r2, [pc, #224]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009c4:	f043 0320 	orr.w	r3, r3, #32
 80009c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ca:	4b36      	ldr	r3, [pc, #216]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	f003 0320 	and.w	r3, r3, #32
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b33      	ldr	r3, [pc, #204]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	4a32      	ldr	r2, [pc, #200]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e2:	4b30      	ldr	r3, [pc, #192]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	4a2c      	ldr	r2, [pc, #176]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fa:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	4b27      	ldr	r3, [pc, #156]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	4a26      	ldr	r2, [pc, #152]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a12:	4b24      	ldr	r3, [pc, #144]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2120      	movs	r1, #32
 8000a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a26:	f002 fb8f 	bl	8003148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	481e      	ldr	r0, [pc, #120]	@ (8000aa8 <MX_GPIO_Init+0x118>)
 8000a30:	f002 fb8a 	bl	8003148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000a34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4818      	ldr	r0, [pc, #96]	@ (8000aac <MX_GPIO_Init+0x11c>)
 8000a4c:	f002 f9fa 	bl	8002e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000a50:	2320      	movs	r3, #32
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6a:	f002 f9eb 	bl	8002e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4808      	ldr	r0, [pc, #32]	@ (8000aa8 <MX_GPIO_Init+0x118>)
 8000a86:	f002 f9dd 	bl	8002e44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2028      	movs	r0, #40	@ 0x28
 8000a90:	f002 f8f0 	bl	8002c74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a94:	2028      	movs	r0, #40	@ 0x28
 8000a96:	f002 f907 	bl	8002ca8 <HAL_NVIC_EnableIRQ>

}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	@ 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	48000c00 	.word	0x48000c00
 8000aac:	48000800 	.word	0x48000800

08000ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab4:	f000 feef 	bl	8001896 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab8:	f000 f82a 	bl	8000b10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000abc:	f7ff ff68 	bl	8000990 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000ac0:	f7ff fe06 	bl	80006d0 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000ac4:	f7ff fd8c 	bl	80005e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000ac8:	f000 fa42 	bl	8000f50 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000acc:	f000 fafe 	bl	80010cc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000ad0:	f000 fc56 	bl	8001380 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000ad4:	f000 fca0 	bl	8001418 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	Shell_Init();
 8000ad8:	f000 fd92 	bl	8001600 <Shell_Init>
	HAL_TIM_Base_Start(&htim1);
 8000adc:	480b      	ldr	r0, [pc, #44]	@ (8000b0c <main+0x5c>)
 8000ade:	f003 fc29 	bl	8004334 <HAL_TIM_Base_Start>

	//Channel 1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4809      	ldr	r0, [pc, #36]	@ (8000b0c <main+0x5c>)
 8000ae6:	f003 fd6f 	bl	80045c8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000aea:	2100      	movs	r1, #0
 8000aec:	4807      	ldr	r0, [pc, #28]	@ (8000b0c <main+0x5c>)
 8000aee:	f004 ffe1 	bl	8005ab4 <HAL_TIMEx_PWMN_Start>

	//Channel 2
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000af2:	2104      	movs	r1, #4
 8000af4:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <main+0x5c>)
 8000af6:	f003 fd67 	bl	80045c8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000afa:	2104      	movs	r1, #4
 8000afc:	4803      	ldr	r0, [pc, #12]	@ (8000b0c <main+0x5c>)
 8000afe:	f004 ffd9 	bl	8005ab4 <HAL_TIMEx_PWMN_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 8000b02:	f000 fdbd 	bl	8001680 <Shell_Loop>
	{
 8000b06:	bf00      	nop
 8000b08:	e7fb      	b.n	8000b02 <main+0x52>
 8000b0a:	bf00      	nop
 8000b0c:	2000026c 	.word	0x2000026c

08000b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b094      	sub	sp, #80	@ 0x50
 8000b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b16:	f107 0318 	add.w	r3, r7, #24
 8000b1a:	2238      	movs	r2, #56	@ 0x38
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f007 fcbc 	bl	800849c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b32:	2000      	movs	r0, #0
 8000b34:	f002 fb44 	bl	80031c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b40:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b42:	2302      	movs	r3, #2
 8000b44:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b46:	2303      	movs	r3, #3
 8000b48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000b4e:	2355      	movs	r3, #85	@ 0x55
 8000b50:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b52:	2302      	movs	r3, #2
 8000b54:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b56:	2302      	movs	r3, #2
 8000b58:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5e:	f107 0318 	add.w	r3, r7, #24
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 fbe0 	bl	8003328 <HAL_RCC_OscConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000b6e:	f000 f82b 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b72:	230f      	movs	r3, #15
 8000b74:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b76:	2303      	movs	r3, #3
 8000b78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2104      	movs	r1, #4
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 fede 	bl	800394c <HAL_RCC_ClockConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000b96:	f000 f817 	bl	8000bc8 <Error_Handler>
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	3750      	adds	r7, #80	@ 0x50
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a04      	ldr	r2, [pc, #16]	@ (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d101      	bne.n	8000bba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bb6:	f000 fe87 	bl	80018c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40001000 	.word	0x40001000

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <Error_Handler+0x8>

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	4b0f      	ldr	r3, [pc, #60]	@ (8000c18 <HAL_MspInit+0x44>)
 8000bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bde:	4a0e      	ldr	r2, [pc, #56]	@ (8000c18 <HAL_MspInit+0x44>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000be6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <HAL_MspInit+0x44>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <HAL_MspInit+0x44>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf6:	4a08      	ldr	r2, [pc, #32]	@ (8000c18 <HAL_MspInit+0x44>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bfe:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <HAL_MspInit+0x44>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c0a:	f002 fb7d 	bl	8003308 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40021000 	.word	0x40021000

08000c1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08c      	sub	sp, #48	@ 0x30
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce0 <HAL_InitTick+0xc4>)
 8000c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c30:	4a2b      	ldr	r2, [pc, #172]	@ (8000ce0 <HAL_InitTick+0xc4>)
 8000c32:	f043 0310 	orr.w	r3, r3, #16
 8000c36:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c38:	4b29      	ldr	r3, [pc, #164]	@ (8000ce0 <HAL_InitTick+0xc4>)
 8000c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c3c:	f003 0310 	and.w	r3, r3, #16
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c44:	f107 020c 	add.w	r2, r7, #12
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f003 f852 	bl	8003cf8 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c54:	f003 f824 	bl	8003ca0 <HAL_RCC_GetPCLK1Freq>
 8000c58:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c5c:	4a21      	ldr	r2, [pc, #132]	@ (8000ce4 <HAL_InitTick+0xc8>)
 8000c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c62:	0c9b      	lsrs	r3, r3, #18
 8000c64:	3b01      	subs	r3, #1
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce8 <HAL_InitTick+0xcc>)
 8000c6a:	4a20      	ldr	r2, [pc, #128]	@ (8000cec <HAL_InitTick+0xd0>)
 8000c6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <HAL_InitTick+0xcc>)
 8000c70:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c74:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c76:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce8 <HAL_InitTick+0xcc>)
 8000c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c7a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <HAL_InitTick+0xcc>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c82:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <HAL_InitTick+0xcc>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000c88:	4817      	ldr	r0, [pc, #92]	@ (8000ce8 <HAL_InitTick+0xcc>)
 8000c8a:	f003 fafb 	bl	8004284 <HAL_TIM_Base_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000c94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d11b      	bne.n	8000cd4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c9c:	4812      	ldr	r0, [pc, #72]	@ (8000ce8 <HAL_InitTick+0xcc>)
 8000c9e:	f003 fbb9 	bl	8004414 <HAL_TIM_Base_Start_IT>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000ca8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d111      	bne.n	8000cd4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cb0:	2036      	movs	r0, #54	@ 0x36
 8000cb2:	f001 fff9 	bl	8002ca8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d808      	bhi.n	8000cce <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2036      	movs	r0, #54	@ 0x36
 8000cc2:	f001 ffd7 	bl	8002c74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf0 <HAL_InitTick+0xd4>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	e002      	b.n	8000cd4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cd4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3730      	adds	r7, #48	@ 0x30
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	431bde83 	.word	0x431bde83
 8000ce8:	2000021c 	.word	0x2000021c
 8000cec:	40001000 	.word	0x40001000
 8000cf0:	200000c0 	.word	0x200000c0

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <BusFault_Handler+0x4>

08000d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <UsageFault_Handler+0x4>

08000d1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d58:	4802      	ldr	r0, [pc, #8]	@ (8000d64 <USART2_IRQHandler+0x10>)
 8000d5a:	f005 fa2d 	bl	80061b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000304 	.word	0x20000304

08000d68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d6c:	4802      	ldr	r0, [pc, #8]	@ (8000d78 <USART3_IRQHandler+0x10>)
 8000d6e:	f005 fa23 	bl	80061b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000398 	.word	0x20000398

08000d7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000d80:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d84:	f002 f9f8 	bl	8003178 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d90:	4802      	ldr	r0, [pc, #8]	@ (8000d9c <TIM6_DAC_IRQHandler+0x10>)
 8000d92:	f003 fd2b 	bl	80047ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000021c 	.word	0x2000021c

08000da0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return 1;
 8000da4:	2301      	movs	r3, #1
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <_kill>:

int _kill(int pid, int sig)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000dba:	f007 fb77 	bl	80084ac <__errno>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2216      	movs	r2, #22
 8000dc2:	601a      	str	r2, [r3, #0]
  return -1;
 8000dc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_exit>:

void _exit (int status)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ffe7 	bl	8000db0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000de2:	bf00      	nop
 8000de4:	e7fd      	b.n	8000de2 <_exit+0x12>

08000de6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	e00a      	b.n	8000e0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000df8:	f3af 8000 	nop.w
 8000dfc:	4601      	mov	r1, r0
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	1c5a      	adds	r2, r3, #1
 8000e02:	60ba      	str	r2, [r7, #8]
 8000e04:	b2ca      	uxtb	r2, r1
 8000e06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	dbf0      	blt.n	8000df8 <_read+0x12>
  }

  return len;
 8000e16:	687b      	ldr	r3, [r7, #4]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	e009      	b.n	8000e46 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	1c5a      	adds	r2, r3, #1
 8000e36:	60ba      	str	r2, [r7, #8]
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	3301      	adds	r3, #1
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	dbf1      	blt.n	8000e32 <_write+0x12>
  }
  return len;
 8000e4e:	687b      	ldr	r3, [r7, #4]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <_close>:

int _close(int file)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e80:	605a      	str	r2, [r3, #4]
  return 0;
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <_isatty>:

int _isatty(int file)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e98:	2301      	movs	r3, #1
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b085      	sub	sp, #20
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	60f8      	str	r0, [r7, #12]
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eb2:	2300      	movs	r3, #0
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec8:	4a14      	ldr	r2, [pc, #80]	@ (8000f1c <_sbrk+0x5c>)
 8000eca:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <_sbrk+0x60>)
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed4:	4b13      	ldr	r3, [pc, #76]	@ (8000f24 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000edc:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <_sbrk+0x64>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	@ (8000f28 <_sbrk+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee2:	4b10      	ldr	r3, [pc, #64]	@ (8000f24 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d207      	bcs.n	8000f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef0:	f007 fadc 	bl	80084ac <__errno>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000efe:	e009      	b.n	8000f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f00:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f06:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4a05      	ldr	r2, [pc, #20]	@ (8000f24 <_sbrk+0x64>)
 8000f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f12:	68fb      	ldr	r3, [r7, #12]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20020000 	.word	0x20020000
 8000f20:	00000400 	.word	0x00000400
 8000f24:	20000268 	.word	0x20000268
 8000f28:	20000638 	.word	0x20000638

08000f2c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f30:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <SystemInit+0x20>)
 8000f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f36:	4a05      	ldr	r2, [pc, #20]	@ (8000f4c <SystemInit+0x20>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b09c      	sub	sp, #112	@ 0x70
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f56:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f64:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f70:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
 8000f80:	615a      	str	r2, [r3, #20]
 8000f82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2234      	movs	r2, #52	@ 0x34
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f007 fa86 	bl	800849c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f90:	4b4c      	ldr	r3, [pc, #304]	@ (80010c4 <MX_TIM1_Init+0x174>)
 8000f92:	4a4d      	ldr	r2, [pc, #308]	@ (80010c8 <MX_TIM1_Init+0x178>)
 8000f94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f96:	4b4b      	ldr	r3, [pc, #300]	@ (80010c4 <MX_TIM1_Init+0x174>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9c:	4b49      	ldr	r3, [pc, #292]	@ (80010c4 <MX_TIM1_Init+0x174>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8000fa2:	4b48      	ldr	r3, [pc, #288]	@ (80010c4 <MX_TIM1_Init+0x174>)
 8000fa4:	f242 1233 	movw	r2, #8499	@ 0x2133
 8000fa8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000faa:	4b46      	ldr	r3, [pc, #280]	@ (80010c4 <MX_TIM1_Init+0x174>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fb0:	4b44      	ldr	r3, [pc, #272]	@ (80010c4 <MX_TIM1_Init+0x174>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb6:	4b43      	ldr	r3, [pc, #268]	@ (80010c4 <MX_TIM1_Init+0x174>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fbc:	4841      	ldr	r0, [pc, #260]	@ (80010c4 <MX_TIM1_Init+0x174>)
 8000fbe:	f003 f961 	bl	8004284 <HAL_TIM_Base_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000fc8:	f7ff fdfe 	bl	8000bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fd2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	483a      	ldr	r0, [pc, #232]	@ (80010c4 <MX_TIM1_Init+0x174>)
 8000fda:	f003 fe6b 	bl	8004cb4 <HAL_TIM_ConfigClockSource>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000fe4:	f7ff fdf0 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fe8:	4836      	ldr	r0, [pc, #216]	@ (80010c4 <MX_TIM1_Init+0x174>)
 8000fea:	f003 fa8b 	bl	8004504 <HAL_TIM_PWM_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ff4:	f7ff fde8 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001004:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001008:	4619      	mov	r1, r3
 800100a:	482e      	ldr	r0, [pc, #184]	@ (80010c4 <MX_TIM1_Init+0x174>)
 800100c:	f004 fe14 	bl	8005c38 <HAL_TIMEx_MasterConfigSynchronization>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001016:	f7ff fdd7 	bl	8000bc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800101a:	2360      	movs	r3, #96	@ 0x60
 800101c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5099;
 800101e:	f241 33eb 	movw	r3, #5099	@ 0x13eb
 8001022:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001024:	2300      	movs	r3, #0
 8001026:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001028:	2300      	movs	r3, #0
 800102a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001030:	2300      	movs	r3, #0
 8001032:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001034:	2300      	movs	r3, #0
 8001036:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001038:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800103c:	2200      	movs	r2, #0
 800103e:	4619      	mov	r1, r3
 8001040:	4820      	ldr	r0, [pc, #128]	@ (80010c4 <MX_TIM1_Init+0x174>)
 8001042:	f003 fd23 	bl	8004a8c <HAL_TIM_PWM_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800104c:	f7ff fdbc 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001050:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001054:	2204      	movs	r2, #4
 8001056:	4619      	mov	r1, r3
 8001058:	481a      	ldr	r0, [pc, #104]	@ (80010c4 <MX_TIM1_Init+0x174>)
 800105a:	f003 fd17 	bl	8004a8c <HAL_TIM_PWM_ConfigChannel>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001064:	f7ff fdb0 	bl	8000bc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 8001074:	2364      	movs	r3, #100	@ 0x64
 8001076:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800107c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001080:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800108e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001092:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001098:	2300      	movs	r3, #0
 800109a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800109c:	2300      	movs	r3, #0
 800109e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	4619      	mov	r1, r3
 80010a4:	4807      	ldr	r0, [pc, #28]	@ (80010c4 <MX_TIM1_Init+0x174>)
 80010a6:	f004 fe5d 	bl	8005d64 <HAL_TIMEx_ConfigBreakDeadTime>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 80010b0:	f7ff fd8a 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010b4:	4803      	ldr	r0, [pc, #12]	@ (80010c4 <MX_TIM1_Init+0x174>)
 80010b6:	f000 f8fb 	bl	80012b0 <HAL_TIM_MspPostInit>

}
 80010ba:	bf00      	nop
 80010bc:	3770      	adds	r7, #112	@ 0x70
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2000026c 	.word	0x2000026c
 80010c8:	40012c00 	.word	0x40012c00

080010cc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80010d2:	f107 0310 	add.w	r3, r7, #16
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	@ (800115c <MX_TIM3_Init+0x90>)
 80010ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001160 <MX_TIM3_Init+0x94>)
 80010ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <MX_TIM3_Init+0x90>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f6:	4b19      	ldr	r3, [pc, #100]	@ (800115c <MX_TIM3_Init+0x90>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010fc:	4b17      	ldr	r3, [pc, #92]	@ (800115c <MX_TIM3_Init+0x90>)
 80010fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001102:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001104:	4b15      	ldr	r3, [pc, #84]	@ (800115c <MX_TIM3_Init+0x90>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110a:	4b14      	ldr	r3, [pc, #80]	@ (800115c <MX_TIM3_Init+0x90>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	4619      	mov	r1, r3
 8001126:	480d      	ldr	r0, [pc, #52]	@ (800115c <MX_TIM3_Init+0x90>)
 8001128:	f004 fc15 	bl	8005956 <HAL_TIMEx_HallSensor_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001132:	f7ff fd49 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001136:	2350      	movs	r3, #80	@ 0x50
 8001138:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4619      	mov	r1, r3
 8001142:	4806      	ldr	r0, [pc, #24]	@ (800115c <MX_TIM3_Init+0x90>)
 8001144:	f004 fd78 	bl	8005c38 <HAL_TIMEx_MasterConfigSynchronization>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800114e:	f7ff fd3b 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	3720      	adds	r7, #32
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200002b8 	.word	0x200002b8
 8001160:	40000400 	.word	0x40000400

08001164 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	@ 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a18      	ldr	r2, [pc, #96]	@ (80011e4 <HAL_TIM_Base_MspInit+0x80>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d129      	bne.n	80011da <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001186:	4b18      	ldr	r3, [pc, #96]	@ (80011e8 <HAL_TIM_Base_MspInit+0x84>)
 8001188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800118a:	4a17      	ldr	r2, [pc, #92]	@ (80011e8 <HAL_TIM_Base_MspInit+0x84>)
 800118c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001190:	6613      	str	r3, [r2, #96]	@ 0x60
 8001192:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <HAL_TIM_Base_MspInit+0x84>)
 8001194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001196:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <HAL_TIM_Base_MspInit+0x84>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	4a11      	ldr	r2, [pc, #68]	@ (80011e8 <HAL_TIM_Base_MspInit+0x84>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011aa:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <HAL_TIM_Base_MspInit+0x84>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = W_PWM_H_Pin;
 80011b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80011c8:	2306      	movs	r3, #6
 80011ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_H_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4619      	mov	r1, r3
 80011d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d6:	f001 fe35 	bl	8002e44 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80011da:	bf00      	nop
 80011dc:	3728      	adds	r7, #40	@ 0x28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40012c00 	.word	0x40012c00
 80011e8:	40021000 	.word	0x40021000

080011ec <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	@ 0x28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a26      	ldr	r2, [pc, #152]	@ (80012a4 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d145      	bne.n	800129a <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800120e:	4b26      	ldr	r3, [pc, #152]	@ (80012a8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001212:	4a25      	ldr	r2, [pc, #148]	@ (80012a8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	6593      	str	r3, [r2, #88]	@ 0x58
 800121a:	4b23      	ldr	r3, [pc, #140]	@ (80012a8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800121c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	4b20      	ldr	r3, [pc, #128]	@ (80012a8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122a:	4a1f      	ldr	r2, [pc, #124]	@ (80012a8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001232:	4b1d      	ldr	r3, [pc, #116]	@ (80012a8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001242:	4a19      	ldr	r2, [pc, #100]	@ (80012a8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124a:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001256:	2350      	movs	r3, #80	@ 0x50
 8001258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001266:	2302      	movs	r3, #2
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001274:	f001 fde6 	bl	8002e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001278:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800128a:	2302      	movs	r3, #2
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	@ (80012ac <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001296:	f001 fdd5 	bl	8002e44 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	@ 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40000400 	.word	0x40000400
 80012a8:	40021000 	.word	0x40021000
 80012ac:	48000800 	.word	0x48000800

080012b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	@ 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a29      	ldr	r2, [pc, #164]	@ (8001374 <HAL_TIM_MspPostInit+0xc4>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d14b      	bne.n	800136a <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	4b29      	ldr	r3, [pc, #164]	@ (8001378 <HAL_TIM_MspPostInit+0xc8>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d6:	4a28      	ldr	r2, [pc, #160]	@ (8001378 <HAL_TIM_MspPostInit+0xc8>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012de:	4b26      	ldr	r3, [pc, #152]	@ (8001378 <HAL_TIM_MspPostInit+0xc8>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	4b23      	ldr	r3, [pc, #140]	@ (8001378 <HAL_TIM_MspPostInit+0xc8>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ee:	4a22      	ldr	r2, [pc, #136]	@ (8001378 <HAL_TIM_MspPostInit+0xc8>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f6:	4b20      	ldr	r3, [pc, #128]	@ (8001378 <HAL_TIM_MspPostInit+0xc8>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001302:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001314:	2306      	movs	r3, #6
 8001316:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	4817      	ldr	r0, [pc, #92]	@ (800137c <HAL_TIM_MspPostInit+0xcc>)
 8001320:	f001 fd90 	bl	8002e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001324:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001336:	2304      	movs	r3, #4
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	480e      	ldr	r0, [pc, #56]	@ (800137c <HAL_TIM_MspPostInit+0xcc>)
 8001342:	f001 fd7f 	bl	8002e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin;
 8001346:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800134a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001358:	2306      	movs	r3, #6
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001366:	f001 fd6d 	bl	8002e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	@ 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40012c00 	.word	0x40012c00
 8001378:	40021000 	.word	0x40021000
 800137c:	48000400 	.word	0x48000400

08001380 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001384:	4b22      	ldr	r3, [pc, #136]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 8001386:	4a23      	ldr	r2, [pc, #140]	@ (8001414 <MX_USART2_UART_Init+0x94>)
 8001388:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800138a:	4b21      	ldr	r3, [pc, #132]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 800138c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001390:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001392:	4b1f      	ldr	r3, [pc, #124]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001398:	4b1d      	ldr	r3, [pc, #116]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800139e:	4b1c      	ldr	r3, [pc, #112]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 80013a6:	220c      	movs	r2, #12
 80013a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013aa:	4b19      	ldr	r3, [pc, #100]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b0:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b6:	4b16      	ldr	r3, [pc, #88]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013bc:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 80013be:	2200      	movs	r2, #0
 80013c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c2:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013c8:	4811      	ldr	r0, [pc, #68]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 80013ca:	f004 fdca 	bl	8005f62 <HAL_UART_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013d4:	f7ff fbf8 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d8:	2100      	movs	r1, #0
 80013da:	480d      	ldr	r0, [pc, #52]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 80013dc:	f006 fe41 	bl	8008062 <HAL_UARTEx_SetTxFifoThreshold>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80013e6:	f7ff fbef 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ea:	2100      	movs	r1, #0
 80013ec:	4808      	ldr	r0, [pc, #32]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 80013ee:	f006 fe76 	bl	80080de <HAL_UARTEx_SetRxFifoThreshold>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80013f8:	f7ff fbe6 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	@ (8001410 <MX_USART2_UART_Init+0x90>)
 80013fe:	f006 fdf7 	bl	8007ff0 <HAL_UARTEx_DisableFifoMode>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001408:	f7ff fbde 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000304 	.word	0x20000304
 8001414:	40004400 	.word	0x40004400

08001418 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800141c:	4b22      	ldr	r3, [pc, #136]	@ (80014a8 <MX_USART3_UART_Init+0x90>)
 800141e:	4a23      	ldr	r2, [pc, #140]	@ (80014ac <MX_USART3_UART_Init+0x94>)
 8001420:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001422:	4b21      	ldr	r3, [pc, #132]	@ (80014a8 <MX_USART3_UART_Init+0x90>)
 8001424:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001428:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800142a:	4b1f      	ldr	r3, [pc, #124]	@ (80014a8 <MX_USART3_UART_Init+0x90>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001430:	4b1d      	ldr	r3, [pc, #116]	@ (80014a8 <MX_USART3_UART_Init+0x90>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001436:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <MX_USART3_UART_Init+0x90>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800143c:	4b1a      	ldr	r3, [pc, #104]	@ (80014a8 <MX_USART3_UART_Init+0x90>)
 800143e:	220c      	movs	r2, #12
 8001440:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001442:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <MX_USART3_UART_Init+0x90>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001448:	4b17      	ldr	r3, [pc, #92]	@ (80014a8 <MX_USART3_UART_Init+0x90>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800144e:	4b16      	ldr	r3, [pc, #88]	@ (80014a8 <MX_USART3_UART_Init+0x90>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001454:	4b14      	ldr	r3, [pc, #80]	@ (80014a8 <MX_USART3_UART_Init+0x90>)
 8001456:	2200      	movs	r2, #0
 8001458:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800145a:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <MX_USART3_UART_Init+0x90>)
 800145c:	2200      	movs	r2, #0
 800145e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001460:	4811      	ldr	r0, [pc, #68]	@ (80014a8 <MX_USART3_UART_Init+0x90>)
 8001462:	f004 fd7e 	bl	8005f62 <HAL_UART_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800146c:	f7ff fbac 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001470:	2100      	movs	r1, #0
 8001472:	480d      	ldr	r0, [pc, #52]	@ (80014a8 <MX_USART3_UART_Init+0x90>)
 8001474:	f006 fdf5 	bl	8008062 <HAL_UARTEx_SetTxFifoThreshold>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800147e:	f7ff fba3 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001482:	2100      	movs	r1, #0
 8001484:	4808      	ldr	r0, [pc, #32]	@ (80014a8 <MX_USART3_UART_Init+0x90>)
 8001486:	f006 fe2a 	bl	80080de <HAL_UARTEx_SetRxFifoThreshold>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001490:	f7ff fb9a 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001494:	4804      	ldr	r0, [pc, #16]	@ (80014a8 <MX_USART3_UART_Init+0x90>)
 8001496:	f006 fdab 	bl	8007ff0 <HAL_UARTEx_DisableFifoMode>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014a0:	f7ff fb92 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000398 	.word	0x20000398
 80014ac:	40004800 	.word	0x40004800

080014b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b0a0      	sub	sp, #128	@ 0x80
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014c8:	f107 0318 	add.w	r3, r7, #24
 80014cc:	2254      	movs	r2, #84	@ 0x54
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f006 ffe3 	bl	800849c <memset>
  if(uartHandle->Instance==USART2)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a45      	ldr	r2, [pc, #276]	@ (80015f0 <HAL_UART_MspInit+0x140>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d13f      	bne.n	8001560 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014e0:	2302      	movs	r3, #2
 80014e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e8:	f107 0318 	add.w	r3, r7, #24
 80014ec:	4618      	mov	r0, r3
 80014ee:	f002 fc7b 	bl	8003de8 <HAL_RCCEx_PeriphCLKConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014f8:	f7ff fb66 	bl	8000bc8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014fc:	4b3d      	ldr	r3, [pc, #244]	@ (80015f4 <HAL_UART_MspInit+0x144>)
 80014fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001500:	4a3c      	ldr	r2, [pc, #240]	@ (80015f4 <HAL_UART_MspInit+0x144>)
 8001502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001506:	6593      	str	r3, [r2, #88]	@ 0x58
 8001508:	4b3a      	ldr	r3, [pc, #232]	@ (80015f4 <HAL_UART_MspInit+0x144>)
 800150a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800150c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001514:	4b37      	ldr	r3, [pc, #220]	@ (80015f4 <HAL_UART_MspInit+0x144>)
 8001516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001518:	4a36      	ldr	r2, [pc, #216]	@ (80015f4 <HAL_UART_MspInit+0x144>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001520:	4b34      	ldr	r3, [pc, #208]	@ (80015f4 <HAL_UART_MspInit+0x144>)
 8001522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800152c:	230c      	movs	r3, #12
 800152e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800153c:	2307      	movs	r3, #7
 800153e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001544:	4619      	mov	r1, r3
 8001546:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800154a:	f001 fc7b 	bl	8002e44 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2100      	movs	r1, #0
 8001552:	2026      	movs	r0, #38	@ 0x26
 8001554:	f001 fb8e 	bl	8002c74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001558:	2026      	movs	r0, #38	@ 0x26
 800155a:	f001 fba5 	bl	8002ca8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800155e:	e043      	b.n	80015e8 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a24      	ldr	r2, [pc, #144]	@ (80015f8 <HAL_UART_MspInit+0x148>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d13e      	bne.n	80015e8 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800156a:	2304      	movs	r3, #4
 800156c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001572:	f107 0318 	add.w	r3, r7, #24
 8001576:	4618      	mov	r0, r3
 8001578:	f002 fc36 	bl	8003de8 <HAL_RCCEx_PeriphCLKConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001582:	f7ff fb21 	bl	8000bc8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001586:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <HAL_UART_MspInit+0x144>)
 8001588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800158a:	4a1a      	ldr	r2, [pc, #104]	@ (80015f4 <HAL_UART_MspInit+0x144>)
 800158c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001590:	6593      	str	r3, [r2, #88]	@ 0x58
 8001592:	4b18      	ldr	r3, [pc, #96]	@ (80015f4 <HAL_UART_MspInit+0x144>)
 8001594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001596:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800159e:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <HAL_UART_MspInit+0x144>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a2:	4a14      	ldr	r2, [pc, #80]	@ (80015f4 <HAL_UART_MspInit+0x144>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015aa:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <HAL_UART_MspInit+0x144>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80015ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015c8:	2307      	movs	r3, #7
 80015ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015cc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80015d0:	4619      	mov	r1, r3
 80015d2:	480a      	ldr	r0, [pc, #40]	@ (80015fc <HAL_UART_MspInit+0x14c>)
 80015d4:	f001 fc36 	bl	8002e44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015d8:	2200      	movs	r2, #0
 80015da:	2100      	movs	r1, #0
 80015dc:	2027      	movs	r0, #39	@ 0x27
 80015de:	f001 fb49 	bl	8002c74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015e2:	2027      	movs	r0, #39	@ 0x27
 80015e4:	f001 fb60 	bl	8002ca8 <HAL_NVIC_EnableIRQ>
}
 80015e8:	bf00      	nop
 80015ea:	3780      	adds	r7, #128	@ 0x80
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40004400 	.word	0x40004400
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40004800 	.word	0x40004800
 80015fc:	48000800 	.word	0x48000800

08001600 <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8001604:	2224      	movs	r2, #36	@ 0x24
 8001606:	2100      	movs	r1, #0
 8001608:	4816      	ldr	r0, [pc, #88]	@ (8001664 <Shell_Init+0x64>)
 800160a:	f006 ff47 	bl	800849c <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 800160e:	2240      	movs	r2, #64	@ 0x40
 8001610:	2100      	movs	r1, #0
 8001612:	4815      	ldr	r0, [pc, #84]	@ (8001668 <Shell_Init+0x68>)
 8001614:	f006 ff42 	bl	800849c <memset>
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
 8001618:	4b14      	ldr	r3, [pc, #80]	@ (800166c <Shell_Init+0x6c>)
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 800161e:	2240      	movs	r2, #64	@ 0x40
 8001620:	2100      	movs	r1, #0
 8001622:	4813      	ldr	r0, [pc, #76]	@ (8001670 <Shell_Init+0x70>)
 8001624:	f006 ff3a 	bl	800849c <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001628:	2201      	movs	r2, #1
 800162a:	4910      	ldr	r1, [pc, #64]	@ (800166c <Shell_Init+0x6c>)
 800162c:	4811      	ldr	r0, [pc, #68]	@ (8001674 <Shell_Init+0x74>)
 800162e:	f004 fd77 	bl	8006120 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8001632:	4811      	ldr	r0, [pc, #68]	@ (8001678 <Shell_Init+0x78>)
 8001634:	f7fe fdf4 	bl	8000220 <strlen>
 8001638:	4603      	mov	r3, r0
 800163a:	b29a      	uxth	r2, r3
 800163c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001640:	490d      	ldr	r1, [pc, #52]	@ (8001678 <Shell_Init+0x78>)
 8001642:	480c      	ldr	r0, [pc, #48]	@ (8001674 <Shell_Init+0x74>)
 8001644:	f004 fcdd 	bl	8006002 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8001648:	480c      	ldr	r0, [pc, #48]	@ (800167c <Shell_Init+0x7c>)
 800164a:	f7fe fde9 	bl	8000220 <strlen>
 800164e:	4603      	mov	r3, r0
 8001650:	b29a      	uxth	r2, r3
 8001652:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001656:	4909      	ldr	r1, [pc, #36]	@ (800167c <Shell_Init+0x7c>)
 8001658:	4806      	ldr	r0, [pc, #24]	@ (8001674 <Shell_Init+0x74>)
 800165a:	f004 fcd2 	bl	8006002 <HAL_UART_Transmit>
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200004b8 	.word	0x200004b8
 8001668:	20000474 	.word	0x20000474
 800166c:	20000430 	.word	0x20000430
 8001670:	20000434 	.word	0x20000434
 8001674:	20000304 	.word	0x20000304
 8001678:	20000020 	.word	0x20000020
 800167c:	20000004 	.word	0x20000004

08001680 <Shell_Loop>:

void Shell_Loop(void){
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 8001686:	4b51      	ldr	r3, [pc, #324]	@ (80017cc <Shell_Loop+0x14c>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d05b      	beq.n	8001746 <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 800168e:	4b50      	ldr	r3, [pc, #320]	@ (80017d0 <Shell_Loop+0x150>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b08      	cmp	r3, #8
 8001694:	d034      	beq.n	8001700 <Shell_Loop+0x80>
 8001696:	2b0d      	cmp	r3, #13
 8001698:	d142      	bne.n	8001720 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800169a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800169e:	2203      	movs	r2, #3
 80016a0:	494c      	ldr	r1, [pc, #304]	@ (80017d4 <Shell_Loop+0x154>)
 80016a2:	484d      	ldr	r0, [pc, #308]	@ (80017d8 <Shell_Loop+0x158>)
 80016a4:	f004 fcad 	bl	8006002 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 80016a8:	4b4c      	ldr	r3, [pc, #304]	@ (80017dc <Shell_Loop+0x15c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a4c      	ldr	r2, [pc, #304]	@ (80017e0 <Shell_Loop+0x160>)
 80016ae:	2100      	movs	r1, #0
 80016b0:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 80016b2:	4b4c      	ldr	r3, [pc, #304]	@ (80017e4 <Shell_Loop+0x164>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 80016b8:	494b      	ldr	r1, [pc, #300]	@ (80017e8 <Shell_Loop+0x168>)
 80016ba:	4849      	ldr	r0, [pc, #292]	@ (80017e0 <Shell_Loop+0x160>)
 80016bc:	f006 fe92 	bl	80083e4 <strtok>
 80016c0:	4603      	mov	r3, r0
 80016c2:	4a4a      	ldr	r2, [pc, #296]	@ (80017ec <Shell_Loop+0x16c>)
 80016c4:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80016c6:	e010      	b.n	80016ea <Shell_Loop+0x6a>
				argv[argc++] = token;
 80016c8:	4b46      	ldr	r3, [pc, #280]	@ (80017e4 <Shell_Loop+0x164>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	4945      	ldr	r1, [pc, #276]	@ (80017e4 <Shell_Loop+0x164>)
 80016d0:	600a      	str	r2, [r1, #0]
 80016d2:	4a46      	ldr	r2, [pc, #280]	@ (80017ec <Shell_Loop+0x16c>)
 80016d4:	6812      	ldr	r2, [r2, #0]
 80016d6:	4946      	ldr	r1, [pc, #280]	@ (80017f0 <Shell_Loop+0x170>)
 80016d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 80016dc:	4942      	ldr	r1, [pc, #264]	@ (80017e8 <Shell_Loop+0x168>)
 80016de:	2000      	movs	r0, #0
 80016e0:	f006 fe80 	bl	80083e4 <strtok>
 80016e4:	4603      	mov	r3, r0
 80016e6:	4a41      	ldr	r2, [pc, #260]	@ (80017ec <Shell_Loop+0x16c>)
 80016e8:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80016ea:	4b40      	ldr	r3, [pc, #256]	@ (80017ec <Shell_Loop+0x16c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1ea      	bne.n	80016c8 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 80016f2:	4b3a      	ldr	r3, [pc, #232]	@ (80017dc <Shell_Loop+0x15c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 80016f8:	4b3e      	ldr	r3, [pc, #248]	@ (80017f4 <Shell_Loop+0x174>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	601a      	str	r2, [r3, #0]
			break;
 80016fe:	e01f      	b.n	8001740 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8001700:	4b36      	ldr	r3, [pc, #216]	@ (80017dc <Shell_Loop+0x15c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	1e5a      	subs	r2, r3, #1
 8001706:	4935      	ldr	r1, [pc, #212]	@ (80017dc <Shell_Loop+0x15c>)
 8001708:	600a      	str	r2, [r1, #0]
 800170a:	4a35      	ldr	r2, [pc, #212]	@ (80017e0 <Shell_Loop+0x160>)
 800170c:	2100      	movs	r1, #0
 800170e:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8001710:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001714:	2204      	movs	r2, #4
 8001716:	4938      	ldr	r1, [pc, #224]	@ (80017f8 <Shell_Loop+0x178>)
 8001718:	482f      	ldr	r0, [pc, #188]	@ (80017d8 <Shell_Loop+0x158>)
 800171a:	f004 fc72 	bl	8006002 <HAL_UART_Transmit>
			break;
 800171e:	e00f      	b.n	8001740 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8001720:	4b2e      	ldr	r3, [pc, #184]	@ (80017dc <Shell_Loop+0x15c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	492d      	ldr	r1, [pc, #180]	@ (80017dc <Shell_Loop+0x15c>)
 8001728:	600a      	str	r2, [r1, #0]
 800172a:	4a29      	ldr	r2, [pc, #164]	@ (80017d0 <Shell_Loop+0x150>)
 800172c:	7811      	ldrb	r1, [r2, #0]
 800172e:	4a2c      	ldr	r2, [pc, #176]	@ (80017e0 <Shell_Loop+0x160>)
 8001730:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001732:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001736:	2201      	movs	r2, #1
 8001738:	4925      	ldr	r1, [pc, #148]	@ (80017d0 <Shell_Loop+0x150>)
 800173a:	4827      	ldr	r0, [pc, #156]	@ (80017d8 <Shell_Loop+0x158>)
 800173c:	f004 fc61 	bl	8006002 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 8001740:	4b22      	ldr	r3, [pc, #136]	@ (80017cc <Shell_Loop+0x14c>)
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 8001746:	4b2b      	ldr	r3, [pc, #172]	@ (80017f4 <Shell_Loop+0x174>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d039      	beq.n	80017c2 <Shell_Loop+0x142>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 800174e:	4b28      	ldr	r3, [pc, #160]	@ (80017f0 <Shell_Loop+0x170>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	492a      	ldr	r1, [pc, #168]	@ (80017fc <Shell_Loop+0x17c>)
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fd6b 	bl	8000230 <strcmp>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d107      	bne.n	8001770 <Shell_Loop+0xf0>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 8001760:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001764:	221a      	movs	r2, #26
 8001766:	4926      	ldr	r1, [pc, #152]	@ (8001800 <Shell_Loop+0x180>)
 8001768:	481b      	ldr	r0, [pc, #108]	@ (80017d8 <Shell_Loop+0x158>)
 800176a:	f004 fc4a 	bl	8006002 <HAL_UART_Transmit>
 800176e:	e01e      	b.n	80017ae <Shell_Loop+0x12e>
		}
		else if(strcmp(argv[0],"help")==0){
 8001770:	4b1f      	ldr	r3, [pc, #124]	@ (80017f0 <Shell_Loop+0x170>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4923      	ldr	r1, [pc, #140]	@ (8001804 <Shell_Loop+0x184>)
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fd5a 	bl	8000230 <strcmp>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10e      	bne.n	80017a0 <Shell_Loop+0x120>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 8001782:	4a21      	ldr	r2, [pc, #132]	@ (8001808 <Shell_Loop+0x188>)
 8001784:	2140      	movs	r1, #64	@ 0x40
 8001786:	4821      	ldr	r0, [pc, #132]	@ (800180c <Shell_Loop+0x18c>)
 8001788:	f006 fd36 	bl	80081f8 <sniprintf>
 800178c:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	b29a      	uxth	r2, r3
 8001792:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001796:	491d      	ldr	r1, [pc, #116]	@ (800180c <Shell_Loop+0x18c>)
 8001798:	480f      	ldr	r0, [pc, #60]	@ (80017d8 <Shell_Loop+0x158>)
 800179a:	f004 fc32 	bl	8006002 <HAL_UART_Transmit>
 800179e:	e006      	b.n	80017ae <Shell_Loop+0x12e>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80017a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017a4:	2214      	movs	r2, #20
 80017a6:	491a      	ldr	r1, [pc, #104]	@ (8001810 <Shell_Loop+0x190>)
 80017a8:	480b      	ldr	r0, [pc, #44]	@ (80017d8 <Shell_Loop+0x158>)
 80017aa:	f004 fc2a 	bl	8006002 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017b2:	221c      	movs	r2, #28
 80017b4:	4917      	ldr	r1, [pc, #92]	@ (8001814 <Shell_Loop+0x194>)
 80017b6:	4808      	ldr	r0, [pc, #32]	@ (80017d8 <Shell_Loop+0x158>)
 80017b8:	f004 fc23 	bl	8006002 <HAL_UART_Transmit>
		newCmdReady = 0;
 80017bc:	4b0d      	ldr	r3, [pc, #52]	@ (80017f4 <Shell_Loop+0x174>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
	}
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2000042c 	.word	0x2000042c
 80017d0:	20000430 	.word	0x20000430
 80017d4:	20000088 	.word	0x20000088
 80017d8:	20000304 	.word	0x20000304
 80017dc:	200004b4 	.word	0x200004b4
 80017e0:	20000474 	.word	0x20000474
 80017e4:	200004dc 	.word	0x200004dc
 80017e8:	080095e0 	.word	0x080095e0
 80017ec:	200004e0 	.word	0x200004e0
 80017f0:	200004b8 	.word	0x200004b8
 80017f4:	200004e4 	.word	0x200004e4
 80017f8:	2000008c 	.word	0x2000008c
 80017fc:	080095e4 	.word	0x080095e4
 8001800:	200000a4 	.word	0x200000a4
 8001804:	080095f4 	.word	0x080095f4
 8001808:	080095fc 	.word	0x080095fc
 800180c:	20000434 	.word	0x20000434
 8001810:	20000090 	.word	0x20000090
 8001814:	20000004 	.word	0x20000004

08001818 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001820:	4b05      	ldr	r3, [pc, #20]	@ (8001838 <HAL_UART_RxCpltCallback+0x20>)
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001826:	2201      	movs	r2, #1
 8001828:	4904      	ldr	r1, [pc, #16]	@ (800183c <HAL_UART_RxCpltCallback+0x24>)
 800182a:	4805      	ldr	r0, [pc, #20]	@ (8001840 <HAL_UART_RxCpltCallback+0x28>)
 800182c:	f004 fc78 	bl	8006120 <HAL_UART_Receive_IT>
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	2000042c 	.word	0x2000042c
 800183c:	20000430 	.word	0x20000430
 8001840:	20000304 	.word	0x20000304

08001844 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001844:	480d      	ldr	r0, [pc, #52]	@ (800187c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001846:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001848:	480d      	ldr	r0, [pc, #52]	@ (8001880 <LoopForever+0x6>)
  ldr r1, =_edata
 800184a:	490e      	ldr	r1, [pc, #56]	@ (8001884 <LoopForever+0xa>)
  ldr r2, =_sidata
 800184c:	4a0e      	ldr	r2, [pc, #56]	@ (8001888 <LoopForever+0xe>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001850:	e002      	b.n	8001858 <LoopCopyDataInit>

08001852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001856:	3304      	adds	r3, #4

08001858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800185c:	d3f9      	bcc.n	8001852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185e:	4a0b      	ldr	r2, [pc, #44]	@ (800188c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001860:	4c0b      	ldr	r4, [pc, #44]	@ (8001890 <LoopForever+0x16>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001864:	e001      	b.n	800186a <LoopFillZerobss>

08001866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001868:	3204      	adds	r2, #4

0800186a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800186c:	d3fb      	bcc.n	8001866 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800186e:	f7ff fb5d 	bl	8000f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001872:	f006 fe21 	bl	80084b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001876:	f7ff f91b 	bl	8000ab0 <main>

0800187a <LoopForever>:

LoopForever:
    b LoopForever
 800187a:	e7fe      	b.n	800187a <LoopForever>
  ldr   r0, =_estack
 800187c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001884:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8001888:	08009754 	.word	0x08009754
  ldr r2, =_sbss
 800188c:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 8001890:	20000638 	.word	0x20000638

08001894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001894:	e7fe      	b.n	8001894 <ADC1_2_IRQHandler>

08001896 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a0:	2003      	movs	r0, #3
 80018a2:	f001 f9dc 	bl	8002c5e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018a6:	200f      	movs	r0, #15
 80018a8:	f7ff f9b8 	bl	8000c1c <HAL_InitTick>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d002      	beq.n	80018b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	71fb      	strb	r3, [r7, #7]
 80018b6:	e001      	b.n	80018bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018b8:	f7ff f98c 	bl	8000bd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018bc:	79fb      	ldrb	r3, [r7, #7]

}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018cc:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <HAL_IncTick+0x1c>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <HAL_IncTick+0x20>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4413      	add	r3, r2
 80018d6:	4a03      	ldr	r2, [pc, #12]	@ (80018e4 <HAL_IncTick+0x1c>)
 80018d8:	6013      	str	r3, [r2, #0]
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	200004e8 	.word	0x200004e8
 80018e8:	200000c4 	.word	0x200000c4

080018ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return uwTick;
 80018f0:	4b03      	ldr	r3, [pc, #12]	@ (8001900 <HAL_GetTick+0x14>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	200004e8 	.word	0x200004e8

08001904 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	609a      	str	r2, [r3, #8]
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	609a      	str	r2, [r3, #8]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800196c:	b480      	push	{r7}
 800196e:	b087      	sub	sp, #28
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	3360      	adds	r3, #96	@ 0x60
 800197e:	461a      	mov	r2, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <LL_ADC_SetOffset+0x44>)
 800198e:	4013      	ands	r3, r2
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	4313      	orrs	r3, r2
 800199c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019a4:	bf00      	nop
 80019a6:	371c      	adds	r7, #28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	03fff000 	.word	0x03fff000

080019b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3360      	adds	r3, #96	@ 0x60
 80019c2:	461a      	mov	r2, r3
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b087      	sub	sp, #28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3360      	adds	r3, #96	@ 0x60
 80019f0:	461a      	mov	r2, r3
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	431a      	orrs	r2, r3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a0a:	bf00      	nop
 8001a0c:	371c      	adds	r7, #28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b087      	sub	sp, #28
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3360      	adds	r3, #96	@ 0x60
 8001a26:	461a      	mov	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a40:	bf00      	nop
 8001a42:	371c      	adds	r7, #28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	3360      	adds	r3, #96	@ 0x60
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	431a      	orrs	r2, r3
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001a76:	bf00      	nop
 8001a78:	371c      	adds	r7, #28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	615a      	str	r2, [r3, #20]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b087      	sub	sp, #28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	3330      	adds	r3, #48	@ 0x30
 8001ab8:	461a      	mov	r2, r3
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	f003 030c 	and.w	r3, r3, #12
 8001ac4:	4413      	add	r3, r2
 8001ac6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f003 031f 	and.w	r3, r3, #31
 8001ad2:	211f      	movs	r1, #31
 8001ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	401a      	ands	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	0e9b      	lsrs	r3, r3, #26
 8001ae0:	f003 011f 	and.w	r1, r3, #31
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	f003 031f 	and.w	r3, r3, #31
 8001aea:	fa01 f303 	lsl.w	r3, r1, r3
 8001aee:	431a      	orrs	r2, r3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001af4:	bf00      	nop
 8001af6:	371c      	adds	r7, #28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3314      	adds	r3, #20
 8001b10:	461a      	mov	r2, r3
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	0e5b      	lsrs	r3, r3, #25
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	4413      	add	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	0d1b      	lsrs	r3, r3, #20
 8001b28:	f003 031f 	and.w	r3, r3, #31
 8001b2c:	2107      	movs	r1, #7
 8001b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	401a      	ands	r2, r3
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	0d1b      	lsrs	r3, r3, #20
 8001b3a:	f003 031f 	and.w	r3, r3, #31
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	fa01 f303 	lsl.w	r3, r1, r3
 8001b44:	431a      	orrs	r2, r3
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b4a:	bf00      	nop
 8001b4c:	371c      	adds	r7, #28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b70:	43db      	mvns	r3, r3
 8001b72:	401a      	ands	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f003 0318 	and.w	r3, r3, #24
 8001b7a:	4908      	ldr	r1, [pc, #32]	@ (8001b9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b7c:	40d9      	lsrs	r1, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	400b      	ands	r3, r1
 8001b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b86:	431a      	orrs	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b8e:	bf00      	nop
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	0007ffff 	.word	0x0007ffff

08001ba0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001bb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6093      	str	r3, [r2, #8]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bd8:	d101      	bne.n	8001bde <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001bfc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c00:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c28:	d101      	bne.n	8001c2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <LL_ADC_IsEnabled+0x18>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <LL_ADC_IsEnabled+0x1a>
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 0304 	and.w	r3, r3, #4
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d101      	bne.n	8001c7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d101      	bne.n	8001ca0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e000      	b.n	8001ca2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
	...

08001cb0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cb0:	b590      	push	{r4, r7, lr}
 8001cb2:	b089      	sub	sp, #36	@ 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e1a9      	b.n	800201e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d109      	bne.n	8001cec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7fe fd5f 	bl	800079c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff67 	bl	8001bc4 <LL_ADC_IsDeepPowerDownEnabled>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d004      	beq.n	8001d06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff4d 	bl	8001ba0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff ff82 	bl	8001c14 <LL_ADC_IsInternalRegulatorEnabled>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d115      	bne.n	8001d42 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff ff66 	bl	8001bec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d20:	4b9c      	ldr	r3, [pc, #624]	@ (8001f94 <HAL_ADC_Init+0x2e4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	099b      	lsrs	r3, r3, #6
 8001d26:	4a9c      	ldr	r2, [pc, #624]	@ (8001f98 <HAL_ADC_Init+0x2e8>)
 8001d28:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2c:	099b      	lsrs	r3, r3, #6
 8001d2e:	3301      	adds	r3, #1
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d34:	e002      	b.n	8001d3c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f9      	bne.n	8001d36 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff ff64 	bl	8001c14 <LL_ADC_IsInternalRegulatorEnabled>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10d      	bne.n	8001d6e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d56:	f043 0210 	orr.w	r2, r3, #16
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d62:	f043 0201 	orr.w	r2, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff75 	bl	8001c62 <LL_ADC_REG_IsConversionOngoing>
 8001d78:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f040 8142 	bne.w	800200c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f040 813e 	bne.w	800200c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d94:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d98:	f043 0202 	orr.w	r2, r3, #2
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff49 	bl	8001c3c <LL_ADC_IsEnabled>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d141      	bne.n	8001e34 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001db8:	d004      	beq.n	8001dc4 <HAL_ADC_Init+0x114>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a77      	ldr	r2, [pc, #476]	@ (8001f9c <HAL_ADC_Init+0x2ec>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d10f      	bne.n	8001de4 <HAL_ADC_Init+0x134>
 8001dc4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001dc8:	f7ff ff38 	bl	8001c3c <LL_ADC_IsEnabled>
 8001dcc:	4604      	mov	r4, r0
 8001dce:	4873      	ldr	r0, [pc, #460]	@ (8001f9c <HAL_ADC_Init+0x2ec>)
 8001dd0:	f7ff ff34 	bl	8001c3c <LL_ADC_IsEnabled>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4323      	orrs	r3, r4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	bf0c      	ite	eq
 8001ddc:	2301      	moveq	r3, #1
 8001dde:	2300      	movne	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	e012      	b.n	8001e0a <HAL_ADC_Init+0x15a>
 8001de4:	486e      	ldr	r0, [pc, #440]	@ (8001fa0 <HAL_ADC_Init+0x2f0>)
 8001de6:	f7ff ff29 	bl	8001c3c <LL_ADC_IsEnabled>
 8001dea:	4604      	mov	r4, r0
 8001dec:	486d      	ldr	r0, [pc, #436]	@ (8001fa4 <HAL_ADC_Init+0x2f4>)
 8001dee:	f7ff ff25 	bl	8001c3c <LL_ADC_IsEnabled>
 8001df2:	4603      	mov	r3, r0
 8001df4:	431c      	orrs	r4, r3
 8001df6:	486c      	ldr	r0, [pc, #432]	@ (8001fa8 <HAL_ADC_Init+0x2f8>)
 8001df8:	f7ff ff20 	bl	8001c3c <LL_ADC_IsEnabled>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	4323      	orrs	r3, r4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf0c      	ite	eq
 8001e04:	2301      	moveq	r3, #1
 8001e06:	2300      	movne	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d012      	beq.n	8001e34 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e16:	d004      	beq.n	8001e22 <HAL_ADC_Init+0x172>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a5f      	ldr	r2, [pc, #380]	@ (8001f9c <HAL_ADC_Init+0x2ec>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d101      	bne.n	8001e26 <HAL_ADC_Init+0x176>
 8001e22:	4a62      	ldr	r2, [pc, #392]	@ (8001fac <HAL_ADC_Init+0x2fc>)
 8001e24:	e000      	b.n	8001e28 <HAL_ADC_Init+0x178>
 8001e26:	4a62      	ldr	r2, [pc, #392]	@ (8001fb0 <HAL_ADC_Init+0x300>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4610      	mov	r0, r2
 8001e30:	f7ff fd68 	bl	8001904 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7f5b      	ldrb	r3, [r3, #29]
 8001e38:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e3e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e44:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e4a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e52:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d106      	bne.n	8001e70 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e66:	3b01      	subs	r3, #1
 8001e68:	045b      	lsls	r3, r3, #17
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d009      	beq.n	8001e8c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e7c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e84:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	4b48      	ldr	r3, [pc, #288]	@ (8001fb4 <HAL_ADC_Init+0x304>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	69b9      	ldr	r1, [r7, #24]
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fee4 	bl	8001c88 <LL_ADC_INJ_IsConversionOngoing>
 8001ec0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d17f      	bne.n	8001fc8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d17c      	bne.n	8001fc8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ed2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001eda:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001eea:	f023 0302 	bic.w	r3, r3, #2
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	69b9      	ldr	r1, [r7, #24]
 8001ef4:	430b      	orrs	r3, r1
 8001ef6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d017      	beq.n	8001f30 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691a      	ldr	r2, [r3, #16]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001f0e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f18:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6911      	ldr	r1, [r2, #16]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001f2e:	e013      	b.n	8001f58 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691a      	ldr	r2, [r3, #16]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001f3e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f54:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d12a      	bne.n	8001fb8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f6c:	f023 0304 	bic.w	r3, r3, #4
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f78:	4311      	orrs	r1, r2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001f7e:	4311      	orrs	r1, r2
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f84:	430a      	orrs	r2, r1
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 0201 	orr.w	r2, r2, #1
 8001f90:	611a      	str	r2, [r3, #16]
 8001f92:	e019      	b.n	8001fc8 <HAL_ADC_Init+0x318>
 8001f94:	20000000 	.word	0x20000000
 8001f98:	053e2d63 	.word	0x053e2d63
 8001f9c:	50000100 	.word	0x50000100
 8001fa0:	50000400 	.word	0x50000400
 8001fa4:	50000500 	.word	0x50000500
 8001fa8:	50000600 	.word	0x50000600
 8001fac:	50000300 	.word	0x50000300
 8001fb0:	50000700 	.word	0x50000700
 8001fb4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0201 	bic.w	r2, r2, #1
 8001fc6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d10c      	bne.n	8001fea <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	f023 010f 	bic.w	r1, r3, #15
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	1e5a      	subs	r2, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fe8:	e007      	b.n	8001ffa <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 020f 	bic.w	r2, r2, #15
 8001ff8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffe:	f023 0303 	bic.w	r3, r3, #3
 8002002:	f043 0201 	orr.w	r2, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	65da      	str	r2, [r3, #92]	@ 0x5c
 800200a:	e007      	b.n	800201c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002010:	f043 0210 	orr.w	r2, r3, #16
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800201c:	7ffb      	ldrb	r3, [r7, #31]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3724      	adds	r7, #36	@ 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd90      	pop	{r4, r7, pc}
 8002026:	bf00      	nop

08002028 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b0b6      	sub	sp, #216	@ 0xd8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002042:	2b01      	cmp	r3, #1
 8002044:	d102      	bne.n	800204c <HAL_ADC_ConfigChannel+0x24>
 8002046:	2302      	movs	r3, #2
 8002048:	f000 bc13 	b.w	8002872 <HAL_ADC_ConfigChannel+0x84a>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fe02 	bl	8001c62 <LL_ADC_REG_IsConversionOngoing>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	f040 83f3 	bne.w	800284c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	6859      	ldr	r1, [r3, #4]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	f7ff fd18 	bl	8001aa8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fdf0 	bl	8001c62 <LL_ADC_REG_IsConversionOngoing>
 8002082:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fdfc 	bl	8001c88 <LL_ADC_INJ_IsConversionOngoing>
 8002090:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002094:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002098:	2b00      	cmp	r3, #0
 800209a:	f040 81d9 	bne.w	8002450 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800209e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 81d4 	bne.w	8002450 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80020b0:	d10f      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6818      	ldr	r0, [r3, #0]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2200      	movs	r2, #0
 80020bc:	4619      	mov	r1, r3
 80020be:	f7ff fd1f 	bl	8001b00 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fcd9 	bl	8001a82 <LL_ADC_SetSamplingTimeCommonConfig>
 80020d0:	e00e      	b.n	80020f0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6819      	ldr	r1, [r3, #0]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	461a      	mov	r2, r3
 80020e0:	f7ff fd0e 	bl	8001b00 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2100      	movs	r1, #0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fcc9 	bl	8001a82 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	695a      	ldr	r2, [r3, #20]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	08db      	lsrs	r3, r3, #3
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	2b04      	cmp	r3, #4
 8002110:	d022      	beq.n	8002158 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	6919      	ldr	r1, [r3, #16]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002122:	f7ff fc23 	bl	800196c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	6919      	ldr	r1, [r3, #16]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	461a      	mov	r2, r3
 8002134:	f7ff fc6f 	bl	8001a16 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6818      	ldr	r0, [r3, #0]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002144:	2b01      	cmp	r3, #1
 8002146:	d102      	bne.n	800214e <HAL_ADC_ConfigChannel+0x126>
 8002148:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800214c:	e000      	b.n	8002150 <HAL_ADC_ConfigChannel+0x128>
 800214e:	2300      	movs	r3, #0
 8002150:	461a      	mov	r2, r3
 8002152:	f7ff fc7b 	bl	8001a4c <LL_ADC_SetOffsetSaturation>
 8002156:	e17b      	b.n	8002450 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2100      	movs	r1, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fc28 	bl	80019b4 <LL_ADC_GetOffsetChannel>
 8002164:	4603      	mov	r3, r0
 8002166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10a      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x15c>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fc1d 	bl	80019b4 <LL_ADC_GetOffsetChannel>
 800217a:	4603      	mov	r3, r0
 800217c:	0e9b      	lsrs	r3, r3, #26
 800217e:	f003 021f 	and.w	r2, r3, #31
 8002182:	e01e      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x19a>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fc12 	bl	80019b4 <LL_ADC_GetOffsetChannel>
 8002190:	4603      	mov	r3, r0
 8002192:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80021a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80021b2:	2320      	movs	r3, #32
 80021b4:	e004      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80021b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d105      	bne.n	80021da <HAL_ADC_ConfigChannel+0x1b2>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	0e9b      	lsrs	r3, r3, #26
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	e018      	b.n	800220c <HAL_ADC_ConfigChannel+0x1e4>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80021ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80021f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80021fe:	2320      	movs	r3, #32
 8002200:	e004      	b.n	800220c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002202:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800220c:	429a      	cmp	r2, r3
 800220e:	d106      	bne.n	800221e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2200      	movs	r2, #0
 8002216:	2100      	movs	r1, #0
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fbe1 	bl	80019e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2101      	movs	r1, #1
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fbc5 	bl	80019b4 <LL_ADC_GetOffsetChannel>
 800222a:	4603      	mov	r3, r0
 800222c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10a      	bne.n	800224a <HAL_ADC_ConfigChannel+0x222>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2101      	movs	r1, #1
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff fbba 	bl	80019b4 <LL_ADC_GetOffsetChannel>
 8002240:	4603      	mov	r3, r0
 8002242:	0e9b      	lsrs	r3, r3, #26
 8002244:	f003 021f 	and.w	r2, r3, #31
 8002248:	e01e      	b.n	8002288 <HAL_ADC_ConfigChannel+0x260>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2101      	movs	r1, #1
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fbaf 	bl	80019b4 <LL_ADC_GetOffsetChannel>
 8002256:	4603      	mov	r3, r0
 8002258:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002268:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800226c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002270:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002278:	2320      	movs	r3, #32
 800227a:	e004      	b.n	8002286 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800227c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002280:	fab3 f383 	clz	r3, r3
 8002284:	b2db      	uxtb	r3, r3
 8002286:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002290:	2b00      	cmp	r3, #0
 8002292:	d105      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x278>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	0e9b      	lsrs	r3, r3, #26
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	e018      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x2aa>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80022b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80022bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80022c4:	2320      	movs	r3, #32
 80022c6:	e004      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80022c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022cc:	fab3 f383 	clz	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d106      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2200      	movs	r2, #0
 80022dc:	2101      	movs	r1, #1
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fb7e 	bl	80019e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2102      	movs	r1, #2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fb62 	bl	80019b4 <LL_ADC_GetOffsetChannel>
 80022f0:	4603      	mov	r3, r0
 80022f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10a      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x2e8>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2102      	movs	r1, #2
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fb57 	bl	80019b4 <LL_ADC_GetOffsetChannel>
 8002306:	4603      	mov	r3, r0
 8002308:	0e9b      	lsrs	r3, r3, #26
 800230a:	f003 021f 	and.w	r2, r3, #31
 800230e:	e01e      	b.n	800234e <HAL_ADC_ConfigChannel+0x326>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2102      	movs	r1, #2
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fb4c 	bl	80019b4 <LL_ADC_GetOffsetChannel>
 800231c:	4603      	mov	r3, r0
 800231e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800232e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002332:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002336:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800233e:	2320      	movs	r3, #32
 8002340:	e004      	b.n	800234c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002342:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002356:	2b00      	cmp	r3, #0
 8002358:	d105      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x33e>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	0e9b      	lsrs	r3, r3, #26
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	e016      	b.n	8002394 <HAL_ADC_ConfigChannel+0x36c>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002378:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800237a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800237e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002386:	2320      	movs	r3, #32
 8002388:	e004      	b.n	8002394 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800238a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002394:	429a      	cmp	r2, r3
 8002396:	d106      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2200      	movs	r2, #0
 800239e:	2102      	movs	r1, #2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fb1d 	bl	80019e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2103      	movs	r1, #3
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fb01 	bl	80019b4 <LL_ADC_GetOffsetChannel>
 80023b2:	4603      	mov	r3, r0
 80023b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10a      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x3aa>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2103      	movs	r1, #3
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff faf6 	bl	80019b4 <LL_ADC_GetOffsetChannel>
 80023c8:	4603      	mov	r3, r0
 80023ca:	0e9b      	lsrs	r3, r3, #26
 80023cc:	f003 021f 	and.w	r2, r3, #31
 80023d0:	e017      	b.n	8002402 <HAL_ADC_ConfigChannel+0x3da>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2103      	movs	r1, #3
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff faeb 	bl	80019b4 <LL_ADC_GetOffsetChannel>
 80023de:	4603      	mov	r3, r0
 80023e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023e4:	fa93 f3a3 	rbit	r3, r3
 80023e8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80023ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023ec:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80023ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80023f4:	2320      	movs	r3, #32
 80023f6:	e003      	b.n	8002400 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80023f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240a:	2b00      	cmp	r3, #0
 800240c:	d105      	bne.n	800241a <HAL_ADC_ConfigChannel+0x3f2>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	0e9b      	lsrs	r3, r3, #26
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	e011      	b.n	800243e <HAL_ADC_ConfigChannel+0x416>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002428:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800242a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800242c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002432:	2320      	movs	r3, #32
 8002434:	e003      	b.n	800243e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002436:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800243e:	429a      	cmp	r2, r3
 8002440:	d106      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2200      	movs	r2, #0
 8002448:	2103      	movs	r1, #3
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fac8 	bl	80019e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fbf1 	bl	8001c3c <LL_ADC_IsEnabled>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	f040 813d 	bne.w	80026dc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6819      	ldr	r1, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	461a      	mov	r2, r3
 8002470:	f7ff fb72 	bl	8001b58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4aa2      	ldr	r2, [pc, #648]	@ (8002704 <HAL_ADC_ConfigChannel+0x6dc>)
 800247a:	4293      	cmp	r3, r2
 800247c:	f040 812e 	bne.w	80026dc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10b      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x480>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	0e9b      	lsrs	r3, r3, #26
 8002496:	3301      	adds	r3, #1
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	2b09      	cmp	r3, #9
 800249e:	bf94      	ite	ls
 80024a0:	2301      	movls	r3, #1
 80024a2:	2300      	movhi	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	e019      	b.n	80024dc <HAL_ADC_ConfigChannel+0x4b4>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80024b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024b8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80024ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80024c0:	2320      	movs	r3, #32
 80024c2:	e003      	b.n	80024cc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80024c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024c6:	fab3 f383 	clz	r3, r3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	3301      	adds	r3, #1
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	2b09      	cmp	r3, #9
 80024d4:	bf94      	ite	ls
 80024d6:	2301      	movls	r3, #1
 80024d8:	2300      	movhi	r3, #0
 80024da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d079      	beq.n	80025d4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d107      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x4d4>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	0e9b      	lsrs	r3, r3, #26
 80024f2:	3301      	adds	r3, #1
 80024f4:	069b      	lsls	r3, r3, #26
 80024f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024fa:	e015      	b.n	8002528 <HAL_ADC_ConfigChannel+0x500>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800250a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800250c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800250e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002514:	2320      	movs	r3, #32
 8002516:	e003      	b.n	8002520 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	3301      	adds	r3, #1
 8002522:	069b      	lsls	r3, r3, #26
 8002524:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002530:	2b00      	cmp	r3, #0
 8002532:	d109      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x520>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	0e9b      	lsrs	r3, r3, #26
 800253a:	3301      	adds	r3, #1
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	2101      	movs	r1, #1
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	e017      	b.n	8002578 <HAL_ADC_ConfigChannel+0x550>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002550:	fa93 f3a3 	rbit	r3, r3
 8002554:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002558:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800255a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002560:	2320      	movs	r3, #32
 8002562:	e003      	b.n	800256c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002564:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	3301      	adds	r3, #1
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	2101      	movs	r1, #1
 8002574:	fa01 f303 	lsl.w	r3, r1, r3
 8002578:	ea42 0103 	orr.w	r1, r2, r3
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10a      	bne.n	800259e <HAL_ADC_ConfigChannel+0x576>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	0e9b      	lsrs	r3, r3, #26
 800258e:	3301      	adds	r3, #1
 8002590:	f003 021f 	and.w	r2, r3, #31
 8002594:	4613      	mov	r3, r2
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	4413      	add	r3, r2
 800259a:	051b      	lsls	r3, r3, #20
 800259c:	e018      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x5a8>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80025ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80025b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80025b6:	2320      	movs	r3, #32
 80025b8:	e003      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80025ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025bc:	fab3 f383 	clz	r3, r3
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	f003 021f 	and.w	r2, r3, #31
 80025c8:	4613      	mov	r3, r2
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4413      	add	r3, r2
 80025ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025d0:	430b      	orrs	r3, r1
 80025d2:	e07e      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d107      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x5c8>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0e9b      	lsrs	r3, r3, #26
 80025e6:	3301      	adds	r3, #1
 80025e8:	069b      	lsls	r3, r3, #26
 80025ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025ee:	e015      	b.n	800261c <HAL_ADC_ConfigChannel+0x5f4>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80025fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002600:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002608:	2320      	movs	r3, #32
 800260a:	e003      	b.n	8002614 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800260c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260e:	fab3 f383 	clz	r3, r3
 8002612:	b2db      	uxtb	r3, r3
 8002614:	3301      	adds	r3, #1
 8002616:	069b      	lsls	r3, r3, #26
 8002618:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002624:	2b00      	cmp	r3, #0
 8002626:	d109      	bne.n	800263c <HAL_ADC_ConfigChannel+0x614>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	0e9b      	lsrs	r3, r3, #26
 800262e:	3301      	adds	r3, #1
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	2101      	movs	r1, #1
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	e017      	b.n	800266c <HAL_ADC_ConfigChannel+0x644>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	fa93 f3a3 	rbit	r3, r3
 8002648:	61fb      	str	r3, [r7, #28]
  return result;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800264e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002654:	2320      	movs	r3, #32
 8002656:	e003      	b.n	8002660 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	3301      	adds	r3, #1
 8002662:	f003 031f 	and.w	r3, r3, #31
 8002666:	2101      	movs	r1, #1
 8002668:	fa01 f303 	lsl.w	r3, r1, r3
 800266c:	ea42 0103 	orr.w	r1, r2, r3
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10d      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x670>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	0e9b      	lsrs	r3, r3, #26
 8002682:	3301      	adds	r3, #1
 8002684:	f003 021f 	and.w	r2, r3, #31
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	3b1e      	subs	r3, #30
 8002690:	051b      	lsls	r3, r3, #20
 8002692:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002696:	e01b      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x6a8>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	fa93 f3a3 	rbit	r3, r3
 80026a4:	613b      	str	r3, [r7, #16]
  return result;
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80026b0:	2320      	movs	r3, #32
 80026b2:	e003      	b.n	80026bc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	fab3 f383 	clz	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	3301      	adds	r3, #1
 80026be:	f003 021f 	and.w	r2, r3, #31
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	3b1e      	subs	r3, #30
 80026ca:	051b      	lsls	r3, r3, #20
 80026cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026d0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026d6:	4619      	mov	r1, r3
 80026d8:	f7ff fa12 	bl	8001b00 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4b09      	ldr	r3, [pc, #36]	@ (8002708 <HAL_ADC_ConfigChannel+0x6e0>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 80be 	beq.w	8002866 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026f2:	d004      	beq.n	80026fe <HAL_ADC_ConfigChannel+0x6d6>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a04      	ldr	r2, [pc, #16]	@ (800270c <HAL_ADC_ConfigChannel+0x6e4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d10a      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x6ec>
 80026fe:	4b04      	ldr	r3, [pc, #16]	@ (8002710 <HAL_ADC_ConfigChannel+0x6e8>)
 8002700:	e009      	b.n	8002716 <HAL_ADC_ConfigChannel+0x6ee>
 8002702:	bf00      	nop
 8002704:	407f0000 	.word	0x407f0000
 8002708:	80080000 	.word	0x80080000
 800270c:	50000100 	.word	0x50000100
 8002710:	50000300 	.word	0x50000300
 8002714:	4b59      	ldr	r3, [pc, #356]	@ (800287c <HAL_ADC_ConfigChannel+0x854>)
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff f91a 	bl	8001950 <LL_ADC_GetCommonPathInternalCh>
 800271c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a56      	ldr	r2, [pc, #344]	@ (8002880 <HAL_ADC_ConfigChannel+0x858>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d004      	beq.n	8002734 <HAL_ADC_ConfigChannel+0x70c>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a55      	ldr	r2, [pc, #340]	@ (8002884 <HAL_ADC_ConfigChannel+0x85c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d13a      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002734:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002738:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d134      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002748:	d005      	beq.n	8002756 <HAL_ADC_ConfigChannel+0x72e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a4e      	ldr	r2, [pc, #312]	@ (8002888 <HAL_ADC_ConfigChannel+0x860>)
 8002750:	4293      	cmp	r3, r2
 8002752:	f040 8085 	bne.w	8002860 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800275e:	d004      	beq.n	800276a <HAL_ADC_ConfigChannel+0x742>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a49      	ldr	r2, [pc, #292]	@ (800288c <HAL_ADC_ConfigChannel+0x864>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d101      	bne.n	800276e <HAL_ADC_ConfigChannel+0x746>
 800276a:	4a49      	ldr	r2, [pc, #292]	@ (8002890 <HAL_ADC_ConfigChannel+0x868>)
 800276c:	e000      	b.n	8002770 <HAL_ADC_ConfigChannel+0x748>
 800276e:	4a43      	ldr	r2, [pc, #268]	@ (800287c <HAL_ADC_ConfigChannel+0x854>)
 8002770:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002774:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002778:	4619      	mov	r1, r3
 800277a:	4610      	mov	r0, r2
 800277c:	f7ff f8d5 	bl	800192a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002780:	4b44      	ldr	r3, [pc, #272]	@ (8002894 <HAL_ADC_ConfigChannel+0x86c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	4a44      	ldr	r2, [pc, #272]	@ (8002898 <HAL_ADC_ConfigChannel+0x870>)
 8002788:	fba2 2303 	umull	r2, r3, r2, r3
 800278c:	099b      	lsrs	r3, r3, #6
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	4613      	mov	r3, r2
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	4413      	add	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800279a:	e002      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	3b01      	subs	r3, #1
 80027a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1f9      	bne.n	800279c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027a8:	e05a      	b.n	8002860 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a3b      	ldr	r2, [pc, #236]	@ (800289c <HAL_ADC_ConfigChannel+0x874>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d125      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d11f      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a31      	ldr	r2, [pc, #196]	@ (800288c <HAL_ADC_ConfigChannel+0x864>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d104      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x7ac>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a34      	ldr	r2, [pc, #208]	@ (80028a0 <HAL_ADC_ConfigChannel+0x878>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d047      	beq.n	8002864 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027dc:	d004      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0x7c0>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a2a      	ldr	r2, [pc, #168]	@ (800288c <HAL_ADC_ConfigChannel+0x864>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d101      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x7c4>
 80027e8:	4a29      	ldr	r2, [pc, #164]	@ (8002890 <HAL_ADC_ConfigChannel+0x868>)
 80027ea:	e000      	b.n	80027ee <HAL_ADC_ConfigChannel+0x7c6>
 80027ec:	4a23      	ldr	r2, [pc, #140]	@ (800287c <HAL_ADC_ConfigChannel+0x854>)
 80027ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027f6:	4619      	mov	r1, r3
 80027f8:	4610      	mov	r0, r2
 80027fa:	f7ff f896 	bl	800192a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027fe:	e031      	b.n	8002864 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a27      	ldr	r2, [pc, #156]	@ (80028a4 <HAL_ADC_ConfigChannel+0x87c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d12d      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800280a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800280e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d127      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a1c      	ldr	r2, [pc, #112]	@ (800288c <HAL_ADC_ConfigChannel+0x864>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d022      	beq.n	8002866 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002828:	d004      	beq.n	8002834 <HAL_ADC_ConfigChannel+0x80c>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a17      	ldr	r2, [pc, #92]	@ (800288c <HAL_ADC_ConfigChannel+0x864>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d101      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x810>
 8002834:	4a16      	ldr	r2, [pc, #88]	@ (8002890 <HAL_ADC_ConfigChannel+0x868>)
 8002836:	e000      	b.n	800283a <HAL_ADC_ConfigChannel+0x812>
 8002838:	4a10      	ldr	r2, [pc, #64]	@ (800287c <HAL_ADC_ConfigChannel+0x854>)
 800283a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800283e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002842:	4619      	mov	r1, r3
 8002844:	4610      	mov	r0, r2
 8002846:	f7ff f870 	bl	800192a <LL_ADC_SetCommonPathInternalCh>
 800284a:	e00c      	b.n	8002866 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002850:	f043 0220 	orr.w	r2, r3, #32
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800285e:	e002      	b.n	8002866 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002860:	bf00      	nop
 8002862:	e000      	b.n	8002866 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002864:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800286e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002872:	4618      	mov	r0, r3
 8002874:	37d8      	adds	r7, #216	@ 0xd8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	50000700 	.word	0x50000700
 8002880:	c3210000 	.word	0xc3210000
 8002884:	90c00010 	.word	0x90c00010
 8002888:	50000600 	.word	0x50000600
 800288c:	50000100 	.word	0x50000100
 8002890:	50000300 	.word	0x50000300
 8002894:	20000000 	.word	0x20000000
 8002898:	053e2d63 	.word	0x053e2d63
 800289c:	c7520000 	.word	0xc7520000
 80028a0:	50000500 	.word	0x50000500
 80028a4:	cb840000 	.word	0xcb840000

080028a8 <LL_ADC_IsEnabled>:
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <LL_ADC_IsEnabled+0x18>
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <LL_ADC_IsEnabled+0x1a>
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <LL_ADC_REG_IsConversionOngoing>:
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d101      	bne.n	80028e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80028f4:	b590      	push	{r4, r7, lr}
 80028f6:	b0a1      	sub	sp, #132	@ 0x84
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800290e:	2302      	movs	r3, #2
 8002910:	e0e7      	b.n	8002ae2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800291a:	2300      	movs	r3, #0
 800291c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800291e:	2300      	movs	r3, #0
 8002920:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800292a:	d102      	bne.n	8002932 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800292c:	4b6f      	ldr	r3, [pc, #444]	@ (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	e009      	b.n	8002946 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a6e      	ldr	r2, [pc, #440]	@ (8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d102      	bne.n	8002942 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800293c:	4b6d      	ldr	r3, [pc, #436]	@ (8002af4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	e001      	b.n	8002946 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10b      	bne.n	8002964 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002950:	f043 0220 	orr.w	r2, r3, #32
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0be      	b.n	8002ae2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff ffb1 	bl	80028ce <LL_ADC_REG_IsConversionOngoing>
 800296c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff ffab 	bl	80028ce <LL_ADC_REG_IsConversionOngoing>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	f040 80a0 	bne.w	8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002980:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002982:	2b00      	cmp	r3, #0
 8002984:	f040 809c 	bne.w	8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002990:	d004      	beq.n	800299c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a55      	ldr	r2, [pc, #340]	@ (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d101      	bne.n	80029a0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800299c:	4b56      	ldr	r3, [pc, #344]	@ (8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800299e:	e000      	b.n	80029a2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80029a0:	4b56      	ldr	r3, [pc, #344]	@ (8002afc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80029a2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d04b      	beq.n	8002a44 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80029ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	6859      	ldr	r1, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029be:	035b      	lsls	r3, r3, #13
 80029c0:	430b      	orrs	r3, r1
 80029c2:	431a      	orrs	r2, r3
 80029c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029d0:	d004      	beq.n	80029dc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a45      	ldr	r2, [pc, #276]	@ (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d10f      	bne.n	80029fc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80029dc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80029e0:	f7ff ff62 	bl	80028a8 <LL_ADC_IsEnabled>
 80029e4:	4604      	mov	r4, r0
 80029e6:	4841      	ldr	r0, [pc, #260]	@ (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029e8:	f7ff ff5e 	bl	80028a8 <LL_ADC_IsEnabled>
 80029ec:	4603      	mov	r3, r0
 80029ee:	4323      	orrs	r3, r4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bf0c      	ite	eq
 80029f4:	2301      	moveq	r3, #1
 80029f6:	2300      	movne	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	e012      	b.n	8002a22 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80029fc:	483c      	ldr	r0, [pc, #240]	@ (8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80029fe:	f7ff ff53 	bl	80028a8 <LL_ADC_IsEnabled>
 8002a02:	4604      	mov	r4, r0
 8002a04:	483b      	ldr	r0, [pc, #236]	@ (8002af4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a06:	f7ff ff4f 	bl	80028a8 <LL_ADC_IsEnabled>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	431c      	orrs	r4, r3
 8002a0e:	483c      	ldr	r0, [pc, #240]	@ (8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002a10:	f7ff ff4a 	bl	80028a8 <LL_ADC_IsEnabled>
 8002a14:	4603      	mov	r3, r0
 8002a16:	4323      	orrs	r3, r4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bf0c      	ite	eq
 8002a1c:	2301      	moveq	r3, #1
 8002a1e:	2300      	movne	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d056      	beq.n	8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a2e:	f023 030f 	bic.w	r3, r3, #15
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	6811      	ldr	r1, [r2, #0]
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	6892      	ldr	r2, [r2, #8]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a40:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a42:	e047      	b.n	8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a4e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a58:	d004      	beq.n	8002a64 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a23      	ldr	r2, [pc, #140]	@ (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d10f      	bne.n	8002a84 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002a64:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002a68:	f7ff ff1e 	bl	80028a8 <LL_ADC_IsEnabled>
 8002a6c:	4604      	mov	r4, r0
 8002a6e:	481f      	ldr	r0, [pc, #124]	@ (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a70:	f7ff ff1a 	bl	80028a8 <LL_ADC_IsEnabled>
 8002a74:	4603      	mov	r3, r0
 8002a76:	4323      	orrs	r3, r4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	bf0c      	ite	eq
 8002a7c:	2301      	moveq	r3, #1
 8002a7e:	2300      	movne	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	e012      	b.n	8002aaa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002a84:	481a      	ldr	r0, [pc, #104]	@ (8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a86:	f7ff ff0f 	bl	80028a8 <LL_ADC_IsEnabled>
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	4819      	ldr	r0, [pc, #100]	@ (8002af4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a8e:	f7ff ff0b 	bl	80028a8 <LL_ADC_IsEnabled>
 8002a92:	4603      	mov	r3, r0
 8002a94:	431c      	orrs	r4, r3
 8002a96:	481a      	ldr	r0, [pc, #104]	@ (8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002a98:	f7ff ff06 	bl	80028a8 <LL_ADC_IsEnabled>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4323      	orrs	r3, r4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf0c      	ite	eq
 8002aa4:	2301      	moveq	r3, #1
 8002aa6:	2300      	movne	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d012      	beq.n	8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002aae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002ab6:	f023 030f 	bic.w	r3, r3, #15
 8002aba:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002abc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002abe:	e009      	b.n	8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac4:	f043 0220 	orr.w	r2, r3, #32
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002ad2:	e000      	b.n	8002ad6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ad4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ade:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3784      	adds	r7, #132	@ 0x84
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd90      	pop	{r4, r7, pc}
 8002aea:	bf00      	nop
 8002aec:	50000100 	.word	0x50000100
 8002af0:	50000400 	.word	0x50000400
 8002af4:	50000500 	.word	0x50000500
 8002af8:	50000300 	.word	0x50000300
 8002afc:	50000700 	.word	0x50000700
 8002b00:	50000600 	.word	0x50000600

08002b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b14:	4b0c      	ldr	r3, [pc, #48]	@ (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b20:	4013      	ands	r3, r2
 8002b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b36:	4a04      	ldr	r2, [pc, #16]	@ (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	60d3      	str	r3, [r2, #12]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b50:	4b04      	ldr	r3, [pc, #16]	@ (8002b64 <__NVIC_GetPriorityGrouping+0x18>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	0a1b      	lsrs	r3, r3, #8
 8002b56:	f003 0307 	and.w	r3, r3, #7
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	db0b      	blt.n	8002b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	f003 021f 	and.w	r2, r3, #31
 8002b80:	4907      	ldr	r1, [pc, #28]	@ (8002ba0 <__NVIC_EnableIRQ+0x38>)
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	2001      	movs	r0, #1
 8002b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	e000e100 	.word	0xe000e100

08002ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	6039      	str	r1, [r7, #0]
 8002bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	db0a      	blt.n	8002bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	490c      	ldr	r1, [pc, #48]	@ (8002bf0 <__NVIC_SetPriority+0x4c>)
 8002bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc2:	0112      	lsls	r2, r2, #4
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bcc:	e00a      	b.n	8002be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4908      	ldr	r1, [pc, #32]	@ (8002bf4 <__NVIC_SetPriority+0x50>)
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	3b04      	subs	r3, #4
 8002bdc:	0112      	lsls	r2, r2, #4
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	440b      	add	r3, r1
 8002be2:	761a      	strb	r2, [r3, #24]
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000e100 	.word	0xe000e100
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b089      	sub	sp, #36	@ 0x24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f1c3 0307 	rsb	r3, r3, #7
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	bf28      	it	cs
 8002c16:	2304      	movcs	r3, #4
 8002c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	2b06      	cmp	r3, #6
 8002c20:	d902      	bls.n	8002c28 <NVIC_EncodePriority+0x30>
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3b03      	subs	r3, #3
 8002c26:	e000      	b.n	8002c2a <NVIC_EncodePriority+0x32>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43da      	mvns	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4a:	43d9      	mvns	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c50:	4313      	orrs	r3, r2
         );
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3724      	adds	r7, #36	@ 0x24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff ff4c 	bl	8002b04 <__NVIC_SetPriorityGrouping>
}
 8002c6c:	bf00      	nop
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c82:	f7ff ff63 	bl	8002b4c <__NVIC_GetPriorityGrouping>
 8002c86:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	6978      	ldr	r0, [r7, #20]
 8002c8e:	f7ff ffb3 	bl	8002bf8 <NVIC_EncodePriority>
 8002c92:	4602      	mov	r2, r0
 8002c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff ff82 	bl	8002ba4 <__NVIC_SetPriority>
}
 8002ca0:	bf00      	nop
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff ff56 	bl	8002b68 <__NVIC_EnableIRQ>
}
 8002cbc:	bf00      	nop
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d005      	beq.n	8002ce8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2204      	movs	r2, #4
 8002ce0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	73fb      	strb	r3, [r7, #15]
 8002ce6:	e037      	b.n	8002d58 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 020e 	bic.w	r2, r2, #14
 8002cf6:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d02:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d06:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0201 	bic.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1c:	f003 021f 	and.w	r2, r3, #31
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d24:	2101      	movs	r1, #1
 8002d26:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d34:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00c      	beq.n	8002d58 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d4c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d56:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d00d      	beq.n	8002daa <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2204      	movs	r2, #4
 8002d92:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
 8002da8:	e047      	b.n	8002e3a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 020e 	bic.w	r2, r2, #14
 8002db8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0201 	bic.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dde:	f003 021f 	and.w	r2, r3, #31
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de6:	2101      	movs	r1, #1
 8002de8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dec:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002df6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00c      	beq.n	8002e1a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e0a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e18:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	4798      	blx	r3
    }
  }
  return status;
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e52:	e15a      	b.n	800310a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	2101      	movs	r1, #1
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e60:	4013      	ands	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 814c 	beq.w	8003104 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d005      	beq.n	8002e84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d130      	bne.n	8002ee6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	2203      	movs	r2, #3
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eba:	2201      	movs	r2, #1
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	091b      	lsrs	r3, r3, #4
 8002ed0:	f003 0201 	and.w	r2, r3, #1
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d017      	beq.n	8002f22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	2203      	movs	r2, #3
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4013      	ands	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d123      	bne.n	8002f76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	08da      	lsrs	r2, r3, #3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3208      	adds	r2, #8
 8002f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	220f      	movs	r2, #15
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	691a      	ldr	r2, [r3, #16]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	08da      	lsrs	r2, r3, #3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3208      	adds	r2, #8
 8002f70:	6939      	ldr	r1, [r7, #16]
 8002f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	2203      	movs	r2, #3
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 0203 	and.w	r2, r3, #3
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 80a6 	beq.w	8003104 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb8:	4b5b      	ldr	r3, [pc, #364]	@ (8003128 <HAL_GPIO_Init+0x2e4>)
 8002fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fbc:	4a5a      	ldr	r2, [pc, #360]	@ (8003128 <HAL_GPIO_Init+0x2e4>)
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fc4:	4b58      	ldr	r3, [pc, #352]	@ (8003128 <HAL_GPIO_Init+0x2e4>)
 8002fc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	60bb      	str	r3, [r7, #8]
 8002fce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fd0:	4a56      	ldr	r2, [pc, #344]	@ (800312c <HAL_GPIO_Init+0x2e8>)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	089b      	lsrs	r3, r3, #2
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	220f      	movs	r2, #15
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ffa:	d01f      	beq.n	800303c <HAL_GPIO_Init+0x1f8>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a4c      	ldr	r2, [pc, #304]	@ (8003130 <HAL_GPIO_Init+0x2ec>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d019      	beq.n	8003038 <HAL_GPIO_Init+0x1f4>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a4b      	ldr	r2, [pc, #300]	@ (8003134 <HAL_GPIO_Init+0x2f0>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d013      	beq.n	8003034 <HAL_GPIO_Init+0x1f0>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a4a      	ldr	r2, [pc, #296]	@ (8003138 <HAL_GPIO_Init+0x2f4>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d00d      	beq.n	8003030 <HAL_GPIO_Init+0x1ec>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a49      	ldr	r2, [pc, #292]	@ (800313c <HAL_GPIO_Init+0x2f8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d007      	beq.n	800302c <HAL_GPIO_Init+0x1e8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a48      	ldr	r2, [pc, #288]	@ (8003140 <HAL_GPIO_Init+0x2fc>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d101      	bne.n	8003028 <HAL_GPIO_Init+0x1e4>
 8003024:	2305      	movs	r3, #5
 8003026:	e00a      	b.n	800303e <HAL_GPIO_Init+0x1fa>
 8003028:	2306      	movs	r3, #6
 800302a:	e008      	b.n	800303e <HAL_GPIO_Init+0x1fa>
 800302c:	2304      	movs	r3, #4
 800302e:	e006      	b.n	800303e <HAL_GPIO_Init+0x1fa>
 8003030:	2303      	movs	r3, #3
 8003032:	e004      	b.n	800303e <HAL_GPIO_Init+0x1fa>
 8003034:	2302      	movs	r3, #2
 8003036:	e002      	b.n	800303e <HAL_GPIO_Init+0x1fa>
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <HAL_GPIO_Init+0x1fa>
 800303c:	2300      	movs	r3, #0
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	f002 0203 	and.w	r2, r2, #3
 8003044:	0092      	lsls	r2, r2, #2
 8003046:	4093      	lsls	r3, r2
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800304e:	4937      	ldr	r1, [pc, #220]	@ (800312c <HAL_GPIO_Init+0x2e8>)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	089b      	lsrs	r3, r3, #2
 8003054:	3302      	adds	r3, #2
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800305c:	4b39      	ldr	r3, [pc, #228]	@ (8003144 <HAL_GPIO_Init+0x300>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	43db      	mvns	r3, r3
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4013      	ands	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003080:	4a30      	ldr	r2, [pc, #192]	@ (8003144 <HAL_GPIO_Init+0x300>)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003086:	4b2f      	ldr	r3, [pc, #188]	@ (8003144 <HAL_GPIO_Init+0x300>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	43db      	mvns	r3, r3
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4013      	ands	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030aa:	4a26      	ldr	r2, [pc, #152]	@ (8003144 <HAL_GPIO_Init+0x300>)
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80030b0:	4b24      	ldr	r3, [pc, #144]	@ (8003144 <HAL_GPIO_Init+0x300>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4013      	ands	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003144 <HAL_GPIO_Init+0x300>)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030da:	4b1a      	ldr	r3, [pc, #104]	@ (8003144 <HAL_GPIO_Init+0x300>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4013      	ands	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030fe:	4a11      	ldr	r2, [pc, #68]	@ (8003144 <HAL_GPIO_Init+0x300>)
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	3301      	adds	r3, #1
 8003108:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	fa22 f303 	lsr.w	r3, r2, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	f47f ae9d 	bne.w	8002e54 <HAL_GPIO_Init+0x10>
  }
}
 800311a:	bf00      	nop
 800311c:	bf00      	nop
 800311e:	371c      	adds	r7, #28
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	40021000 	.word	0x40021000
 800312c:	40010000 	.word	0x40010000
 8003130:	48000400 	.word	0x48000400
 8003134:	48000800 	.word	0x48000800
 8003138:	48000c00 	.word	0x48000c00
 800313c:	48001000 	.word	0x48001000
 8003140:	48001400 	.word	0x48001400
 8003144:	40010400 	.word	0x40010400

08003148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	807b      	strh	r3, [r7, #2]
 8003154:	4613      	mov	r3, r2
 8003156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003158:	787b      	ldrb	r3, [r7, #1]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800315e:	887a      	ldrh	r2, [r7, #2]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003164:	e002      	b.n	800316c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003166:	887a      	ldrh	r2, [r7, #2]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003182:	4b08      	ldr	r3, [pc, #32]	@ (80031a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003184:	695a      	ldr	r2, [r3, #20]
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	4013      	ands	r3, r2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d006      	beq.n	800319c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800318e:	4a05      	ldr	r2, [pc, #20]	@ (80031a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003190:	88fb      	ldrh	r3, [r7, #6]
 8003192:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	4618      	mov	r0, r3
 8003198:	f000 f806 	bl	80031a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800319c:	bf00      	nop
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40010400 	.word	0x40010400

080031a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
	...

080031c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d141      	bne.n	8003252 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031ce:	4b4b      	ldr	r3, [pc, #300]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031da:	d131      	bne.n	8003240 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031dc:	4b47      	ldr	r3, [pc, #284]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031e2:	4a46      	ldr	r2, [pc, #280]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031ec:	4b43      	ldr	r3, [pc, #268]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031f4:	4a41      	ldr	r2, [pc, #260]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031fc:	4b40      	ldr	r3, [pc, #256]	@ (8003300 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2232      	movs	r2, #50	@ 0x32
 8003202:	fb02 f303 	mul.w	r3, r2, r3
 8003206:	4a3f      	ldr	r2, [pc, #252]	@ (8003304 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003208:	fba2 2303 	umull	r2, r3, r2, r3
 800320c:	0c9b      	lsrs	r3, r3, #18
 800320e:	3301      	adds	r3, #1
 8003210:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003212:	e002      	b.n	800321a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	3b01      	subs	r3, #1
 8003218:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800321a:	4b38      	ldr	r3, [pc, #224]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003226:	d102      	bne.n	800322e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f2      	bne.n	8003214 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800322e:	4b33      	ldr	r3, [pc, #204]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800323a:	d158      	bne.n	80032ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e057      	b.n	80032f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003240:	4b2e      	ldr	r3, [pc, #184]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003246:	4a2d      	ldr	r2, [pc, #180]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003248:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800324c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003250:	e04d      	b.n	80032ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003258:	d141      	bne.n	80032de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800325a:	4b28      	ldr	r3, [pc, #160]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003266:	d131      	bne.n	80032cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003268:	4b24      	ldr	r3, [pc, #144]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800326e:	4a23      	ldr	r2, [pc, #140]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003274:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003278:	4b20      	ldr	r3, [pc, #128]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003280:	4a1e      	ldr	r2, [pc, #120]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003282:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003286:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003288:	4b1d      	ldr	r3, [pc, #116]	@ (8003300 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2232      	movs	r2, #50	@ 0x32
 800328e:	fb02 f303 	mul.w	r3, r2, r3
 8003292:	4a1c      	ldr	r2, [pc, #112]	@ (8003304 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003294:	fba2 2303 	umull	r2, r3, r2, r3
 8003298:	0c9b      	lsrs	r3, r3, #18
 800329a:	3301      	adds	r3, #1
 800329c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800329e:	e002      	b.n	80032a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032a6:	4b15      	ldr	r3, [pc, #84]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032b2:	d102      	bne.n	80032ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f2      	bne.n	80032a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032ba:	4b10      	ldr	r3, [pc, #64]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c6:	d112      	bne.n	80032ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e011      	b.n	80032f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032cc:	4b0b      	ldr	r3, [pc, #44]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032d2:	4a0a      	ldr	r2, [pc, #40]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80032dc:	e007      	b.n	80032ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032de:	4b07      	ldr	r3, [pc, #28]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032e6:	4a05      	ldr	r2, [pc, #20]	@ (80032fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	40007000 	.word	0x40007000
 8003300:	20000000 	.word	0x20000000
 8003304:	431bde83 	.word	0x431bde83

08003308 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800330c:	4b05      	ldr	r3, [pc, #20]	@ (8003324 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	4a04      	ldr	r2, [pc, #16]	@ (8003324 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003312:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003316:	6093      	str	r3, [r2, #8]
}
 8003318:	bf00      	nop
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40007000 	.word	0x40007000

08003328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e2fe      	b.n	8003938 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d075      	beq.n	8003432 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003346:	4b97      	ldr	r3, [pc, #604]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 030c 	and.w	r3, r3, #12
 800334e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003350:	4b94      	ldr	r3, [pc, #592]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	2b0c      	cmp	r3, #12
 800335e:	d102      	bne.n	8003366 <HAL_RCC_OscConfig+0x3e>
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2b03      	cmp	r3, #3
 8003364:	d002      	beq.n	800336c <HAL_RCC_OscConfig+0x44>
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2b08      	cmp	r3, #8
 800336a:	d10b      	bne.n	8003384 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800336c:	4b8d      	ldr	r3, [pc, #564]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d05b      	beq.n	8003430 <HAL_RCC_OscConfig+0x108>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d157      	bne.n	8003430 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e2d9      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800338c:	d106      	bne.n	800339c <HAL_RCC_OscConfig+0x74>
 800338e:	4b85      	ldr	r3, [pc, #532]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a84      	ldr	r2, [pc, #528]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 8003394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	e01d      	b.n	80033d8 <HAL_RCC_OscConfig+0xb0>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x98>
 80033a6:	4b7f      	ldr	r3, [pc, #508]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a7e      	ldr	r2, [pc, #504]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80033ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	4b7c      	ldr	r3, [pc, #496]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a7b      	ldr	r2, [pc, #492]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	e00b      	b.n	80033d8 <HAL_RCC_OscConfig+0xb0>
 80033c0:	4b78      	ldr	r3, [pc, #480]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a77      	ldr	r2, [pc, #476]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80033c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	4b75      	ldr	r3, [pc, #468]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a74      	ldr	r2, [pc, #464]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80033d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d013      	beq.n	8003408 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e0:	f7fe fa84 	bl	80018ec <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e8:	f7fe fa80 	bl	80018ec <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b64      	cmp	r3, #100	@ 0x64
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e29e      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033fa:	4b6a      	ldr	r3, [pc, #424]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCC_OscConfig+0xc0>
 8003406:	e014      	b.n	8003432 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fe fa70 	bl	80018ec <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003410:	f7fe fa6c 	bl	80018ec <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	@ 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e28a      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003422:	4b60      	ldr	r3, [pc, #384]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0xe8>
 800342e:	e000      	b.n	8003432 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d075      	beq.n	800352a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800343e:	4b59      	ldr	r3, [pc, #356]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 030c 	and.w	r3, r3, #12
 8003446:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003448:	4b56      	ldr	r3, [pc, #344]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	2b0c      	cmp	r3, #12
 8003456:	d102      	bne.n	800345e <HAL_RCC_OscConfig+0x136>
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d002      	beq.n	8003464 <HAL_RCC_OscConfig+0x13c>
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	2b04      	cmp	r3, #4
 8003462:	d11f      	bne.n	80034a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003464:	4b4f      	ldr	r3, [pc, #316]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_RCC_OscConfig+0x154>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e25d      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347c:	4b49      	ldr	r3, [pc, #292]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	061b      	lsls	r3, r3, #24
 800348a:	4946      	ldr	r1, [pc, #280]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 800348c:	4313      	orrs	r3, r2
 800348e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003490:	4b45      	ldr	r3, [pc, #276]	@ (80035a8 <HAL_RCC_OscConfig+0x280>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7fd fbc1 	bl	8000c1c <HAL_InitTick>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d043      	beq.n	8003528 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e249      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d023      	beq.n	80034f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ac:	4b3d      	ldr	r3, [pc, #244]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a3c      	ldr	r2, [pc, #240]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80034b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fe fa18 	bl	80018ec <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c0:	f7fe fa14 	bl	80018ec <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e232      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034d2:	4b34      	ldr	r3, [pc, #208]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034de:	4b31      	ldr	r3, [pc, #196]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	061b      	lsls	r3, r3, #24
 80034ec:	492d      	ldr	r1, [pc, #180]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	604b      	str	r3, [r1, #4]
 80034f2:	e01a      	b.n	800352a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f4:	4b2b      	ldr	r3, [pc, #172]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a2a      	ldr	r2, [pc, #168]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 80034fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fe f9f4 	bl	80018ec <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003508:	f7fe f9f0 	bl	80018ec <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e20e      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800351a:	4b22      	ldr	r3, [pc, #136]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x1e0>
 8003526:	e000      	b.n	800352a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003528:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d041      	beq.n	80035ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d01c      	beq.n	8003578 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353e:	4b19      	ldr	r3, [pc, #100]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 8003540:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003544:	4a17      	ldr	r2, [pc, #92]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354e:	f7fe f9cd 	bl	80018ec <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003556:	f7fe f9c9 	bl	80018ec <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e1e7      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003568:	4b0e      	ldr	r3, [pc, #56]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 800356a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0ef      	beq.n	8003556 <HAL_RCC_OscConfig+0x22e>
 8003576:	e020      	b.n	80035ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003578:	4b0a      	ldr	r3, [pc, #40]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 800357a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800357e:	4a09      	ldr	r2, [pc, #36]	@ (80035a4 <HAL_RCC_OscConfig+0x27c>)
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003588:	f7fe f9b0 	bl	80018ec <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800358e:	e00d      	b.n	80035ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003590:	f7fe f9ac 	bl	80018ec <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d906      	bls.n	80035ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e1ca      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
 80035a2:	bf00      	nop
 80035a4:	40021000 	.word	0x40021000
 80035a8:	200000c0 	.word	0x200000c0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035ac:	4b8c      	ldr	r3, [pc, #560]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 80035ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1ea      	bne.n	8003590 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80a6 	beq.w	8003714 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c8:	2300      	movs	r3, #0
 80035ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035cc:	4b84      	ldr	r3, [pc, #528]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 80035ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_RCC_OscConfig+0x2b4>
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <HAL_RCC_OscConfig+0x2b6>
 80035dc:	2300      	movs	r3, #0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00d      	beq.n	80035fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e2:	4b7f      	ldr	r3, [pc, #508]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 80035e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e6:	4a7e      	ldr	r2, [pc, #504]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 80035e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80035ee:	4b7c      	ldr	r3, [pc, #496]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 80035f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035fa:	2301      	movs	r3, #1
 80035fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035fe:	4b79      	ldr	r3, [pc, #484]	@ (80037e4 <HAL_RCC_OscConfig+0x4bc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003606:	2b00      	cmp	r3, #0
 8003608:	d118      	bne.n	800363c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800360a:	4b76      	ldr	r3, [pc, #472]	@ (80037e4 <HAL_RCC_OscConfig+0x4bc>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a75      	ldr	r2, [pc, #468]	@ (80037e4 <HAL_RCC_OscConfig+0x4bc>)
 8003610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003616:	f7fe f969 	bl	80018ec <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361e:	f7fe f965 	bl	80018ec <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e183      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003630:	4b6c      	ldr	r3, [pc, #432]	@ (80037e4 <HAL_RCC_OscConfig+0x4bc>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0f0      	beq.n	800361e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d108      	bne.n	8003656 <HAL_RCC_OscConfig+0x32e>
 8003644:	4b66      	ldr	r3, [pc, #408]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 8003646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364a:	4a65      	ldr	r2, [pc, #404]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003654:	e024      	b.n	80036a0 <HAL_RCC_OscConfig+0x378>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b05      	cmp	r3, #5
 800365c:	d110      	bne.n	8003680 <HAL_RCC_OscConfig+0x358>
 800365e:	4b60      	ldr	r3, [pc, #384]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 8003660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003664:	4a5e      	ldr	r2, [pc, #376]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 8003666:	f043 0304 	orr.w	r3, r3, #4
 800366a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800366e:	4b5c      	ldr	r3, [pc, #368]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 8003670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003674:	4a5a      	ldr	r2, [pc, #360]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800367e:	e00f      	b.n	80036a0 <HAL_RCC_OscConfig+0x378>
 8003680:	4b57      	ldr	r3, [pc, #348]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 8003682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003686:	4a56      	ldr	r2, [pc, #344]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 8003688:	f023 0301 	bic.w	r3, r3, #1
 800368c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003690:	4b53      	ldr	r3, [pc, #332]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003696:	4a52      	ldr	r2, [pc, #328]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 8003698:	f023 0304 	bic.w	r3, r3, #4
 800369c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d016      	beq.n	80036d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a8:	f7fe f920 	bl	80018ec <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ae:	e00a      	b.n	80036c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b0:	f7fe f91c 	bl	80018ec <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036be:	4293      	cmp	r3, r2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e138      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036c6:	4b46      	ldr	r3, [pc, #280]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 80036c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0ed      	beq.n	80036b0 <HAL_RCC_OscConfig+0x388>
 80036d4:	e015      	b.n	8003702 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d6:	f7fe f909 	bl	80018ec <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036dc:	e00a      	b.n	80036f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036de:	f7fe f905 	bl	80018ec <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e121      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036f4:	4b3a      	ldr	r3, [pc, #232]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 80036f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1ed      	bne.n	80036de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003702:	7ffb      	ldrb	r3, [r7, #31]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d105      	bne.n	8003714 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003708:	4b35      	ldr	r3, [pc, #212]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 800370a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370c:	4a34      	ldr	r2, [pc, #208]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 800370e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003712:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b00      	cmp	r3, #0
 800371e:	d03c      	beq.n	800379a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d01c      	beq.n	8003762 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003728:	4b2d      	ldr	r3, [pc, #180]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 800372a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800372e:	4a2c      	ldr	r2, [pc, #176]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003738:	f7fe f8d8 	bl	80018ec <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003740:	f7fe f8d4 	bl	80018ec <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e0f2      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003752:	4b23      	ldr	r3, [pc, #140]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 8003754:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0ef      	beq.n	8003740 <HAL_RCC_OscConfig+0x418>
 8003760:	e01b      	b.n	800379a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003762:	4b1f      	ldr	r3, [pc, #124]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 8003764:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003768:	4a1d      	ldr	r2, [pc, #116]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 800376a:	f023 0301 	bic.w	r3, r3, #1
 800376e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003772:	f7fe f8bb 	bl	80018ec <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800377a:	f7fe f8b7 	bl	80018ec <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e0d5      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800378c:	4b14      	ldr	r3, [pc, #80]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 800378e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1ef      	bne.n	800377a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 80c9 	beq.w	8003936 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037a4:	4b0e      	ldr	r3, [pc, #56]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 030c 	and.w	r3, r3, #12
 80037ac:	2b0c      	cmp	r3, #12
 80037ae:	f000 8083 	beq.w	80038b8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d15e      	bne.n	8003878 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ba:	4b09      	ldr	r3, [pc, #36]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a08      	ldr	r2, [pc, #32]	@ (80037e0 <HAL_RCC_OscConfig+0x4b8>)
 80037c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c6:	f7fe f891 	bl	80018ec <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037cc:	e00c      	b.n	80037e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ce:	f7fe f88d 	bl	80018ec <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d905      	bls.n	80037e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e0ab      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e8:	4b55      	ldr	r3, [pc, #340]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1ec      	bne.n	80037ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037f4:	4b52      	ldr	r3, [pc, #328]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	4b52      	ldr	r3, [pc, #328]	@ (8003944 <HAL_RCC_OscConfig+0x61c>)
 80037fa:	4013      	ands	r3, r2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6a11      	ldr	r1, [r2, #32]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003804:	3a01      	subs	r2, #1
 8003806:	0112      	lsls	r2, r2, #4
 8003808:	4311      	orrs	r1, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800380e:	0212      	lsls	r2, r2, #8
 8003810:	4311      	orrs	r1, r2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003816:	0852      	lsrs	r2, r2, #1
 8003818:	3a01      	subs	r2, #1
 800381a:	0552      	lsls	r2, r2, #21
 800381c:	4311      	orrs	r1, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003822:	0852      	lsrs	r2, r2, #1
 8003824:	3a01      	subs	r2, #1
 8003826:	0652      	lsls	r2, r2, #25
 8003828:	4311      	orrs	r1, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800382e:	06d2      	lsls	r2, r2, #27
 8003830:	430a      	orrs	r2, r1
 8003832:	4943      	ldr	r1, [pc, #268]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 8003834:	4313      	orrs	r3, r2
 8003836:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003838:	4b41      	ldr	r3, [pc, #260]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a40      	ldr	r2, [pc, #256]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 800383e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003842:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003844:	4b3e      	ldr	r3, [pc, #248]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	4a3d      	ldr	r2, [pc, #244]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 800384a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800384e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003850:	f7fe f84c 	bl	80018ec <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003858:	f7fe f848 	bl	80018ec <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e066      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800386a:	4b35      	ldr	r3, [pc, #212]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0f0      	beq.n	8003858 <HAL_RCC_OscConfig+0x530>
 8003876:	e05e      	b.n	8003936 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003878:	4b31      	ldr	r3, [pc, #196]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a30      	ldr	r2, [pc, #192]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 800387e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003884:	f7fe f832 	bl	80018ec <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388c:	f7fe f82e 	bl	80018ec <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e04c      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800389e:	4b28      	ldr	r3, [pc, #160]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f0      	bne.n	800388c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80038aa:	4b25      	ldr	r3, [pc, #148]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	4924      	ldr	r1, [pc, #144]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 80038b0:	4b25      	ldr	r3, [pc, #148]	@ (8003948 <HAL_RCC_OscConfig+0x620>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	60cb      	str	r3, [r1, #12]
 80038b6:	e03e      	b.n	8003936 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e039      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80038c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003940 <HAL_RCC_OscConfig+0x618>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f003 0203 	and.w	r2, r3, #3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d12c      	bne.n	8003932 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e2:	3b01      	subs	r3, #1
 80038e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d123      	bne.n	8003932 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d11b      	bne.n	8003932 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003904:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003906:	429a      	cmp	r2, r3
 8003908:	d113      	bne.n	8003932 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003914:	085b      	lsrs	r3, r3, #1
 8003916:	3b01      	subs	r3, #1
 8003918:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800391a:	429a      	cmp	r2, r3
 800391c:	d109      	bne.n	8003932 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003928:	085b      	lsrs	r3, r3, #1
 800392a:	3b01      	subs	r3, #1
 800392c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800392e:	429a      	cmp	r2, r3
 8003930:	d001      	beq.n	8003936 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3720      	adds	r7, #32
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40021000 	.word	0x40021000
 8003944:	019f800c 	.word	0x019f800c
 8003948:	feeefffc 	.word	0xfeeefffc

0800394c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e11e      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003964:	4b91      	ldr	r3, [pc, #580]	@ (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d910      	bls.n	8003994 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003972:	4b8e      	ldr	r3, [pc, #568]	@ (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 020f 	bic.w	r2, r3, #15
 800397a:	498c      	ldr	r1, [pc, #560]	@ (8003bac <HAL_RCC_ClockConfig+0x260>)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	4313      	orrs	r3, r2
 8003980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003982:	4b8a      	ldr	r3, [pc, #552]	@ (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d001      	beq.n	8003994 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e106      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d073      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d129      	bne.n	80039fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039a8:	4b81      	ldr	r3, [pc, #516]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e0f4      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80039b8:	f000 f9d0 	bl	8003d5c <RCC_GetSysClockFreqFromPLLSource>
 80039bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4a7c      	ldr	r2, [pc, #496]	@ (8003bb4 <HAL_RCC_ClockConfig+0x268>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d93f      	bls.n	8003a46 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039c6:	4b7a      	ldr	r3, [pc, #488]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d009      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d033      	beq.n	8003a46 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d12f      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039e6:	4b72      	ldr	r3, [pc, #456]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039ee:	4a70      	ldr	r2, [pc, #448]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 80039f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039f6:	2380      	movs	r3, #128	@ 0x80
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	e024      	b.n	8003a46 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d107      	bne.n	8003a14 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a04:	4b6a      	ldr	r3, [pc, #424]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d109      	bne.n	8003a24 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e0c6      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a14:	4b66      	ldr	r3, [pc, #408]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0be      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a24:	f000 f8ce 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8003a28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	4a61      	ldr	r2, [pc, #388]	@ (8003bb4 <HAL_RCC_ClockConfig+0x268>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d909      	bls.n	8003a46 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a32:	4b5f      	ldr	r3, [pc, #380]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a3a:	4a5d      	ldr	r2, [pc, #372]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003a3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a40:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a42:	2380      	movs	r3, #128	@ 0x80
 8003a44:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a46:	4b5a      	ldr	r3, [pc, #360]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f023 0203 	bic.w	r2, r3, #3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	4957      	ldr	r1, [pc, #348]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a58:	f7fd ff48 	bl	80018ec <HAL_GetTick>
 8003a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a60:	f7fd ff44 	bl	80018ec <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e095      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a76:	4b4e      	ldr	r3, [pc, #312]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 020c 	and.w	r2, r3, #12
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d1eb      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d023      	beq.n	8003adc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aa0:	4b43      	ldr	r3, [pc, #268]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	4a42      	ldr	r2, [pc, #264]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003aa6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003aaa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ab8:	4b3d      	ldr	r3, [pc, #244]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ac0:	4a3b      	ldr	r2, [pc, #236]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003ac2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ac6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac8:	4b39      	ldr	r3, [pc, #228]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	4936      	ldr	r1, [pc, #216]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	608b      	str	r3, [r1, #8]
 8003ada:	e008      	b.n	8003aee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	2b80      	cmp	r3, #128	@ 0x80
 8003ae0:	d105      	bne.n	8003aee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003ae2:	4b33      	ldr	r3, [pc, #204]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	4a32      	ldr	r2, [pc, #200]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003ae8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003aec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aee:	4b2f      	ldr	r3, [pc, #188]	@ (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d21d      	bcs.n	8003b38 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afc:	4b2b      	ldr	r3, [pc, #172]	@ (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f023 020f 	bic.w	r2, r3, #15
 8003b04:	4929      	ldr	r1, [pc, #164]	@ (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b0c:	f7fd feee 	bl	80018ec <HAL_GetTick>
 8003b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b12:	e00a      	b.n	8003b2a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b14:	f7fd feea 	bl	80018ec <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e03b      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2a:	4b20      	ldr	r3, [pc, #128]	@ (8003bac <HAL_RCC_ClockConfig+0x260>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d1ed      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b44:	4b1a      	ldr	r3, [pc, #104]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4917      	ldr	r1, [pc, #92]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d009      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b62:	4b13      	ldr	r3, [pc, #76]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	490f      	ldr	r1, [pc, #60]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b76:	f000 f825 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb0 <HAL_RCC_ClockConfig+0x264>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	490c      	ldr	r1, [pc, #48]	@ (8003bb8 <HAL_RCC_ClockConfig+0x26c>)
 8003b88:	5ccb      	ldrb	r3, [r1, r3]
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b92:	4a0a      	ldr	r2, [pc, #40]	@ (8003bbc <HAL_RCC_ClockConfig+0x270>)
 8003b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b96:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc0 <HAL_RCC_ClockConfig+0x274>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fd f83e 	bl	8000c1c <HAL_InitTick>
 8003ba0:	4603      	mov	r3, r0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40022000 	.word	0x40022000
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	04c4b400 	.word	0x04c4b400
 8003bb8:	08009624 	.word	0x08009624
 8003bbc:	20000000 	.word	0x20000000
 8003bc0:	200000c0 	.word	0x200000c0

08003bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003bca:	4b2c      	ldr	r3, [pc, #176]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 030c 	and.w	r3, r3, #12
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d102      	bne.n	8003bdc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bd8:	613b      	str	r3, [r7, #16]
 8003bda:	e047      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003bdc:	4b27      	ldr	r3, [pc, #156]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 030c 	and.w	r3, r3, #12
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d102      	bne.n	8003bee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003be8:	4b26      	ldr	r3, [pc, #152]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	e03e      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003bee:	4b23      	ldr	r3, [pc, #140]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	2b0c      	cmp	r3, #12
 8003bf8:	d136      	bne.n	8003c68 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bfa:	4b20      	ldr	r3, [pc, #128]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c04:	4b1d      	ldr	r3, [pc, #116]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	091b      	lsrs	r3, r3, #4
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	3301      	adds	r3, #1
 8003c10:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d10c      	bne.n	8003c32 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c18:	4a1a      	ldr	r2, [pc, #104]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c20:	4a16      	ldr	r2, [pc, #88]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c22:	68d2      	ldr	r2, [r2, #12]
 8003c24:	0a12      	lsrs	r2, r2, #8
 8003c26:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
 8003c2e:	617b      	str	r3, [r7, #20]
      break;
 8003c30:	e00c      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c32:	4a13      	ldr	r2, [pc, #76]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3a:	4a10      	ldr	r2, [pc, #64]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c3c:	68d2      	ldr	r2, [r2, #12]
 8003c3e:	0a12      	lsrs	r2, r2, #8
 8003c40:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c44:	fb02 f303 	mul.w	r3, r2, r3
 8003c48:	617b      	str	r3, [r7, #20]
      break;
 8003c4a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	0e5b      	lsrs	r3, r3, #25
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	3301      	adds	r3, #1
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c64:	613b      	str	r3, [r7, #16]
 8003c66:	e001      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c6c:	693b      	ldr	r3, [r7, #16]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	371c      	adds	r7, #28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	00f42400 	.word	0x00f42400
 8003c84:	016e3600 	.word	0x016e3600

08003c88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c8c:	4b03      	ldr	r3, [pc, #12]	@ (8003c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	20000000 	.word	0x20000000

08003ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ca4:	f7ff fff0 	bl	8003c88 <HAL_RCC_GetHCLKFreq>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	4b06      	ldr	r3, [pc, #24]	@ (8003cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	0a1b      	lsrs	r3, r3, #8
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	4904      	ldr	r1, [pc, #16]	@ (8003cc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cb6:	5ccb      	ldrb	r3, [r1, r3]
 8003cb8:	f003 031f 	and.w	r3, r3, #31
 8003cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	08009634 	.word	0x08009634

08003ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cd0:	f7ff ffda 	bl	8003c88 <HAL_RCC_GetHCLKFreq>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	4b06      	ldr	r3, [pc, #24]	@ (8003cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	0adb      	lsrs	r3, r3, #11
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	4904      	ldr	r1, [pc, #16]	@ (8003cf4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ce2:	5ccb      	ldrb	r3, [r1, r3]
 8003ce4:	f003 031f 	and.w	r3, r3, #31
 8003ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	08009634 	.word	0x08009634

08003cf8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	220f      	movs	r2, #15
 8003d06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003d08:	4b12      	ldr	r3, [pc, #72]	@ (8003d54 <HAL_RCC_GetClockConfig+0x5c>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 0203 	and.w	r2, r3, #3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003d14:	4b0f      	ldr	r3, [pc, #60]	@ (8003d54 <HAL_RCC_GetClockConfig+0x5c>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003d20:	4b0c      	ldr	r3, [pc, #48]	@ (8003d54 <HAL_RCC_GetClockConfig+0x5c>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003d2c:	4b09      	ldr	r3, [pc, #36]	@ (8003d54 <HAL_RCC_GetClockConfig+0x5c>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	08db      	lsrs	r3, r3, #3
 8003d32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003d3a:	4b07      	ldr	r3, [pc, #28]	@ (8003d58 <HAL_RCC_GetClockConfig+0x60>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 020f 	and.w	r2, r3, #15
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	601a      	str	r2, [r3, #0]
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40021000 	.word	0x40021000
 8003d58:	40022000 	.word	0x40022000

08003d5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d62:	4b1e      	ldr	r3, [pc, #120]	@ (8003ddc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ddc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	091b      	lsrs	r3, r3, #4
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	3301      	adds	r3, #1
 8003d78:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b03      	cmp	r3, #3
 8003d7e:	d10c      	bne.n	8003d9a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d80:	4a17      	ldr	r2, [pc, #92]	@ (8003de0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d88:	4a14      	ldr	r2, [pc, #80]	@ (8003ddc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d8a:	68d2      	ldr	r2, [r2, #12]
 8003d8c:	0a12      	lsrs	r2, r2, #8
 8003d8e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d92:	fb02 f303 	mul.w	r3, r2, r3
 8003d96:	617b      	str	r3, [r7, #20]
    break;
 8003d98:	e00c      	b.n	8003db4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d9a:	4a12      	ldr	r2, [pc, #72]	@ (8003de4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da2:	4a0e      	ldr	r2, [pc, #56]	@ (8003ddc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003da4:	68d2      	ldr	r2, [r2, #12]
 8003da6:	0a12      	lsrs	r2, r2, #8
 8003da8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003dac:	fb02 f303 	mul.w	r3, r2, r3
 8003db0:	617b      	str	r3, [r7, #20]
    break;
 8003db2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003db4:	4b09      	ldr	r3, [pc, #36]	@ (8003ddc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	0e5b      	lsrs	r3, r3, #25
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dcc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003dce:	687b      	ldr	r3, [r7, #4]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	371c      	adds	r7, #28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	016e3600 	.word	0x016e3600
 8003de4:	00f42400 	.word	0x00f42400

08003de8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003df0:	2300      	movs	r3, #0
 8003df2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003df4:	2300      	movs	r3, #0
 8003df6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 8098 	beq.w	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e06:	2300      	movs	r3, #0
 8003e08:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e0a:	4b43      	ldr	r3, [pc, #268]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10d      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e16:	4b40      	ldr	r3, [pc, #256]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1a:	4a3f      	ldr	r2, [pc, #252]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e20:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e22:	4b3d      	ldr	r3, [pc, #244]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e2a:	60bb      	str	r3, [r7, #8]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e32:	4b3a      	ldr	r3, [pc, #232]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a39      	ldr	r2, [pc, #228]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e3e:	f7fd fd55 	bl	80018ec <HAL_GetTick>
 8003e42:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e44:	e009      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e46:	f7fd fd51 	bl	80018ec <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d902      	bls.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	74fb      	strb	r3, [r7, #19]
        break;
 8003e58:	e005      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e5a:	4b30      	ldr	r3, [pc, #192]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0ef      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e66:	7cfb      	ldrb	r3, [r7, #19]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d159      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e6c:	4b2a      	ldr	r3, [pc, #168]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e76:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d01e      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d019      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e88:	4b23      	ldr	r3, [pc, #140]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e94:	4b20      	ldr	r3, [pc, #128]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ea0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003eb4:	4a18      	ldr	r2, [pc, #96]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d016      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec6:	f7fd fd11 	bl	80018ec <HAL_GetTick>
 8003eca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ecc:	e00b      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ece:	f7fd fd0d 	bl	80018ec <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d902      	bls.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ee4:	e006      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0ec      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003ef4:	7cfb      	ldrb	r3, [r7, #19]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10b      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003efa:	4b07      	ldr	r3, [pc, #28]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f08:	4903      	ldr	r1, [pc, #12]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f10:	e008      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f12:	7cfb      	ldrb	r3, [r7, #19]
 8003f14:	74bb      	strb	r3, [r7, #18]
 8003f16:	e005      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f20:	7cfb      	ldrb	r3, [r7, #19]
 8003f22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f24:	7c7b      	ldrb	r3, [r7, #17]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d105      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f2a:	4ba7      	ldr	r3, [pc, #668]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2e:	4aa6      	ldr	r2, [pc, #664]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f34:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f42:	4ba1      	ldr	r3, [pc, #644]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f48:	f023 0203 	bic.w	r2, r3, #3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	499d      	ldr	r1, [pc, #628]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f64:	4b98      	ldr	r3, [pc, #608]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6a:	f023 020c 	bic.w	r2, r3, #12
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	4995      	ldr	r1, [pc, #596]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f86:	4b90      	ldr	r3, [pc, #576]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	498c      	ldr	r1, [pc, #560]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0308 	and.w	r3, r3, #8
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fa8:	4b87      	ldr	r3, [pc, #540]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	4984      	ldr	r1, [pc, #528]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fca:	4b7f      	ldr	r3, [pc, #508]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	497b      	ldr	r1, [pc, #492]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0320 	and.w	r3, r3, #32
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fec:	4b76      	ldr	r3, [pc, #472]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	4973      	ldr	r1, [pc, #460]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800400e:	4b6e      	ldr	r3, [pc, #440]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004014:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	496a      	ldr	r1, [pc, #424]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004030:	4b65      	ldr	r3, [pc, #404]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004036:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	4962      	ldr	r1, [pc, #392]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004052:	4b5d      	ldr	r3, [pc, #372]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004058:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	4959      	ldr	r1, [pc, #356]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004074:	4b54      	ldr	r3, [pc, #336]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004076:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800407a:	f023 0203 	bic.w	r2, r3, #3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004082:	4951      	ldr	r1, [pc, #324]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004096:	4b4c      	ldr	r3, [pc, #304]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800409c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a4:	4948      	ldr	r1, [pc, #288]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d015      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040b8:	4b43      	ldr	r3, [pc, #268]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c6:	4940      	ldr	r1, [pc, #256]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040d6:	d105      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040d8:	4b3b      	ldr	r3, [pc, #236]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	4a3a      	ldr	r2, [pc, #232]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040e2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d015      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040f0:	4b35      	ldr	r3, [pc, #212]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040fe:	4932      	ldr	r1, [pc, #200]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800410a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800410e:	d105      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004110:	4b2d      	ldr	r3, [pc, #180]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	4a2c      	ldr	r2, [pc, #176]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004116:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800411a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d015      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004128:	4b27      	ldr	r3, [pc, #156]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004136:	4924      	ldr	r1, [pc, #144]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004142:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004146:	d105      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004148:	4b1f      	ldr	r3, [pc, #124]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4a1e      	ldr	r2, [pc, #120]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800414e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004152:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d015      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004160:	4b19      	ldr	r3, [pc, #100]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004166:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800416e:	4916      	ldr	r1, [pc, #88]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004170:	4313      	orrs	r3, r2
 8004172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800417e:	d105      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004180:	4b11      	ldr	r3, [pc, #68]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	4a10      	ldr	r2, [pc, #64]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004186:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800418a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d019      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004198:	4b0b      	ldr	r3, [pc, #44]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a6:	4908      	ldr	r1, [pc, #32]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041b6:	d109      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041b8:	4b03      	ldr	r3, [pc, #12]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	4a02      	ldr	r2, [pc, #8]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041c2:	60d3      	str	r3, [r2, #12]
 80041c4:	e002      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80041c6:	bf00      	nop
 80041c8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d015      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80041d8:	4b29      	ldr	r3, [pc, #164]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e6:	4926      	ldr	r1, [pc, #152]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041f6:	d105      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041f8:	4b21      	ldr	r3, [pc, #132]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	4a20      	ldr	r2, [pc, #128]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004202:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d015      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004210:	4b1b      	ldr	r3, [pc, #108]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004216:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800421e:	4918      	ldr	r1, [pc, #96]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800422a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800422e:	d105      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004230:	4b13      	ldr	r3, [pc, #76]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	4a12      	ldr	r2, [pc, #72]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800423a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d015      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004248:	4b0d      	ldr	r3, [pc, #52]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800424a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800424e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004256:	490a      	ldr	r1, [pc, #40]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004262:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004266:	d105      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004268:	4b05      	ldr	r3, [pc, #20]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	4a04      	ldr	r2, [pc, #16]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800426e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004272:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004274:	7cbb      	ldrb	r3, [r7, #18]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40021000 	.word	0x40021000

08004284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e049      	b.n	800432a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fc ff5a 	bl	8001164 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3304      	adds	r3, #4
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f000 fe34 	bl	8004f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b01      	cmp	r3, #1
 8004346:	d001      	beq.n	800434c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e04c      	b.n	80043e6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a26      	ldr	r2, [pc, #152]	@ (80043f4 <HAL_TIM_Base_Start+0xc0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d022      	beq.n	80043a4 <HAL_TIM_Base_Start+0x70>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004366:	d01d      	beq.n	80043a4 <HAL_TIM_Base_Start+0x70>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a22      	ldr	r2, [pc, #136]	@ (80043f8 <HAL_TIM_Base_Start+0xc4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d018      	beq.n	80043a4 <HAL_TIM_Base_Start+0x70>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a21      	ldr	r2, [pc, #132]	@ (80043fc <HAL_TIM_Base_Start+0xc8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d013      	beq.n	80043a4 <HAL_TIM_Base_Start+0x70>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a1f      	ldr	r2, [pc, #124]	@ (8004400 <HAL_TIM_Base_Start+0xcc>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d00e      	beq.n	80043a4 <HAL_TIM_Base_Start+0x70>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a1e      	ldr	r2, [pc, #120]	@ (8004404 <HAL_TIM_Base_Start+0xd0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d009      	beq.n	80043a4 <HAL_TIM_Base_Start+0x70>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a1c      	ldr	r2, [pc, #112]	@ (8004408 <HAL_TIM_Base_Start+0xd4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d004      	beq.n	80043a4 <HAL_TIM_Base_Start+0x70>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a1b      	ldr	r2, [pc, #108]	@ (800440c <HAL_TIM_Base_Start+0xd8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d115      	bne.n	80043d0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	4b19      	ldr	r3, [pc, #100]	@ (8004410 <HAL_TIM_Base_Start+0xdc>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b06      	cmp	r3, #6
 80043b4:	d015      	beq.n	80043e2 <HAL_TIM_Base_Start+0xae>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043bc:	d011      	beq.n	80043e2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f042 0201 	orr.w	r2, r2, #1
 80043cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ce:	e008      	b.n	80043e2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0201 	orr.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	e000      	b.n	80043e4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40012c00 	.word	0x40012c00
 80043f8:	40000400 	.word	0x40000400
 80043fc:	40000800 	.word	0x40000800
 8004400:	40000c00 	.word	0x40000c00
 8004404:	40013400 	.word	0x40013400
 8004408:	40014000 	.word	0x40014000
 800440c:	40015000 	.word	0x40015000
 8004410:	00010007 	.word	0x00010007

08004414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b01      	cmp	r3, #1
 8004426:	d001      	beq.n	800442c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e054      	b.n	80044d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0201 	orr.w	r2, r2, #1
 8004442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a26      	ldr	r2, [pc, #152]	@ (80044e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d022      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x80>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004456:	d01d      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x80>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a22      	ldr	r2, [pc, #136]	@ (80044e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d018      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x80>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a21      	ldr	r2, [pc, #132]	@ (80044ec <HAL_TIM_Base_Start_IT+0xd8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d013      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x80>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a1f      	ldr	r2, [pc, #124]	@ (80044f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d00e      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x80>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a1e      	ldr	r2, [pc, #120]	@ (80044f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d009      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x80>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a1c      	ldr	r2, [pc, #112]	@ (80044f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d004      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x80>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a1b      	ldr	r2, [pc, #108]	@ (80044fc <HAL_TIM_Base_Start_IT+0xe8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d115      	bne.n	80044c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	4b19      	ldr	r3, [pc, #100]	@ (8004500 <HAL_TIM_Base_Start_IT+0xec>)
 800449c:	4013      	ands	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b06      	cmp	r3, #6
 80044a4:	d015      	beq.n	80044d2 <HAL_TIM_Base_Start_IT+0xbe>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ac:	d011      	beq.n	80044d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0201 	orr.w	r2, r2, #1
 80044bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044be:	e008      	b.n	80044d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	e000      	b.n	80044d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40012c00 	.word	0x40012c00
 80044e8:	40000400 	.word	0x40000400
 80044ec:	40000800 	.word	0x40000800
 80044f0:	40000c00 	.word	0x40000c00
 80044f4:	40013400 	.word	0x40013400
 80044f8:	40014000 	.word	0x40014000
 80044fc:	40015000 	.word	0x40015000
 8004500:	00010007 	.word	0x00010007

08004504 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e049      	b.n	80045aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f841 	bl	80045b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3304      	adds	r3, #4
 8004540:	4619      	mov	r1, r3
 8004542:	4610      	mov	r0, r2
 8004544:	f000 fcf4 	bl	8004f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
	...

080045c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d109      	bne.n	80045ec <HAL_TIM_PWM_Start+0x24>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	bf14      	ite	ne
 80045e4:	2301      	movne	r3, #1
 80045e6:	2300      	moveq	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	e03c      	b.n	8004666 <HAL_TIM_PWM_Start+0x9e>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d109      	bne.n	8004606 <HAL_TIM_PWM_Start+0x3e>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	bf14      	ite	ne
 80045fe:	2301      	movne	r3, #1
 8004600:	2300      	moveq	r3, #0
 8004602:	b2db      	uxtb	r3, r3
 8004604:	e02f      	b.n	8004666 <HAL_TIM_PWM_Start+0x9e>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b08      	cmp	r3, #8
 800460a:	d109      	bne.n	8004620 <HAL_TIM_PWM_Start+0x58>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b01      	cmp	r3, #1
 8004616:	bf14      	ite	ne
 8004618:	2301      	movne	r3, #1
 800461a:	2300      	moveq	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	e022      	b.n	8004666 <HAL_TIM_PWM_Start+0x9e>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	2b0c      	cmp	r3, #12
 8004624:	d109      	bne.n	800463a <HAL_TIM_PWM_Start+0x72>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b01      	cmp	r3, #1
 8004630:	bf14      	ite	ne
 8004632:	2301      	movne	r3, #1
 8004634:	2300      	moveq	r3, #0
 8004636:	b2db      	uxtb	r3, r3
 8004638:	e015      	b.n	8004666 <HAL_TIM_PWM_Start+0x9e>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b10      	cmp	r3, #16
 800463e:	d109      	bne.n	8004654 <HAL_TIM_PWM_Start+0x8c>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b01      	cmp	r3, #1
 800464a:	bf14      	ite	ne
 800464c:	2301      	movne	r3, #1
 800464e:	2300      	moveq	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	e008      	b.n	8004666 <HAL_TIM_PWM_Start+0x9e>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b01      	cmp	r3, #1
 800465e:	bf14      	ite	ne
 8004660:	2301      	movne	r3, #1
 8004662:	2300      	moveq	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e0a6      	b.n	80047bc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d104      	bne.n	800467e <HAL_TIM_PWM_Start+0xb6>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800467c:	e023      	b.n	80046c6 <HAL_TIM_PWM_Start+0xfe>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b04      	cmp	r3, #4
 8004682:	d104      	bne.n	800468e <HAL_TIM_PWM_Start+0xc6>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800468c:	e01b      	b.n	80046c6 <HAL_TIM_PWM_Start+0xfe>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b08      	cmp	r3, #8
 8004692:	d104      	bne.n	800469e <HAL_TIM_PWM_Start+0xd6>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800469c:	e013      	b.n	80046c6 <HAL_TIM_PWM_Start+0xfe>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b0c      	cmp	r3, #12
 80046a2:	d104      	bne.n	80046ae <HAL_TIM_PWM_Start+0xe6>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046ac:	e00b      	b.n	80046c6 <HAL_TIM_PWM_Start+0xfe>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b10      	cmp	r3, #16
 80046b2:	d104      	bne.n	80046be <HAL_TIM_PWM_Start+0xf6>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046bc:	e003      	b.n	80046c6 <HAL_TIM_PWM_Start+0xfe>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2202      	movs	r2, #2
 80046c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2201      	movs	r2, #1
 80046cc:	6839      	ldr	r1, [r7, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f001 f91c 	bl	800590c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a3a      	ldr	r2, [pc, #232]	@ (80047c4 <HAL_TIM_PWM_Start+0x1fc>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d018      	beq.n	8004710 <HAL_TIM_PWM_Start+0x148>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a39      	ldr	r2, [pc, #228]	@ (80047c8 <HAL_TIM_PWM_Start+0x200>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d013      	beq.n	8004710 <HAL_TIM_PWM_Start+0x148>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a37      	ldr	r2, [pc, #220]	@ (80047cc <HAL_TIM_PWM_Start+0x204>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00e      	beq.n	8004710 <HAL_TIM_PWM_Start+0x148>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a36      	ldr	r2, [pc, #216]	@ (80047d0 <HAL_TIM_PWM_Start+0x208>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d009      	beq.n	8004710 <HAL_TIM_PWM_Start+0x148>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a34      	ldr	r2, [pc, #208]	@ (80047d4 <HAL_TIM_PWM_Start+0x20c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d004      	beq.n	8004710 <HAL_TIM_PWM_Start+0x148>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a33      	ldr	r2, [pc, #204]	@ (80047d8 <HAL_TIM_PWM_Start+0x210>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d101      	bne.n	8004714 <HAL_TIM_PWM_Start+0x14c>
 8004710:	2301      	movs	r3, #1
 8004712:	e000      	b.n	8004716 <HAL_TIM_PWM_Start+0x14e>
 8004714:	2300      	movs	r3, #0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d007      	beq.n	800472a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004728:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a25      	ldr	r2, [pc, #148]	@ (80047c4 <HAL_TIM_PWM_Start+0x1fc>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d022      	beq.n	800477a <HAL_TIM_PWM_Start+0x1b2>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800473c:	d01d      	beq.n	800477a <HAL_TIM_PWM_Start+0x1b2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a26      	ldr	r2, [pc, #152]	@ (80047dc <HAL_TIM_PWM_Start+0x214>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d018      	beq.n	800477a <HAL_TIM_PWM_Start+0x1b2>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a24      	ldr	r2, [pc, #144]	@ (80047e0 <HAL_TIM_PWM_Start+0x218>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d013      	beq.n	800477a <HAL_TIM_PWM_Start+0x1b2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a23      	ldr	r2, [pc, #140]	@ (80047e4 <HAL_TIM_PWM_Start+0x21c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d00e      	beq.n	800477a <HAL_TIM_PWM_Start+0x1b2>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a19      	ldr	r2, [pc, #100]	@ (80047c8 <HAL_TIM_PWM_Start+0x200>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d009      	beq.n	800477a <HAL_TIM_PWM_Start+0x1b2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a18      	ldr	r2, [pc, #96]	@ (80047cc <HAL_TIM_PWM_Start+0x204>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d004      	beq.n	800477a <HAL_TIM_PWM_Start+0x1b2>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a18      	ldr	r2, [pc, #96]	@ (80047d8 <HAL_TIM_PWM_Start+0x210>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d115      	bne.n	80047a6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	4b19      	ldr	r3, [pc, #100]	@ (80047e8 <HAL_TIM_PWM_Start+0x220>)
 8004782:	4013      	ands	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2b06      	cmp	r3, #6
 800478a:	d015      	beq.n	80047b8 <HAL_TIM_PWM_Start+0x1f0>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004792:	d011      	beq.n	80047b8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a4:	e008      	b.n	80047b8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0201 	orr.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	e000      	b.n	80047ba <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40012c00 	.word	0x40012c00
 80047c8:	40013400 	.word	0x40013400
 80047cc:	40014000 	.word	0x40014000
 80047d0:	40014400 	.word	0x40014400
 80047d4:	40014800 	.word	0x40014800
 80047d8:	40015000 	.word	0x40015000
 80047dc:	40000400 	.word	0x40000400
 80047e0:	40000800 	.word	0x40000800
 80047e4:	40000c00 	.word	0x40000c00
 80047e8:	00010007 	.word	0x00010007

080047ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d020      	beq.n	8004850 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d01b      	beq.n	8004850 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f06f 0202 	mvn.w	r2, #2
 8004820:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fb5c 	bl	8004ef4 <HAL_TIM_IC_CaptureCallback>
 800483c:	e005      	b.n	800484a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 fb4e 	bl	8004ee0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fb5f 	bl	8004f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b00      	cmp	r3, #0
 8004858:	d020      	beq.n	800489c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d01b      	beq.n	800489c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f06f 0204 	mvn.w	r2, #4
 800486c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2202      	movs	r2, #2
 8004872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fb36 	bl	8004ef4 <HAL_TIM_IC_CaptureCallback>
 8004888:	e005      	b.n	8004896 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fb28 	bl	8004ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 fb39 	bl	8004f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d020      	beq.n	80048e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f003 0308 	and.w	r3, r3, #8
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01b      	beq.n	80048e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f06f 0208 	mvn.w	r2, #8
 80048b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2204      	movs	r2, #4
 80048be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fb10 	bl	8004ef4 <HAL_TIM_IC_CaptureCallback>
 80048d4:	e005      	b.n	80048e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fb02 	bl	8004ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 fb13 	bl	8004f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f003 0310 	and.w	r3, r3, #16
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d020      	beq.n	8004934 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f003 0310 	and.w	r3, r3, #16
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01b      	beq.n	8004934 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f06f 0210 	mvn.w	r2, #16
 8004904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2208      	movs	r2, #8
 800490a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 faea 	bl	8004ef4 <HAL_TIM_IC_CaptureCallback>
 8004920:	e005      	b.n	800492e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fadc 	bl	8004ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 faed 	bl	8004f08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00c      	beq.n	8004958 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b00      	cmp	r3, #0
 8004946:	d007      	beq.n	8004958 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f06f 0201 	mvn.w	r2, #1
 8004950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7fc f926 	bl	8000ba4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800495e:	2b00      	cmp	r3, #0
 8004960:	d104      	bne.n	800496c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00c      	beq.n	8004986 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800497e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f001 fa8d 	bl	8005ea0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00c      	beq.n	80049aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004996:	2b00      	cmp	r3, #0
 8004998:	d007      	beq.n	80049aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80049a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f001 fa85 	bl	8005eb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00c      	beq.n	80049ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d007      	beq.n	80049ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 faa7 	bl	8004f1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f003 0320 	and.w	r3, r3, #32
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00c      	beq.n	80049f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f003 0320 	and.w	r3, r3, #32
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d007      	beq.n	80049f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f06f 0220 	mvn.w	r2, #32
 80049ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f001 fa4d 	bl	8005e8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00c      	beq.n	8004a16 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d007      	beq.n	8004a16 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f001 fa59 	bl	8005ec8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00c      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d007      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f001 fa51 	bl	8005edc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00c      	beq.n	8004a5e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d007      	beq.n	8004a5e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f001 fa49 	bl	8005ef0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00c      	beq.n	8004a82 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d007      	beq.n	8004a82 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f001 fa41 	bl	8005f04 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a82:	bf00      	nop
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e0ff      	b.n	8004caa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b14      	cmp	r3, #20
 8004ab6:	f200 80f0 	bhi.w	8004c9a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004aba:	a201      	add	r2, pc, #4	@ (adr r2, 8004ac0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac0:	08004b15 	.word	0x08004b15
 8004ac4:	08004c9b 	.word	0x08004c9b
 8004ac8:	08004c9b 	.word	0x08004c9b
 8004acc:	08004c9b 	.word	0x08004c9b
 8004ad0:	08004b55 	.word	0x08004b55
 8004ad4:	08004c9b 	.word	0x08004c9b
 8004ad8:	08004c9b 	.word	0x08004c9b
 8004adc:	08004c9b 	.word	0x08004c9b
 8004ae0:	08004b97 	.word	0x08004b97
 8004ae4:	08004c9b 	.word	0x08004c9b
 8004ae8:	08004c9b 	.word	0x08004c9b
 8004aec:	08004c9b 	.word	0x08004c9b
 8004af0:	08004bd7 	.word	0x08004bd7
 8004af4:	08004c9b 	.word	0x08004c9b
 8004af8:	08004c9b 	.word	0x08004c9b
 8004afc:	08004c9b 	.word	0x08004c9b
 8004b00:	08004c19 	.word	0x08004c19
 8004b04:	08004c9b 	.word	0x08004c9b
 8004b08:	08004c9b 	.word	0x08004c9b
 8004b0c:	08004c9b 	.word	0x08004c9b
 8004b10:	08004c59 	.word	0x08004c59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 fabc 	bl	8005098 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699a      	ldr	r2, [r3, #24]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0208 	orr.w	r2, r2, #8
 8004b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699a      	ldr	r2, [r3, #24]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0204 	bic.w	r2, r2, #4
 8004b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6999      	ldr	r1, [r3, #24]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	691a      	ldr	r2, [r3, #16]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	619a      	str	r2, [r3, #24]
      break;
 8004b52:	e0a5      	b.n	8004ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fb36 	bl	80051cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699a      	ldr	r2, [r3, #24]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699a      	ldr	r2, [r3, #24]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6999      	ldr	r1, [r3, #24]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	021a      	lsls	r2, r3, #8
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	619a      	str	r2, [r3, #24]
      break;
 8004b94:	e084      	b.n	8004ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68b9      	ldr	r1, [r7, #8]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fba9 	bl	80052f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69da      	ldr	r2, [r3, #28]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0208 	orr.w	r2, r2, #8
 8004bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69da      	ldr	r2, [r3, #28]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0204 	bic.w	r2, r2, #4
 8004bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69d9      	ldr	r1, [r3, #28]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	61da      	str	r2, [r3, #28]
      break;
 8004bd4:	e064      	b.n	8004ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 fc1b 	bl	8005418 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69da      	ldr	r2, [r3, #28]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	69da      	ldr	r2, [r3, #28]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69d9      	ldr	r1, [r3, #28]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	021a      	lsls	r2, r3, #8
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	61da      	str	r2, [r3, #28]
      break;
 8004c16:	e043      	b.n	8004ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68b9      	ldr	r1, [r7, #8]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fc8e 	bl	8005540 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0208 	orr.w	r2, r2, #8
 8004c32:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0204 	bic.w	r2, r2, #4
 8004c42:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	691a      	ldr	r2, [r3, #16]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004c56:	e023      	b.n	8004ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68b9      	ldr	r1, [r7, #8]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fcd8 	bl	8005614 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c72:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c82:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	021a      	lsls	r2, r3, #8
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004c98:	e002      	b.n	8004ca0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop

08004cb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <HAL_TIM_ConfigClockSource+0x1c>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e0f6      	b.n	8004ebe <HAL_TIM_ConfigClockSource+0x20a>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004cee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004cf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a6f      	ldr	r2, [pc, #444]	@ (8004ec8 <HAL_TIM_ConfigClockSource+0x214>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	f000 80c1 	beq.w	8004e92 <HAL_TIM_ConfigClockSource+0x1de>
 8004d10:	4a6d      	ldr	r2, [pc, #436]	@ (8004ec8 <HAL_TIM_ConfigClockSource+0x214>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	f200 80c6 	bhi.w	8004ea4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d18:	4a6c      	ldr	r2, [pc, #432]	@ (8004ecc <HAL_TIM_ConfigClockSource+0x218>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	f000 80b9 	beq.w	8004e92 <HAL_TIM_ConfigClockSource+0x1de>
 8004d20:	4a6a      	ldr	r2, [pc, #424]	@ (8004ecc <HAL_TIM_ConfigClockSource+0x218>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	f200 80be 	bhi.w	8004ea4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d28:	4a69      	ldr	r2, [pc, #420]	@ (8004ed0 <HAL_TIM_ConfigClockSource+0x21c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	f000 80b1 	beq.w	8004e92 <HAL_TIM_ConfigClockSource+0x1de>
 8004d30:	4a67      	ldr	r2, [pc, #412]	@ (8004ed0 <HAL_TIM_ConfigClockSource+0x21c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	f200 80b6 	bhi.w	8004ea4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d38:	4a66      	ldr	r2, [pc, #408]	@ (8004ed4 <HAL_TIM_ConfigClockSource+0x220>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	f000 80a9 	beq.w	8004e92 <HAL_TIM_ConfigClockSource+0x1de>
 8004d40:	4a64      	ldr	r2, [pc, #400]	@ (8004ed4 <HAL_TIM_ConfigClockSource+0x220>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	f200 80ae 	bhi.w	8004ea4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d48:	4a63      	ldr	r2, [pc, #396]	@ (8004ed8 <HAL_TIM_ConfigClockSource+0x224>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	f000 80a1 	beq.w	8004e92 <HAL_TIM_ConfigClockSource+0x1de>
 8004d50:	4a61      	ldr	r2, [pc, #388]	@ (8004ed8 <HAL_TIM_ConfigClockSource+0x224>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	f200 80a6 	bhi.w	8004ea4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d58:	4a60      	ldr	r2, [pc, #384]	@ (8004edc <HAL_TIM_ConfigClockSource+0x228>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	f000 8099 	beq.w	8004e92 <HAL_TIM_ConfigClockSource+0x1de>
 8004d60:	4a5e      	ldr	r2, [pc, #376]	@ (8004edc <HAL_TIM_ConfigClockSource+0x228>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	f200 809e 	bhi.w	8004ea4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d68:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004d6c:	f000 8091 	beq.w	8004e92 <HAL_TIM_ConfigClockSource+0x1de>
 8004d70:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004d74:	f200 8096 	bhi.w	8004ea4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d7c:	f000 8089 	beq.w	8004e92 <HAL_TIM_ConfigClockSource+0x1de>
 8004d80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d84:	f200 808e 	bhi.w	8004ea4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d8c:	d03e      	beq.n	8004e0c <HAL_TIM_ConfigClockSource+0x158>
 8004d8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d92:	f200 8087 	bhi.w	8004ea4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d9a:	f000 8086 	beq.w	8004eaa <HAL_TIM_ConfigClockSource+0x1f6>
 8004d9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004da2:	d87f      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004da4:	2b70      	cmp	r3, #112	@ 0x70
 8004da6:	d01a      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0x12a>
 8004da8:	2b70      	cmp	r3, #112	@ 0x70
 8004daa:	d87b      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004dac:	2b60      	cmp	r3, #96	@ 0x60
 8004dae:	d050      	beq.n	8004e52 <HAL_TIM_ConfigClockSource+0x19e>
 8004db0:	2b60      	cmp	r3, #96	@ 0x60
 8004db2:	d877      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004db4:	2b50      	cmp	r3, #80	@ 0x50
 8004db6:	d03c      	beq.n	8004e32 <HAL_TIM_ConfigClockSource+0x17e>
 8004db8:	2b50      	cmp	r3, #80	@ 0x50
 8004dba:	d873      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004dbc:	2b40      	cmp	r3, #64	@ 0x40
 8004dbe:	d058      	beq.n	8004e72 <HAL_TIM_ConfigClockSource+0x1be>
 8004dc0:	2b40      	cmp	r3, #64	@ 0x40
 8004dc2:	d86f      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004dc4:	2b30      	cmp	r3, #48	@ 0x30
 8004dc6:	d064      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x1de>
 8004dc8:	2b30      	cmp	r3, #48	@ 0x30
 8004dca:	d86b      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004dcc:	2b20      	cmp	r3, #32
 8004dce:	d060      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x1de>
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d867      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d05c      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x1de>
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d05a      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x1de>
 8004ddc:	e062      	b.n	8004ea4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dee:	f000 fd6d 	bl	80058cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	609a      	str	r2, [r3, #8]
      break;
 8004e0a:	e04f      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e1c:	f000 fd56 	bl	80058cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e2e:	609a      	str	r2, [r3, #8]
      break;
 8004e30:	e03c      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f000 fcc8 	bl	80057d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2150      	movs	r1, #80	@ 0x50
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 fd21 	bl	8005892 <TIM_ITRx_SetConfig>
      break;
 8004e50:	e02c      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e5e:	461a      	mov	r2, r3
 8004e60:	f000 fce7 	bl	8005832 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2160      	movs	r1, #96	@ 0x60
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 fd11 	bl	8005892 <TIM_ITRx_SetConfig>
      break;
 8004e70:	e01c      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f000 fca8 	bl	80057d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2140      	movs	r1, #64	@ 0x40
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fd01 	bl	8005892 <TIM_ITRx_SetConfig>
      break;
 8004e90:	e00c      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	f000 fcf8 	bl	8005892 <TIM_ITRx_SetConfig>
      break;
 8004ea2:	e003      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ea8:	e000      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	00100070 	.word	0x00100070
 8004ecc:	00100060 	.word	0x00100060
 8004ed0:	00100050 	.word	0x00100050
 8004ed4:	00100040 	.word	0x00100040
 8004ed8:	00100030 	.word	0x00100030
 8004edc:	00100020 	.word	0x00100020

08004ee0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a4c      	ldr	r2, [pc, #304]	@ (8005074 <TIM_Base_SetConfig+0x144>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d017      	beq.n	8004f78 <TIM_Base_SetConfig+0x48>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f4e:	d013      	beq.n	8004f78 <TIM_Base_SetConfig+0x48>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a49      	ldr	r2, [pc, #292]	@ (8005078 <TIM_Base_SetConfig+0x148>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d00f      	beq.n	8004f78 <TIM_Base_SetConfig+0x48>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a48      	ldr	r2, [pc, #288]	@ (800507c <TIM_Base_SetConfig+0x14c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d00b      	beq.n	8004f78 <TIM_Base_SetConfig+0x48>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a47      	ldr	r2, [pc, #284]	@ (8005080 <TIM_Base_SetConfig+0x150>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d007      	beq.n	8004f78 <TIM_Base_SetConfig+0x48>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a46      	ldr	r2, [pc, #280]	@ (8005084 <TIM_Base_SetConfig+0x154>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d003      	beq.n	8004f78 <TIM_Base_SetConfig+0x48>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a45      	ldr	r2, [pc, #276]	@ (8005088 <TIM_Base_SetConfig+0x158>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d108      	bne.n	8004f8a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a39      	ldr	r2, [pc, #228]	@ (8005074 <TIM_Base_SetConfig+0x144>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d023      	beq.n	8004fda <TIM_Base_SetConfig+0xaa>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f98:	d01f      	beq.n	8004fda <TIM_Base_SetConfig+0xaa>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a36      	ldr	r2, [pc, #216]	@ (8005078 <TIM_Base_SetConfig+0x148>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d01b      	beq.n	8004fda <TIM_Base_SetConfig+0xaa>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a35      	ldr	r2, [pc, #212]	@ (800507c <TIM_Base_SetConfig+0x14c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d017      	beq.n	8004fda <TIM_Base_SetConfig+0xaa>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a34      	ldr	r2, [pc, #208]	@ (8005080 <TIM_Base_SetConfig+0x150>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d013      	beq.n	8004fda <TIM_Base_SetConfig+0xaa>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a33      	ldr	r2, [pc, #204]	@ (8005084 <TIM_Base_SetConfig+0x154>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00f      	beq.n	8004fda <TIM_Base_SetConfig+0xaa>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a33      	ldr	r2, [pc, #204]	@ (800508c <TIM_Base_SetConfig+0x15c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d00b      	beq.n	8004fda <TIM_Base_SetConfig+0xaa>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a32      	ldr	r2, [pc, #200]	@ (8005090 <TIM_Base_SetConfig+0x160>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d007      	beq.n	8004fda <TIM_Base_SetConfig+0xaa>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a31      	ldr	r2, [pc, #196]	@ (8005094 <TIM_Base_SetConfig+0x164>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d003      	beq.n	8004fda <TIM_Base_SetConfig+0xaa>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a2c      	ldr	r2, [pc, #176]	@ (8005088 <TIM_Base_SetConfig+0x158>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d108      	bne.n	8004fec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a18      	ldr	r2, [pc, #96]	@ (8005074 <TIM_Base_SetConfig+0x144>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d013      	beq.n	8005040 <TIM_Base_SetConfig+0x110>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a1a      	ldr	r2, [pc, #104]	@ (8005084 <TIM_Base_SetConfig+0x154>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d00f      	beq.n	8005040 <TIM_Base_SetConfig+0x110>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a1a      	ldr	r2, [pc, #104]	@ (800508c <TIM_Base_SetConfig+0x15c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d00b      	beq.n	8005040 <TIM_Base_SetConfig+0x110>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a19      	ldr	r2, [pc, #100]	@ (8005090 <TIM_Base_SetConfig+0x160>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d007      	beq.n	8005040 <TIM_Base_SetConfig+0x110>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a18      	ldr	r2, [pc, #96]	@ (8005094 <TIM_Base_SetConfig+0x164>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d003      	beq.n	8005040 <TIM_Base_SetConfig+0x110>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a13      	ldr	r2, [pc, #76]	@ (8005088 <TIM_Base_SetConfig+0x158>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d103      	bne.n	8005048 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	691a      	ldr	r2, [r3, #16]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b01      	cmp	r3, #1
 8005058:	d105      	bne.n	8005066 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f023 0201 	bic.w	r2, r3, #1
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	611a      	str	r2, [r3, #16]
  }
}
 8005066:	bf00      	nop
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40012c00 	.word	0x40012c00
 8005078:	40000400 	.word	0x40000400
 800507c:	40000800 	.word	0x40000800
 8005080:	40000c00 	.word	0x40000c00
 8005084:	40013400 	.word	0x40013400
 8005088:	40015000 	.word	0x40015000
 800508c:	40014000 	.word	0x40014000
 8005090:	40014400 	.word	0x40014400
 8005094:	40014800 	.word	0x40014800

08005098 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	f023 0201 	bic.w	r2, r3, #1
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0303 	bic.w	r3, r3, #3
 80050d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f023 0302 	bic.w	r3, r3, #2
 80050e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a30      	ldr	r2, [pc, #192]	@ (80051b4 <TIM_OC1_SetConfig+0x11c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d013      	beq.n	8005120 <TIM_OC1_SetConfig+0x88>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a2f      	ldr	r2, [pc, #188]	@ (80051b8 <TIM_OC1_SetConfig+0x120>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00f      	beq.n	8005120 <TIM_OC1_SetConfig+0x88>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a2e      	ldr	r2, [pc, #184]	@ (80051bc <TIM_OC1_SetConfig+0x124>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d00b      	beq.n	8005120 <TIM_OC1_SetConfig+0x88>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a2d      	ldr	r2, [pc, #180]	@ (80051c0 <TIM_OC1_SetConfig+0x128>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d007      	beq.n	8005120 <TIM_OC1_SetConfig+0x88>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a2c      	ldr	r2, [pc, #176]	@ (80051c4 <TIM_OC1_SetConfig+0x12c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d003      	beq.n	8005120 <TIM_OC1_SetConfig+0x88>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a2b      	ldr	r2, [pc, #172]	@ (80051c8 <TIM_OC1_SetConfig+0x130>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d10c      	bne.n	800513a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f023 0308 	bic.w	r3, r3, #8
 8005126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	4313      	orrs	r3, r2
 8005130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f023 0304 	bic.w	r3, r3, #4
 8005138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a1d      	ldr	r2, [pc, #116]	@ (80051b4 <TIM_OC1_SetConfig+0x11c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d013      	beq.n	800516a <TIM_OC1_SetConfig+0xd2>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a1c      	ldr	r2, [pc, #112]	@ (80051b8 <TIM_OC1_SetConfig+0x120>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00f      	beq.n	800516a <TIM_OC1_SetConfig+0xd2>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a1b      	ldr	r2, [pc, #108]	@ (80051bc <TIM_OC1_SetConfig+0x124>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00b      	beq.n	800516a <TIM_OC1_SetConfig+0xd2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a1a      	ldr	r2, [pc, #104]	@ (80051c0 <TIM_OC1_SetConfig+0x128>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d007      	beq.n	800516a <TIM_OC1_SetConfig+0xd2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a19      	ldr	r2, [pc, #100]	@ (80051c4 <TIM_OC1_SetConfig+0x12c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d003      	beq.n	800516a <TIM_OC1_SetConfig+0xd2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a18      	ldr	r2, [pc, #96]	@ (80051c8 <TIM_OC1_SetConfig+0x130>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d111      	bne.n	800518e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	621a      	str	r2, [r3, #32]
}
 80051a8:	bf00      	nop
 80051aa:	371c      	adds	r7, #28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	40012c00 	.word	0x40012c00
 80051b8:	40013400 	.word	0x40013400
 80051bc:	40014000 	.word	0x40014000
 80051c0:	40014400 	.word	0x40014400
 80051c4:	40014800 	.word	0x40014800
 80051c8:	40015000 	.word	0x40015000

080051cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	f023 0210 	bic.w	r2, r3, #16
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	021b      	lsls	r3, r3, #8
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	4313      	orrs	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f023 0320 	bic.w	r3, r3, #32
 800521a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a2c      	ldr	r2, [pc, #176]	@ (80052dc <TIM_OC2_SetConfig+0x110>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d007      	beq.n	8005240 <TIM_OC2_SetConfig+0x74>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a2b      	ldr	r2, [pc, #172]	@ (80052e0 <TIM_OC2_SetConfig+0x114>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d003      	beq.n	8005240 <TIM_OC2_SetConfig+0x74>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a2a      	ldr	r2, [pc, #168]	@ (80052e4 <TIM_OC2_SetConfig+0x118>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d10d      	bne.n	800525c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800525a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a1f      	ldr	r2, [pc, #124]	@ (80052dc <TIM_OC2_SetConfig+0x110>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d013      	beq.n	800528c <TIM_OC2_SetConfig+0xc0>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a1e      	ldr	r2, [pc, #120]	@ (80052e0 <TIM_OC2_SetConfig+0x114>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d00f      	beq.n	800528c <TIM_OC2_SetConfig+0xc0>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a1e      	ldr	r2, [pc, #120]	@ (80052e8 <TIM_OC2_SetConfig+0x11c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d00b      	beq.n	800528c <TIM_OC2_SetConfig+0xc0>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a1d      	ldr	r2, [pc, #116]	@ (80052ec <TIM_OC2_SetConfig+0x120>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d007      	beq.n	800528c <TIM_OC2_SetConfig+0xc0>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a1c      	ldr	r2, [pc, #112]	@ (80052f0 <TIM_OC2_SetConfig+0x124>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d003      	beq.n	800528c <TIM_OC2_SetConfig+0xc0>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a17      	ldr	r2, [pc, #92]	@ (80052e4 <TIM_OC2_SetConfig+0x118>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d113      	bne.n	80052b4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005292:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800529a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	621a      	str	r2, [r3, #32]
}
 80052ce:	bf00      	nop
 80052d0:	371c      	adds	r7, #28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40012c00 	.word	0x40012c00
 80052e0:	40013400 	.word	0x40013400
 80052e4:	40015000 	.word	0x40015000
 80052e8:	40014000 	.word	0x40014000
 80052ec:	40014400 	.word	0x40014400
 80052f0:	40014800 	.word	0x40014800

080052f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b087      	sub	sp, #28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0303 	bic.w	r3, r3, #3
 800532e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	021b      	lsls	r3, r3, #8
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a2b      	ldr	r2, [pc, #172]	@ (8005400 <TIM_OC3_SetConfig+0x10c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d007      	beq.n	8005366 <TIM_OC3_SetConfig+0x72>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a2a      	ldr	r2, [pc, #168]	@ (8005404 <TIM_OC3_SetConfig+0x110>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d003      	beq.n	8005366 <TIM_OC3_SetConfig+0x72>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a29      	ldr	r2, [pc, #164]	@ (8005408 <TIM_OC3_SetConfig+0x114>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d10d      	bne.n	8005382 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800536c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	021b      	lsls	r3, r3, #8
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	4313      	orrs	r3, r2
 8005378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a1e      	ldr	r2, [pc, #120]	@ (8005400 <TIM_OC3_SetConfig+0x10c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d013      	beq.n	80053b2 <TIM_OC3_SetConfig+0xbe>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a1d      	ldr	r2, [pc, #116]	@ (8005404 <TIM_OC3_SetConfig+0x110>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00f      	beq.n	80053b2 <TIM_OC3_SetConfig+0xbe>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a1d      	ldr	r2, [pc, #116]	@ (800540c <TIM_OC3_SetConfig+0x118>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00b      	beq.n	80053b2 <TIM_OC3_SetConfig+0xbe>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a1c      	ldr	r2, [pc, #112]	@ (8005410 <TIM_OC3_SetConfig+0x11c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d007      	beq.n	80053b2 <TIM_OC3_SetConfig+0xbe>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005414 <TIM_OC3_SetConfig+0x120>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d003      	beq.n	80053b2 <TIM_OC3_SetConfig+0xbe>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a16      	ldr	r2, [pc, #88]	@ (8005408 <TIM_OC3_SetConfig+0x114>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d113      	bne.n	80053da <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	011b      	lsls	r3, r3, #4
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	621a      	str	r2, [r3, #32]
}
 80053f4:	bf00      	nop
 80053f6:	371c      	adds	r7, #28
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	40012c00 	.word	0x40012c00
 8005404:	40013400 	.word	0x40013400
 8005408:	40015000 	.word	0x40015000
 800540c:	40014000 	.word	0x40014000
 8005410:	40014400 	.word	0x40014400
 8005414:	40014800 	.word	0x40014800

08005418 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800544a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	021b      	lsls	r3, r3, #8
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005466:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	031b      	lsls	r3, r3, #12
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	4313      	orrs	r3, r2
 8005472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a2c      	ldr	r2, [pc, #176]	@ (8005528 <TIM_OC4_SetConfig+0x110>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d007      	beq.n	800548c <TIM_OC4_SetConfig+0x74>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a2b      	ldr	r2, [pc, #172]	@ (800552c <TIM_OC4_SetConfig+0x114>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d003      	beq.n	800548c <TIM_OC4_SetConfig+0x74>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a2a      	ldr	r2, [pc, #168]	@ (8005530 <TIM_OC4_SetConfig+0x118>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d10d      	bne.n	80054a8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	031b      	lsls	r3, r3, #12
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	4313      	orrs	r3, r2
 800549e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005528 <TIM_OC4_SetConfig+0x110>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d013      	beq.n	80054d8 <TIM_OC4_SetConfig+0xc0>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a1e      	ldr	r2, [pc, #120]	@ (800552c <TIM_OC4_SetConfig+0x114>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00f      	beq.n	80054d8 <TIM_OC4_SetConfig+0xc0>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005534 <TIM_OC4_SetConfig+0x11c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d00b      	beq.n	80054d8 <TIM_OC4_SetConfig+0xc0>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a1d      	ldr	r2, [pc, #116]	@ (8005538 <TIM_OC4_SetConfig+0x120>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d007      	beq.n	80054d8 <TIM_OC4_SetConfig+0xc0>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a1c      	ldr	r2, [pc, #112]	@ (800553c <TIM_OC4_SetConfig+0x124>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d003      	beq.n	80054d8 <TIM_OC4_SetConfig+0xc0>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a17      	ldr	r2, [pc, #92]	@ (8005530 <TIM_OC4_SetConfig+0x118>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d113      	bne.n	8005500 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054de:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80054e6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	019b      	lsls	r3, r3, #6
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	019b      	lsls	r3, r3, #6
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	621a      	str	r2, [r3, #32]
}
 800551a:	bf00      	nop
 800551c:	371c      	adds	r7, #28
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	40012c00 	.word	0x40012c00
 800552c:	40013400 	.word	0x40013400
 8005530:	40015000 	.word	0x40015000
 8005534:	40014000 	.word	0x40014000
 8005538:	40014400 	.word	0x40014400
 800553c:	40014800 	.word	0x40014800

08005540 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800556e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005584:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	041b      	lsls	r3, r3, #16
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a19      	ldr	r2, [pc, #100]	@ (80055fc <TIM_OC5_SetConfig+0xbc>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d013      	beq.n	80055c2 <TIM_OC5_SetConfig+0x82>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a18      	ldr	r2, [pc, #96]	@ (8005600 <TIM_OC5_SetConfig+0xc0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00f      	beq.n	80055c2 <TIM_OC5_SetConfig+0x82>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a17      	ldr	r2, [pc, #92]	@ (8005604 <TIM_OC5_SetConfig+0xc4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00b      	beq.n	80055c2 <TIM_OC5_SetConfig+0x82>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a16      	ldr	r2, [pc, #88]	@ (8005608 <TIM_OC5_SetConfig+0xc8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d007      	beq.n	80055c2 <TIM_OC5_SetConfig+0x82>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a15      	ldr	r2, [pc, #84]	@ (800560c <TIM_OC5_SetConfig+0xcc>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d003      	beq.n	80055c2 <TIM_OC5_SetConfig+0x82>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a14      	ldr	r2, [pc, #80]	@ (8005610 <TIM_OC5_SetConfig+0xd0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d109      	bne.n	80055d6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	021b      	lsls	r3, r3, #8
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	621a      	str	r2, [r3, #32]
}
 80055f0:	bf00      	nop
 80055f2:	371c      	adds	r7, #28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	40012c00 	.word	0x40012c00
 8005600:	40013400 	.word	0x40013400
 8005604:	40014000 	.word	0x40014000
 8005608:	40014400 	.word	0x40014400
 800560c:	40014800 	.word	0x40014800
 8005610:	40015000 	.word	0x40015000

08005614 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800563a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005642:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	021b      	lsls	r3, r3, #8
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	4313      	orrs	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800565a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	051b      	lsls	r3, r3, #20
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4313      	orrs	r3, r2
 8005666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a1a      	ldr	r2, [pc, #104]	@ (80056d4 <TIM_OC6_SetConfig+0xc0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d013      	beq.n	8005698 <TIM_OC6_SetConfig+0x84>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a19      	ldr	r2, [pc, #100]	@ (80056d8 <TIM_OC6_SetConfig+0xc4>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d00f      	beq.n	8005698 <TIM_OC6_SetConfig+0x84>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a18      	ldr	r2, [pc, #96]	@ (80056dc <TIM_OC6_SetConfig+0xc8>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d00b      	beq.n	8005698 <TIM_OC6_SetConfig+0x84>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a17      	ldr	r2, [pc, #92]	@ (80056e0 <TIM_OC6_SetConfig+0xcc>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d007      	beq.n	8005698 <TIM_OC6_SetConfig+0x84>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a16      	ldr	r2, [pc, #88]	@ (80056e4 <TIM_OC6_SetConfig+0xd0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d003      	beq.n	8005698 <TIM_OC6_SetConfig+0x84>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a15      	ldr	r2, [pc, #84]	@ (80056e8 <TIM_OC6_SetConfig+0xd4>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d109      	bne.n	80056ac <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800569e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	029b      	lsls	r3, r3, #10
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	621a      	str	r2, [r3, #32]
}
 80056c6:	bf00      	nop
 80056c8:	371c      	adds	r7, #28
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	40012c00 	.word	0x40012c00
 80056d8:	40013400 	.word	0x40013400
 80056dc:	40014000 	.word	0x40014000
 80056e0:	40014400 	.word	0x40014400
 80056e4:	40014800 	.word	0x40014800
 80056e8:	40015000 	.word	0x40015000

080056ec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
 80056f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	f023 0201 	bic.w	r2, r3, #1
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4a28      	ldr	r2, [pc, #160]	@ (80057b8 <TIM_TI1_SetConfig+0xcc>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d01b      	beq.n	8005752 <TIM_TI1_SetConfig+0x66>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005720:	d017      	beq.n	8005752 <TIM_TI1_SetConfig+0x66>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4a25      	ldr	r2, [pc, #148]	@ (80057bc <TIM_TI1_SetConfig+0xd0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d013      	beq.n	8005752 <TIM_TI1_SetConfig+0x66>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4a24      	ldr	r2, [pc, #144]	@ (80057c0 <TIM_TI1_SetConfig+0xd4>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00f      	beq.n	8005752 <TIM_TI1_SetConfig+0x66>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4a23      	ldr	r2, [pc, #140]	@ (80057c4 <TIM_TI1_SetConfig+0xd8>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d00b      	beq.n	8005752 <TIM_TI1_SetConfig+0x66>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	4a22      	ldr	r2, [pc, #136]	@ (80057c8 <TIM_TI1_SetConfig+0xdc>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d007      	beq.n	8005752 <TIM_TI1_SetConfig+0x66>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4a21      	ldr	r2, [pc, #132]	@ (80057cc <TIM_TI1_SetConfig+0xe0>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d003      	beq.n	8005752 <TIM_TI1_SetConfig+0x66>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4a20      	ldr	r2, [pc, #128]	@ (80057d0 <TIM_TI1_SetConfig+0xe4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d101      	bne.n	8005756 <TIM_TI1_SetConfig+0x6a>
 8005752:	2301      	movs	r3, #1
 8005754:	e000      	b.n	8005758 <TIM_TI1_SetConfig+0x6c>
 8005756:	2300      	movs	r3, #0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d008      	beq.n	800576e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f023 0303 	bic.w	r3, r3, #3
 8005762:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4313      	orrs	r3, r2
 800576a:	617b      	str	r3, [r7, #20]
 800576c:	e003      	b.n	8005776 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f043 0301 	orr.w	r3, r3, #1
 8005774:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800577c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	011b      	lsls	r3, r3, #4
 8005782:	b2db      	uxtb	r3, r3
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	4313      	orrs	r3, r2
 8005788:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f023 030a 	bic.w	r3, r3, #10
 8005790:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f003 030a 	and.w	r3, r3, #10
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	4313      	orrs	r3, r2
 800579c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	621a      	str	r2, [r3, #32]
}
 80057aa:	bf00      	nop
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40012c00 	.word	0x40012c00
 80057bc:	40000400 	.word	0x40000400
 80057c0:	40000800 	.word	0x40000800
 80057c4:	40000c00 	.word	0x40000c00
 80057c8:	40013400 	.word	0x40013400
 80057cc:	40014000 	.word	0x40014000
 80057d0:	40015000 	.word	0x40015000

080057d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	f023 0201 	bic.w	r2, r3, #1
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	011b      	lsls	r3, r3, #4
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f023 030a 	bic.w	r3, r3, #10
 8005810:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4313      	orrs	r3, r2
 8005818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	621a      	str	r2, [r3, #32]
}
 8005826:	bf00      	nop
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005832:	b480      	push	{r7}
 8005834:	b087      	sub	sp, #28
 8005836:	af00      	add	r7, sp, #0
 8005838:	60f8      	str	r0, [r7, #12]
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	f023 0210 	bic.w	r2, r3, #16
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800585c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	031b      	lsls	r3, r3, #12
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800586e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	4313      	orrs	r3, r2
 8005878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	621a      	str	r2, [r3, #32]
}
 8005886:	bf00      	nop
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005892:	b480      	push	{r7}
 8005894:	b085      	sub	sp, #20
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80058a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f043 0307 	orr.w	r3, r3, #7
 80058b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	609a      	str	r2, [r3, #8]
}
 80058c0:	bf00      	nop
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
 80058d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	021a      	lsls	r2, r3, #8
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	431a      	orrs	r2, r3
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	609a      	str	r2, [r3, #8]
}
 8005900:	bf00      	nop
 8005902:	371c      	adds	r7, #28
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f003 031f 	and.w	r3, r3, #31
 800591e:	2201      	movs	r2, #1
 8005920:	fa02 f303 	lsl.w	r3, r2, r3
 8005924:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a1a      	ldr	r2, [r3, #32]
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	43db      	mvns	r3, r3
 800592e:	401a      	ands	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a1a      	ldr	r2, [r3, #32]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f003 031f 	and.w	r3, r3, #31
 800593e:	6879      	ldr	r1, [r7, #4]
 8005940:	fa01 f303 	lsl.w	r3, r1, r3
 8005944:	431a      	orrs	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	621a      	str	r2, [r3, #32]
}
 800594a:	bf00      	nop
 800594c:	371c      	adds	r7, #28
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b08a      	sub	sp, #40	@ 0x28
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e0a0      	b.n	8005aac <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d106      	bne.n	8005984 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fb fc34 	bl	80011ec <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3304      	adds	r3, #4
 8005994:	4619      	mov	r1, r3
 8005996:	4610      	mov	r0, r2
 8005998:	f7ff faca 	bl	8004f30 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6818      	ldr	r0, [r3, #0]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	6819      	ldr	r1, [r3, #0]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	2203      	movs	r2, #3
 80059aa:	f7ff fe9f 	bl	80056ec <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	699a      	ldr	r2, [r3, #24]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 020c 	bic.w	r2, r2, #12
 80059bc:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6999      	ldr	r1, [r3, #24]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80059de:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	6812      	ldr	r2, [r2, #0]
 80059ea:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80059ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059f2:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689a      	ldr	r2, [r3, #8]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a02:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6812      	ldr	r2, [r2, #0]
 8005a0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a12:	f023 0307 	bic.w	r3, r3, #7
 8005a16:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0204 	orr.w	r2, r2, #4
 8005a26:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005a30:	2370      	movs	r3, #112	@ 0x70
 8005a32:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005a34:	2300      	movs	r3, #0
 8005a36:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f107 020c 	add.w	r2, r7, #12
 8005a4e:	4611      	mov	r1, r2
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7ff fbbb 	bl	80051cc <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	6812      	ldr	r2, [r2, #0]
 8005a60:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005a64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a68:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8005a78:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3728      	adds	r7, #40	@ 0x28
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d109      	bne.n	8005ad8 <HAL_TIMEx_PWMN_Start+0x24>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	bf14      	ite	ne
 8005ad0:	2301      	movne	r3, #1
 8005ad2:	2300      	moveq	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	e022      	b.n	8005b1e <HAL_TIMEx_PWMN_Start+0x6a>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d109      	bne.n	8005af2 <HAL_TIMEx_PWMN_Start+0x3e>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	bf14      	ite	ne
 8005aea:	2301      	movne	r3, #1
 8005aec:	2300      	moveq	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	e015      	b.n	8005b1e <HAL_TIMEx_PWMN_Start+0x6a>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b08      	cmp	r3, #8
 8005af6:	d109      	bne.n	8005b0c <HAL_TIMEx_PWMN_Start+0x58>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	bf14      	ite	ne
 8005b04:	2301      	movne	r3, #1
 8005b06:	2300      	moveq	r3, #0
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	e008      	b.n	8005b1e <HAL_TIMEx_PWMN_Start+0x6a>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	bf14      	ite	ne
 8005b18:	2301      	movne	r3, #1
 8005b1a:	2300      	moveq	r3, #0
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e073      	b.n	8005c0e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d104      	bne.n	8005b36 <HAL_TIMEx_PWMN_Start+0x82>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b34:	e013      	b.n	8005b5e <HAL_TIMEx_PWMN_Start+0xaa>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d104      	bne.n	8005b46 <HAL_TIMEx_PWMN_Start+0x92>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b44:	e00b      	b.n	8005b5e <HAL_TIMEx_PWMN_Start+0xaa>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d104      	bne.n	8005b56 <HAL_TIMEx_PWMN_Start+0xa2>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b54:	e003      	b.n	8005b5e <HAL_TIMEx_PWMN_Start+0xaa>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2202      	movs	r2, #2
 8005b5a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2204      	movs	r2, #4
 8005b64:	6839      	ldr	r1, [r7, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 f9d6 	bl	8005f18 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b7a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a25      	ldr	r2, [pc, #148]	@ (8005c18 <HAL_TIMEx_PWMN_Start+0x164>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d022      	beq.n	8005bcc <HAL_TIMEx_PWMN_Start+0x118>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b8e:	d01d      	beq.n	8005bcc <HAL_TIMEx_PWMN_Start+0x118>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a21      	ldr	r2, [pc, #132]	@ (8005c1c <HAL_TIMEx_PWMN_Start+0x168>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d018      	beq.n	8005bcc <HAL_TIMEx_PWMN_Start+0x118>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a20      	ldr	r2, [pc, #128]	@ (8005c20 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d013      	beq.n	8005bcc <HAL_TIMEx_PWMN_Start+0x118>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a1e      	ldr	r2, [pc, #120]	@ (8005c24 <HAL_TIMEx_PWMN_Start+0x170>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00e      	beq.n	8005bcc <HAL_TIMEx_PWMN_Start+0x118>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a1d      	ldr	r2, [pc, #116]	@ (8005c28 <HAL_TIMEx_PWMN_Start+0x174>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d009      	beq.n	8005bcc <HAL_TIMEx_PWMN_Start+0x118>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8005c2c <HAL_TIMEx_PWMN_Start+0x178>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d004      	beq.n	8005bcc <HAL_TIMEx_PWMN_Start+0x118>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8005c30 <HAL_TIMEx_PWMN_Start+0x17c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d115      	bne.n	8005bf8 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	4b18      	ldr	r3, [pc, #96]	@ (8005c34 <HAL_TIMEx_PWMN_Start+0x180>)
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2b06      	cmp	r3, #6
 8005bdc:	d015      	beq.n	8005c0a <HAL_TIMEx_PWMN_Start+0x156>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005be4:	d011      	beq.n	8005c0a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f042 0201 	orr.w	r2, r2, #1
 8005bf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf6:	e008      	b.n	8005c0a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0201 	orr.w	r2, r2, #1
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	e000      	b.n	8005c0c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	40012c00 	.word	0x40012c00
 8005c1c:	40000400 	.word	0x40000400
 8005c20:	40000800 	.word	0x40000800
 8005c24:	40000c00 	.word	0x40000c00
 8005c28:	40013400 	.word	0x40013400
 8005c2c:	40014000 	.word	0x40014000
 8005c30:	40015000 	.word	0x40015000
 8005c34:	00010007 	.word	0x00010007

08005c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d101      	bne.n	8005c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	e074      	b.n	8005d3a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a34      	ldr	r2, [pc, #208]	@ (8005d48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d009      	beq.n	8005c8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a33      	ldr	r2, [pc, #204]	@ (8005d4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d004      	beq.n	8005c8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a31      	ldr	r2, [pc, #196]	@ (8005d50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d108      	bne.n	8005ca0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005c94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005caa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a21      	ldr	r2, [pc, #132]	@ (8005d48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d022      	beq.n	8005d0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cd0:	d01d      	beq.n	8005d0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a1f      	ldr	r2, [pc, #124]	@ (8005d54 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d018      	beq.n	8005d0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8005d58 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d013      	beq.n	8005d0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a1c      	ldr	r2, [pc, #112]	@ (8005d5c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d00e      	beq.n	8005d0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a15      	ldr	r2, [pc, #84]	@ (8005d4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d009      	beq.n	8005d0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a18      	ldr	r2, [pc, #96]	@ (8005d60 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d004      	beq.n	8005d0e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a11      	ldr	r2, [pc, #68]	@ (8005d50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d10c      	bne.n	8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	40012c00 	.word	0x40012c00
 8005d4c:	40013400 	.word	0x40013400
 8005d50:	40015000 	.word	0x40015000
 8005d54:	40000400 	.word	0x40000400
 8005d58:	40000800 	.word	0x40000800
 8005d5c:	40000c00 	.word	0x40000c00
 8005d60:	40014000 	.word	0x40014000

08005d64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d101      	bne.n	8005d80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	e078      	b.n	8005e72 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	041b      	lsls	r3, r3, #16
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	69db      	ldr	r3, [r3, #28]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a1c      	ldr	r2, [pc, #112]	@ (8005e80 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d009      	beq.n	8005e26 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a1b      	ldr	r2, [pc, #108]	@ (8005e84 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d004      	beq.n	8005e26 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a19      	ldr	r2, [pc, #100]	@ (8005e88 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d11c      	bne.n	8005e60 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e30:	051b      	lsls	r3, r3, #20
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	40012c00 	.word	0x40012c00
 8005e84:	40013400 	.word	0x40013400
 8005e88:	40015000 	.word	0x40015000

08005e8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f003 030f 	and.w	r3, r3, #15
 8005f2a:	2204      	movs	r2, #4
 8005f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6a1a      	ldr	r2, [r3, #32]
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	43db      	mvns	r3, r3
 8005f3a:	401a      	ands	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6a1a      	ldr	r2, [r3, #32]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f003 030f 	and.w	r3, r3, #15
 8005f4a:	6879      	ldr	r1, [r7, #4]
 8005f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f50:	431a      	orrs	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	621a      	str	r2, [r3, #32]
}
 8005f56:	bf00      	nop
 8005f58:	371c      	adds	r7, #28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b082      	sub	sp, #8
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e042      	b.n	8005ffa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7fb fa92 	bl	80014b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2224      	movs	r2, #36	@ 0x24
 8005f90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 0201 	bic.w	r2, r2, #1
 8005fa2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 ff61 	bl	8006e74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fc62 	bl	800687c <UART_SetConfig>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d101      	bne.n	8005fc2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e01b      	b.n	8005ffa <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005fd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fe0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f042 0201 	orr.w	r2, r2, #1
 8005ff0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 ffe0 	bl	8006fb8 <UART_CheckIdleState>
 8005ff8:	4603      	mov	r3, r0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b08a      	sub	sp, #40	@ 0x28
 8006006:	af02      	add	r7, sp, #8
 8006008:	60f8      	str	r0, [r7, #12]
 800600a:	60b9      	str	r1, [r7, #8]
 800600c:	603b      	str	r3, [r7, #0]
 800600e:	4613      	mov	r3, r2
 8006010:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006018:	2b20      	cmp	r3, #32
 800601a:	d17b      	bne.n	8006114 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <HAL_UART_Transmit+0x26>
 8006022:	88fb      	ldrh	r3, [r7, #6]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e074      	b.n	8006116 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2221      	movs	r2, #33	@ 0x21
 8006038:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800603c:	f7fb fc56 	bl	80018ec <HAL_GetTick>
 8006040:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	88fa      	ldrh	r2, [r7, #6]
 8006046:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	88fa      	ldrh	r2, [r7, #6]
 800604e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800605a:	d108      	bne.n	800606e <HAL_UART_Transmit+0x6c>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d104      	bne.n	800606e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006064:	2300      	movs	r3, #0
 8006066:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	61bb      	str	r3, [r7, #24]
 800606c:	e003      	b.n	8006076 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006072:	2300      	movs	r3, #0
 8006074:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006076:	e030      	b.n	80060da <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2200      	movs	r2, #0
 8006080:	2180      	movs	r1, #128	@ 0x80
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f001 f842 	bl	800710c <UART_WaitOnFlagUntilTimeout>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d005      	beq.n	800609a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2220      	movs	r2, #32
 8006092:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e03d      	b.n	8006116 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10b      	bne.n	80060b8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	461a      	mov	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	3302      	adds	r3, #2
 80060b4:	61bb      	str	r3, [r7, #24]
 80060b6:	e007      	b.n	80060c8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	781a      	ldrb	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	3301      	adds	r3, #1
 80060c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	3b01      	subs	r3, #1
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1c8      	bne.n	8006078 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2200      	movs	r2, #0
 80060ee:	2140      	movs	r1, #64	@ 0x40
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f001 f80b 	bl	800710c <UART_WaitOnFlagUntilTimeout>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d005      	beq.n	8006108 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2220      	movs	r2, #32
 8006100:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e006      	b.n	8006116 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2220      	movs	r2, #32
 800610c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006110:	2300      	movs	r3, #0
 8006112:	e000      	b.n	8006116 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006114:	2302      	movs	r3, #2
  }
}
 8006116:	4618      	mov	r0, r3
 8006118:	3720      	adds	r7, #32
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
	...

08006120 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b08a      	sub	sp, #40	@ 0x28
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	4613      	mov	r3, r2
 800612c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006134:	2b20      	cmp	r3, #32
 8006136:	d137      	bne.n	80061a8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <HAL_UART_Receive_IT+0x24>
 800613e:	88fb      	ldrh	r3, [r7, #6]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e030      	b.n	80061aa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a18      	ldr	r2, [pc, #96]	@ (80061b4 <HAL_UART_Receive_IT+0x94>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d01f      	beq.n	8006198 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d018      	beq.n	8006198 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	e853 3f00 	ldrex	r3, [r3]
 8006172:	613b      	str	r3, [r7, #16]
   return(result);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800617a:	627b      	str	r3, [r7, #36]	@ 0x24
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	461a      	mov	r2, r3
 8006182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006184:	623b      	str	r3, [r7, #32]
 8006186:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006188:	69f9      	ldr	r1, [r7, #28]
 800618a:	6a3a      	ldr	r2, [r7, #32]
 800618c:	e841 2300 	strex	r3, r2, [r1]
 8006190:	61bb      	str	r3, [r7, #24]
   return(result);
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1e6      	bne.n	8006166 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006198:	88fb      	ldrh	r3, [r7, #6]
 800619a:	461a      	mov	r2, r3
 800619c:	68b9      	ldr	r1, [r7, #8]
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f001 f822 	bl	80071e8 <UART_Start_Receive_IT>
 80061a4:	4603      	mov	r3, r0
 80061a6:	e000      	b.n	80061aa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80061a8:	2302      	movs	r3, #2
  }
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3728      	adds	r7, #40	@ 0x28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	40008000 	.word	0x40008000

080061b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b0ba      	sub	sp, #232	@ 0xe8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80061e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80061e6:	4013      	ands	r3, r2
 80061e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80061ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d11b      	bne.n	800622c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80061f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061f8:	f003 0320 	and.w	r3, r3, #32
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d015      	beq.n	800622c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006204:	f003 0320 	and.w	r3, r3, #32
 8006208:	2b00      	cmp	r3, #0
 800620a:	d105      	bne.n	8006218 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800620c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d009      	beq.n	800622c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 8300 	beq.w	8006822 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	4798      	blx	r3
      }
      return;
 800622a:	e2fa      	b.n	8006822 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800622c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 8123 	beq.w	800647c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006236:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800623a:	4b8d      	ldr	r3, [pc, #564]	@ (8006470 <HAL_UART_IRQHandler+0x2b8>)
 800623c:	4013      	ands	r3, r2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d106      	bne.n	8006250 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006242:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006246:	4b8b      	ldr	r3, [pc, #556]	@ (8006474 <HAL_UART_IRQHandler+0x2bc>)
 8006248:	4013      	ands	r3, r2
 800624a:	2b00      	cmp	r3, #0
 800624c:	f000 8116 	beq.w	800647c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	d011      	beq.n	8006280 <HAL_UART_IRQHandler+0xc8>
 800625c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00b      	beq.n	8006280 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2201      	movs	r2, #1
 800626e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006276:	f043 0201 	orr.w	r2, r3, #1
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d011      	beq.n	80062b0 <HAL_UART_IRQHandler+0xf8>
 800628c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00b      	beq.n	80062b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2202      	movs	r2, #2
 800629e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062a6:	f043 0204 	orr.w	r2, r3, #4
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d011      	beq.n	80062e0 <HAL_UART_IRQHandler+0x128>
 80062bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00b      	beq.n	80062e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2204      	movs	r2, #4
 80062ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062d6:	f043 0202 	orr.w	r2, r3, #2
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062e4:	f003 0308 	and.w	r3, r3, #8
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d017      	beq.n	800631c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80062ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062f0:	f003 0320 	and.w	r3, r3, #32
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d105      	bne.n	8006304 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80062f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80062fc:	4b5c      	ldr	r3, [pc, #368]	@ (8006470 <HAL_UART_IRQHandler+0x2b8>)
 80062fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00b      	beq.n	800631c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2208      	movs	r2, #8
 800630a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006312:	f043 0208 	orr.w	r2, r3, #8
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800631c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006320:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006324:	2b00      	cmp	r3, #0
 8006326:	d012      	beq.n	800634e <HAL_UART_IRQHandler+0x196>
 8006328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800632c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00c      	beq.n	800634e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800633c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006344:	f043 0220 	orr.w	r2, r3, #32
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 8266 	beq.w	8006826 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800635a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800635e:	f003 0320 	and.w	r3, r3, #32
 8006362:	2b00      	cmp	r3, #0
 8006364:	d013      	beq.n	800638e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800636a:	f003 0320 	and.w	r3, r3, #32
 800636e:	2b00      	cmp	r3, #0
 8006370:	d105      	bne.n	800637e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d007      	beq.n	800638e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006394:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a2:	2b40      	cmp	r3, #64	@ 0x40
 80063a4:	d005      	beq.n	80063b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80063a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d054      	beq.n	800645c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f001 f83a 	bl	800742c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c2:	2b40      	cmp	r3, #64	@ 0x40
 80063c4:	d146      	bne.n	8006454 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3308      	adds	r3, #8
 80063cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063d4:	e853 3f00 	ldrex	r3, [r3]
 80063d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80063dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	3308      	adds	r3, #8
 80063ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80063f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80063f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80063fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006402:	e841 2300 	strex	r3, r2, [r1]
 8006406:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800640a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1d9      	bne.n	80063c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006418:	2b00      	cmp	r3, #0
 800641a:	d017      	beq.n	800644c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006422:	4a15      	ldr	r2, [pc, #84]	@ (8006478 <HAL_UART_IRQHandler+0x2c0>)
 8006424:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800642c:	4618      	mov	r0, r3
 800642e:	f7fc fca2 	bl	8002d76 <HAL_DMA_Abort_IT>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d019      	beq.n	800646c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800643e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006446:	4610      	mov	r0, r2
 8006448:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800644a:	e00f      	b.n	800646c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f9ff 	bl	8006850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006452:	e00b      	b.n	800646c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f9fb 	bl	8006850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800645a:	e007      	b.n	800646c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f9f7 	bl	8006850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800646a:	e1dc      	b.n	8006826 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800646c:	bf00      	nop
    return;
 800646e:	e1da      	b.n	8006826 <HAL_UART_IRQHandler+0x66e>
 8006470:	10000001 	.word	0x10000001
 8006474:	04000120 	.word	0x04000120
 8006478:	080074f9 	.word	0x080074f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006480:	2b01      	cmp	r3, #1
 8006482:	f040 8170 	bne.w	8006766 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800648a:	f003 0310 	and.w	r3, r3, #16
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 8169 	beq.w	8006766 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006498:	f003 0310 	and.w	r3, r3, #16
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 8162 	beq.w	8006766 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2210      	movs	r2, #16
 80064a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064b4:	2b40      	cmp	r3, #64	@ 0x40
 80064b6:	f040 80d8 	bne.w	800666a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 80af 	beq.w	8006630 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80064d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064dc:	429a      	cmp	r2, r3
 80064de:	f080 80a7 	bcs.w	8006630 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f040 8087 	bne.w	800660e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006508:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800650c:	e853 3f00 	ldrex	r3, [r3]
 8006510:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006514:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800651c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	461a      	mov	r2, r3
 8006526:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800652a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800652e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006532:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006536:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006542:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1da      	bne.n	8006500 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	3308      	adds	r3, #8
 8006550:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006552:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006554:	e853 3f00 	ldrex	r3, [r3]
 8006558:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800655a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800655c:	f023 0301 	bic.w	r3, r3, #1
 8006560:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	3308      	adds	r3, #8
 800656a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800656e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006572:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006574:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006576:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800657a:	e841 2300 	strex	r3, r2, [r1]
 800657e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006580:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1e1      	bne.n	800654a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	3308      	adds	r3, #8
 800658c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006590:	e853 3f00 	ldrex	r3, [r3]
 8006594:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800659c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3308      	adds	r3, #8
 80065a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80065aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80065ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80065b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80065b2:	e841 2300 	strex	r3, r2, [r1]
 80065b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80065b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1e3      	bne.n	8006586 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065dc:	f023 0310 	bic.w	r3, r3, #16
 80065e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	461a      	mov	r2, r3
 80065ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065f6:	e841 2300 	strex	r3, r2, [r1]
 80065fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80065fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1e4      	bne.n	80065cc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006608:	4618      	mov	r0, r3
 800660a:	f7fc fb5b 	bl	8002cc4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2202      	movs	r2, #2
 8006612:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006620:	b29b      	uxth	r3, r3
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	b29b      	uxth	r3, r3
 8006626:	4619      	mov	r1, r3
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f91b 	bl	8006864 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800662e:	e0fc      	b.n	800682a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800663a:	429a      	cmp	r2, r3
 800663c:	f040 80f5 	bne.w	800682a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	2b20      	cmp	r3, #32
 8006650:	f040 80eb 	bne.w	800682a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2202      	movs	r2, #2
 8006658:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006660:	4619      	mov	r1, r3
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f8fe 	bl	8006864 <HAL_UARTEx_RxEventCallback>
      return;
 8006668:	e0df      	b.n	800682a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006676:	b29b      	uxth	r3, r3
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006684:	b29b      	uxth	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	f000 80d1 	beq.w	800682e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800668c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 80cc 	beq.w	800682e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800669e:	e853 3f00 	ldrex	r3, [r3]
 80066a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	461a      	mov	r2, r3
 80066b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80066ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066c0:	e841 2300 	strex	r3, r2, [r1]
 80066c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1e4      	bne.n	8006696 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3308      	adds	r3, #8
 80066d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d6:	e853 3f00 	ldrex	r3, [r3]
 80066da:	623b      	str	r3, [r7, #32]
   return(result);
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066e2:	f023 0301 	bic.w	r3, r3, #1
 80066e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3308      	adds	r3, #8
 80066f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80066f4:	633a      	str	r2, [r7, #48]	@ 0x30
 80066f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066fc:	e841 2300 	strex	r3, r2, [r1]
 8006700:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1e1      	bne.n	80066cc <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	e853 3f00 	ldrex	r3, [r3]
 8006728:	60fb      	str	r3, [r7, #12]
   return(result);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f023 0310 	bic.w	r3, r3, #16
 8006730:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	461a      	mov	r2, r3
 800673a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800673e:	61fb      	str	r3, [r7, #28]
 8006740:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006742:	69b9      	ldr	r1, [r7, #24]
 8006744:	69fa      	ldr	r2, [r7, #28]
 8006746:	e841 2300 	strex	r3, r2, [r1]
 800674a:	617b      	str	r3, [r7, #20]
   return(result);
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1e4      	bne.n	800671c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2202      	movs	r2, #2
 8006756:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006758:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f880 	bl	8006864 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006764:	e063      	b.n	800682e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800676a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00e      	beq.n	8006790 <HAL_UART_IRQHandler+0x5d8>
 8006772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006776:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d008      	beq.n	8006790 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006786:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f001 fc13 	bl	8007fb4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800678e:	e051      	b.n	8006834 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006798:	2b00      	cmp	r3, #0
 800679a:	d014      	beq.n	80067c6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800679c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d105      	bne.n	80067b4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80067a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d008      	beq.n	80067c6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d03a      	beq.n	8006832 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	4798      	blx	r3
    }
    return;
 80067c4:	e035      	b.n	8006832 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80067c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d009      	beq.n	80067e6 <HAL_UART_IRQHandler+0x62e>
 80067d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fe9c 	bl	800751c <UART_EndTransmit_IT>
    return;
 80067e4:	e026      	b.n	8006834 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80067e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d009      	beq.n	8006806 <HAL_UART_IRQHandler+0x64e>
 80067f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067f6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f001 fbec 	bl	8007fdc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006804:	e016      	b.n	8006834 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800680a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d010      	beq.n	8006834 <HAL_UART_IRQHandler+0x67c>
 8006812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006816:	2b00      	cmp	r3, #0
 8006818:	da0c      	bge.n	8006834 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f001 fbd4 	bl	8007fc8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006820:	e008      	b.n	8006834 <HAL_UART_IRQHandler+0x67c>
      return;
 8006822:	bf00      	nop
 8006824:	e006      	b.n	8006834 <HAL_UART_IRQHandler+0x67c>
    return;
 8006826:	bf00      	nop
 8006828:	e004      	b.n	8006834 <HAL_UART_IRQHandler+0x67c>
      return;
 800682a:	bf00      	nop
 800682c:	e002      	b.n	8006834 <HAL_UART_IRQHandler+0x67c>
      return;
 800682e:	bf00      	nop
 8006830:	e000      	b.n	8006834 <HAL_UART_IRQHandler+0x67c>
    return;
 8006832:	bf00      	nop
  }
}
 8006834:	37e8      	adds	r7, #232	@ 0xe8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop

0800683c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	460b      	mov	r3, r1
 800686e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800687c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006880:	b08c      	sub	sp, #48	@ 0x30
 8006882:	af00      	add	r7, sp, #0
 8006884:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006886:	2300      	movs	r3, #0
 8006888:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	431a      	orrs	r2, r3
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	431a      	orrs	r2, r3
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	69db      	ldr	r3, [r3, #28]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	4baa      	ldr	r3, [pc, #680]	@ (8006b54 <UART_SetConfig+0x2d8>)
 80068ac:	4013      	ands	r3, r2
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	6812      	ldr	r2, [r2, #0]
 80068b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068b4:	430b      	orrs	r3, r1
 80068b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a9f      	ldr	r2, [pc, #636]	@ (8006b58 <UART_SetConfig+0x2dc>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d004      	beq.n	80068e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068e4:	4313      	orrs	r3, r2
 80068e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80068f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	6812      	ldr	r2, [r2, #0]
 80068fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068fc:	430b      	orrs	r3, r1
 80068fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006906:	f023 010f 	bic.w	r1, r3, #15
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a90      	ldr	r2, [pc, #576]	@ (8006b5c <UART_SetConfig+0x2e0>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d125      	bne.n	800696c <UART_SetConfig+0xf0>
 8006920:	4b8f      	ldr	r3, [pc, #572]	@ (8006b60 <UART_SetConfig+0x2e4>)
 8006922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006926:	f003 0303 	and.w	r3, r3, #3
 800692a:	2b03      	cmp	r3, #3
 800692c:	d81a      	bhi.n	8006964 <UART_SetConfig+0xe8>
 800692e:	a201      	add	r2, pc, #4	@ (adr r2, 8006934 <UART_SetConfig+0xb8>)
 8006930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006934:	08006945 	.word	0x08006945
 8006938:	08006955 	.word	0x08006955
 800693c:	0800694d 	.word	0x0800694d
 8006940:	0800695d 	.word	0x0800695d
 8006944:	2301      	movs	r3, #1
 8006946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800694a:	e116      	b.n	8006b7a <UART_SetConfig+0x2fe>
 800694c:	2302      	movs	r3, #2
 800694e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006952:	e112      	b.n	8006b7a <UART_SetConfig+0x2fe>
 8006954:	2304      	movs	r3, #4
 8006956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800695a:	e10e      	b.n	8006b7a <UART_SetConfig+0x2fe>
 800695c:	2308      	movs	r3, #8
 800695e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006962:	e10a      	b.n	8006b7a <UART_SetConfig+0x2fe>
 8006964:	2310      	movs	r3, #16
 8006966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800696a:	e106      	b.n	8006b7a <UART_SetConfig+0x2fe>
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a7c      	ldr	r2, [pc, #496]	@ (8006b64 <UART_SetConfig+0x2e8>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d138      	bne.n	80069e8 <UART_SetConfig+0x16c>
 8006976:	4b7a      	ldr	r3, [pc, #488]	@ (8006b60 <UART_SetConfig+0x2e4>)
 8006978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800697c:	f003 030c 	and.w	r3, r3, #12
 8006980:	2b0c      	cmp	r3, #12
 8006982:	d82d      	bhi.n	80069e0 <UART_SetConfig+0x164>
 8006984:	a201      	add	r2, pc, #4	@ (adr r2, 800698c <UART_SetConfig+0x110>)
 8006986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698a:	bf00      	nop
 800698c:	080069c1 	.word	0x080069c1
 8006990:	080069e1 	.word	0x080069e1
 8006994:	080069e1 	.word	0x080069e1
 8006998:	080069e1 	.word	0x080069e1
 800699c:	080069d1 	.word	0x080069d1
 80069a0:	080069e1 	.word	0x080069e1
 80069a4:	080069e1 	.word	0x080069e1
 80069a8:	080069e1 	.word	0x080069e1
 80069ac:	080069c9 	.word	0x080069c9
 80069b0:	080069e1 	.word	0x080069e1
 80069b4:	080069e1 	.word	0x080069e1
 80069b8:	080069e1 	.word	0x080069e1
 80069bc:	080069d9 	.word	0x080069d9
 80069c0:	2300      	movs	r3, #0
 80069c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069c6:	e0d8      	b.n	8006b7a <UART_SetConfig+0x2fe>
 80069c8:	2302      	movs	r3, #2
 80069ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ce:	e0d4      	b.n	8006b7a <UART_SetConfig+0x2fe>
 80069d0:	2304      	movs	r3, #4
 80069d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069d6:	e0d0      	b.n	8006b7a <UART_SetConfig+0x2fe>
 80069d8:	2308      	movs	r3, #8
 80069da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069de:	e0cc      	b.n	8006b7a <UART_SetConfig+0x2fe>
 80069e0:	2310      	movs	r3, #16
 80069e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069e6:	e0c8      	b.n	8006b7a <UART_SetConfig+0x2fe>
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a5e      	ldr	r2, [pc, #376]	@ (8006b68 <UART_SetConfig+0x2ec>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d125      	bne.n	8006a3e <UART_SetConfig+0x1c2>
 80069f2:	4b5b      	ldr	r3, [pc, #364]	@ (8006b60 <UART_SetConfig+0x2e4>)
 80069f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80069fc:	2b30      	cmp	r3, #48	@ 0x30
 80069fe:	d016      	beq.n	8006a2e <UART_SetConfig+0x1b2>
 8006a00:	2b30      	cmp	r3, #48	@ 0x30
 8006a02:	d818      	bhi.n	8006a36 <UART_SetConfig+0x1ba>
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	d00a      	beq.n	8006a1e <UART_SetConfig+0x1a2>
 8006a08:	2b20      	cmp	r3, #32
 8006a0a:	d814      	bhi.n	8006a36 <UART_SetConfig+0x1ba>
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <UART_SetConfig+0x19a>
 8006a10:	2b10      	cmp	r3, #16
 8006a12:	d008      	beq.n	8006a26 <UART_SetConfig+0x1aa>
 8006a14:	e00f      	b.n	8006a36 <UART_SetConfig+0x1ba>
 8006a16:	2300      	movs	r3, #0
 8006a18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a1c:	e0ad      	b.n	8006b7a <UART_SetConfig+0x2fe>
 8006a1e:	2302      	movs	r3, #2
 8006a20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a24:	e0a9      	b.n	8006b7a <UART_SetConfig+0x2fe>
 8006a26:	2304      	movs	r3, #4
 8006a28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a2c:	e0a5      	b.n	8006b7a <UART_SetConfig+0x2fe>
 8006a2e:	2308      	movs	r3, #8
 8006a30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a34:	e0a1      	b.n	8006b7a <UART_SetConfig+0x2fe>
 8006a36:	2310      	movs	r3, #16
 8006a38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a3c:	e09d      	b.n	8006b7a <UART_SetConfig+0x2fe>
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a4a      	ldr	r2, [pc, #296]	@ (8006b6c <UART_SetConfig+0x2f0>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d125      	bne.n	8006a94 <UART_SetConfig+0x218>
 8006a48:	4b45      	ldr	r3, [pc, #276]	@ (8006b60 <UART_SetConfig+0x2e4>)
 8006a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a4e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006a52:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a54:	d016      	beq.n	8006a84 <UART_SetConfig+0x208>
 8006a56:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a58:	d818      	bhi.n	8006a8c <UART_SetConfig+0x210>
 8006a5a:	2b80      	cmp	r3, #128	@ 0x80
 8006a5c:	d00a      	beq.n	8006a74 <UART_SetConfig+0x1f8>
 8006a5e:	2b80      	cmp	r3, #128	@ 0x80
 8006a60:	d814      	bhi.n	8006a8c <UART_SetConfig+0x210>
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d002      	beq.n	8006a6c <UART_SetConfig+0x1f0>
 8006a66:	2b40      	cmp	r3, #64	@ 0x40
 8006a68:	d008      	beq.n	8006a7c <UART_SetConfig+0x200>
 8006a6a:	e00f      	b.n	8006a8c <UART_SetConfig+0x210>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a72:	e082      	b.n	8006b7a <UART_SetConfig+0x2fe>
 8006a74:	2302      	movs	r3, #2
 8006a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a7a:	e07e      	b.n	8006b7a <UART_SetConfig+0x2fe>
 8006a7c:	2304      	movs	r3, #4
 8006a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a82:	e07a      	b.n	8006b7a <UART_SetConfig+0x2fe>
 8006a84:	2308      	movs	r3, #8
 8006a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a8a:	e076      	b.n	8006b7a <UART_SetConfig+0x2fe>
 8006a8c:	2310      	movs	r3, #16
 8006a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a92:	e072      	b.n	8006b7a <UART_SetConfig+0x2fe>
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a35      	ldr	r2, [pc, #212]	@ (8006b70 <UART_SetConfig+0x2f4>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d12a      	bne.n	8006af4 <UART_SetConfig+0x278>
 8006a9e:	4b30      	ldr	r3, [pc, #192]	@ (8006b60 <UART_SetConfig+0x2e4>)
 8006aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aa8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aac:	d01a      	beq.n	8006ae4 <UART_SetConfig+0x268>
 8006aae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ab2:	d81b      	bhi.n	8006aec <UART_SetConfig+0x270>
 8006ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ab8:	d00c      	beq.n	8006ad4 <UART_SetConfig+0x258>
 8006aba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006abe:	d815      	bhi.n	8006aec <UART_SetConfig+0x270>
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d003      	beq.n	8006acc <UART_SetConfig+0x250>
 8006ac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ac8:	d008      	beq.n	8006adc <UART_SetConfig+0x260>
 8006aca:	e00f      	b.n	8006aec <UART_SetConfig+0x270>
 8006acc:	2300      	movs	r3, #0
 8006ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ad2:	e052      	b.n	8006b7a <UART_SetConfig+0x2fe>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ada:	e04e      	b.n	8006b7a <UART_SetConfig+0x2fe>
 8006adc:	2304      	movs	r3, #4
 8006ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ae2:	e04a      	b.n	8006b7a <UART_SetConfig+0x2fe>
 8006ae4:	2308      	movs	r3, #8
 8006ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aea:	e046      	b.n	8006b7a <UART_SetConfig+0x2fe>
 8006aec:	2310      	movs	r3, #16
 8006aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006af2:	e042      	b.n	8006b7a <UART_SetConfig+0x2fe>
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a17      	ldr	r2, [pc, #92]	@ (8006b58 <UART_SetConfig+0x2dc>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d13a      	bne.n	8006b74 <UART_SetConfig+0x2f8>
 8006afe:	4b18      	ldr	r3, [pc, #96]	@ (8006b60 <UART_SetConfig+0x2e4>)
 8006b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b0c:	d01a      	beq.n	8006b44 <UART_SetConfig+0x2c8>
 8006b0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b12:	d81b      	bhi.n	8006b4c <UART_SetConfig+0x2d0>
 8006b14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b18:	d00c      	beq.n	8006b34 <UART_SetConfig+0x2b8>
 8006b1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b1e:	d815      	bhi.n	8006b4c <UART_SetConfig+0x2d0>
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <UART_SetConfig+0x2b0>
 8006b24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b28:	d008      	beq.n	8006b3c <UART_SetConfig+0x2c0>
 8006b2a:	e00f      	b.n	8006b4c <UART_SetConfig+0x2d0>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b32:	e022      	b.n	8006b7a <UART_SetConfig+0x2fe>
 8006b34:	2302      	movs	r3, #2
 8006b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b3a:	e01e      	b.n	8006b7a <UART_SetConfig+0x2fe>
 8006b3c:	2304      	movs	r3, #4
 8006b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b42:	e01a      	b.n	8006b7a <UART_SetConfig+0x2fe>
 8006b44:	2308      	movs	r3, #8
 8006b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b4a:	e016      	b.n	8006b7a <UART_SetConfig+0x2fe>
 8006b4c:	2310      	movs	r3, #16
 8006b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b52:	e012      	b.n	8006b7a <UART_SetConfig+0x2fe>
 8006b54:	cfff69f3 	.word	0xcfff69f3
 8006b58:	40008000 	.word	0x40008000
 8006b5c:	40013800 	.word	0x40013800
 8006b60:	40021000 	.word	0x40021000
 8006b64:	40004400 	.word	0x40004400
 8006b68:	40004800 	.word	0x40004800
 8006b6c:	40004c00 	.word	0x40004c00
 8006b70:	40005000 	.word	0x40005000
 8006b74:	2310      	movs	r3, #16
 8006b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4aae      	ldr	r2, [pc, #696]	@ (8006e38 <UART_SetConfig+0x5bc>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	f040 8097 	bne.w	8006cb4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b8a:	2b08      	cmp	r3, #8
 8006b8c:	d823      	bhi.n	8006bd6 <UART_SetConfig+0x35a>
 8006b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b94 <UART_SetConfig+0x318>)
 8006b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b94:	08006bb9 	.word	0x08006bb9
 8006b98:	08006bd7 	.word	0x08006bd7
 8006b9c:	08006bc1 	.word	0x08006bc1
 8006ba0:	08006bd7 	.word	0x08006bd7
 8006ba4:	08006bc7 	.word	0x08006bc7
 8006ba8:	08006bd7 	.word	0x08006bd7
 8006bac:	08006bd7 	.word	0x08006bd7
 8006bb0:	08006bd7 	.word	0x08006bd7
 8006bb4:	08006bcf 	.word	0x08006bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bb8:	f7fd f872 	bl	8003ca0 <HAL_RCC_GetPCLK1Freq>
 8006bbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bbe:	e010      	b.n	8006be2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bc0:	4b9e      	ldr	r3, [pc, #632]	@ (8006e3c <UART_SetConfig+0x5c0>)
 8006bc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006bc4:	e00d      	b.n	8006be2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bc6:	f7fc fffd 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8006bca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bcc:	e009      	b.n	8006be2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006bd4:	e005      	b.n	8006be2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006be0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 8130 	beq.w	8006e4a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bee:	4a94      	ldr	r2, [pc, #592]	@ (8006e40 <UART_SetConfig+0x5c4>)
 8006bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bfc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	4613      	mov	r3, r2
 8006c04:	005b      	lsls	r3, r3, #1
 8006c06:	4413      	add	r3, r2
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d305      	bcc.n	8006c1a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c14:	69ba      	ldr	r2, [r7, #24]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d903      	bls.n	8006c22 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c20:	e113      	b.n	8006e4a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c24:	2200      	movs	r2, #0
 8006c26:	60bb      	str	r3, [r7, #8]
 8006c28:	60fa      	str	r2, [r7, #12]
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c2e:	4a84      	ldr	r2, [pc, #528]	@ (8006e40 <UART_SetConfig+0x5c4>)
 8006c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	2200      	movs	r2, #0
 8006c38:	603b      	str	r3, [r7, #0]
 8006c3a:	607a      	str	r2, [r7, #4]
 8006c3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c44:	f7f9 fb54 	bl	80002f0 <__aeabi_uldivmod>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	4619      	mov	r1, r3
 8006c50:	f04f 0200 	mov.w	r2, #0
 8006c54:	f04f 0300 	mov.w	r3, #0
 8006c58:	020b      	lsls	r3, r1, #8
 8006c5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c5e:	0202      	lsls	r2, r0, #8
 8006c60:	6979      	ldr	r1, [r7, #20]
 8006c62:	6849      	ldr	r1, [r1, #4]
 8006c64:	0849      	lsrs	r1, r1, #1
 8006c66:	2000      	movs	r0, #0
 8006c68:	460c      	mov	r4, r1
 8006c6a:	4605      	mov	r5, r0
 8006c6c:	eb12 0804 	adds.w	r8, r2, r4
 8006c70:	eb43 0905 	adc.w	r9, r3, r5
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	469a      	mov	sl, r3
 8006c7c:	4693      	mov	fp, r2
 8006c7e:	4652      	mov	r2, sl
 8006c80:	465b      	mov	r3, fp
 8006c82:	4640      	mov	r0, r8
 8006c84:	4649      	mov	r1, r9
 8006c86:	f7f9 fb33 	bl	80002f0 <__aeabi_uldivmod>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	4613      	mov	r3, r2
 8006c90:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c98:	d308      	bcc.n	8006cac <UART_SetConfig+0x430>
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ca0:	d204      	bcs.n	8006cac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	6a3a      	ldr	r2, [r7, #32]
 8006ca8:	60da      	str	r2, [r3, #12]
 8006caa:	e0ce      	b.n	8006e4a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006cb2:	e0ca      	b.n	8006e4a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cbc:	d166      	bne.n	8006d8c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006cbe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006cc2:	2b08      	cmp	r3, #8
 8006cc4:	d827      	bhi.n	8006d16 <UART_SetConfig+0x49a>
 8006cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8006ccc <UART_SetConfig+0x450>)
 8006cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ccc:	08006cf1 	.word	0x08006cf1
 8006cd0:	08006cf9 	.word	0x08006cf9
 8006cd4:	08006d01 	.word	0x08006d01
 8006cd8:	08006d17 	.word	0x08006d17
 8006cdc:	08006d07 	.word	0x08006d07
 8006ce0:	08006d17 	.word	0x08006d17
 8006ce4:	08006d17 	.word	0x08006d17
 8006ce8:	08006d17 	.word	0x08006d17
 8006cec:	08006d0f 	.word	0x08006d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cf0:	f7fc ffd6 	bl	8003ca0 <HAL_RCC_GetPCLK1Freq>
 8006cf4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cf6:	e014      	b.n	8006d22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cf8:	f7fc ffe8 	bl	8003ccc <HAL_RCC_GetPCLK2Freq>
 8006cfc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cfe:	e010      	b.n	8006d22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d00:	4b4e      	ldr	r3, [pc, #312]	@ (8006e3c <UART_SetConfig+0x5c0>)
 8006d02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d04:	e00d      	b.n	8006d22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d06:	f7fc ff5d 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8006d0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d0c:	e009      	b.n	8006d22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d14:	e005      	b.n	8006d22 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 8090 	beq.w	8006e4a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d2e:	4a44      	ldr	r2, [pc, #272]	@ (8006e40 <UART_SetConfig+0x5c4>)
 8006d30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d34:	461a      	mov	r2, r3
 8006d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d38:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d3c:	005a      	lsls	r2, r3, #1
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	085b      	lsrs	r3, r3, #1
 8006d44:	441a      	add	r2, r3
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d50:	6a3b      	ldr	r3, [r7, #32]
 8006d52:	2b0f      	cmp	r3, #15
 8006d54:	d916      	bls.n	8006d84 <UART_SetConfig+0x508>
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d5c:	d212      	bcs.n	8006d84 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	f023 030f 	bic.w	r3, r3, #15
 8006d66:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d68:	6a3b      	ldr	r3, [r7, #32]
 8006d6a:	085b      	lsrs	r3, r3, #1
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	f003 0307 	and.w	r3, r3, #7
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	8bfb      	ldrh	r3, [r7, #30]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	8bfa      	ldrh	r2, [r7, #30]
 8006d80:	60da      	str	r2, [r3, #12]
 8006d82:	e062      	b.n	8006e4a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d8a:	e05e      	b.n	8006e4a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d8c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d90:	2b08      	cmp	r3, #8
 8006d92:	d828      	bhi.n	8006de6 <UART_SetConfig+0x56a>
 8006d94:	a201      	add	r2, pc, #4	@ (adr r2, 8006d9c <UART_SetConfig+0x520>)
 8006d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9a:	bf00      	nop
 8006d9c:	08006dc1 	.word	0x08006dc1
 8006da0:	08006dc9 	.word	0x08006dc9
 8006da4:	08006dd1 	.word	0x08006dd1
 8006da8:	08006de7 	.word	0x08006de7
 8006dac:	08006dd7 	.word	0x08006dd7
 8006db0:	08006de7 	.word	0x08006de7
 8006db4:	08006de7 	.word	0x08006de7
 8006db8:	08006de7 	.word	0x08006de7
 8006dbc:	08006ddf 	.word	0x08006ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dc0:	f7fc ff6e 	bl	8003ca0 <HAL_RCC_GetPCLK1Freq>
 8006dc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dc6:	e014      	b.n	8006df2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dc8:	f7fc ff80 	bl	8003ccc <HAL_RCC_GetPCLK2Freq>
 8006dcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dce:	e010      	b.n	8006df2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8006e3c <UART_SetConfig+0x5c0>)
 8006dd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006dd4:	e00d      	b.n	8006df2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dd6:	f7fc fef5 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8006dda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ddc:	e009      	b.n	8006df2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006de2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006de4:	e005      	b.n	8006df2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006df0:	bf00      	nop
    }

    if (pclk != 0U)
 8006df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d028      	beq.n	8006e4a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dfc:	4a10      	ldr	r2, [pc, #64]	@ (8006e40 <UART_SetConfig+0x5c4>)
 8006dfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e02:	461a      	mov	r2, r3
 8006e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e06:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	085b      	lsrs	r3, r3, #1
 8006e10:	441a      	add	r2, r3
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	2b0f      	cmp	r3, #15
 8006e20:	d910      	bls.n	8006e44 <UART_SetConfig+0x5c8>
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e28:	d20c      	bcs.n	8006e44 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	60da      	str	r2, [r3, #12]
 8006e34:	e009      	b.n	8006e4a <UART_SetConfig+0x5ce>
 8006e36:	bf00      	nop
 8006e38:	40008000 	.word	0x40008000
 8006e3c:	00f42400 	.word	0x00f42400
 8006e40:	0800963c 	.word	0x0800963c
      }
      else
      {
        ret = HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	2200      	movs	r2, #0
 8006e64:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006e66:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3730      	adds	r7, #48	@ 0x30
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006e74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e80:	f003 0308 	and.w	r3, r3, #8
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00a      	beq.n	8006e9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00a      	beq.n	8006ee2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee6:	f003 0304 	and.w	r3, r3, #4
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00a      	beq.n	8006f04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f08:	f003 0310 	and.w	r3, r3, #16
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00a      	beq.n	8006f26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	430a      	orrs	r2, r1
 8006f24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f2a:	f003 0320 	and.w	r3, r3, #32
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00a      	beq.n	8006f48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	430a      	orrs	r2, r1
 8006f46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d01a      	beq.n	8006f8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	430a      	orrs	r2, r1
 8006f68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f72:	d10a      	bne.n	8006f8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00a      	beq.n	8006fac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	605a      	str	r2, [r3, #4]
  }
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b098      	sub	sp, #96	@ 0x60
 8006fbc:	af02      	add	r7, sp, #8
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fc8:	f7fa fc90 	bl	80018ec <HAL_GetTick>
 8006fcc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0308 	and.w	r3, r3, #8
 8006fd8:	2b08      	cmp	r3, #8
 8006fda:	d12f      	bne.n	800703c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fdc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f88e 	bl	800710c <UART_WaitOnFlagUntilTimeout>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d022      	beq.n	800703c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ffe:	e853 3f00 	ldrex	r3, [r3]
 8007002:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007006:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800700a:	653b      	str	r3, [r7, #80]	@ 0x50
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	461a      	mov	r2, r3
 8007012:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007014:	647b      	str	r3, [r7, #68]	@ 0x44
 8007016:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007018:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800701a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800701c:	e841 2300 	strex	r3, r2, [r1]
 8007020:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1e6      	bne.n	8006ff6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2220      	movs	r2, #32
 800702c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e063      	b.n	8007104 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0304 	and.w	r3, r3, #4
 8007046:	2b04      	cmp	r3, #4
 8007048:	d149      	bne.n	80070de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800704a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007052:	2200      	movs	r2, #0
 8007054:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f857 	bl	800710c <UART_WaitOnFlagUntilTimeout>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d03c      	beq.n	80070de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706c:	e853 3f00 	ldrex	r3, [r3]
 8007070:	623b      	str	r3, [r7, #32]
   return(result);
 8007072:	6a3b      	ldr	r3, [r7, #32]
 8007074:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007078:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007082:	633b      	str	r3, [r7, #48]	@ 0x30
 8007084:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007086:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800708a:	e841 2300 	strex	r3, r2, [r1]
 800708e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1e6      	bne.n	8007064 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	3308      	adds	r3, #8
 800709c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	e853 3f00 	ldrex	r3, [r3]
 80070a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f023 0301 	bic.w	r3, r3, #1
 80070ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3308      	adds	r3, #8
 80070b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070b6:	61fa      	str	r2, [r7, #28]
 80070b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ba:	69b9      	ldr	r1, [r7, #24]
 80070bc:	69fa      	ldr	r2, [r7, #28]
 80070be:	e841 2300 	strex	r3, r2, [r1]
 80070c2:	617b      	str	r3, [r7, #20]
   return(result);
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1e5      	bne.n	8007096 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e012      	b.n	8007104 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2220      	movs	r2, #32
 80070e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2220      	movs	r2, #32
 80070ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3758      	adds	r7, #88	@ 0x58
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	603b      	str	r3, [r7, #0]
 8007118:	4613      	mov	r3, r2
 800711a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800711c:	e04f      	b.n	80071be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007124:	d04b      	beq.n	80071be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007126:	f7fa fbe1 	bl	80018ec <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	429a      	cmp	r2, r3
 8007134:	d302      	bcc.n	800713c <UART_WaitOnFlagUntilTimeout+0x30>
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e04e      	b.n	80071de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0304 	and.w	r3, r3, #4
 800714a:	2b00      	cmp	r3, #0
 800714c:	d037      	beq.n	80071be <UART_WaitOnFlagUntilTimeout+0xb2>
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	2b80      	cmp	r3, #128	@ 0x80
 8007152:	d034      	beq.n	80071be <UART_WaitOnFlagUntilTimeout+0xb2>
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	2b40      	cmp	r3, #64	@ 0x40
 8007158:	d031      	beq.n	80071be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	f003 0308 	and.w	r3, r3, #8
 8007164:	2b08      	cmp	r3, #8
 8007166:	d110      	bne.n	800718a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2208      	movs	r2, #8
 800716e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f000 f95b 	bl	800742c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2208      	movs	r2, #8
 800717a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e029      	b.n	80071de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007194:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007198:	d111      	bne.n	80071be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f000 f941 	bl	800742c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2220      	movs	r2, #32
 80071ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e00f      	b.n	80071de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	69da      	ldr	r2, [r3, #28]
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	4013      	ands	r3, r2
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	bf0c      	ite	eq
 80071ce:	2301      	moveq	r3, #1
 80071d0:	2300      	movne	r3, #0
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	461a      	mov	r2, r3
 80071d6:	79fb      	ldrb	r3, [r7, #7]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d0a0      	beq.n	800711e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
	...

080071e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b0a3      	sub	sp, #140	@ 0x8c
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	4613      	mov	r3, r2
 80071f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	88fa      	ldrh	r2, [r7, #6]
 8007200:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	88fa      	ldrh	r2, [r7, #6]
 8007208:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800721a:	d10e      	bne.n	800723a <UART_Start_Receive_IT+0x52>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d105      	bne.n	8007230 <UART_Start_Receive_IT+0x48>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800722a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800722e:	e02d      	b.n	800728c <UART_Start_Receive_IT+0xa4>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	22ff      	movs	r2, #255	@ 0xff
 8007234:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007238:	e028      	b.n	800728c <UART_Start_Receive_IT+0xa4>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10d      	bne.n	800725e <UART_Start_Receive_IT+0x76>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d104      	bne.n	8007254 <UART_Start_Receive_IT+0x6c>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	22ff      	movs	r2, #255	@ 0xff
 800724e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007252:	e01b      	b.n	800728c <UART_Start_Receive_IT+0xa4>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	227f      	movs	r2, #127	@ 0x7f
 8007258:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800725c:	e016      	b.n	800728c <UART_Start_Receive_IT+0xa4>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007266:	d10d      	bne.n	8007284 <UART_Start_Receive_IT+0x9c>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d104      	bne.n	800727a <UART_Start_Receive_IT+0x92>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	227f      	movs	r2, #127	@ 0x7f
 8007274:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007278:	e008      	b.n	800728c <UART_Start_Receive_IT+0xa4>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	223f      	movs	r2, #63	@ 0x3f
 800727e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007282:	e003      	b.n	800728c <UART_Start_Receive_IT+0xa4>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2222      	movs	r2, #34	@ 0x22
 8007298:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3308      	adds	r3, #8
 80072a2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072a6:	e853 3f00 	ldrex	r3, [r3]
 80072aa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80072ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072ae:	f043 0301 	orr.w	r3, r3, #1
 80072b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3308      	adds	r3, #8
 80072bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80072c0:	673a      	str	r2, [r7, #112]	@ 0x70
 80072c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80072c6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80072c8:	e841 2300 	strex	r3, r2, [r1]
 80072cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80072ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1e3      	bne.n	800729c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072dc:	d14f      	bne.n	800737e <UART_Start_Receive_IT+0x196>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80072e4:	88fa      	ldrh	r2, [r7, #6]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d349      	bcc.n	800737e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072f2:	d107      	bne.n	8007304 <UART_Start_Receive_IT+0x11c>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d103      	bne.n	8007304 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4a47      	ldr	r2, [pc, #284]	@ (800741c <UART_Start_Receive_IT+0x234>)
 8007300:	675a      	str	r2, [r3, #116]	@ 0x74
 8007302:	e002      	b.n	800730a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	4a46      	ldr	r2, [pc, #280]	@ (8007420 <UART_Start_Receive_IT+0x238>)
 8007308:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d01a      	beq.n	8007348 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007318:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800731a:	e853 3f00 	ldrex	r3, [r3]
 800731e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007320:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007322:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007326:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007334:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007336:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007338:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800733a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800733c:	e841 2300 	strex	r3, r2, [r1]
 8007340:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1e4      	bne.n	8007312 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	3308      	adds	r3, #8
 800734e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007352:	e853 3f00 	ldrex	r3, [r3]
 8007356:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800735a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800735e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3308      	adds	r3, #8
 8007366:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007368:	64ba      	str	r2, [r7, #72]	@ 0x48
 800736a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800736e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007370:	e841 2300 	strex	r3, r2, [r1]
 8007374:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1e5      	bne.n	8007348 <UART_Start_Receive_IT+0x160>
 800737c:	e046      	b.n	800740c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007386:	d107      	bne.n	8007398 <UART_Start_Receive_IT+0x1b0>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d103      	bne.n	8007398 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	4a24      	ldr	r2, [pc, #144]	@ (8007424 <UART_Start_Receive_IT+0x23c>)
 8007394:	675a      	str	r2, [r3, #116]	@ 0x74
 8007396:	e002      	b.n	800739e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4a23      	ldr	r2, [pc, #140]	@ (8007428 <UART_Start_Receive_IT+0x240>)
 800739c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d019      	beq.n	80073da <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ae:	e853 3f00 	ldrex	r3, [r3]
 80073b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80073ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	461a      	mov	r2, r3
 80073c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80073ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073cc:	e841 2300 	strex	r3, r2, [r1]
 80073d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80073d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1e6      	bne.n	80073a6 <UART_Start_Receive_IT+0x1be>
 80073d8:	e018      	b.n	800740c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	e853 3f00 	ldrex	r3, [r3]
 80073e6:	613b      	str	r3, [r7, #16]
   return(result);
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f043 0320 	orr.w	r3, r3, #32
 80073ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	461a      	mov	r2, r3
 80073f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073f8:	623b      	str	r3, [r7, #32]
 80073fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fc:	69f9      	ldr	r1, [r7, #28]
 80073fe:	6a3a      	ldr	r2, [r7, #32]
 8007400:	e841 2300 	strex	r3, r2, [r1]
 8007404:	61bb      	str	r3, [r7, #24]
   return(result);
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1e6      	bne.n	80073da <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	378c      	adds	r7, #140	@ 0x8c
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	08007c49 	.word	0x08007c49
 8007420:	080078e5 	.word	0x080078e5
 8007424:	0800772d 	.word	0x0800772d
 8007428:	08007575 	.word	0x08007575

0800742c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800742c:	b480      	push	{r7}
 800742e:	b095      	sub	sp, #84	@ 0x54
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007444:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007448:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007452:	643b      	str	r3, [r7, #64]	@ 0x40
 8007454:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007458:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e6      	bne.n	8007434 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3308      	adds	r3, #8
 800746c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	e853 3f00 	ldrex	r3, [r3]
 8007474:	61fb      	str	r3, [r7, #28]
   return(result);
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800747c:	f023 0301 	bic.w	r3, r3, #1
 8007480:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	3308      	adds	r3, #8
 8007488:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800748a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800748c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007490:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007492:	e841 2300 	strex	r3, r2, [r1]
 8007496:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1e3      	bne.n	8007466 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d118      	bne.n	80074d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	e853 3f00 	ldrex	r3, [r3]
 80074b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	f023 0310 	bic.w	r3, r3, #16
 80074ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	461a      	mov	r2, r3
 80074c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074c4:	61bb      	str	r3, [r7, #24]
 80074c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c8:	6979      	ldr	r1, [r7, #20]
 80074ca:	69ba      	ldr	r2, [r7, #24]
 80074cc:	e841 2300 	strex	r3, r2, [r1]
 80074d0:	613b      	str	r3, [r7, #16]
   return(result);
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1e6      	bne.n	80074a6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2220      	movs	r2, #32
 80074dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80074ec:	bf00      	nop
 80074ee:	3754      	adds	r7, #84	@ 0x54
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007504:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f7ff f99e 	bl	8006850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007514:	bf00      	nop
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b088      	sub	sp, #32
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	e853 3f00 	ldrex	r3, [r3]
 8007530:	60bb      	str	r3, [r7, #8]
   return(result);
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007538:	61fb      	str	r3, [r7, #28]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	461a      	mov	r2, r3
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	61bb      	str	r3, [r7, #24]
 8007544:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007546:	6979      	ldr	r1, [r7, #20]
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	e841 2300 	strex	r3, r2, [r1]
 800754e:	613b      	str	r3, [r7, #16]
   return(result);
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1e6      	bne.n	8007524 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2220      	movs	r2, #32
 800755a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f7ff f969 	bl	800683c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800756a:	bf00      	nop
 800756c:	3720      	adds	r7, #32
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
	...

08007574 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b09c      	sub	sp, #112	@ 0x70
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007582:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800758c:	2b22      	cmp	r3, #34	@ 0x22
 800758e:	f040 80be 	bne.w	800770e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007598:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800759c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80075a0:	b2d9      	uxtb	r1, r3
 80075a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80075a6:	b2da      	uxtb	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075ac:	400a      	ands	r2, r1
 80075ae:	b2d2      	uxtb	r2, r2
 80075b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075b6:	1c5a      	adds	r2, r3, #1
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	3b01      	subs	r3, #1
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f040 80a1 	bne.w	800771e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075e4:	e853 3f00 	ldrex	r3, [r3]
 80075e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80075ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007600:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007602:	e841 2300 	strex	r3, r2, [r1]
 8007606:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1e6      	bne.n	80075dc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3308      	adds	r3, #8
 8007614:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007618:	e853 3f00 	ldrex	r3, [r3]
 800761c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800761e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007620:	f023 0301 	bic.w	r3, r3, #1
 8007624:	667b      	str	r3, [r7, #100]	@ 0x64
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3308      	adds	r3, #8
 800762c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800762e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007630:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007632:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007634:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007636:	e841 2300 	strex	r3, r2, [r1]
 800763a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800763c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1e5      	bne.n	800760e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2220      	movs	r2, #32
 8007646:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a33      	ldr	r2, [pc, #204]	@ (8007728 <UART_RxISR_8BIT+0x1b4>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d01f      	beq.n	80076a0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d018      	beq.n	80076a0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007676:	e853 3f00 	ldrex	r3, [r3]
 800767a:	623b      	str	r3, [r7, #32]
   return(result);
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007682:	663b      	str	r3, [r7, #96]	@ 0x60
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	461a      	mov	r2, r3
 800768a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800768c:	633b      	str	r3, [r7, #48]	@ 0x30
 800768e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007690:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007694:	e841 2300 	strex	r3, r2, [r1]
 8007698:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800769a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1e6      	bne.n	800766e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d12e      	bne.n	8007706 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	e853 3f00 	ldrex	r3, [r3]
 80076ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f023 0310 	bic.w	r3, r3, #16
 80076c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	461a      	mov	r2, r3
 80076ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076cc:	61fb      	str	r3, [r7, #28]
 80076ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d0:	69b9      	ldr	r1, [r7, #24]
 80076d2:	69fa      	ldr	r2, [r7, #28]
 80076d4:	e841 2300 	strex	r3, r2, [r1]
 80076d8:	617b      	str	r3, [r7, #20]
   return(result);
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1e6      	bne.n	80076ae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	69db      	ldr	r3, [r3, #28]
 80076e6:	f003 0310 	and.w	r3, r3, #16
 80076ea:	2b10      	cmp	r3, #16
 80076ec:	d103      	bne.n	80076f6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2210      	movs	r2, #16
 80076f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80076fc:	4619      	mov	r1, r3
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7ff f8b0 	bl	8006864 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007704:	e00b      	b.n	800771e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7fa f886 	bl	8001818 <HAL_UART_RxCpltCallback>
}
 800770c:	e007      	b.n	800771e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	699a      	ldr	r2, [r3, #24]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f042 0208 	orr.w	r2, r2, #8
 800771c:	619a      	str	r2, [r3, #24]
}
 800771e:	bf00      	nop
 8007720:	3770      	adds	r7, #112	@ 0x70
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	40008000 	.word	0x40008000

0800772c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b09c      	sub	sp, #112	@ 0x70
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800773a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007744:	2b22      	cmp	r3, #34	@ 0x22
 8007746:	f040 80be 	bne.w	80078c6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007750:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007758:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800775a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800775e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007762:	4013      	ands	r3, r2
 8007764:	b29a      	uxth	r2, r3
 8007766:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007768:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800776e:	1c9a      	adds	r2, r3, #2
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800777a:	b29b      	uxth	r3, r3
 800777c:	3b01      	subs	r3, #1
 800777e:	b29a      	uxth	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800778c:	b29b      	uxth	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	f040 80a1 	bne.w	80078d6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800779c:	e853 3f00 	ldrex	r3, [r3]
 80077a0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80077a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	461a      	mov	r2, r3
 80077b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80077b4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80077b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80077ba:	e841 2300 	strex	r3, r2, [r1]
 80077be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80077c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1e6      	bne.n	8007794 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3308      	adds	r3, #8
 80077cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077d0:	e853 3f00 	ldrex	r3, [r3]
 80077d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d8:	f023 0301 	bic.w	r3, r3, #1
 80077dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	3308      	adds	r3, #8
 80077e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80077e6:	643a      	str	r2, [r7, #64]	@ 0x40
 80077e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077ee:	e841 2300 	strex	r3, r2, [r1]
 80077f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1e5      	bne.n	80077c6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2220      	movs	r2, #32
 80077fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a33      	ldr	r2, [pc, #204]	@ (80078e0 <UART_RxISR_16BIT+0x1b4>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d01f      	beq.n	8007858 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d018      	beq.n	8007858 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	e853 3f00 	ldrex	r3, [r3]
 8007832:	61fb      	str	r3, [r7, #28]
   return(result);
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800783a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	461a      	mov	r2, r3
 8007842:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007844:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007846:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007848:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800784a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800784c:	e841 2300 	strex	r3, r2, [r1]
 8007850:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1e6      	bne.n	8007826 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800785c:	2b01      	cmp	r3, #1
 800785e:	d12e      	bne.n	80078be <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	e853 3f00 	ldrex	r3, [r3]
 8007872:	60bb      	str	r3, [r7, #8]
   return(result);
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	f023 0310 	bic.w	r3, r3, #16
 800787a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	461a      	mov	r2, r3
 8007882:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007884:	61bb      	str	r3, [r7, #24]
 8007886:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007888:	6979      	ldr	r1, [r7, #20]
 800788a:	69ba      	ldr	r2, [r7, #24]
 800788c:	e841 2300 	strex	r3, r2, [r1]
 8007890:	613b      	str	r3, [r7, #16]
   return(result);
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1e6      	bne.n	8007866 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	f003 0310 	and.w	r3, r3, #16
 80078a2:	2b10      	cmp	r3, #16
 80078a4:	d103      	bne.n	80078ae <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2210      	movs	r2, #16
 80078ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078b4:	4619      	mov	r1, r3
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7fe ffd4 	bl	8006864 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078bc:	e00b      	b.n	80078d6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7f9 ffaa 	bl	8001818 <HAL_UART_RxCpltCallback>
}
 80078c4:	e007      	b.n	80078d6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	699a      	ldr	r2, [r3, #24]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f042 0208 	orr.w	r2, r2, #8
 80078d4:	619a      	str	r2, [r3, #24]
}
 80078d6:	bf00      	nop
 80078d8:	3770      	adds	r7, #112	@ 0x70
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	40008000 	.word	0x40008000

080078e4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b0ac      	sub	sp, #176	@ 0xb0
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80078f2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	69db      	ldr	r3, [r3, #28]
 80078fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800791a:	2b22      	cmp	r3, #34	@ 0x22
 800791c:	f040 8183 	bne.w	8007c26 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007926:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800792a:	e126      	b.n	8007b7a <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007932:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007936:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800793a:	b2d9      	uxtb	r1, r3
 800793c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007940:	b2da      	uxtb	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007946:	400a      	ands	r2, r1
 8007948:	b2d2      	uxtb	r2, r2
 800794a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007950:	1c5a      	adds	r2, r3, #1
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800795c:	b29b      	uxth	r3, r3
 800795e:	3b01      	subs	r3, #1
 8007960:	b29a      	uxth	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007976:	f003 0307 	and.w	r3, r3, #7
 800797a:	2b00      	cmp	r3, #0
 800797c:	d053      	beq.n	8007a26 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800797e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b00      	cmp	r3, #0
 8007988:	d011      	beq.n	80079ae <UART_RxISR_8BIT_FIFOEN+0xca>
 800798a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800798e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00b      	beq.n	80079ae <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2201      	movs	r2, #1
 800799c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079a4:	f043 0201 	orr.w	r2, r3, #1
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079b2:	f003 0302 	and.w	r3, r3, #2
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d011      	beq.n	80079de <UART_RxISR_8BIT_FIFOEN+0xfa>
 80079ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00b      	beq.n	80079de <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2202      	movs	r2, #2
 80079cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079d4:	f043 0204 	orr.w	r2, r3, #4
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079e2:	f003 0304 	and.w	r3, r3, #4
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d011      	beq.n	8007a0e <UART_RxISR_8BIT_FIFOEN+0x12a>
 80079ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00b      	beq.n	8007a0e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2204      	movs	r2, #4
 80079fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a04:	f043 0202 	orr.w	r2, r3, #2
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d006      	beq.n	8007a26 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7fe ff19 	bl	8006850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f040 80a3 	bne.w	8007b7a <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a3c:	e853 3f00 	ldrex	r3, [r3]
 8007a40:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007a42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	461a      	mov	r2, r3
 8007a52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a56:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a58:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007a5c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007a5e:	e841 2300 	strex	r3, r2, [r1]
 8007a62:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007a64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1e4      	bne.n	8007a34 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	3308      	adds	r3, #8
 8007a70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a74:	e853 3f00 	ldrex	r3, [r3]
 8007a78:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007a7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a80:	f023 0301 	bic.w	r3, r3, #1
 8007a84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3308      	adds	r3, #8
 8007a8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a92:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007a94:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a96:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007a98:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007a9a:	e841 2300 	strex	r3, r2, [r1]
 8007a9e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007aa0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1e1      	bne.n	8007a6a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2220      	movs	r2, #32
 8007aaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a60      	ldr	r2, [pc, #384]	@ (8007c40 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d021      	beq.n	8007b08 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d01a      	beq.n	8007b08 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ada:	e853 3f00 	ldrex	r3, [r3]
 8007ade:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ae2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ae6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	461a      	mov	r2, r3
 8007af0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007af4:	657b      	str	r3, [r7, #84]	@ 0x54
 8007af6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007afa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007afc:	e841 2300 	strex	r3, r2, [r1]
 8007b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007b02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e4      	bne.n	8007ad2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d130      	bne.n	8007b72 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b1e:	e853 3f00 	ldrex	r3, [r3]
 8007b22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b26:	f023 0310 	bic.w	r3, r3, #16
 8007b2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	461a      	mov	r2, r3
 8007b34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b38:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b40:	e841 2300 	strex	r3, r2, [r1]
 8007b44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1e4      	bne.n	8007b16 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	69db      	ldr	r3, [r3, #28]
 8007b52:	f003 0310 	and.w	r3, r3, #16
 8007b56:	2b10      	cmp	r3, #16
 8007b58:	d103      	bne.n	8007b62 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2210      	movs	r2, #16
 8007b60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7fe fe7a 	bl	8006864 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007b70:	e00e      	b.n	8007b90 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7f9 fe50 	bl	8001818 <HAL_UART_RxCpltCallback>
        break;
 8007b78:	e00a      	b.n	8007b90 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b7a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d006      	beq.n	8007b90 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8007b82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b86:	f003 0320 	and.w	r3, r3, #32
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f47f aece 	bne.w	800792c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b96:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007b9a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d049      	beq.n	8007c36 <UART_RxISR_8BIT_FIFOEN+0x352>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007ba8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d242      	bcs.n	8007c36 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	3308      	adds	r3, #8
 8007bb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb8:	6a3b      	ldr	r3, [r7, #32]
 8007bba:	e853 3f00 	ldrex	r3, [r3]
 8007bbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3308      	adds	r3, #8
 8007bd0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007bd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bdc:	e841 2300 	strex	r3, r2, [r1]
 8007be0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1e3      	bne.n	8007bb0 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a16      	ldr	r2, [pc, #88]	@ (8007c44 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007bec:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	e853 3f00 	ldrex	r3, [r3]
 8007bfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	f043 0320 	orr.w	r3, r3, #32
 8007c02:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007c10:	61bb      	str	r3, [r7, #24]
 8007c12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c14:	6979      	ldr	r1, [r7, #20]
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	e841 2300 	strex	r3, r2, [r1]
 8007c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1e4      	bne.n	8007bee <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c24:	e007      	b.n	8007c36 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	699a      	ldr	r2, [r3, #24]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f042 0208 	orr.w	r2, r2, #8
 8007c34:	619a      	str	r2, [r3, #24]
}
 8007c36:	bf00      	nop
 8007c38:	37b0      	adds	r7, #176	@ 0xb0
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	40008000 	.word	0x40008000
 8007c44:	08007575 	.word	0x08007575

08007c48 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b0ae      	sub	sp, #184	@ 0xb8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007c56:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	69db      	ldr	r3, [r3, #28]
 8007c60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c7e:	2b22      	cmp	r3, #34	@ 0x22
 8007c80:	f040 8187 	bne.w	8007f92 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007c8a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c8e:	e12a      	b.n	8007ee6 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c96:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007ca2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007ca6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007caa:	4013      	ands	r3, r2
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007cb2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cb8:	1c9a      	adds	r2, r3, #2
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	69db      	ldr	r3, [r3, #28]
 8007cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007cda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007cde:	f003 0307 	and.w	r3, r3, #7
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d053      	beq.n	8007d8e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ce6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007cea:	f003 0301 	and.w	r3, r3, #1
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d011      	beq.n	8007d16 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007cf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00b      	beq.n	8007d16 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2201      	movs	r2, #1
 8007d04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d0c:	f043 0201 	orr.w	r2, r3, #1
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d1a:	f003 0302 	and.w	r3, r3, #2
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d011      	beq.n	8007d46 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007d22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00b      	beq.n	8007d46 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2202      	movs	r2, #2
 8007d34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d3c:	f043 0204 	orr.w	r2, r3, #4
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d4a:	f003 0304 	and.w	r3, r3, #4
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d011      	beq.n	8007d76 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007d52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00b      	beq.n	8007d76 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2204      	movs	r2, #4
 8007d64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d6c:	f043 0202 	orr.w	r2, r3, #2
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d006      	beq.n	8007d8e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7fe fd65 	bl	8006850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f040 80a5 	bne.w	8007ee6 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007da4:	e853 3f00 	ldrex	r3, [r3]
 8007da8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007daa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007dac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007db0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	461a      	mov	r2, r3
 8007dba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007dbe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007dc2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007dc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007dca:	e841 2300 	strex	r3, r2, [r1]
 8007dce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007dd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1e2      	bne.n	8007d9c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	3308      	adds	r3, #8
 8007ddc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007de0:	e853 3f00 	ldrex	r3, [r3]
 8007de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007de6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007de8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007dec:	f023 0301 	bic.w	r3, r3, #1
 8007df0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	3308      	adds	r3, #8
 8007dfa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007dfe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007e00:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e02:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007e04:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007e06:	e841 2300 	strex	r3, r2, [r1]
 8007e0a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007e0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1e1      	bne.n	8007dd6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2220      	movs	r2, #32
 8007e16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a60      	ldr	r2, [pc, #384]	@ (8007fac <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d021      	beq.n	8007e74 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d01a      	beq.n	8007e74 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e46:	e853 3f00 	ldrex	r3, [r3]
 8007e4a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007e60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e62:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e68:	e841 2300 	strex	r3, r2, [r1]
 8007e6c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007e6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1e4      	bne.n	8007e3e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d130      	bne.n	8007ede <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e8a:	e853 3f00 	ldrex	r3, [r3]
 8007e8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e92:	f023 0310 	bic.w	r3, r3, #16
 8007e96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ea4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ea6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007eaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007eac:	e841 2300 	strex	r3, r2, [r1]
 8007eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007eb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e4      	bne.n	8007e82 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	f003 0310 	and.w	r3, r3, #16
 8007ec2:	2b10      	cmp	r3, #16
 8007ec4:	d103      	bne.n	8007ece <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2210      	movs	r2, #16
 8007ecc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7fe fcc4 	bl	8006864 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007edc:	e00e      	b.n	8007efc <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f7f9 fc9a 	bl	8001818 <HAL_UART_RxCpltCallback>
        break;
 8007ee4:	e00a      	b.n	8007efc <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ee6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d006      	beq.n	8007efc <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8007eee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ef2:	f003 0320 	and.w	r3, r3, #32
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f47f aeca 	bne.w	8007c90 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f02:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007f06:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d049      	beq.n	8007fa2 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007f14:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d242      	bcs.n	8007fa2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	3308      	adds	r3, #8
 8007f22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f26:	e853 3f00 	ldrex	r3, [r3]
 8007f2a:	623b      	str	r3, [r7, #32]
   return(result);
 8007f2c:	6a3b      	ldr	r3, [r7, #32]
 8007f2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	3308      	adds	r3, #8
 8007f3c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007f40:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f48:	e841 2300 	strex	r3, r2, [r1]
 8007f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1e3      	bne.n	8007f1c <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a16      	ldr	r2, [pc, #88]	@ (8007fb0 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007f58:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	e853 3f00 	ldrex	r3, [r3]
 8007f66:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f043 0320 	orr.w	r3, r3, #32
 8007f6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	461a      	mov	r2, r3
 8007f78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f7c:	61fb      	str	r3, [r7, #28]
 8007f7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f80:	69b9      	ldr	r1, [r7, #24]
 8007f82:	69fa      	ldr	r2, [r7, #28]
 8007f84:	e841 2300 	strex	r3, r2, [r1]
 8007f88:	617b      	str	r3, [r7, #20]
   return(result);
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1e4      	bne.n	8007f5a <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f90:	e007      	b.n	8007fa2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	699a      	ldr	r2, [r3, #24]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f042 0208 	orr.w	r2, r2, #8
 8007fa0:	619a      	str	r2, [r3, #24]
}
 8007fa2:	bf00      	nop
 8007fa4:	37b8      	adds	r7, #184	@ 0xb8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	40008000 	.word	0x40008000
 8007fb0:	0800772d 	.word	0x0800772d

08007fb4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d101      	bne.n	8008006 <HAL_UARTEx_DisableFifoMode+0x16>
 8008002:	2302      	movs	r3, #2
 8008004:	e027      	b.n	8008056 <HAL_UARTEx_DisableFifoMode+0x66>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2224      	movs	r2, #36	@ 0x24
 8008012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f022 0201 	bic.w	r2, r2, #1
 800802c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008034:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2220      	movs	r2, #32
 8008048:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008072:	2b01      	cmp	r3, #1
 8008074:	d101      	bne.n	800807a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008076:	2302      	movs	r3, #2
 8008078:	e02d      	b.n	80080d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2224      	movs	r2, #36	@ 0x24
 8008086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f022 0201 	bic.w	r2, r2, #1
 80080a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	430a      	orrs	r2, r1
 80080b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f850 	bl	800815c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2220      	movs	r2, #32
 80080c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b084      	sub	sp, #16
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d101      	bne.n	80080f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80080f2:	2302      	movs	r3, #2
 80080f4:	e02d      	b.n	8008152 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2224      	movs	r2, #36	@ 0x24
 8008102:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f022 0201 	bic.w	r2, r2, #1
 800811c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	683a      	ldr	r2, [r7, #0]
 800812e:	430a      	orrs	r2, r1
 8008130:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f812 	bl	800815c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2220      	movs	r2, #32
 8008144:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
	...

0800815c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008168:	2b00      	cmp	r3, #0
 800816a:	d108      	bne.n	800817e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800817c:	e031      	b.n	80081e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800817e:	2308      	movs	r3, #8
 8008180:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008182:	2308      	movs	r3, #8
 8008184:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	0e5b      	lsrs	r3, r3, #25
 800818e:	b2db      	uxtb	r3, r3
 8008190:	f003 0307 	and.w	r3, r3, #7
 8008194:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	0f5b      	lsrs	r3, r3, #29
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	f003 0307 	and.w	r3, r3, #7
 80081a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081a6:	7bbb      	ldrb	r3, [r7, #14]
 80081a8:	7b3a      	ldrb	r2, [r7, #12]
 80081aa:	4911      	ldr	r1, [pc, #68]	@ (80081f0 <UARTEx_SetNbDataToProcess+0x94>)
 80081ac:	5c8a      	ldrb	r2, [r1, r2]
 80081ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80081b2:	7b3a      	ldrb	r2, [r7, #12]
 80081b4:	490f      	ldr	r1, [pc, #60]	@ (80081f4 <UARTEx_SetNbDataToProcess+0x98>)
 80081b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80081bc:	b29a      	uxth	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
 80081c6:	7b7a      	ldrb	r2, [r7, #13]
 80081c8:	4909      	ldr	r1, [pc, #36]	@ (80081f0 <UARTEx_SetNbDataToProcess+0x94>)
 80081ca:	5c8a      	ldrb	r2, [r1, r2]
 80081cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80081d0:	7b7a      	ldrb	r2, [r7, #13]
 80081d2:	4908      	ldr	r1, [pc, #32]	@ (80081f4 <UARTEx_SetNbDataToProcess+0x98>)
 80081d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80081da:	b29a      	uxth	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80081e2:	bf00      	nop
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	08009654 	.word	0x08009654
 80081f4:	0800965c 	.word	0x0800965c

080081f8 <sniprintf>:
 80081f8:	b40c      	push	{r2, r3}
 80081fa:	b530      	push	{r4, r5, lr}
 80081fc:	4b17      	ldr	r3, [pc, #92]	@ (800825c <sniprintf+0x64>)
 80081fe:	1e0c      	subs	r4, r1, #0
 8008200:	681d      	ldr	r5, [r3, #0]
 8008202:	b09d      	sub	sp, #116	@ 0x74
 8008204:	da08      	bge.n	8008218 <sniprintf+0x20>
 8008206:	238b      	movs	r3, #139	@ 0x8b
 8008208:	602b      	str	r3, [r5, #0]
 800820a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800820e:	b01d      	add	sp, #116	@ 0x74
 8008210:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008214:	b002      	add	sp, #8
 8008216:	4770      	bx	lr
 8008218:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800821c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008220:	bf14      	ite	ne
 8008222:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8008226:	4623      	moveq	r3, r4
 8008228:	9304      	str	r3, [sp, #16]
 800822a:	9307      	str	r3, [sp, #28]
 800822c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008230:	9002      	str	r0, [sp, #8]
 8008232:	9006      	str	r0, [sp, #24]
 8008234:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008238:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800823a:	ab21      	add	r3, sp, #132	@ 0x84
 800823c:	a902      	add	r1, sp, #8
 800823e:	4628      	mov	r0, r5
 8008240:	9301      	str	r3, [sp, #4]
 8008242:	f000 f9db 	bl	80085fc <_svfiprintf_r>
 8008246:	1c43      	adds	r3, r0, #1
 8008248:	bfbc      	itt	lt
 800824a:	238b      	movlt	r3, #139	@ 0x8b
 800824c:	602b      	strlt	r3, [r5, #0]
 800824e:	2c00      	cmp	r4, #0
 8008250:	d0dd      	beq.n	800820e <sniprintf+0x16>
 8008252:	9b02      	ldr	r3, [sp, #8]
 8008254:	2200      	movs	r2, #0
 8008256:	701a      	strb	r2, [r3, #0]
 8008258:	e7d9      	b.n	800820e <sniprintf+0x16>
 800825a:	bf00      	nop
 800825c:	200000d4 	.word	0x200000d4

08008260 <std>:
 8008260:	2300      	movs	r3, #0
 8008262:	b510      	push	{r4, lr}
 8008264:	4604      	mov	r4, r0
 8008266:	e9c0 3300 	strd	r3, r3, [r0]
 800826a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800826e:	6083      	str	r3, [r0, #8]
 8008270:	8181      	strh	r1, [r0, #12]
 8008272:	6643      	str	r3, [r0, #100]	@ 0x64
 8008274:	81c2      	strh	r2, [r0, #14]
 8008276:	6183      	str	r3, [r0, #24]
 8008278:	4619      	mov	r1, r3
 800827a:	2208      	movs	r2, #8
 800827c:	305c      	adds	r0, #92	@ 0x5c
 800827e:	f000 f90d 	bl	800849c <memset>
 8008282:	4b0d      	ldr	r3, [pc, #52]	@ (80082b8 <std+0x58>)
 8008284:	6263      	str	r3, [r4, #36]	@ 0x24
 8008286:	4b0d      	ldr	r3, [pc, #52]	@ (80082bc <std+0x5c>)
 8008288:	62a3      	str	r3, [r4, #40]	@ 0x28
 800828a:	4b0d      	ldr	r3, [pc, #52]	@ (80082c0 <std+0x60>)
 800828c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800828e:	4b0d      	ldr	r3, [pc, #52]	@ (80082c4 <std+0x64>)
 8008290:	6323      	str	r3, [r4, #48]	@ 0x30
 8008292:	4b0d      	ldr	r3, [pc, #52]	@ (80082c8 <std+0x68>)
 8008294:	6224      	str	r4, [r4, #32]
 8008296:	429c      	cmp	r4, r3
 8008298:	d006      	beq.n	80082a8 <std+0x48>
 800829a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800829e:	4294      	cmp	r4, r2
 80082a0:	d002      	beq.n	80082a8 <std+0x48>
 80082a2:	33d0      	adds	r3, #208	@ 0xd0
 80082a4:	429c      	cmp	r4, r3
 80082a6:	d105      	bne.n	80082b4 <std+0x54>
 80082a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80082ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082b0:	f000 b926 	b.w	8008500 <__retarget_lock_init_recursive>
 80082b4:	bd10      	pop	{r4, pc}
 80082b6:	bf00      	nop
 80082b8:	08008dd5 	.word	0x08008dd5
 80082bc:	08008df7 	.word	0x08008df7
 80082c0:	08008e2f 	.word	0x08008e2f
 80082c4:	08008e53 	.word	0x08008e53
 80082c8:	200004ec 	.word	0x200004ec

080082cc <stdio_exit_handler>:
 80082cc:	4a02      	ldr	r2, [pc, #8]	@ (80082d8 <stdio_exit_handler+0xc>)
 80082ce:	4903      	ldr	r1, [pc, #12]	@ (80082dc <stdio_exit_handler+0x10>)
 80082d0:	4803      	ldr	r0, [pc, #12]	@ (80082e0 <stdio_exit_handler+0x14>)
 80082d2:	f000 b869 	b.w	80083a8 <_fwalk_sglue>
 80082d6:	bf00      	nop
 80082d8:	200000c8 	.word	0x200000c8
 80082dc:	08008d6d 	.word	0x08008d6d
 80082e0:	200000d8 	.word	0x200000d8

080082e4 <cleanup_stdio>:
 80082e4:	6841      	ldr	r1, [r0, #4]
 80082e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008318 <cleanup_stdio+0x34>)
 80082e8:	4299      	cmp	r1, r3
 80082ea:	b510      	push	{r4, lr}
 80082ec:	4604      	mov	r4, r0
 80082ee:	d001      	beq.n	80082f4 <cleanup_stdio+0x10>
 80082f0:	f000 fd3c 	bl	8008d6c <_fflush_r>
 80082f4:	68a1      	ldr	r1, [r4, #8]
 80082f6:	4b09      	ldr	r3, [pc, #36]	@ (800831c <cleanup_stdio+0x38>)
 80082f8:	4299      	cmp	r1, r3
 80082fa:	d002      	beq.n	8008302 <cleanup_stdio+0x1e>
 80082fc:	4620      	mov	r0, r4
 80082fe:	f000 fd35 	bl	8008d6c <_fflush_r>
 8008302:	68e1      	ldr	r1, [r4, #12]
 8008304:	4b06      	ldr	r3, [pc, #24]	@ (8008320 <cleanup_stdio+0x3c>)
 8008306:	4299      	cmp	r1, r3
 8008308:	d004      	beq.n	8008314 <cleanup_stdio+0x30>
 800830a:	4620      	mov	r0, r4
 800830c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008310:	f000 bd2c 	b.w	8008d6c <_fflush_r>
 8008314:	bd10      	pop	{r4, pc}
 8008316:	bf00      	nop
 8008318:	200004ec 	.word	0x200004ec
 800831c:	20000554 	.word	0x20000554
 8008320:	200005bc 	.word	0x200005bc

08008324 <global_stdio_init.part.0>:
 8008324:	b510      	push	{r4, lr}
 8008326:	4b0b      	ldr	r3, [pc, #44]	@ (8008354 <global_stdio_init.part.0+0x30>)
 8008328:	4c0b      	ldr	r4, [pc, #44]	@ (8008358 <global_stdio_init.part.0+0x34>)
 800832a:	4a0c      	ldr	r2, [pc, #48]	@ (800835c <global_stdio_init.part.0+0x38>)
 800832c:	601a      	str	r2, [r3, #0]
 800832e:	4620      	mov	r0, r4
 8008330:	2200      	movs	r2, #0
 8008332:	2104      	movs	r1, #4
 8008334:	f7ff ff94 	bl	8008260 <std>
 8008338:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800833c:	2201      	movs	r2, #1
 800833e:	2109      	movs	r1, #9
 8008340:	f7ff ff8e 	bl	8008260 <std>
 8008344:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008348:	2202      	movs	r2, #2
 800834a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800834e:	2112      	movs	r1, #18
 8008350:	f7ff bf86 	b.w	8008260 <std>
 8008354:	20000624 	.word	0x20000624
 8008358:	200004ec 	.word	0x200004ec
 800835c:	080082cd 	.word	0x080082cd

08008360 <__sfp_lock_acquire>:
 8008360:	4801      	ldr	r0, [pc, #4]	@ (8008368 <__sfp_lock_acquire+0x8>)
 8008362:	f000 b8ce 	b.w	8008502 <__retarget_lock_acquire_recursive>
 8008366:	bf00      	nop
 8008368:	20000629 	.word	0x20000629

0800836c <__sfp_lock_release>:
 800836c:	4801      	ldr	r0, [pc, #4]	@ (8008374 <__sfp_lock_release+0x8>)
 800836e:	f000 b8c9 	b.w	8008504 <__retarget_lock_release_recursive>
 8008372:	bf00      	nop
 8008374:	20000629 	.word	0x20000629

08008378 <__sinit>:
 8008378:	b510      	push	{r4, lr}
 800837a:	4604      	mov	r4, r0
 800837c:	f7ff fff0 	bl	8008360 <__sfp_lock_acquire>
 8008380:	6a23      	ldr	r3, [r4, #32]
 8008382:	b11b      	cbz	r3, 800838c <__sinit+0x14>
 8008384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008388:	f7ff bff0 	b.w	800836c <__sfp_lock_release>
 800838c:	4b04      	ldr	r3, [pc, #16]	@ (80083a0 <__sinit+0x28>)
 800838e:	6223      	str	r3, [r4, #32]
 8008390:	4b04      	ldr	r3, [pc, #16]	@ (80083a4 <__sinit+0x2c>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1f5      	bne.n	8008384 <__sinit+0xc>
 8008398:	f7ff ffc4 	bl	8008324 <global_stdio_init.part.0>
 800839c:	e7f2      	b.n	8008384 <__sinit+0xc>
 800839e:	bf00      	nop
 80083a0:	080082e5 	.word	0x080082e5
 80083a4:	20000624 	.word	0x20000624

080083a8 <_fwalk_sglue>:
 80083a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083ac:	4607      	mov	r7, r0
 80083ae:	4688      	mov	r8, r1
 80083b0:	4614      	mov	r4, r2
 80083b2:	2600      	movs	r6, #0
 80083b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083b8:	f1b9 0901 	subs.w	r9, r9, #1
 80083bc:	d505      	bpl.n	80083ca <_fwalk_sglue+0x22>
 80083be:	6824      	ldr	r4, [r4, #0]
 80083c0:	2c00      	cmp	r4, #0
 80083c2:	d1f7      	bne.n	80083b4 <_fwalk_sglue+0xc>
 80083c4:	4630      	mov	r0, r6
 80083c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ca:	89ab      	ldrh	r3, [r5, #12]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d907      	bls.n	80083e0 <_fwalk_sglue+0x38>
 80083d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083d4:	3301      	adds	r3, #1
 80083d6:	d003      	beq.n	80083e0 <_fwalk_sglue+0x38>
 80083d8:	4629      	mov	r1, r5
 80083da:	4638      	mov	r0, r7
 80083dc:	47c0      	blx	r8
 80083de:	4306      	orrs	r6, r0
 80083e0:	3568      	adds	r5, #104	@ 0x68
 80083e2:	e7e9      	b.n	80083b8 <_fwalk_sglue+0x10>

080083e4 <strtok>:
 80083e4:	4b16      	ldr	r3, [pc, #88]	@ (8008440 <strtok+0x5c>)
 80083e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ea:	681f      	ldr	r7, [r3, #0]
 80083ec:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80083ee:	4605      	mov	r5, r0
 80083f0:	460e      	mov	r6, r1
 80083f2:	b9ec      	cbnz	r4, 8008430 <strtok+0x4c>
 80083f4:	2050      	movs	r0, #80	@ 0x50
 80083f6:	f000 f9fd 	bl	80087f4 <malloc>
 80083fa:	4602      	mov	r2, r0
 80083fc:	6478      	str	r0, [r7, #68]	@ 0x44
 80083fe:	b920      	cbnz	r0, 800840a <strtok+0x26>
 8008400:	4b10      	ldr	r3, [pc, #64]	@ (8008444 <strtok+0x60>)
 8008402:	4811      	ldr	r0, [pc, #68]	@ (8008448 <strtok+0x64>)
 8008404:	215b      	movs	r1, #91	@ 0x5b
 8008406:	f000 f87f 	bl	8008508 <__assert_func>
 800840a:	e9c0 4400 	strd	r4, r4, [r0]
 800840e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008412:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008416:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800841a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800841e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008422:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008426:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800842a:	6184      	str	r4, [r0, #24]
 800842c:	7704      	strb	r4, [r0, #28]
 800842e:	6244      	str	r4, [r0, #36]	@ 0x24
 8008430:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008432:	4631      	mov	r1, r6
 8008434:	4628      	mov	r0, r5
 8008436:	2301      	movs	r3, #1
 8008438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800843c:	f000 b806 	b.w	800844c <__strtok_r>
 8008440:	200000d4 	.word	0x200000d4
 8008444:	08009664 	.word	0x08009664
 8008448:	0800967b 	.word	0x0800967b

0800844c <__strtok_r>:
 800844c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800844e:	4604      	mov	r4, r0
 8008450:	b908      	cbnz	r0, 8008456 <__strtok_r+0xa>
 8008452:	6814      	ldr	r4, [r2, #0]
 8008454:	b144      	cbz	r4, 8008468 <__strtok_r+0x1c>
 8008456:	4620      	mov	r0, r4
 8008458:	f814 5b01 	ldrb.w	r5, [r4], #1
 800845c:	460f      	mov	r7, r1
 800845e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008462:	b91e      	cbnz	r6, 800846c <__strtok_r+0x20>
 8008464:	b965      	cbnz	r5, 8008480 <__strtok_r+0x34>
 8008466:	6015      	str	r5, [r2, #0]
 8008468:	2000      	movs	r0, #0
 800846a:	e005      	b.n	8008478 <__strtok_r+0x2c>
 800846c:	42b5      	cmp	r5, r6
 800846e:	d1f6      	bne.n	800845e <__strtok_r+0x12>
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1f0      	bne.n	8008456 <__strtok_r+0xa>
 8008474:	6014      	str	r4, [r2, #0]
 8008476:	7003      	strb	r3, [r0, #0]
 8008478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800847a:	461c      	mov	r4, r3
 800847c:	e00c      	b.n	8008498 <__strtok_r+0x4c>
 800847e:	b915      	cbnz	r5, 8008486 <__strtok_r+0x3a>
 8008480:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008484:	460e      	mov	r6, r1
 8008486:	f816 5b01 	ldrb.w	r5, [r6], #1
 800848a:	42ab      	cmp	r3, r5
 800848c:	d1f7      	bne.n	800847e <__strtok_r+0x32>
 800848e:	2b00      	cmp	r3, #0
 8008490:	d0f3      	beq.n	800847a <__strtok_r+0x2e>
 8008492:	2300      	movs	r3, #0
 8008494:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008498:	6014      	str	r4, [r2, #0]
 800849a:	e7ed      	b.n	8008478 <__strtok_r+0x2c>

0800849c <memset>:
 800849c:	4402      	add	r2, r0
 800849e:	4603      	mov	r3, r0
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d100      	bne.n	80084a6 <memset+0xa>
 80084a4:	4770      	bx	lr
 80084a6:	f803 1b01 	strb.w	r1, [r3], #1
 80084aa:	e7f9      	b.n	80084a0 <memset+0x4>

080084ac <__errno>:
 80084ac:	4b01      	ldr	r3, [pc, #4]	@ (80084b4 <__errno+0x8>)
 80084ae:	6818      	ldr	r0, [r3, #0]
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	200000d4 	.word	0x200000d4

080084b8 <__libc_init_array>:
 80084b8:	b570      	push	{r4, r5, r6, lr}
 80084ba:	4d0d      	ldr	r5, [pc, #52]	@ (80084f0 <__libc_init_array+0x38>)
 80084bc:	4c0d      	ldr	r4, [pc, #52]	@ (80084f4 <__libc_init_array+0x3c>)
 80084be:	1b64      	subs	r4, r4, r5
 80084c0:	10a4      	asrs	r4, r4, #2
 80084c2:	2600      	movs	r6, #0
 80084c4:	42a6      	cmp	r6, r4
 80084c6:	d109      	bne.n	80084dc <__libc_init_array+0x24>
 80084c8:	4d0b      	ldr	r5, [pc, #44]	@ (80084f8 <__libc_init_array+0x40>)
 80084ca:	4c0c      	ldr	r4, [pc, #48]	@ (80084fc <__libc_init_array+0x44>)
 80084cc:	f001 f87c 	bl	80095c8 <_init>
 80084d0:	1b64      	subs	r4, r4, r5
 80084d2:	10a4      	asrs	r4, r4, #2
 80084d4:	2600      	movs	r6, #0
 80084d6:	42a6      	cmp	r6, r4
 80084d8:	d105      	bne.n	80084e6 <__libc_init_array+0x2e>
 80084da:	bd70      	pop	{r4, r5, r6, pc}
 80084dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80084e0:	4798      	blx	r3
 80084e2:	3601      	adds	r6, #1
 80084e4:	e7ee      	b.n	80084c4 <__libc_init_array+0xc>
 80084e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ea:	4798      	blx	r3
 80084ec:	3601      	adds	r6, #1
 80084ee:	e7f2      	b.n	80084d6 <__libc_init_array+0x1e>
 80084f0:	0800974c 	.word	0x0800974c
 80084f4:	0800974c 	.word	0x0800974c
 80084f8:	0800974c 	.word	0x0800974c
 80084fc:	08009750 	.word	0x08009750

08008500 <__retarget_lock_init_recursive>:
 8008500:	4770      	bx	lr

08008502 <__retarget_lock_acquire_recursive>:
 8008502:	4770      	bx	lr

08008504 <__retarget_lock_release_recursive>:
 8008504:	4770      	bx	lr
	...

08008508 <__assert_func>:
 8008508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800850a:	4614      	mov	r4, r2
 800850c:	461a      	mov	r2, r3
 800850e:	4b09      	ldr	r3, [pc, #36]	@ (8008534 <__assert_func+0x2c>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4605      	mov	r5, r0
 8008514:	68d8      	ldr	r0, [r3, #12]
 8008516:	b954      	cbnz	r4, 800852e <__assert_func+0x26>
 8008518:	4b07      	ldr	r3, [pc, #28]	@ (8008538 <__assert_func+0x30>)
 800851a:	461c      	mov	r4, r3
 800851c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008520:	9100      	str	r1, [sp, #0]
 8008522:	462b      	mov	r3, r5
 8008524:	4905      	ldr	r1, [pc, #20]	@ (800853c <__assert_func+0x34>)
 8008526:	f000 fc99 	bl	8008e5c <fiprintf>
 800852a:	f000 fd55 	bl	8008fd8 <abort>
 800852e:	4b04      	ldr	r3, [pc, #16]	@ (8008540 <__assert_func+0x38>)
 8008530:	e7f4      	b.n	800851c <__assert_func+0x14>
 8008532:	bf00      	nop
 8008534:	200000d4 	.word	0x200000d4
 8008538:	08009710 	.word	0x08009710
 800853c:	080096e2 	.word	0x080096e2
 8008540:	080096d5 	.word	0x080096d5

08008544 <__ssputs_r>:
 8008544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008548:	688e      	ldr	r6, [r1, #8]
 800854a:	461f      	mov	r7, r3
 800854c:	42be      	cmp	r6, r7
 800854e:	680b      	ldr	r3, [r1, #0]
 8008550:	4682      	mov	sl, r0
 8008552:	460c      	mov	r4, r1
 8008554:	4690      	mov	r8, r2
 8008556:	d82d      	bhi.n	80085b4 <__ssputs_r+0x70>
 8008558:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800855c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008560:	d026      	beq.n	80085b0 <__ssputs_r+0x6c>
 8008562:	6965      	ldr	r5, [r4, #20]
 8008564:	6909      	ldr	r1, [r1, #16]
 8008566:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800856a:	eba3 0901 	sub.w	r9, r3, r1
 800856e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008572:	1c7b      	adds	r3, r7, #1
 8008574:	444b      	add	r3, r9
 8008576:	106d      	asrs	r5, r5, #1
 8008578:	429d      	cmp	r5, r3
 800857a:	bf38      	it	cc
 800857c:	461d      	movcc	r5, r3
 800857e:	0553      	lsls	r3, r2, #21
 8008580:	d527      	bpl.n	80085d2 <__ssputs_r+0x8e>
 8008582:	4629      	mov	r1, r5
 8008584:	f000 f960 	bl	8008848 <_malloc_r>
 8008588:	4606      	mov	r6, r0
 800858a:	b360      	cbz	r0, 80085e6 <__ssputs_r+0xa2>
 800858c:	6921      	ldr	r1, [r4, #16]
 800858e:	464a      	mov	r2, r9
 8008590:	f000 fd14 	bl	8008fbc <memcpy>
 8008594:	89a3      	ldrh	r3, [r4, #12]
 8008596:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800859a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800859e:	81a3      	strh	r3, [r4, #12]
 80085a0:	6126      	str	r6, [r4, #16]
 80085a2:	6165      	str	r5, [r4, #20]
 80085a4:	444e      	add	r6, r9
 80085a6:	eba5 0509 	sub.w	r5, r5, r9
 80085aa:	6026      	str	r6, [r4, #0]
 80085ac:	60a5      	str	r5, [r4, #8]
 80085ae:	463e      	mov	r6, r7
 80085b0:	42be      	cmp	r6, r7
 80085b2:	d900      	bls.n	80085b6 <__ssputs_r+0x72>
 80085b4:	463e      	mov	r6, r7
 80085b6:	6820      	ldr	r0, [r4, #0]
 80085b8:	4632      	mov	r2, r6
 80085ba:	4641      	mov	r1, r8
 80085bc:	f000 fc8e 	bl	8008edc <memmove>
 80085c0:	68a3      	ldr	r3, [r4, #8]
 80085c2:	1b9b      	subs	r3, r3, r6
 80085c4:	60a3      	str	r3, [r4, #8]
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	4433      	add	r3, r6
 80085ca:	6023      	str	r3, [r4, #0]
 80085cc:	2000      	movs	r0, #0
 80085ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d2:	462a      	mov	r2, r5
 80085d4:	f000 fc54 	bl	8008e80 <_realloc_r>
 80085d8:	4606      	mov	r6, r0
 80085da:	2800      	cmp	r0, #0
 80085dc:	d1e0      	bne.n	80085a0 <__ssputs_r+0x5c>
 80085de:	6921      	ldr	r1, [r4, #16]
 80085e0:	4650      	mov	r0, sl
 80085e2:	f000 fd01 	bl	8008fe8 <_free_r>
 80085e6:	230c      	movs	r3, #12
 80085e8:	f8ca 3000 	str.w	r3, [sl]
 80085ec:	89a3      	ldrh	r3, [r4, #12]
 80085ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085f2:	81a3      	strh	r3, [r4, #12]
 80085f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80085f8:	e7e9      	b.n	80085ce <__ssputs_r+0x8a>
	...

080085fc <_svfiprintf_r>:
 80085fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008600:	4698      	mov	r8, r3
 8008602:	898b      	ldrh	r3, [r1, #12]
 8008604:	061b      	lsls	r3, r3, #24
 8008606:	b09d      	sub	sp, #116	@ 0x74
 8008608:	4607      	mov	r7, r0
 800860a:	460d      	mov	r5, r1
 800860c:	4614      	mov	r4, r2
 800860e:	d510      	bpl.n	8008632 <_svfiprintf_r+0x36>
 8008610:	690b      	ldr	r3, [r1, #16]
 8008612:	b973      	cbnz	r3, 8008632 <_svfiprintf_r+0x36>
 8008614:	2140      	movs	r1, #64	@ 0x40
 8008616:	f000 f917 	bl	8008848 <_malloc_r>
 800861a:	6028      	str	r0, [r5, #0]
 800861c:	6128      	str	r0, [r5, #16]
 800861e:	b930      	cbnz	r0, 800862e <_svfiprintf_r+0x32>
 8008620:	230c      	movs	r3, #12
 8008622:	603b      	str	r3, [r7, #0]
 8008624:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008628:	b01d      	add	sp, #116	@ 0x74
 800862a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800862e:	2340      	movs	r3, #64	@ 0x40
 8008630:	616b      	str	r3, [r5, #20]
 8008632:	2300      	movs	r3, #0
 8008634:	9309      	str	r3, [sp, #36]	@ 0x24
 8008636:	2320      	movs	r3, #32
 8008638:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800863c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008640:	2330      	movs	r3, #48	@ 0x30
 8008642:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80087e0 <_svfiprintf_r+0x1e4>
 8008646:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800864a:	f04f 0901 	mov.w	r9, #1
 800864e:	4623      	mov	r3, r4
 8008650:	469a      	mov	sl, r3
 8008652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008656:	b10a      	cbz	r2, 800865c <_svfiprintf_r+0x60>
 8008658:	2a25      	cmp	r2, #37	@ 0x25
 800865a:	d1f9      	bne.n	8008650 <_svfiprintf_r+0x54>
 800865c:	ebba 0b04 	subs.w	fp, sl, r4
 8008660:	d00b      	beq.n	800867a <_svfiprintf_r+0x7e>
 8008662:	465b      	mov	r3, fp
 8008664:	4622      	mov	r2, r4
 8008666:	4629      	mov	r1, r5
 8008668:	4638      	mov	r0, r7
 800866a:	f7ff ff6b 	bl	8008544 <__ssputs_r>
 800866e:	3001      	adds	r0, #1
 8008670:	f000 80a7 	beq.w	80087c2 <_svfiprintf_r+0x1c6>
 8008674:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008676:	445a      	add	r2, fp
 8008678:	9209      	str	r2, [sp, #36]	@ 0x24
 800867a:	f89a 3000 	ldrb.w	r3, [sl]
 800867e:	2b00      	cmp	r3, #0
 8008680:	f000 809f 	beq.w	80087c2 <_svfiprintf_r+0x1c6>
 8008684:	2300      	movs	r3, #0
 8008686:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800868a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800868e:	f10a 0a01 	add.w	sl, sl, #1
 8008692:	9304      	str	r3, [sp, #16]
 8008694:	9307      	str	r3, [sp, #28]
 8008696:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800869a:	931a      	str	r3, [sp, #104]	@ 0x68
 800869c:	4654      	mov	r4, sl
 800869e:	2205      	movs	r2, #5
 80086a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086a4:	484e      	ldr	r0, [pc, #312]	@ (80087e0 <_svfiprintf_r+0x1e4>)
 80086a6:	f7f7 fdd3 	bl	8000250 <memchr>
 80086aa:	9a04      	ldr	r2, [sp, #16]
 80086ac:	b9d8      	cbnz	r0, 80086e6 <_svfiprintf_r+0xea>
 80086ae:	06d0      	lsls	r0, r2, #27
 80086b0:	bf44      	itt	mi
 80086b2:	2320      	movmi	r3, #32
 80086b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086b8:	0711      	lsls	r1, r2, #28
 80086ba:	bf44      	itt	mi
 80086bc:	232b      	movmi	r3, #43	@ 0x2b
 80086be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086c2:	f89a 3000 	ldrb.w	r3, [sl]
 80086c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80086c8:	d015      	beq.n	80086f6 <_svfiprintf_r+0xfa>
 80086ca:	9a07      	ldr	r2, [sp, #28]
 80086cc:	4654      	mov	r4, sl
 80086ce:	2000      	movs	r0, #0
 80086d0:	f04f 0c0a 	mov.w	ip, #10
 80086d4:	4621      	mov	r1, r4
 80086d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086da:	3b30      	subs	r3, #48	@ 0x30
 80086dc:	2b09      	cmp	r3, #9
 80086de:	d94b      	bls.n	8008778 <_svfiprintf_r+0x17c>
 80086e0:	b1b0      	cbz	r0, 8008710 <_svfiprintf_r+0x114>
 80086e2:	9207      	str	r2, [sp, #28]
 80086e4:	e014      	b.n	8008710 <_svfiprintf_r+0x114>
 80086e6:	eba0 0308 	sub.w	r3, r0, r8
 80086ea:	fa09 f303 	lsl.w	r3, r9, r3
 80086ee:	4313      	orrs	r3, r2
 80086f0:	9304      	str	r3, [sp, #16]
 80086f2:	46a2      	mov	sl, r4
 80086f4:	e7d2      	b.n	800869c <_svfiprintf_r+0xa0>
 80086f6:	9b03      	ldr	r3, [sp, #12]
 80086f8:	1d19      	adds	r1, r3, #4
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	9103      	str	r1, [sp, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	bfbb      	ittet	lt
 8008702:	425b      	neglt	r3, r3
 8008704:	f042 0202 	orrlt.w	r2, r2, #2
 8008708:	9307      	strge	r3, [sp, #28]
 800870a:	9307      	strlt	r3, [sp, #28]
 800870c:	bfb8      	it	lt
 800870e:	9204      	strlt	r2, [sp, #16]
 8008710:	7823      	ldrb	r3, [r4, #0]
 8008712:	2b2e      	cmp	r3, #46	@ 0x2e
 8008714:	d10a      	bne.n	800872c <_svfiprintf_r+0x130>
 8008716:	7863      	ldrb	r3, [r4, #1]
 8008718:	2b2a      	cmp	r3, #42	@ 0x2a
 800871a:	d132      	bne.n	8008782 <_svfiprintf_r+0x186>
 800871c:	9b03      	ldr	r3, [sp, #12]
 800871e:	1d1a      	adds	r2, r3, #4
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	9203      	str	r2, [sp, #12]
 8008724:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008728:	3402      	adds	r4, #2
 800872a:	9305      	str	r3, [sp, #20]
 800872c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80087f0 <_svfiprintf_r+0x1f4>
 8008730:	7821      	ldrb	r1, [r4, #0]
 8008732:	2203      	movs	r2, #3
 8008734:	4650      	mov	r0, sl
 8008736:	f7f7 fd8b 	bl	8000250 <memchr>
 800873a:	b138      	cbz	r0, 800874c <_svfiprintf_r+0x150>
 800873c:	9b04      	ldr	r3, [sp, #16]
 800873e:	eba0 000a 	sub.w	r0, r0, sl
 8008742:	2240      	movs	r2, #64	@ 0x40
 8008744:	4082      	lsls	r2, r0
 8008746:	4313      	orrs	r3, r2
 8008748:	3401      	adds	r4, #1
 800874a:	9304      	str	r3, [sp, #16]
 800874c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008750:	4824      	ldr	r0, [pc, #144]	@ (80087e4 <_svfiprintf_r+0x1e8>)
 8008752:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008756:	2206      	movs	r2, #6
 8008758:	f7f7 fd7a 	bl	8000250 <memchr>
 800875c:	2800      	cmp	r0, #0
 800875e:	d036      	beq.n	80087ce <_svfiprintf_r+0x1d2>
 8008760:	4b21      	ldr	r3, [pc, #132]	@ (80087e8 <_svfiprintf_r+0x1ec>)
 8008762:	bb1b      	cbnz	r3, 80087ac <_svfiprintf_r+0x1b0>
 8008764:	9b03      	ldr	r3, [sp, #12]
 8008766:	3307      	adds	r3, #7
 8008768:	f023 0307 	bic.w	r3, r3, #7
 800876c:	3308      	adds	r3, #8
 800876e:	9303      	str	r3, [sp, #12]
 8008770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008772:	4433      	add	r3, r6
 8008774:	9309      	str	r3, [sp, #36]	@ 0x24
 8008776:	e76a      	b.n	800864e <_svfiprintf_r+0x52>
 8008778:	fb0c 3202 	mla	r2, ip, r2, r3
 800877c:	460c      	mov	r4, r1
 800877e:	2001      	movs	r0, #1
 8008780:	e7a8      	b.n	80086d4 <_svfiprintf_r+0xd8>
 8008782:	2300      	movs	r3, #0
 8008784:	3401      	adds	r4, #1
 8008786:	9305      	str	r3, [sp, #20]
 8008788:	4619      	mov	r1, r3
 800878a:	f04f 0c0a 	mov.w	ip, #10
 800878e:	4620      	mov	r0, r4
 8008790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008794:	3a30      	subs	r2, #48	@ 0x30
 8008796:	2a09      	cmp	r2, #9
 8008798:	d903      	bls.n	80087a2 <_svfiprintf_r+0x1a6>
 800879a:	2b00      	cmp	r3, #0
 800879c:	d0c6      	beq.n	800872c <_svfiprintf_r+0x130>
 800879e:	9105      	str	r1, [sp, #20]
 80087a0:	e7c4      	b.n	800872c <_svfiprintf_r+0x130>
 80087a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80087a6:	4604      	mov	r4, r0
 80087a8:	2301      	movs	r3, #1
 80087aa:	e7f0      	b.n	800878e <_svfiprintf_r+0x192>
 80087ac:	ab03      	add	r3, sp, #12
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	462a      	mov	r2, r5
 80087b2:	4b0e      	ldr	r3, [pc, #56]	@ (80087ec <_svfiprintf_r+0x1f0>)
 80087b4:	a904      	add	r1, sp, #16
 80087b6:	4638      	mov	r0, r7
 80087b8:	f3af 8000 	nop.w
 80087bc:	1c42      	adds	r2, r0, #1
 80087be:	4606      	mov	r6, r0
 80087c0:	d1d6      	bne.n	8008770 <_svfiprintf_r+0x174>
 80087c2:	89ab      	ldrh	r3, [r5, #12]
 80087c4:	065b      	lsls	r3, r3, #25
 80087c6:	f53f af2d 	bmi.w	8008624 <_svfiprintf_r+0x28>
 80087ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087cc:	e72c      	b.n	8008628 <_svfiprintf_r+0x2c>
 80087ce:	ab03      	add	r3, sp, #12
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	462a      	mov	r2, r5
 80087d4:	4b05      	ldr	r3, [pc, #20]	@ (80087ec <_svfiprintf_r+0x1f0>)
 80087d6:	a904      	add	r1, sp, #16
 80087d8:	4638      	mov	r0, r7
 80087da:	f000 f923 	bl	8008a24 <_printf_i>
 80087de:	e7ed      	b.n	80087bc <_svfiprintf_r+0x1c0>
 80087e0:	08009711 	.word	0x08009711
 80087e4:	0800971b 	.word	0x0800971b
 80087e8:	00000000 	.word	0x00000000
 80087ec:	08008545 	.word	0x08008545
 80087f0:	08009717 	.word	0x08009717

080087f4 <malloc>:
 80087f4:	4b02      	ldr	r3, [pc, #8]	@ (8008800 <malloc+0xc>)
 80087f6:	4601      	mov	r1, r0
 80087f8:	6818      	ldr	r0, [r3, #0]
 80087fa:	f000 b825 	b.w	8008848 <_malloc_r>
 80087fe:	bf00      	nop
 8008800:	200000d4 	.word	0x200000d4

08008804 <sbrk_aligned>:
 8008804:	b570      	push	{r4, r5, r6, lr}
 8008806:	4e0f      	ldr	r6, [pc, #60]	@ (8008844 <sbrk_aligned+0x40>)
 8008808:	460c      	mov	r4, r1
 800880a:	6831      	ldr	r1, [r6, #0]
 800880c:	4605      	mov	r5, r0
 800880e:	b911      	cbnz	r1, 8008816 <sbrk_aligned+0x12>
 8008810:	f000 fbb2 	bl	8008f78 <_sbrk_r>
 8008814:	6030      	str	r0, [r6, #0]
 8008816:	4621      	mov	r1, r4
 8008818:	4628      	mov	r0, r5
 800881a:	f000 fbad 	bl	8008f78 <_sbrk_r>
 800881e:	1c43      	adds	r3, r0, #1
 8008820:	d103      	bne.n	800882a <sbrk_aligned+0x26>
 8008822:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008826:	4620      	mov	r0, r4
 8008828:	bd70      	pop	{r4, r5, r6, pc}
 800882a:	1cc4      	adds	r4, r0, #3
 800882c:	f024 0403 	bic.w	r4, r4, #3
 8008830:	42a0      	cmp	r0, r4
 8008832:	d0f8      	beq.n	8008826 <sbrk_aligned+0x22>
 8008834:	1a21      	subs	r1, r4, r0
 8008836:	4628      	mov	r0, r5
 8008838:	f000 fb9e 	bl	8008f78 <_sbrk_r>
 800883c:	3001      	adds	r0, #1
 800883e:	d1f2      	bne.n	8008826 <sbrk_aligned+0x22>
 8008840:	e7ef      	b.n	8008822 <sbrk_aligned+0x1e>
 8008842:	bf00      	nop
 8008844:	2000062c 	.word	0x2000062c

08008848 <_malloc_r>:
 8008848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800884c:	1ccd      	adds	r5, r1, #3
 800884e:	f025 0503 	bic.w	r5, r5, #3
 8008852:	3508      	adds	r5, #8
 8008854:	2d0c      	cmp	r5, #12
 8008856:	bf38      	it	cc
 8008858:	250c      	movcc	r5, #12
 800885a:	2d00      	cmp	r5, #0
 800885c:	4606      	mov	r6, r0
 800885e:	db01      	blt.n	8008864 <_malloc_r+0x1c>
 8008860:	42a9      	cmp	r1, r5
 8008862:	d904      	bls.n	800886e <_malloc_r+0x26>
 8008864:	230c      	movs	r3, #12
 8008866:	6033      	str	r3, [r6, #0]
 8008868:	2000      	movs	r0, #0
 800886a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800886e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008944 <_malloc_r+0xfc>
 8008872:	f000 faa3 	bl	8008dbc <__malloc_lock>
 8008876:	f8d8 3000 	ldr.w	r3, [r8]
 800887a:	461c      	mov	r4, r3
 800887c:	bb44      	cbnz	r4, 80088d0 <_malloc_r+0x88>
 800887e:	4629      	mov	r1, r5
 8008880:	4630      	mov	r0, r6
 8008882:	f7ff ffbf 	bl	8008804 <sbrk_aligned>
 8008886:	1c43      	adds	r3, r0, #1
 8008888:	4604      	mov	r4, r0
 800888a:	d158      	bne.n	800893e <_malloc_r+0xf6>
 800888c:	f8d8 4000 	ldr.w	r4, [r8]
 8008890:	4627      	mov	r7, r4
 8008892:	2f00      	cmp	r7, #0
 8008894:	d143      	bne.n	800891e <_malloc_r+0xd6>
 8008896:	2c00      	cmp	r4, #0
 8008898:	d04b      	beq.n	8008932 <_malloc_r+0xea>
 800889a:	6823      	ldr	r3, [r4, #0]
 800889c:	4639      	mov	r1, r7
 800889e:	4630      	mov	r0, r6
 80088a0:	eb04 0903 	add.w	r9, r4, r3
 80088a4:	f000 fb68 	bl	8008f78 <_sbrk_r>
 80088a8:	4581      	cmp	r9, r0
 80088aa:	d142      	bne.n	8008932 <_malloc_r+0xea>
 80088ac:	6821      	ldr	r1, [r4, #0]
 80088ae:	1a6d      	subs	r5, r5, r1
 80088b0:	4629      	mov	r1, r5
 80088b2:	4630      	mov	r0, r6
 80088b4:	f7ff ffa6 	bl	8008804 <sbrk_aligned>
 80088b8:	3001      	adds	r0, #1
 80088ba:	d03a      	beq.n	8008932 <_malloc_r+0xea>
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	442b      	add	r3, r5
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	f8d8 3000 	ldr.w	r3, [r8]
 80088c6:	685a      	ldr	r2, [r3, #4]
 80088c8:	bb62      	cbnz	r2, 8008924 <_malloc_r+0xdc>
 80088ca:	f8c8 7000 	str.w	r7, [r8]
 80088ce:	e00f      	b.n	80088f0 <_malloc_r+0xa8>
 80088d0:	6822      	ldr	r2, [r4, #0]
 80088d2:	1b52      	subs	r2, r2, r5
 80088d4:	d420      	bmi.n	8008918 <_malloc_r+0xd0>
 80088d6:	2a0b      	cmp	r2, #11
 80088d8:	d917      	bls.n	800890a <_malloc_r+0xc2>
 80088da:	1961      	adds	r1, r4, r5
 80088dc:	42a3      	cmp	r3, r4
 80088de:	6025      	str	r5, [r4, #0]
 80088e0:	bf18      	it	ne
 80088e2:	6059      	strne	r1, [r3, #4]
 80088e4:	6863      	ldr	r3, [r4, #4]
 80088e6:	bf08      	it	eq
 80088e8:	f8c8 1000 	streq.w	r1, [r8]
 80088ec:	5162      	str	r2, [r4, r5]
 80088ee:	604b      	str	r3, [r1, #4]
 80088f0:	4630      	mov	r0, r6
 80088f2:	f000 fa69 	bl	8008dc8 <__malloc_unlock>
 80088f6:	f104 000b 	add.w	r0, r4, #11
 80088fa:	1d23      	adds	r3, r4, #4
 80088fc:	f020 0007 	bic.w	r0, r0, #7
 8008900:	1ac2      	subs	r2, r0, r3
 8008902:	bf1c      	itt	ne
 8008904:	1a1b      	subne	r3, r3, r0
 8008906:	50a3      	strne	r3, [r4, r2]
 8008908:	e7af      	b.n	800886a <_malloc_r+0x22>
 800890a:	6862      	ldr	r2, [r4, #4]
 800890c:	42a3      	cmp	r3, r4
 800890e:	bf0c      	ite	eq
 8008910:	f8c8 2000 	streq.w	r2, [r8]
 8008914:	605a      	strne	r2, [r3, #4]
 8008916:	e7eb      	b.n	80088f0 <_malloc_r+0xa8>
 8008918:	4623      	mov	r3, r4
 800891a:	6864      	ldr	r4, [r4, #4]
 800891c:	e7ae      	b.n	800887c <_malloc_r+0x34>
 800891e:	463c      	mov	r4, r7
 8008920:	687f      	ldr	r7, [r7, #4]
 8008922:	e7b6      	b.n	8008892 <_malloc_r+0x4a>
 8008924:	461a      	mov	r2, r3
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	42a3      	cmp	r3, r4
 800892a:	d1fb      	bne.n	8008924 <_malloc_r+0xdc>
 800892c:	2300      	movs	r3, #0
 800892e:	6053      	str	r3, [r2, #4]
 8008930:	e7de      	b.n	80088f0 <_malloc_r+0xa8>
 8008932:	230c      	movs	r3, #12
 8008934:	6033      	str	r3, [r6, #0]
 8008936:	4630      	mov	r0, r6
 8008938:	f000 fa46 	bl	8008dc8 <__malloc_unlock>
 800893c:	e794      	b.n	8008868 <_malloc_r+0x20>
 800893e:	6005      	str	r5, [r0, #0]
 8008940:	e7d6      	b.n	80088f0 <_malloc_r+0xa8>
 8008942:	bf00      	nop
 8008944:	20000630 	.word	0x20000630

08008948 <_printf_common>:
 8008948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800894c:	4616      	mov	r6, r2
 800894e:	4698      	mov	r8, r3
 8008950:	688a      	ldr	r2, [r1, #8]
 8008952:	690b      	ldr	r3, [r1, #16]
 8008954:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008958:	4293      	cmp	r3, r2
 800895a:	bfb8      	it	lt
 800895c:	4613      	movlt	r3, r2
 800895e:	6033      	str	r3, [r6, #0]
 8008960:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008964:	4607      	mov	r7, r0
 8008966:	460c      	mov	r4, r1
 8008968:	b10a      	cbz	r2, 800896e <_printf_common+0x26>
 800896a:	3301      	adds	r3, #1
 800896c:	6033      	str	r3, [r6, #0]
 800896e:	6823      	ldr	r3, [r4, #0]
 8008970:	0699      	lsls	r1, r3, #26
 8008972:	bf42      	ittt	mi
 8008974:	6833      	ldrmi	r3, [r6, #0]
 8008976:	3302      	addmi	r3, #2
 8008978:	6033      	strmi	r3, [r6, #0]
 800897a:	6825      	ldr	r5, [r4, #0]
 800897c:	f015 0506 	ands.w	r5, r5, #6
 8008980:	d106      	bne.n	8008990 <_printf_common+0x48>
 8008982:	f104 0a19 	add.w	sl, r4, #25
 8008986:	68e3      	ldr	r3, [r4, #12]
 8008988:	6832      	ldr	r2, [r6, #0]
 800898a:	1a9b      	subs	r3, r3, r2
 800898c:	42ab      	cmp	r3, r5
 800898e:	dc26      	bgt.n	80089de <_printf_common+0x96>
 8008990:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008994:	6822      	ldr	r2, [r4, #0]
 8008996:	3b00      	subs	r3, #0
 8008998:	bf18      	it	ne
 800899a:	2301      	movne	r3, #1
 800899c:	0692      	lsls	r2, r2, #26
 800899e:	d42b      	bmi.n	80089f8 <_printf_common+0xb0>
 80089a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80089a4:	4641      	mov	r1, r8
 80089a6:	4638      	mov	r0, r7
 80089a8:	47c8      	blx	r9
 80089aa:	3001      	adds	r0, #1
 80089ac:	d01e      	beq.n	80089ec <_printf_common+0xa4>
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	6922      	ldr	r2, [r4, #16]
 80089b2:	f003 0306 	and.w	r3, r3, #6
 80089b6:	2b04      	cmp	r3, #4
 80089b8:	bf02      	ittt	eq
 80089ba:	68e5      	ldreq	r5, [r4, #12]
 80089bc:	6833      	ldreq	r3, [r6, #0]
 80089be:	1aed      	subeq	r5, r5, r3
 80089c0:	68a3      	ldr	r3, [r4, #8]
 80089c2:	bf0c      	ite	eq
 80089c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089c8:	2500      	movne	r5, #0
 80089ca:	4293      	cmp	r3, r2
 80089cc:	bfc4      	itt	gt
 80089ce:	1a9b      	subgt	r3, r3, r2
 80089d0:	18ed      	addgt	r5, r5, r3
 80089d2:	2600      	movs	r6, #0
 80089d4:	341a      	adds	r4, #26
 80089d6:	42b5      	cmp	r5, r6
 80089d8:	d11a      	bne.n	8008a10 <_printf_common+0xc8>
 80089da:	2000      	movs	r0, #0
 80089dc:	e008      	b.n	80089f0 <_printf_common+0xa8>
 80089de:	2301      	movs	r3, #1
 80089e0:	4652      	mov	r2, sl
 80089e2:	4641      	mov	r1, r8
 80089e4:	4638      	mov	r0, r7
 80089e6:	47c8      	blx	r9
 80089e8:	3001      	adds	r0, #1
 80089ea:	d103      	bne.n	80089f4 <_printf_common+0xac>
 80089ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f4:	3501      	adds	r5, #1
 80089f6:	e7c6      	b.n	8008986 <_printf_common+0x3e>
 80089f8:	18e1      	adds	r1, r4, r3
 80089fa:	1c5a      	adds	r2, r3, #1
 80089fc:	2030      	movs	r0, #48	@ 0x30
 80089fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a02:	4422      	add	r2, r4
 8008a04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a0c:	3302      	adds	r3, #2
 8008a0e:	e7c7      	b.n	80089a0 <_printf_common+0x58>
 8008a10:	2301      	movs	r3, #1
 8008a12:	4622      	mov	r2, r4
 8008a14:	4641      	mov	r1, r8
 8008a16:	4638      	mov	r0, r7
 8008a18:	47c8      	blx	r9
 8008a1a:	3001      	adds	r0, #1
 8008a1c:	d0e6      	beq.n	80089ec <_printf_common+0xa4>
 8008a1e:	3601      	adds	r6, #1
 8008a20:	e7d9      	b.n	80089d6 <_printf_common+0x8e>
	...

08008a24 <_printf_i>:
 8008a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a28:	7e0f      	ldrb	r7, [r1, #24]
 8008a2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a2c:	2f78      	cmp	r7, #120	@ 0x78
 8008a2e:	4691      	mov	r9, r2
 8008a30:	4680      	mov	r8, r0
 8008a32:	460c      	mov	r4, r1
 8008a34:	469a      	mov	sl, r3
 8008a36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a3a:	d807      	bhi.n	8008a4c <_printf_i+0x28>
 8008a3c:	2f62      	cmp	r7, #98	@ 0x62
 8008a3e:	d80a      	bhi.n	8008a56 <_printf_i+0x32>
 8008a40:	2f00      	cmp	r7, #0
 8008a42:	f000 80d2 	beq.w	8008bea <_printf_i+0x1c6>
 8008a46:	2f58      	cmp	r7, #88	@ 0x58
 8008a48:	f000 80b9 	beq.w	8008bbe <_printf_i+0x19a>
 8008a4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a54:	e03a      	b.n	8008acc <_printf_i+0xa8>
 8008a56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a5a:	2b15      	cmp	r3, #21
 8008a5c:	d8f6      	bhi.n	8008a4c <_printf_i+0x28>
 8008a5e:	a101      	add	r1, pc, #4	@ (adr r1, 8008a64 <_printf_i+0x40>)
 8008a60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a64:	08008abd 	.word	0x08008abd
 8008a68:	08008ad1 	.word	0x08008ad1
 8008a6c:	08008a4d 	.word	0x08008a4d
 8008a70:	08008a4d 	.word	0x08008a4d
 8008a74:	08008a4d 	.word	0x08008a4d
 8008a78:	08008a4d 	.word	0x08008a4d
 8008a7c:	08008ad1 	.word	0x08008ad1
 8008a80:	08008a4d 	.word	0x08008a4d
 8008a84:	08008a4d 	.word	0x08008a4d
 8008a88:	08008a4d 	.word	0x08008a4d
 8008a8c:	08008a4d 	.word	0x08008a4d
 8008a90:	08008bd1 	.word	0x08008bd1
 8008a94:	08008afb 	.word	0x08008afb
 8008a98:	08008b8b 	.word	0x08008b8b
 8008a9c:	08008a4d 	.word	0x08008a4d
 8008aa0:	08008a4d 	.word	0x08008a4d
 8008aa4:	08008bf3 	.word	0x08008bf3
 8008aa8:	08008a4d 	.word	0x08008a4d
 8008aac:	08008afb 	.word	0x08008afb
 8008ab0:	08008a4d 	.word	0x08008a4d
 8008ab4:	08008a4d 	.word	0x08008a4d
 8008ab8:	08008b93 	.word	0x08008b93
 8008abc:	6833      	ldr	r3, [r6, #0]
 8008abe:	1d1a      	adds	r2, r3, #4
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6032      	str	r2, [r6, #0]
 8008ac4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ac8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008acc:	2301      	movs	r3, #1
 8008ace:	e09d      	b.n	8008c0c <_printf_i+0x1e8>
 8008ad0:	6833      	ldr	r3, [r6, #0]
 8008ad2:	6820      	ldr	r0, [r4, #0]
 8008ad4:	1d19      	adds	r1, r3, #4
 8008ad6:	6031      	str	r1, [r6, #0]
 8008ad8:	0606      	lsls	r6, r0, #24
 8008ada:	d501      	bpl.n	8008ae0 <_printf_i+0xbc>
 8008adc:	681d      	ldr	r5, [r3, #0]
 8008ade:	e003      	b.n	8008ae8 <_printf_i+0xc4>
 8008ae0:	0645      	lsls	r5, r0, #25
 8008ae2:	d5fb      	bpl.n	8008adc <_printf_i+0xb8>
 8008ae4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ae8:	2d00      	cmp	r5, #0
 8008aea:	da03      	bge.n	8008af4 <_printf_i+0xd0>
 8008aec:	232d      	movs	r3, #45	@ 0x2d
 8008aee:	426d      	negs	r5, r5
 8008af0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008af4:	4859      	ldr	r0, [pc, #356]	@ (8008c5c <_printf_i+0x238>)
 8008af6:	230a      	movs	r3, #10
 8008af8:	e011      	b.n	8008b1e <_printf_i+0xfa>
 8008afa:	6821      	ldr	r1, [r4, #0]
 8008afc:	6833      	ldr	r3, [r6, #0]
 8008afe:	0608      	lsls	r0, r1, #24
 8008b00:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b04:	d402      	bmi.n	8008b0c <_printf_i+0xe8>
 8008b06:	0649      	lsls	r1, r1, #25
 8008b08:	bf48      	it	mi
 8008b0a:	b2ad      	uxthmi	r5, r5
 8008b0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b0e:	4853      	ldr	r0, [pc, #332]	@ (8008c5c <_printf_i+0x238>)
 8008b10:	6033      	str	r3, [r6, #0]
 8008b12:	bf14      	ite	ne
 8008b14:	230a      	movne	r3, #10
 8008b16:	2308      	moveq	r3, #8
 8008b18:	2100      	movs	r1, #0
 8008b1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b1e:	6866      	ldr	r6, [r4, #4]
 8008b20:	60a6      	str	r6, [r4, #8]
 8008b22:	2e00      	cmp	r6, #0
 8008b24:	bfa2      	ittt	ge
 8008b26:	6821      	ldrge	r1, [r4, #0]
 8008b28:	f021 0104 	bicge.w	r1, r1, #4
 8008b2c:	6021      	strge	r1, [r4, #0]
 8008b2e:	b90d      	cbnz	r5, 8008b34 <_printf_i+0x110>
 8008b30:	2e00      	cmp	r6, #0
 8008b32:	d04b      	beq.n	8008bcc <_printf_i+0x1a8>
 8008b34:	4616      	mov	r6, r2
 8008b36:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b3a:	fb03 5711 	mls	r7, r3, r1, r5
 8008b3e:	5dc7      	ldrb	r7, [r0, r7]
 8008b40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b44:	462f      	mov	r7, r5
 8008b46:	42bb      	cmp	r3, r7
 8008b48:	460d      	mov	r5, r1
 8008b4a:	d9f4      	bls.n	8008b36 <_printf_i+0x112>
 8008b4c:	2b08      	cmp	r3, #8
 8008b4e:	d10b      	bne.n	8008b68 <_printf_i+0x144>
 8008b50:	6823      	ldr	r3, [r4, #0]
 8008b52:	07df      	lsls	r7, r3, #31
 8008b54:	d508      	bpl.n	8008b68 <_printf_i+0x144>
 8008b56:	6923      	ldr	r3, [r4, #16]
 8008b58:	6861      	ldr	r1, [r4, #4]
 8008b5a:	4299      	cmp	r1, r3
 8008b5c:	bfde      	ittt	le
 8008b5e:	2330      	movle	r3, #48	@ 0x30
 8008b60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b64:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008b68:	1b92      	subs	r2, r2, r6
 8008b6a:	6122      	str	r2, [r4, #16]
 8008b6c:	f8cd a000 	str.w	sl, [sp]
 8008b70:	464b      	mov	r3, r9
 8008b72:	aa03      	add	r2, sp, #12
 8008b74:	4621      	mov	r1, r4
 8008b76:	4640      	mov	r0, r8
 8008b78:	f7ff fee6 	bl	8008948 <_printf_common>
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	d14a      	bne.n	8008c16 <_printf_i+0x1f2>
 8008b80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b84:	b004      	add	sp, #16
 8008b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8a:	6823      	ldr	r3, [r4, #0]
 8008b8c:	f043 0320 	orr.w	r3, r3, #32
 8008b90:	6023      	str	r3, [r4, #0]
 8008b92:	4833      	ldr	r0, [pc, #204]	@ (8008c60 <_printf_i+0x23c>)
 8008b94:	2778      	movs	r7, #120	@ 0x78
 8008b96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	6831      	ldr	r1, [r6, #0]
 8008b9e:	061f      	lsls	r7, r3, #24
 8008ba0:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ba4:	d402      	bmi.n	8008bac <_printf_i+0x188>
 8008ba6:	065f      	lsls	r7, r3, #25
 8008ba8:	bf48      	it	mi
 8008baa:	b2ad      	uxthmi	r5, r5
 8008bac:	6031      	str	r1, [r6, #0]
 8008bae:	07d9      	lsls	r1, r3, #31
 8008bb0:	bf44      	itt	mi
 8008bb2:	f043 0320 	orrmi.w	r3, r3, #32
 8008bb6:	6023      	strmi	r3, [r4, #0]
 8008bb8:	b11d      	cbz	r5, 8008bc2 <_printf_i+0x19e>
 8008bba:	2310      	movs	r3, #16
 8008bbc:	e7ac      	b.n	8008b18 <_printf_i+0xf4>
 8008bbe:	4827      	ldr	r0, [pc, #156]	@ (8008c5c <_printf_i+0x238>)
 8008bc0:	e7e9      	b.n	8008b96 <_printf_i+0x172>
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	f023 0320 	bic.w	r3, r3, #32
 8008bc8:	6023      	str	r3, [r4, #0]
 8008bca:	e7f6      	b.n	8008bba <_printf_i+0x196>
 8008bcc:	4616      	mov	r6, r2
 8008bce:	e7bd      	b.n	8008b4c <_printf_i+0x128>
 8008bd0:	6833      	ldr	r3, [r6, #0]
 8008bd2:	6825      	ldr	r5, [r4, #0]
 8008bd4:	6961      	ldr	r1, [r4, #20]
 8008bd6:	1d18      	adds	r0, r3, #4
 8008bd8:	6030      	str	r0, [r6, #0]
 8008bda:	062e      	lsls	r6, r5, #24
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	d501      	bpl.n	8008be4 <_printf_i+0x1c0>
 8008be0:	6019      	str	r1, [r3, #0]
 8008be2:	e002      	b.n	8008bea <_printf_i+0x1c6>
 8008be4:	0668      	lsls	r0, r5, #25
 8008be6:	d5fb      	bpl.n	8008be0 <_printf_i+0x1bc>
 8008be8:	8019      	strh	r1, [r3, #0]
 8008bea:	2300      	movs	r3, #0
 8008bec:	6123      	str	r3, [r4, #16]
 8008bee:	4616      	mov	r6, r2
 8008bf0:	e7bc      	b.n	8008b6c <_printf_i+0x148>
 8008bf2:	6833      	ldr	r3, [r6, #0]
 8008bf4:	1d1a      	adds	r2, r3, #4
 8008bf6:	6032      	str	r2, [r6, #0]
 8008bf8:	681e      	ldr	r6, [r3, #0]
 8008bfa:	6862      	ldr	r2, [r4, #4]
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	4630      	mov	r0, r6
 8008c00:	f7f7 fb26 	bl	8000250 <memchr>
 8008c04:	b108      	cbz	r0, 8008c0a <_printf_i+0x1e6>
 8008c06:	1b80      	subs	r0, r0, r6
 8008c08:	6060      	str	r0, [r4, #4]
 8008c0a:	6863      	ldr	r3, [r4, #4]
 8008c0c:	6123      	str	r3, [r4, #16]
 8008c0e:	2300      	movs	r3, #0
 8008c10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c14:	e7aa      	b.n	8008b6c <_printf_i+0x148>
 8008c16:	6923      	ldr	r3, [r4, #16]
 8008c18:	4632      	mov	r2, r6
 8008c1a:	4649      	mov	r1, r9
 8008c1c:	4640      	mov	r0, r8
 8008c1e:	47d0      	blx	sl
 8008c20:	3001      	adds	r0, #1
 8008c22:	d0ad      	beq.n	8008b80 <_printf_i+0x15c>
 8008c24:	6823      	ldr	r3, [r4, #0]
 8008c26:	079b      	lsls	r3, r3, #30
 8008c28:	d413      	bmi.n	8008c52 <_printf_i+0x22e>
 8008c2a:	68e0      	ldr	r0, [r4, #12]
 8008c2c:	9b03      	ldr	r3, [sp, #12]
 8008c2e:	4298      	cmp	r0, r3
 8008c30:	bfb8      	it	lt
 8008c32:	4618      	movlt	r0, r3
 8008c34:	e7a6      	b.n	8008b84 <_printf_i+0x160>
 8008c36:	2301      	movs	r3, #1
 8008c38:	4632      	mov	r2, r6
 8008c3a:	4649      	mov	r1, r9
 8008c3c:	4640      	mov	r0, r8
 8008c3e:	47d0      	blx	sl
 8008c40:	3001      	adds	r0, #1
 8008c42:	d09d      	beq.n	8008b80 <_printf_i+0x15c>
 8008c44:	3501      	adds	r5, #1
 8008c46:	68e3      	ldr	r3, [r4, #12]
 8008c48:	9903      	ldr	r1, [sp, #12]
 8008c4a:	1a5b      	subs	r3, r3, r1
 8008c4c:	42ab      	cmp	r3, r5
 8008c4e:	dcf2      	bgt.n	8008c36 <_printf_i+0x212>
 8008c50:	e7eb      	b.n	8008c2a <_printf_i+0x206>
 8008c52:	2500      	movs	r5, #0
 8008c54:	f104 0619 	add.w	r6, r4, #25
 8008c58:	e7f5      	b.n	8008c46 <_printf_i+0x222>
 8008c5a:	bf00      	nop
 8008c5c:	08009722 	.word	0x08009722
 8008c60:	08009733 	.word	0x08009733

08008c64 <__sflush_r>:
 8008c64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c6c:	0716      	lsls	r6, r2, #28
 8008c6e:	4605      	mov	r5, r0
 8008c70:	460c      	mov	r4, r1
 8008c72:	d454      	bmi.n	8008d1e <__sflush_r+0xba>
 8008c74:	684b      	ldr	r3, [r1, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	dc02      	bgt.n	8008c80 <__sflush_r+0x1c>
 8008c7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	dd48      	ble.n	8008d12 <__sflush_r+0xae>
 8008c80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c82:	2e00      	cmp	r6, #0
 8008c84:	d045      	beq.n	8008d12 <__sflush_r+0xae>
 8008c86:	2300      	movs	r3, #0
 8008c88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c8c:	682f      	ldr	r7, [r5, #0]
 8008c8e:	6a21      	ldr	r1, [r4, #32]
 8008c90:	602b      	str	r3, [r5, #0]
 8008c92:	d030      	beq.n	8008cf6 <__sflush_r+0x92>
 8008c94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c96:	89a3      	ldrh	r3, [r4, #12]
 8008c98:	0759      	lsls	r1, r3, #29
 8008c9a:	d505      	bpl.n	8008ca8 <__sflush_r+0x44>
 8008c9c:	6863      	ldr	r3, [r4, #4]
 8008c9e:	1ad2      	subs	r2, r2, r3
 8008ca0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008ca2:	b10b      	cbz	r3, 8008ca8 <__sflush_r+0x44>
 8008ca4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ca6:	1ad2      	subs	r2, r2, r3
 8008ca8:	2300      	movs	r3, #0
 8008caa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008cac:	6a21      	ldr	r1, [r4, #32]
 8008cae:	4628      	mov	r0, r5
 8008cb0:	47b0      	blx	r6
 8008cb2:	1c43      	adds	r3, r0, #1
 8008cb4:	89a3      	ldrh	r3, [r4, #12]
 8008cb6:	d106      	bne.n	8008cc6 <__sflush_r+0x62>
 8008cb8:	6829      	ldr	r1, [r5, #0]
 8008cba:	291d      	cmp	r1, #29
 8008cbc:	d82b      	bhi.n	8008d16 <__sflush_r+0xb2>
 8008cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8008d68 <__sflush_r+0x104>)
 8008cc0:	410a      	asrs	r2, r1
 8008cc2:	07d6      	lsls	r6, r2, #31
 8008cc4:	d427      	bmi.n	8008d16 <__sflush_r+0xb2>
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	6062      	str	r2, [r4, #4]
 8008cca:	04d9      	lsls	r1, r3, #19
 8008ccc:	6922      	ldr	r2, [r4, #16]
 8008cce:	6022      	str	r2, [r4, #0]
 8008cd0:	d504      	bpl.n	8008cdc <__sflush_r+0x78>
 8008cd2:	1c42      	adds	r2, r0, #1
 8008cd4:	d101      	bne.n	8008cda <__sflush_r+0x76>
 8008cd6:	682b      	ldr	r3, [r5, #0]
 8008cd8:	b903      	cbnz	r3, 8008cdc <__sflush_r+0x78>
 8008cda:	6560      	str	r0, [r4, #84]	@ 0x54
 8008cdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cde:	602f      	str	r7, [r5, #0]
 8008ce0:	b1b9      	cbz	r1, 8008d12 <__sflush_r+0xae>
 8008ce2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ce6:	4299      	cmp	r1, r3
 8008ce8:	d002      	beq.n	8008cf0 <__sflush_r+0x8c>
 8008cea:	4628      	mov	r0, r5
 8008cec:	f000 f97c 	bl	8008fe8 <_free_r>
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cf4:	e00d      	b.n	8008d12 <__sflush_r+0xae>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	4628      	mov	r0, r5
 8008cfa:	47b0      	blx	r6
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	1c50      	adds	r0, r2, #1
 8008d00:	d1c9      	bne.n	8008c96 <__sflush_r+0x32>
 8008d02:	682b      	ldr	r3, [r5, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d0c6      	beq.n	8008c96 <__sflush_r+0x32>
 8008d08:	2b1d      	cmp	r3, #29
 8008d0a:	d001      	beq.n	8008d10 <__sflush_r+0xac>
 8008d0c:	2b16      	cmp	r3, #22
 8008d0e:	d11e      	bne.n	8008d4e <__sflush_r+0xea>
 8008d10:	602f      	str	r7, [r5, #0]
 8008d12:	2000      	movs	r0, #0
 8008d14:	e022      	b.n	8008d5c <__sflush_r+0xf8>
 8008d16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d1a:	b21b      	sxth	r3, r3
 8008d1c:	e01b      	b.n	8008d56 <__sflush_r+0xf2>
 8008d1e:	690f      	ldr	r7, [r1, #16]
 8008d20:	2f00      	cmp	r7, #0
 8008d22:	d0f6      	beq.n	8008d12 <__sflush_r+0xae>
 8008d24:	0793      	lsls	r3, r2, #30
 8008d26:	680e      	ldr	r6, [r1, #0]
 8008d28:	bf08      	it	eq
 8008d2a:	694b      	ldreq	r3, [r1, #20]
 8008d2c:	600f      	str	r7, [r1, #0]
 8008d2e:	bf18      	it	ne
 8008d30:	2300      	movne	r3, #0
 8008d32:	eba6 0807 	sub.w	r8, r6, r7
 8008d36:	608b      	str	r3, [r1, #8]
 8008d38:	f1b8 0f00 	cmp.w	r8, #0
 8008d3c:	dde9      	ble.n	8008d12 <__sflush_r+0xae>
 8008d3e:	6a21      	ldr	r1, [r4, #32]
 8008d40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008d42:	4643      	mov	r3, r8
 8008d44:	463a      	mov	r2, r7
 8008d46:	4628      	mov	r0, r5
 8008d48:	47b0      	blx	r6
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	dc08      	bgt.n	8008d60 <__sflush_r+0xfc>
 8008d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d56:	81a3      	strh	r3, [r4, #12]
 8008d58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d60:	4407      	add	r7, r0
 8008d62:	eba8 0800 	sub.w	r8, r8, r0
 8008d66:	e7e7      	b.n	8008d38 <__sflush_r+0xd4>
 8008d68:	dfbffffe 	.word	0xdfbffffe

08008d6c <_fflush_r>:
 8008d6c:	b538      	push	{r3, r4, r5, lr}
 8008d6e:	690b      	ldr	r3, [r1, #16]
 8008d70:	4605      	mov	r5, r0
 8008d72:	460c      	mov	r4, r1
 8008d74:	b913      	cbnz	r3, 8008d7c <_fflush_r+0x10>
 8008d76:	2500      	movs	r5, #0
 8008d78:	4628      	mov	r0, r5
 8008d7a:	bd38      	pop	{r3, r4, r5, pc}
 8008d7c:	b118      	cbz	r0, 8008d86 <_fflush_r+0x1a>
 8008d7e:	6a03      	ldr	r3, [r0, #32]
 8008d80:	b90b      	cbnz	r3, 8008d86 <_fflush_r+0x1a>
 8008d82:	f7ff faf9 	bl	8008378 <__sinit>
 8008d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d0f3      	beq.n	8008d76 <_fflush_r+0xa>
 8008d8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d90:	07d0      	lsls	r0, r2, #31
 8008d92:	d404      	bmi.n	8008d9e <_fflush_r+0x32>
 8008d94:	0599      	lsls	r1, r3, #22
 8008d96:	d402      	bmi.n	8008d9e <_fflush_r+0x32>
 8008d98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d9a:	f7ff fbb2 	bl	8008502 <__retarget_lock_acquire_recursive>
 8008d9e:	4628      	mov	r0, r5
 8008da0:	4621      	mov	r1, r4
 8008da2:	f7ff ff5f 	bl	8008c64 <__sflush_r>
 8008da6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008da8:	07da      	lsls	r2, r3, #31
 8008daa:	4605      	mov	r5, r0
 8008dac:	d4e4      	bmi.n	8008d78 <_fflush_r+0xc>
 8008dae:	89a3      	ldrh	r3, [r4, #12]
 8008db0:	059b      	lsls	r3, r3, #22
 8008db2:	d4e1      	bmi.n	8008d78 <_fflush_r+0xc>
 8008db4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008db6:	f7ff fba5 	bl	8008504 <__retarget_lock_release_recursive>
 8008dba:	e7dd      	b.n	8008d78 <_fflush_r+0xc>

08008dbc <__malloc_lock>:
 8008dbc:	4801      	ldr	r0, [pc, #4]	@ (8008dc4 <__malloc_lock+0x8>)
 8008dbe:	f7ff bba0 	b.w	8008502 <__retarget_lock_acquire_recursive>
 8008dc2:	bf00      	nop
 8008dc4:	20000628 	.word	0x20000628

08008dc8 <__malloc_unlock>:
 8008dc8:	4801      	ldr	r0, [pc, #4]	@ (8008dd0 <__malloc_unlock+0x8>)
 8008dca:	f7ff bb9b 	b.w	8008504 <__retarget_lock_release_recursive>
 8008dce:	bf00      	nop
 8008dd0:	20000628 	.word	0x20000628

08008dd4 <__sread>:
 8008dd4:	b510      	push	{r4, lr}
 8008dd6:	460c      	mov	r4, r1
 8008dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ddc:	f000 f8ba 	bl	8008f54 <_read_r>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	bfab      	itete	ge
 8008de4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008de6:	89a3      	ldrhlt	r3, [r4, #12]
 8008de8:	181b      	addge	r3, r3, r0
 8008dea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008dee:	bfac      	ite	ge
 8008df0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008df2:	81a3      	strhlt	r3, [r4, #12]
 8008df4:	bd10      	pop	{r4, pc}

08008df6 <__swrite>:
 8008df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dfa:	461f      	mov	r7, r3
 8008dfc:	898b      	ldrh	r3, [r1, #12]
 8008dfe:	05db      	lsls	r3, r3, #23
 8008e00:	4605      	mov	r5, r0
 8008e02:	460c      	mov	r4, r1
 8008e04:	4616      	mov	r6, r2
 8008e06:	d505      	bpl.n	8008e14 <__swrite+0x1e>
 8008e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f000 f88e 	bl	8008f30 <_lseek_r>
 8008e14:	89a3      	ldrh	r3, [r4, #12]
 8008e16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e1e:	81a3      	strh	r3, [r4, #12]
 8008e20:	4632      	mov	r2, r6
 8008e22:	463b      	mov	r3, r7
 8008e24:	4628      	mov	r0, r5
 8008e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e2a:	f000 b8b5 	b.w	8008f98 <_write_r>

08008e2e <__sseek>:
 8008e2e:	b510      	push	{r4, lr}
 8008e30:	460c      	mov	r4, r1
 8008e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e36:	f000 f87b 	bl	8008f30 <_lseek_r>
 8008e3a:	1c43      	adds	r3, r0, #1
 8008e3c:	89a3      	ldrh	r3, [r4, #12]
 8008e3e:	bf15      	itete	ne
 8008e40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008e42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008e46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008e4a:	81a3      	strheq	r3, [r4, #12]
 8008e4c:	bf18      	it	ne
 8008e4e:	81a3      	strhne	r3, [r4, #12]
 8008e50:	bd10      	pop	{r4, pc}

08008e52 <__sclose>:
 8008e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e56:	f000 b85b 	b.w	8008f10 <_close_r>
	...

08008e5c <fiprintf>:
 8008e5c:	b40e      	push	{r1, r2, r3}
 8008e5e:	b503      	push	{r0, r1, lr}
 8008e60:	4601      	mov	r1, r0
 8008e62:	ab03      	add	r3, sp, #12
 8008e64:	4805      	ldr	r0, [pc, #20]	@ (8008e7c <fiprintf+0x20>)
 8008e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e6a:	6800      	ldr	r0, [r0, #0]
 8008e6c:	9301      	str	r3, [sp, #4]
 8008e6e:	f000 f92f 	bl	80090d0 <_vfiprintf_r>
 8008e72:	b002      	add	sp, #8
 8008e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e78:	b003      	add	sp, #12
 8008e7a:	4770      	bx	lr
 8008e7c:	200000d4 	.word	0x200000d4

08008e80 <_realloc_r>:
 8008e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e84:	4680      	mov	r8, r0
 8008e86:	4615      	mov	r5, r2
 8008e88:	460c      	mov	r4, r1
 8008e8a:	b921      	cbnz	r1, 8008e96 <_realloc_r+0x16>
 8008e8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e90:	4611      	mov	r1, r2
 8008e92:	f7ff bcd9 	b.w	8008848 <_malloc_r>
 8008e96:	b92a      	cbnz	r2, 8008ea4 <_realloc_r+0x24>
 8008e98:	f000 f8a6 	bl	8008fe8 <_free_r>
 8008e9c:	2400      	movs	r4, #0
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ea4:	f000 fa2c 	bl	8009300 <_malloc_usable_size_r>
 8008ea8:	4285      	cmp	r5, r0
 8008eaa:	4606      	mov	r6, r0
 8008eac:	d802      	bhi.n	8008eb4 <_realloc_r+0x34>
 8008eae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008eb2:	d8f4      	bhi.n	8008e9e <_realloc_r+0x1e>
 8008eb4:	4629      	mov	r1, r5
 8008eb6:	4640      	mov	r0, r8
 8008eb8:	f7ff fcc6 	bl	8008848 <_malloc_r>
 8008ebc:	4607      	mov	r7, r0
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	d0ec      	beq.n	8008e9c <_realloc_r+0x1c>
 8008ec2:	42b5      	cmp	r5, r6
 8008ec4:	462a      	mov	r2, r5
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	bf28      	it	cs
 8008eca:	4632      	movcs	r2, r6
 8008ecc:	f000 f876 	bl	8008fbc <memcpy>
 8008ed0:	4621      	mov	r1, r4
 8008ed2:	4640      	mov	r0, r8
 8008ed4:	f000 f888 	bl	8008fe8 <_free_r>
 8008ed8:	463c      	mov	r4, r7
 8008eda:	e7e0      	b.n	8008e9e <_realloc_r+0x1e>

08008edc <memmove>:
 8008edc:	4288      	cmp	r0, r1
 8008ede:	b510      	push	{r4, lr}
 8008ee0:	eb01 0402 	add.w	r4, r1, r2
 8008ee4:	d902      	bls.n	8008eec <memmove+0x10>
 8008ee6:	4284      	cmp	r4, r0
 8008ee8:	4623      	mov	r3, r4
 8008eea:	d807      	bhi.n	8008efc <memmove+0x20>
 8008eec:	1e43      	subs	r3, r0, #1
 8008eee:	42a1      	cmp	r1, r4
 8008ef0:	d008      	beq.n	8008f04 <memmove+0x28>
 8008ef2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ef6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008efa:	e7f8      	b.n	8008eee <memmove+0x12>
 8008efc:	4402      	add	r2, r0
 8008efe:	4601      	mov	r1, r0
 8008f00:	428a      	cmp	r2, r1
 8008f02:	d100      	bne.n	8008f06 <memmove+0x2a>
 8008f04:	bd10      	pop	{r4, pc}
 8008f06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f0e:	e7f7      	b.n	8008f00 <memmove+0x24>

08008f10 <_close_r>:
 8008f10:	b538      	push	{r3, r4, r5, lr}
 8008f12:	4d06      	ldr	r5, [pc, #24]	@ (8008f2c <_close_r+0x1c>)
 8008f14:	2300      	movs	r3, #0
 8008f16:	4604      	mov	r4, r0
 8008f18:	4608      	mov	r0, r1
 8008f1a:	602b      	str	r3, [r5, #0]
 8008f1c:	f7f7 ff9c 	bl	8000e58 <_close>
 8008f20:	1c43      	adds	r3, r0, #1
 8008f22:	d102      	bne.n	8008f2a <_close_r+0x1a>
 8008f24:	682b      	ldr	r3, [r5, #0]
 8008f26:	b103      	cbz	r3, 8008f2a <_close_r+0x1a>
 8008f28:	6023      	str	r3, [r4, #0]
 8008f2a:	bd38      	pop	{r3, r4, r5, pc}
 8008f2c:	20000634 	.word	0x20000634

08008f30 <_lseek_r>:
 8008f30:	b538      	push	{r3, r4, r5, lr}
 8008f32:	4d07      	ldr	r5, [pc, #28]	@ (8008f50 <_lseek_r+0x20>)
 8008f34:	4604      	mov	r4, r0
 8008f36:	4608      	mov	r0, r1
 8008f38:	4611      	mov	r1, r2
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	602a      	str	r2, [r5, #0]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	f7f7 ffb1 	bl	8000ea6 <_lseek>
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	d102      	bne.n	8008f4e <_lseek_r+0x1e>
 8008f48:	682b      	ldr	r3, [r5, #0]
 8008f4a:	b103      	cbz	r3, 8008f4e <_lseek_r+0x1e>
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	bd38      	pop	{r3, r4, r5, pc}
 8008f50:	20000634 	.word	0x20000634

08008f54 <_read_r>:
 8008f54:	b538      	push	{r3, r4, r5, lr}
 8008f56:	4d07      	ldr	r5, [pc, #28]	@ (8008f74 <_read_r+0x20>)
 8008f58:	4604      	mov	r4, r0
 8008f5a:	4608      	mov	r0, r1
 8008f5c:	4611      	mov	r1, r2
 8008f5e:	2200      	movs	r2, #0
 8008f60:	602a      	str	r2, [r5, #0]
 8008f62:	461a      	mov	r2, r3
 8008f64:	f7f7 ff3f 	bl	8000de6 <_read>
 8008f68:	1c43      	adds	r3, r0, #1
 8008f6a:	d102      	bne.n	8008f72 <_read_r+0x1e>
 8008f6c:	682b      	ldr	r3, [r5, #0]
 8008f6e:	b103      	cbz	r3, 8008f72 <_read_r+0x1e>
 8008f70:	6023      	str	r3, [r4, #0]
 8008f72:	bd38      	pop	{r3, r4, r5, pc}
 8008f74:	20000634 	.word	0x20000634

08008f78 <_sbrk_r>:
 8008f78:	b538      	push	{r3, r4, r5, lr}
 8008f7a:	4d06      	ldr	r5, [pc, #24]	@ (8008f94 <_sbrk_r+0x1c>)
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	4604      	mov	r4, r0
 8008f80:	4608      	mov	r0, r1
 8008f82:	602b      	str	r3, [r5, #0]
 8008f84:	f7f7 ff9c 	bl	8000ec0 <_sbrk>
 8008f88:	1c43      	adds	r3, r0, #1
 8008f8a:	d102      	bne.n	8008f92 <_sbrk_r+0x1a>
 8008f8c:	682b      	ldr	r3, [r5, #0]
 8008f8e:	b103      	cbz	r3, 8008f92 <_sbrk_r+0x1a>
 8008f90:	6023      	str	r3, [r4, #0]
 8008f92:	bd38      	pop	{r3, r4, r5, pc}
 8008f94:	20000634 	.word	0x20000634

08008f98 <_write_r>:
 8008f98:	b538      	push	{r3, r4, r5, lr}
 8008f9a:	4d07      	ldr	r5, [pc, #28]	@ (8008fb8 <_write_r+0x20>)
 8008f9c:	4604      	mov	r4, r0
 8008f9e:	4608      	mov	r0, r1
 8008fa0:	4611      	mov	r1, r2
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	602a      	str	r2, [r5, #0]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	f7f7 ff3a 	bl	8000e20 <_write>
 8008fac:	1c43      	adds	r3, r0, #1
 8008fae:	d102      	bne.n	8008fb6 <_write_r+0x1e>
 8008fb0:	682b      	ldr	r3, [r5, #0]
 8008fb2:	b103      	cbz	r3, 8008fb6 <_write_r+0x1e>
 8008fb4:	6023      	str	r3, [r4, #0]
 8008fb6:	bd38      	pop	{r3, r4, r5, pc}
 8008fb8:	20000634 	.word	0x20000634

08008fbc <memcpy>:
 8008fbc:	440a      	add	r2, r1
 8008fbe:	4291      	cmp	r1, r2
 8008fc0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008fc4:	d100      	bne.n	8008fc8 <memcpy+0xc>
 8008fc6:	4770      	bx	lr
 8008fc8:	b510      	push	{r4, lr}
 8008fca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fd2:	4291      	cmp	r1, r2
 8008fd4:	d1f9      	bne.n	8008fca <memcpy+0xe>
 8008fd6:	bd10      	pop	{r4, pc}

08008fd8 <abort>:
 8008fd8:	b508      	push	{r3, lr}
 8008fda:	2006      	movs	r0, #6
 8008fdc:	f000 fad8 	bl	8009590 <raise>
 8008fe0:	2001      	movs	r0, #1
 8008fe2:	f7f7 fef5 	bl	8000dd0 <_exit>
	...

08008fe8 <_free_r>:
 8008fe8:	b538      	push	{r3, r4, r5, lr}
 8008fea:	4605      	mov	r5, r0
 8008fec:	2900      	cmp	r1, #0
 8008fee:	d041      	beq.n	8009074 <_free_r+0x8c>
 8008ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ff4:	1f0c      	subs	r4, r1, #4
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	bfb8      	it	lt
 8008ffa:	18e4      	addlt	r4, r4, r3
 8008ffc:	f7ff fede 	bl	8008dbc <__malloc_lock>
 8009000:	4a1d      	ldr	r2, [pc, #116]	@ (8009078 <_free_r+0x90>)
 8009002:	6813      	ldr	r3, [r2, #0]
 8009004:	b933      	cbnz	r3, 8009014 <_free_r+0x2c>
 8009006:	6063      	str	r3, [r4, #4]
 8009008:	6014      	str	r4, [r2, #0]
 800900a:	4628      	mov	r0, r5
 800900c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009010:	f7ff beda 	b.w	8008dc8 <__malloc_unlock>
 8009014:	42a3      	cmp	r3, r4
 8009016:	d908      	bls.n	800902a <_free_r+0x42>
 8009018:	6820      	ldr	r0, [r4, #0]
 800901a:	1821      	adds	r1, r4, r0
 800901c:	428b      	cmp	r3, r1
 800901e:	bf01      	itttt	eq
 8009020:	6819      	ldreq	r1, [r3, #0]
 8009022:	685b      	ldreq	r3, [r3, #4]
 8009024:	1809      	addeq	r1, r1, r0
 8009026:	6021      	streq	r1, [r4, #0]
 8009028:	e7ed      	b.n	8009006 <_free_r+0x1e>
 800902a:	461a      	mov	r2, r3
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	b10b      	cbz	r3, 8009034 <_free_r+0x4c>
 8009030:	42a3      	cmp	r3, r4
 8009032:	d9fa      	bls.n	800902a <_free_r+0x42>
 8009034:	6811      	ldr	r1, [r2, #0]
 8009036:	1850      	adds	r0, r2, r1
 8009038:	42a0      	cmp	r0, r4
 800903a:	d10b      	bne.n	8009054 <_free_r+0x6c>
 800903c:	6820      	ldr	r0, [r4, #0]
 800903e:	4401      	add	r1, r0
 8009040:	1850      	adds	r0, r2, r1
 8009042:	4283      	cmp	r3, r0
 8009044:	6011      	str	r1, [r2, #0]
 8009046:	d1e0      	bne.n	800900a <_free_r+0x22>
 8009048:	6818      	ldr	r0, [r3, #0]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	6053      	str	r3, [r2, #4]
 800904e:	4408      	add	r0, r1
 8009050:	6010      	str	r0, [r2, #0]
 8009052:	e7da      	b.n	800900a <_free_r+0x22>
 8009054:	d902      	bls.n	800905c <_free_r+0x74>
 8009056:	230c      	movs	r3, #12
 8009058:	602b      	str	r3, [r5, #0]
 800905a:	e7d6      	b.n	800900a <_free_r+0x22>
 800905c:	6820      	ldr	r0, [r4, #0]
 800905e:	1821      	adds	r1, r4, r0
 8009060:	428b      	cmp	r3, r1
 8009062:	bf04      	itt	eq
 8009064:	6819      	ldreq	r1, [r3, #0]
 8009066:	685b      	ldreq	r3, [r3, #4]
 8009068:	6063      	str	r3, [r4, #4]
 800906a:	bf04      	itt	eq
 800906c:	1809      	addeq	r1, r1, r0
 800906e:	6021      	streq	r1, [r4, #0]
 8009070:	6054      	str	r4, [r2, #4]
 8009072:	e7ca      	b.n	800900a <_free_r+0x22>
 8009074:	bd38      	pop	{r3, r4, r5, pc}
 8009076:	bf00      	nop
 8009078:	20000630 	.word	0x20000630

0800907c <__sfputc_r>:
 800907c:	6893      	ldr	r3, [r2, #8]
 800907e:	3b01      	subs	r3, #1
 8009080:	2b00      	cmp	r3, #0
 8009082:	b410      	push	{r4}
 8009084:	6093      	str	r3, [r2, #8]
 8009086:	da08      	bge.n	800909a <__sfputc_r+0x1e>
 8009088:	6994      	ldr	r4, [r2, #24]
 800908a:	42a3      	cmp	r3, r4
 800908c:	db01      	blt.n	8009092 <__sfputc_r+0x16>
 800908e:	290a      	cmp	r1, #10
 8009090:	d103      	bne.n	800909a <__sfputc_r+0x1e>
 8009092:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009096:	f000 b93b 	b.w	8009310 <__swbuf_r>
 800909a:	6813      	ldr	r3, [r2, #0]
 800909c:	1c58      	adds	r0, r3, #1
 800909e:	6010      	str	r0, [r2, #0]
 80090a0:	7019      	strb	r1, [r3, #0]
 80090a2:	4608      	mov	r0, r1
 80090a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090a8:	4770      	bx	lr

080090aa <__sfputs_r>:
 80090aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ac:	4606      	mov	r6, r0
 80090ae:	460f      	mov	r7, r1
 80090b0:	4614      	mov	r4, r2
 80090b2:	18d5      	adds	r5, r2, r3
 80090b4:	42ac      	cmp	r4, r5
 80090b6:	d101      	bne.n	80090bc <__sfputs_r+0x12>
 80090b8:	2000      	movs	r0, #0
 80090ba:	e007      	b.n	80090cc <__sfputs_r+0x22>
 80090bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090c0:	463a      	mov	r2, r7
 80090c2:	4630      	mov	r0, r6
 80090c4:	f7ff ffda 	bl	800907c <__sfputc_r>
 80090c8:	1c43      	adds	r3, r0, #1
 80090ca:	d1f3      	bne.n	80090b4 <__sfputs_r+0xa>
 80090cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080090d0 <_vfiprintf_r>:
 80090d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d4:	460d      	mov	r5, r1
 80090d6:	b09d      	sub	sp, #116	@ 0x74
 80090d8:	4614      	mov	r4, r2
 80090da:	4698      	mov	r8, r3
 80090dc:	4606      	mov	r6, r0
 80090de:	b118      	cbz	r0, 80090e8 <_vfiprintf_r+0x18>
 80090e0:	6a03      	ldr	r3, [r0, #32]
 80090e2:	b90b      	cbnz	r3, 80090e8 <_vfiprintf_r+0x18>
 80090e4:	f7ff f948 	bl	8008378 <__sinit>
 80090e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090ea:	07d9      	lsls	r1, r3, #31
 80090ec:	d405      	bmi.n	80090fa <_vfiprintf_r+0x2a>
 80090ee:	89ab      	ldrh	r3, [r5, #12]
 80090f0:	059a      	lsls	r2, r3, #22
 80090f2:	d402      	bmi.n	80090fa <_vfiprintf_r+0x2a>
 80090f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090f6:	f7ff fa04 	bl	8008502 <__retarget_lock_acquire_recursive>
 80090fa:	89ab      	ldrh	r3, [r5, #12]
 80090fc:	071b      	lsls	r3, r3, #28
 80090fe:	d501      	bpl.n	8009104 <_vfiprintf_r+0x34>
 8009100:	692b      	ldr	r3, [r5, #16]
 8009102:	b99b      	cbnz	r3, 800912c <_vfiprintf_r+0x5c>
 8009104:	4629      	mov	r1, r5
 8009106:	4630      	mov	r0, r6
 8009108:	f000 f940 	bl	800938c <__swsetup_r>
 800910c:	b170      	cbz	r0, 800912c <_vfiprintf_r+0x5c>
 800910e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009110:	07dc      	lsls	r4, r3, #31
 8009112:	d504      	bpl.n	800911e <_vfiprintf_r+0x4e>
 8009114:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009118:	b01d      	add	sp, #116	@ 0x74
 800911a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800911e:	89ab      	ldrh	r3, [r5, #12]
 8009120:	0598      	lsls	r0, r3, #22
 8009122:	d4f7      	bmi.n	8009114 <_vfiprintf_r+0x44>
 8009124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009126:	f7ff f9ed 	bl	8008504 <__retarget_lock_release_recursive>
 800912a:	e7f3      	b.n	8009114 <_vfiprintf_r+0x44>
 800912c:	2300      	movs	r3, #0
 800912e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009130:	2320      	movs	r3, #32
 8009132:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009136:	f8cd 800c 	str.w	r8, [sp, #12]
 800913a:	2330      	movs	r3, #48	@ 0x30
 800913c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80092ec <_vfiprintf_r+0x21c>
 8009140:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009144:	f04f 0901 	mov.w	r9, #1
 8009148:	4623      	mov	r3, r4
 800914a:	469a      	mov	sl, r3
 800914c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009150:	b10a      	cbz	r2, 8009156 <_vfiprintf_r+0x86>
 8009152:	2a25      	cmp	r2, #37	@ 0x25
 8009154:	d1f9      	bne.n	800914a <_vfiprintf_r+0x7a>
 8009156:	ebba 0b04 	subs.w	fp, sl, r4
 800915a:	d00b      	beq.n	8009174 <_vfiprintf_r+0xa4>
 800915c:	465b      	mov	r3, fp
 800915e:	4622      	mov	r2, r4
 8009160:	4629      	mov	r1, r5
 8009162:	4630      	mov	r0, r6
 8009164:	f7ff ffa1 	bl	80090aa <__sfputs_r>
 8009168:	3001      	adds	r0, #1
 800916a:	f000 80a7 	beq.w	80092bc <_vfiprintf_r+0x1ec>
 800916e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009170:	445a      	add	r2, fp
 8009172:	9209      	str	r2, [sp, #36]	@ 0x24
 8009174:	f89a 3000 	ldrb.w	r3, [sl]
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 809f 	beq.w	80092bc <_vfiprintf_r+0x1ec>
 800917e:	2300      	movs	r3, #0
 8009180:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009184:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009188:	f10a 0a01 	add.w	sl, sl, #1
 800918c:	9304      	str	r3, [sp, #16]
 800918e:	9307      	str	r3, [sp, #28]
 8009190:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009194:	931a      	str	r3, [sp, #104]	@ 0x68
 8009196:	4654      	mov	r4, sl
 8009198:	2205      	movs	r2, #5
 800919a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800919e:	4853      	ldr	r0, [pc, #332]	@ (80092ec <_vfiprintf_r+0x21c>)
 80091a0:	f7f7 f856 	bl	8000250 <memchr>
 80091a4:	9a04      	ldr	r2, [sp, #16]
 80091a6:	b9d8      	cbnz	r0, 80091e0 <_vfiprintf_r+0x110>
 80091a8:	06d1      	lsls	r1, r2, #27
 80091aa:	bf44      	itt	mi
 80091ac:	2320      	movmi	r3, #32
 80091ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091b2:	0713      	lsls	r3, r2, #28
 80091b4:	bf44      	itt	mi
 80091b6:	232b      	movmi	r3, #43	@ 0x2b
 80091b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091bc:	f89a 3000 	ldrb.w	r3, [sl]
 80091c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80091c2:	d015      	beq.n	80091f0 <_vfiprintf_r+0x120>
 80091c4:	9a07      	ldr	r2, [sp, #28]
 80091c6:	4654      	mov	r4, sl
 80091c8:	2000      	movs	r0, #0
 80091ca:	f04f 0c0a 	mov.w	ip, #10
 80091ce:	4621      	mov	r1, r4
 80091d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091d4:	3b30      	subs	r3, #48	@ 0x30
 80091d6:	2b09      	cmp	r3, #9
 80091d8:	d94b      	bls.n	8009272 <_vfiprintf_r+0x1a2>
 80091da:	b1b0      	cbz	r0, 800920a <_vfiprintf_r+0x13a>
 80091dc:	9207      	str	r2, [sp, #28]
 80091de:	e014      	b.n	800920a <_vfiprintf_r+0x13a>
 80091e0:	eba0 0308 	sub.w	r3, r0, r8
 80091e4:	fa09 f303 	lsl.w	r3, r9, r3
 80091e8:	4313      	orrs	r3, r2
 80091ea:	9304      	str	r3, [sp, #16]
 80091ec:	46a2      	mov	sl, r4
 80091ee:	e7d2      	b.n	8009196 <_vfiprintf_r+0xc6>
 80091f0:	9b03      	ldr	r3, [sp, #12]
 80091f2:	1d19      	adds	r1, r3, #4
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	9103      	str	r1, [sp, #12]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	bfbb      	ittet	lt
 80091fc:	425b      	neglt	r3, r3
 80091fe:	f042 0202 	orrlt.w	r2, r2, #2
 8009202:	9307      	strge	r3, [sp, #28]
 8009204:	9307      	strlt	r3, [sp, #28]
 8009206:	bfb8      	it	lt
 8009208:	9204      	strlt	r2, [sp, #16]
 800920a:	7823      	ldrb	r3, [r4, #0]
 800920c:	2b2e      	cmp	r3, #46	@ 0x2e
 800920e:	d10a      	bne.n	8009226 <_vfiprintf_r+0x156>
 8009210:	7863      	ldrb	r3, [r4, #1]
 8009212:	2b2a      	cmp	r3, #42	@ 0x2a
 8009214:	d132      	bne.n	800927c <_vfiprintf_r+0x1ac>
 8009216:	9b03      	ldr	r3, [sp, #12]
 8009218:	1d1a      	adds	r2, r3, #4
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	9203      	str	r2, [sp, #12]
 800921e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009222:	3402      	adds	r4, #2
 8009224:	9305      	str	r3, [sp, #20]
 8009226:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80092fc <_vfiprintf_r+0x22c>
 800922a:	7821      	ldrb	r1, [r4, #0]
 800922c:	2203      	movs	r2, #3
 800922e:	4650      	mov	r0, sl
 8009230:	f7f7 f80e 	bl	8000250 <memchr>
 8009234:	b138      	cbz	r0, 8009246 <_vfiprintf_r+0x176>
 8009236:	9b04      	ldr	r3, [sp, #16]
 8009238:	eba0 000a 	sub.w	r0, r0, sl
 800923c:	2240      	movs	r2, #64	@ 0x40
 800923e:	4082      	lsls	r2, r0
 8009240:	4313      	orrs	r3, r2
 8009242:	3401      	adds	r4, #1
 8009244:	9304      	str	r3, [sp, #16]
 8009246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800924a:	4829      	ldr	r0, [pc, #164]	@ (80092f0 <_vfiprintf_r+0x220>)
 800924c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009250:	2206      	movs	r2, #6
 8009252:	f7f6 fffd 	bl	8000250 <memchr>
 8009256:	2800      	cmp	r0, #0
 8009258:	d03f      	beq.n	80092da <_vfiprintf_r+0x20a>
 800925a:	4b26      	ldr	r3, [pc, #152]	@ (80092f4 <_vfiprintf_r+0x224>)
 800925c:	bb1b      	cbnz	r3, 80092a6 <_vfiprintf_r+0x1d6>
 800925e:	9b03      	ldr	r3, [sp, #12]
 8009260:	3307      	adds	r3, #7
 8009262:	f023 0307 	bic.w	r3, r3, #7
 8009266:	3308      	adds	r3, #8
 8009268:	9303      	str	r3, [sp, #12]
 800926a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800926c:	443b      	add	r3, r7
 800926e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009270:	e76a      	b.n	8009148 <_vfiprintf_r+0x78>
 8009272:	fb0c 3202 	mla	r2, ip, r2, r3
 8009276:	460c      	mov	r4, r1
 8009278:	2001      	movs	r0, #1
 800927a:	e7a8      	b.n	80091ce <_vfiprintf_r+0xfe>
 800927c:	2300      	movs	r3, #0
 800927e:	3401      	adds	r4, #1
 8009280:	9305      	str	r3, [sp, #20]
 8009282:	4619      	mov	r1, r3
 8009284:	f04f 0c0a 	mov.w	ip, #10
 8009288:	4620      	mov	r0, r4
 800928a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800928e:	3a30      	subs	r2, #48	@ 0x30
 8009290:	2a09      	cmp	r2, #9
 8009292:	d903      	bls.n	800929c <_vfiprintf_r+0x1cc>
 8009294:	2b00      	cmp	r3, #0
 8009296:	d0c6      	beq.n	8009226 <_vfiprintf_r+0x156>
 8009298:	9105      	str	r1, [sp, #20]
 800929a:	e7c4      	b.n	8009226 <_vfiprintf_r+0x156>
 800929c:	fb0c 2101 	mla	r1, ip, r1, r2
 80092a0:	4604      	mov	r4, r0
 80092a2:	2301      	movs	r3, #1
 80092a4:	e7f0      	b.n	8009288 <_vfiprintf_r+0x1b8>
 80092a6:	ab03      	add	r3, sp, #12
 80092a8:	9300      	str	r3, [sp, #0]
 80092aa:	462a      	mov	r2, r5
 80092ac:	4b12      	ldr	r3, [pc, #72]	@ (80092f8 <_vfiprintf_r+0x228>)
 80092ae:	a904      	add	r1, sp, #16
 80092b0:	4630      	mov	r0, r6
 80092b2:	f3af 8000 	nop.w
 80092b6:	4607      	mov	r7, r0
 80092b8:	1c78      	adds	r0, r7, #1
 80092ba:	d1d6      	bne.n	800926a <_vfiprintf_r+0x19a>
 80092bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092be:	07d9      	lsls	r1, r3, #31
 80092c0:	d405      	bmi.n	80092ce <_vfiprintf_r+0x1fe>
 80092c2:	89ab      	ldrh	r3, [r5, #12]
 80092c4:	059a      	lsls	r2, r3, #22
 80092c6:	d402      	bmi.n	80092ce <_vfiprintf_r+0x1fe>
 80092c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092ca:	f7ff f91b 	bl	8008504 <__retarget_lock_release_recursive>
 80092ce:	89ab      	ldrh	r3, [r5, #12]
 80092d0:	065b      	lsls	r3, r3, #25
 80092d2:	f53f af1f 	bmi.w	8009114 <_vfiprintf_r+0x44>
 80092d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092d8:	e71e      	b.n	8009118 <_vfiprintf_r+0x48>
 80092da:	ab03      	add	r3, sp, #12
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	462a      	mov	r2, r5
 80092e0:	4b05      	ldr	r3, [pc, #20]	@ (80092f8 <_vfiprintf_r+0x228>)
 80092e2:	a904      	add	r1, sp, #16
 80092e4:	4630      	mov	r0, r6
 80092e6:	f7ff fb9d 	bl	8008a24 <_printf_i>
 80092ea:	e7e4      	b.n	80092b6 <_vfiprintf_r+0x1e6>
 80092ec:	08009711 	.word	0x08009711
 80092f0:	0800971b 	.word	0x0800971b
 80092f4:	00000000 	.word	0x00000000
 80092f8:	080090ab 	.word	0x080090ab
 80092fc:	08009717 	.word	0x08009717

08009300 <_malloc_usable_size_r>:
 8009300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009304:	1f18      	subs	r0, r3, #4
 8009306:	2b00      	cmp	r3, #0
 8009308:	bfbc      	itt	lt
 800930a:	580b      	ldrlt	r3, [r1, r0]
 800930c:	18c0      	addlt	r0, r0, r3
 800930e:	4770      	bx	lr

08009310 <__swbuf_r>:
 8009310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009312:	460e      	mov	r6, r1
 8009314:	4614      	mov	r4, r2
 8009316:	4605      	mov	r5, r0
 8009318:	b118      	cbz	r0, 8009322 <__swbuf_r+0x12>
 800931a:	6a03      	ldr	r3, [r0, #32]
 800931c:	b90b      	cbnz	r3, 8009322 <__swbuf_r+0x12>
 800931e:	f7ff f82b 	bl	8008378 <__sinit>
 8009322:	69a3      	ldr	r3, [r4, #24]
 8009324:	60a3      	str	r3, [r4, #8]
 8009326:	89a3      	ldrh	r3, [r4, #12]
 8009328:	071a      	lsls	r2, r3, #28
 800932a:	d501      	bpl.n	8009330 <__swbuf_r+0x20>
 800932c:	6923      	ldr	r3, [r4, #16]
 800932e:	b943      	cbnz	r3, 8009342 <__swbuf_r+0x32>
 8009330:	4621      	mov	r1, r4
 8009332:	4628      	mov	r0, r5
 8009334:	f000 f82a 	bl	800938c <__swsetup_r>
 8009338:	b118      	cbz	r0, 8009342 <__swbuf_r+0x32>
 800933a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800933e:	4638      	mov	r0, r7
 8009340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	6922      	ldr	r2, [r4, #16]
 8009346:	1a98      	subs	r0, r3, r2
 8009348:	6963      	ldr	r3, [r4, #20]
 800934a:	b2f6      	uxtb	r6, r6
 800934c:	4283      	cmp	r3, r0
 800934e:	4637      	mov	r7, r6
 8009350:	dc05      	bgt.n	800935e <__swbuf_r+0x4e>
 8009352:	4621      	mov	r1, r4
 8009354:	4628      	mov	r0, r5
 8009356:	f7ff fd09 	bl	8008d6c <_fflush_r>
 800935a:	2800      	cmp	r0, #0
 800935c:	d1ed      	bne.n	800933a <__swbuf_r+0x2a>
 800935e:	68a3      	ldr	r3, [r4, #8]
 8009360:	3b01      	subs	r3, #1
 8009362:	60a3      	str	r3, [r4, #8]
 8009364:	6823      	ldr	r3, [r4, #0]
 8009366:	1c5a      	adds	r2, r3, #1
 8009368:	6022      	str	r2, [r4, #0]
 800936a:	701e      	strb	r6, [r3, #0]
 800936c:	6962      	ldr	r2, [r4, #20]
 800936e:	1c43      	adds	r3, r0, #1
 8009370:	429a      	cmp	r2, r3
 8009372:	d004      	beq.n	800937e <__swbuf_r+0x6e>
 8009374:	89a3      	ldrh	r3, [r4, #12]
 8009376:	07db      	lsls	r3, r3, #31
 8009378:	d5e1      	bpl.n	800933e <__swbuf_r+0x2e>
 800937a:	2e0a      	cmp	r6, #10
 800937c:	d1df      	bne.n	800933e <__swbuf_r+0x2e>
 800937e:	4621      	mov	r1, r4
 8009380:	4628      	mov	r0, r5
 8009382:	f7ff fcf3 	bl	8008d6c <_fflush_r>
 8009386:	2800      	cmp	r0, #0
 8009388:	d0d9      	beq.n	800933e <__swbuf_r+0x2e>
 800938a:	e7d6      	b.n	800933a <__swbuf_r+0x2a>

0800938c <__swsetup_r>:
 800938c:	b538      	push	{r3, r4, r5, lr}
 800938e:	4b29      	ldr	r3, [pc, #164]	@ (8009434 <__swsetup_r+0xa8>)
 8009390:	4605      	mov	r5, r0
 8009392:	6818      	ldr	r0, [r3, #0]
 8009394:	460c      	mov	r4, r1
 8009396:	b118      	cbz	r0, 80093a0 <__swsetup_r+0x14>
 8009398:	6a03      	ldr	r3, [r0, #32]
 800939a:	b90b      	cbnz	r3, 80093a0 <__swsetup_r+0x14>
 800939c:	f7fe ffec 	bl	8008378 <__sinit>
 80093a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093a4:	0719      	lsls	r1, r3, #28
 80093a6:	d422      	bmi.n	80093ee <__swsetup_r+0x62>
 80093a8:	06da      	lsls	r2, r3, #27
 80093aa:	d407      	bmi.n	80093bc <__swsetup_r+0x30>
 80093ac:	2209      	movs	r2, #9
 80093ae:	602a      	str	r2, [r5, #0]
 80093b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093b4:	81a3      	strh	r3, [r4, #12]
 80093b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093ba:	e033      	b.n	8009424 <__swsetup_r+0x98>
 80093bc:	0758      	lsls	r0, r3, #29
 80093be:	d512      	bpl.n	80093e6 <__swsetup_r+0x5a>
 80093c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093c2:	b141      	cbz	r1, 80093d6 <__swsetup_r+0x4a>
 80093c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093c8:	4299      	cmp	r1, r3
 80093ca:	d002      	beq.n	80093d2 <__swsetup_r+0x46>
 80093cc:	4628      	mov	r0, r5
 80093ce:	f7ff fe0b 	bl	8008fe8 <_free_r>
 80093d2:	2300      	movs	r3, #0
 80093d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80093d6:	89a3      	ldrh	r3, [r4, #12]
 80093d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80093dc:	81a3      	strh	r3, [r4, #12]
 80093de:	2300      	movs	r3, #0
 80093e0:	6063      	str	r3, [r4, #4]
 80093e2:	6923      	ldr	r3, [r4, #16]
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	89a3      	ldrh	r3, [r4, #12]
 80093e8:	f043 0308 	orr.w	r3, r3, #8
 80093ec:	81a3      	strh	r3, [r4, #12]
 80093ee:	6923      	ldr	r3, [r4, #16]
 80093f0:	b94b      	cbnz	r3, 8009406 <__swsetup_r+0x7a>
 80093f2:	89a3      	ldrh	r3, [r4, #12]
 80093f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80093f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093fc:	d003      	beq.n	8009406 <__swsetup_r+0x7a>
 80093fe:	4621      	mov	r1, r4
 8009400:	4628      	mov	r0, r5
 8009402:	f000 f83f 	bl	8009484 <__smakebuf_r>
 8009406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800940a:	f013 0201 	ands.w	r2, r3, #1
 800940e:	d00a      	beq.n	8009426 <__swsetup_r+0x9a>
 8009410:	2200      	movs	r2, #0
 8009412:	60a2      	str	r2, [r4, #8]
 8009414:	6962      	ldr	r2, [r4, #20]
 8009416:	4252      	negs	r2, r2
 8009418:	61a2      	str	r2, [r4, #24]
 800941a:	6922      	ldr	r2, [r4, #16]
 800941c:	b942      	cbnz	r2, 8009430 <__swsetup_r+0xa4>
 800941e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009422:	d1c5      	bne.n	80093b0 <__swsetup_r+0x24>
 8009424:	bd38      	pop	{r3, r4, r5, pc}
 8009426:	0799      	lsls	r1, r3, #30
 8009428:	bf58      	it	pl
 800942a:	6962      	ldrpl	r2, [r4, #20]
 800942c:	60a2      	str	r2, [r4, #8]
 800942e:	e7f4      	b.n	800941a <__swsetup_r+0x8e>
 8009430:	2000      	movs	r0, #0
 8009432:	e7f7      	b.n	8009424 <__swsetup_r+0x98>
 8009434:	200000d4 	.word	0x200000d4

08009438 <__swhatbuf_r>:
 8009438:	b570      	push	{r4, r5, r6, lr}
 800943a:	460c      	mov	r4, r1
 800943c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009440:	2900      	cmp	r1, #0
 8009442:	b096      	sub	sp, #88	@ 0x58
 8009444:	4615      	mov	r5, r2
 8009446:	461e      	mov	r6, r3
 8009448:	da0d      	bge.n	8009466 <__swhatbuf_r+0x2e>
 800944a:	89a3      	ldrh	r3, [r4, #12]
 800944c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009450:	f04f 0100 	mov.w	r1, #0
 8009454:	bf14      	ite	ne
 8009456:	2340      	movne	r3, #64	@ 0x40
 8009458:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800945c:	2000      	movs	r0, #0
 800945e:	6031      	str	r1, [r6, #0]
 8009460:	602b      	str	r3, [r5, #0]
 8009462:	b016      	add	sp, #88	@ 0x58
 8009464:	bd70      	pop	{r4, r5, r6, pc}
 8009466:	466a      	mov	r2, sp
 8009468:	f000 f848 	bl	80094fc <_fstat_r>
 800946c:	2800      	cmp	r0, #0
 800946e:	dbec      	blt.n	800944a <__swhatbuf_r+0x12>
 8009470:	9901      	ldr	r1, [sp, #4]
 8009472:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009476:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800947a:	4259      	negs	r1, r3
 800947c:	4159      	adcs	r1, r3
 800947e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009482:	e7eb      	b.n	800945c <__swhatbuf_r+0x24>

08009484 <__smakebuf_r>:
 8009484:	898b      	ldrh	r3, [r1, #12]
 8009486:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009488:	079d      	lsls	r5, r3, #30
 800948a:	4606      	mov	r6, r0
 800948c:	460c      	mov	r4, r1
 800948e:	d507      	bpl.n	80094a0 <__smakebuf_r+0x1c>
 8009490:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009494:	6023      	str	r3, [r4, #0]
 8009496:	6123      	str	r3, [r4, #16]
 8009498:	2301      	movs	r3, #1
 800949a:	6163      	str	r3, [r4, #20]
 800949c:	b003      	add	sp, #12
 800949e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094a0:	ab01      	add	r3, sp, #4
 80094a2:	466a      	mov	r2, sp
 80094a4:	f7ff ffc8 	bl	8009438 <__swhatbuf_r>
 80094a8:	9f00      	ldr	r7, [sp, #0]
 80094aa:	4605      	mov	r5, r0
 80094ac:	4639      	mov	r1, r7
 80094ae:	4630      	mov	r0, r6
 80094b0:	f7ff f9ca 	bl	8008848 <_malloc_r>
 80094b4:	b948      	cbnz	r0, 80094ca <__smakebuf_r+0x46>
 80094b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ba:	059a      	lsls	r2, r3, #22
 80094bc:	d4ee      	bmi.n	800949c <__smakebuf_r+0x18>
 80094be:	f023 0303 	bic.w	r3, r3, #3
 80094c2:	f043 0302 	orr.w	r3, r3, #2
 80094c6:	81a3      	strh	r3, [r4, #12]
 80094c8:	e7e2      	b.n	8009490 <__smakebuf_r+0xc>
 80094ca:	89a3      	ldrh	r3, [r4, #12]
 80094cc:	6020      	str	r0, [r4, #0]
 80094ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094d2:	81a3      	strh	r3, [r4, #12]
 80094d4:	9b01      	ldr	r3, [sp, #4]
 80094d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80094da:	b15b      	cbz	r3, 80094f4 <__smakebuf_r+0x70>
 80094dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094e0:	4630      	mov	r0, r6
 80094e2:	f000 f81d 	bl	8009520 <_isatty_r>
 80094e6:	b128      	cbz	r0, 80094f4 <__smakebuf_r+0x70>
 80094e8:	89a3      	ldrh	r3, [r4, #12]
 80094ea:	f023 0303 	bic.w	r3, r3, #3
 80094ee:	f043 0301 	orr.w	r3, r3, #1
 80094f2:	81a3      	strh	r3, [r4, #12]
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	431d      	orrs	r5, r3
 80094f8:	81a5      	strh	r5, [r4, #12]
 80094fa:	e7cf      	b.n	800949c <__smakebuf_r+0x18>

080094fc <_fstat_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	4d07      	ldr	r5, [pc, #28]	@ (800951c <_fstat_r+0x20>)
 8009500:	2300      	movs	r3, #0
 8009502:	4604      	mov	r4, r0
 8009504:	4608      	mov	r0, r1
 8009506:	4611      	mov	r1, r2
 8009508:	602b      	str	r3, [r5, #0]
 800950a:	f7f7 fcb1 	bl	8000e70 <_fstat>
 800950e:	1c43      	adds	r3, r0, #1
 8009510:	d102      	bne.n	8009518 <_fstat_r+0x1c>
 8009512:	682b      	ldr	r3, [r5, #0]
 8009514:	b103      	cbz	r3, 8009518 <_fstat_r+0x1c>
 8009516:	6023      	str	r3, [r4, #0]
 8009518:	bd38      	pop	{r3, r4, r5, pc}
 800951a:	bf00      	nop
 800951c:	20000634 	.word	0x20000634

08009520 <_isatty_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4d06      	ldr	r5, [pc, #24]	@ (800953c <_isatty_r+0x1c>)
 8009524:	2300      	movs	r3, #0
 8009526:	4604      	mov	r4, r0
 8009528:	4608      	mov	r0, r1
 800952a:	602b      	str	r3, [r5, #0]
 800952c:	f7f7 fcb0 	bl	8000e90 <_isatty>
 8009530:	1c43      	adds	r3, r0, #1
 8009532:	d102      	bne.n	800953a <_isatty_r+0x1a>
 8009534:	682b      	ldr	r3, [r5, #0]
 8009536:	b103      	cbz	r3, 800953a <_isatty_r+0x1a>
 8009538:	6023      	str	r3, [r4, #0]
 800953a:	bd38      	pop	{r3, r4, r5, pc}
 800953c:	20000634 	.word	0x20000634

08009540 <_raise_r>:
 8009540:	291f      	cmp	r1, #31
 8009542:	b538      	push	{r3, r4, r5, lr}
 8009544:	4605      	mov	r5, r0
 8009546:	460c      	mov	r4, r1
 8009548:	d904      	bls.n	8009554 <_raise_r+0x14>
 800954a:	2316      	movs	r3, #22
 800954c:	6003      	str	r3, [r0, #0]
 800954e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009552:	bd38      	pop	{r3, r4, r5, pc}
 8009554:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009556:	b112      	cbz	r2, 800955e <_raise_r+0x1e>
 8009558:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800955c:	b94b      	cbnz	r3, 8009572 <_raise_r+0x32>
 800955e:	4628      	mov	r0, r5
 8009560:	f000 f830 	bl	80095c4 <_getpid_r>
 8009564:	4622      	mov	r2, r4
 8009566:	4601      	mov	r1, r0
 8009568:	4628      	mov	r0, r5
 800956a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800956e:	f000 b817 	b.w	80095a0 <_kill_r>
 8009572:	2b01      	cmp	r3, #1
 8009574:	d00a      	beq.n	800958c <_raise_r+0x4c>
 8009576:	1c59      	adds	r1, r3, #1
 8009578:	d103      	bne.n	8009582 <_raise_r+0x42>
 800957a:	2316      	movs	r3, #22
 800957c:	6003      	str	r3, [r0, #0]
 800957e:	2001      	movs	r0, #1
 8009580:	e7e7      	b.n	8009552 <_raise_r+0x12>
 8009582:	2100      	movs	r1, #0
 8009584:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009588:	4620      	mov	r0, r4
 800958a:	4798      	blx	r3
 800958c:	2000      	movs	r0, #0
 800958e:	e7e0      	b.n	8009552 <_raise_r+0x12>

08009590 <raise>:
 8009590:	4b02      	ldr	r3, [pc, #8]	@ (800959c <raise+0xc>)
 8009592:	4601      	mov	r1, r0
 8009594:	6818      	ldr	r0, [r3, #0]
 8009596:	f7ff bfd3 	b.w	8009540 <_raise_r>
 800959a:	bf00      	nop
 800959c:	200000d4 	.word	0x200000d4

080095a0 <_kill_r>:
 80095a0:	b538      	push	{r3, r4, r5, lr}
 80095a2:	4d07      	ldr	r5, [pc, #28]	@ (80095c0 <_kill_r+0x20>)
 80095a4:	2300      	movs	r3, #0
 80095a6:	4604      	mov	r4, r0
 80095a8:	4608      	mov	r0, r1
 80095aa:	4611      	mov	r1, r2
 80095ac:	602b      	str	r3, [r5, #0]
 80095ae:	f7f7 fbff 	bl	8000db0 <_kill>
 80095b2:	1c43      	adds	r3, r0, #1
 80095b4:	d102      	bne.n	80095bc <_kill_r+0x1c>
 80095b6:	682b      	ldr	r3, [r5, #0]
 80095b8:	b103      	cbz	r3, 80095bc <_kill_r+0x1c>
 80095ba:	6023      	str	r3, [r4, #0]
 80095bc:	bd38      	pop	{r3, r4, r5, pc}
 80095be:	bf00      	nop
 80095c0:	20000634 	.word	0x20000634

080095c4 <_getpid_r>:
 80095c4:	f7f7 bbec 	b.w	8000da0 <_getpid>

080095c8 <_init>:
 80095c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ca:	bf00      	nop
 80095cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ce:	bc08      	pop	{r3}
 80095d0:	469e      	mov	lr, r3
 80095d2:	4770      	bx	lr

080095d4 <_fini>:
 80095d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d6:	bf00      	nop
 80095d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095da:	bc08      	pop	{r3}
 80095dc:	469e      	mov	lr, r3
 80095de:	4770      	bx	lr
