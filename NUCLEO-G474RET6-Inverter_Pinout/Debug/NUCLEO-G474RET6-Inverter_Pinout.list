
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad24  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  0800af04  0800af04  0000bf04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4c4  0800b4c4  0000d1a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4c4  0800b4c4  0000c4c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4cc  0800b4cc  0000d1a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4cc  0800b4cc  0000c4cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4d0  0800b4d0  0000c4d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  0800b4d4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000860  200001a8  0800b67c  0000d1a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a08  0800b67c  0000da08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb38  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039a4  00000000  00000000  00029d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  0002d6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000118a  00000000  00000000  0002ed68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a7b4  00000000  00000000  0002fef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bb08  00000000  00000000  0005a6a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114e90  00000000  00000000  000761ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018b03e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a60  00000000  00000000  0018b084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00191ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001a8 	.word	0x200001a8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800aeec 	.word	0x0800aeec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ac 	.word	0x200001ac
 800021c:	0800aeec 	.word	0x0800aeec

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2220      	movs	r2, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f009 fd8f 	bl	800a11c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005fe:	4b41      	ldr	r3, [pc, #260]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000600:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000604:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000606:	4b3f      	ldr	r3, [pc, #252]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000608:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800060c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060e:	4b3d      	ldr	r3, [pc, #244]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000614:	4b3b      	ldr	r3, [pc, #236]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800061a:	4b3a      	ldr	r3, [pc, #232]	@ (8000704 <MX_ADC1_Init+0x124>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000620:	4b38      	ldr	r3, [pc, #224]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000622:	2201      	movs	r2, #1
 8000624:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000626:	4b37      	ldr	r3, [pc, #220]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000628:	2204      	movs	r2, #4
 800062a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800062c:	4b35      	ldr	r3, [pc, #212]	@ (8000704 <MX_ADC1_Init+0x124>)
 800062e:	2200      	movs	r2, #0
 8000630:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000632:	4b34      	ldr	r3, [pc, #208]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000634:	2201      	movs	r2, #1
 8000636:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000638:	4b32      	ldr	r3, [pc, #200]	@ (8000704 <MX_ADC1_Init+0x124>)
 800063a:	2203      	movs	r2, #3
 800063c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b31      	ldr	r3, [pc, #196]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000646:	4b2f      	ldr	r3, [pc, #188]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000648:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 800064c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800064e:	4b2d      	ldr	r3, [pc, #180]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000650:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000654:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000656:	4b2b      	ldr	r3, [pc, #172]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000658:	2201      	movs	r2, #1
 800065a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065e:	4b29      	ldr	r3, [pc, #164]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000660:	2200      	movs	r2, #0
 8000662:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000664:	4b27      	ldr	r3, [pc, #156]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066c:	4825      	ldr	r0, [pc, #148]	@ (8000704 <MX_ADC1_Init+0x124>)
 800066e:	f001 ffc9 	bl	8002604 <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000678:	f000 fb82 	bl	8000d80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000680:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000684:	4619      	mov	r1, r3
 8000686:	481f      	ldr	r0, [pc, #124]	@ (8000704 <MX_ADC1_Init+0x124>)
 8000688:	f003 fb7a 	bl	8003d80 <HAL_ADCEx_MultiModeConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000692:	f000 fb75 	bl	8000d80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000696:	4b1c      	ldr	r3, [pc, #112]	@ (8000708 <MX_ADC1_Init+0x128>)
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800069a:	2306      	movs	r3, #6
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800069e:	2307      	movs	r3, #7
 80006a0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a2:	237f      	movs	r3, #127	@ 0x7f
 80006a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a6:	2304      	movs	r3, #4
 80006a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4619      	mov	r1, r3
 80006b2:	4814      	ldr	r0, [pc, #80]	@ (8000704 <MX_ADC1_Init+0x124>)
 80006b4:	f002 fcb4 	bl	8003020 <HAL_ADC_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006be:	f000 fb5f 	bl	8000d80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80006c2:	4b12      	ldr	r3, [pc, #72]	@ (800070c <MX_ADC1_Init+0x12c>)
 80006c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c6:	230c      	movs	r3, #12
 80006c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	4619      	mov	r1, r3
 80006ce:	480d      	ldr	r0, [pc, #52]	@ (8000704 <MX_ADC1_Init+0x124>)
 80006d0:	f002 fca6 	bl	8003020 <HAL_ADC_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80006da:	f000 fb51 	bl	8000d80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006de:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_ADC1_Init+0x130>)
 80006e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e2:	2312      	movs	r3, #18
 80006e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4619      	mov	r1, r3
 80006ea:	4806      	ldr	r0, [pc, #24]	@ (8000704 <MX_ADC1_Init+0x124>)
 80006ec:	f002 fc98 	bl	8003020 <HAL_ADC_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80006f6:	f000 fb43 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	3730      	adds	r7, #48	@ 0x30
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200001c4 	.word	0x200001c4
 8000708:	08600004 	.word	0x08600004
 800070c:	32601000 	.word	0x32601000
 8000710:	21800100 	.word	0x21800100

08000714 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800071a:	463b      	mov	r3, r7
 800071c:	2220      	movs	r2, #32
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f009 fcfb 	bl	800a11c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000726:	4b2b      	ldr	r3, [pc, #172]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000728:	4a2b      	ldr	r2, [pc, #172]	@ (80007d8 <MX_ADC2_Init+0xc4>)
 800072a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800072c:	4b29      	ldr	r3, [pc, #164]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 800072e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000732:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000734:	4b27      	ldr	r3, [pc, #156]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800073a:	4b26      	ldr	r3, [pc, #152]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000740:	4b24      	ldr	r3, [pc, #144]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000746:	4b23      	ldr	r3, [pc, #140]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074c:	4b21      	ldr	r3, [pc, #132]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 800074e:	2204      	movs	r2, #4
 8000750:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000752:	4b20      	ldr	r3, [pc, #128]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000754:	2200      	movs	r2, #0
 8000756:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000758:	4b1e      	ldr	r3, [pc, #120]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 800075a:	2200      	movs	r2, #0
 800075c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800075e:	4b1d      	ldr	r3, [pc, #116]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000760:	2201      	movs	r2, #1
 8000762:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000764:	4b1b      	ldr	r3, [pc, #108]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000766:	2200      	movs	r2, #0
 8000768:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800076c:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 800076e:	2200      	movs	r2, #0
 8000770:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000772:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000774:	2200      	movs	r2, #0
 8000776:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000778:	4b16      	ldr	r3, [pc, #88]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 800077a:	2200      	movs	r2, #0
 800077c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000780:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000782:	2200      	movs	r2, #0
 8000784:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000786:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000788:	2200      	movs	r2, #0
 800078a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800078e:	4811      	ldr	r0, [pc, #68]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 8000790:	f001 ff38 	bl	8002604 <HAL_ADC_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800079a:	f000 faf1 	bl	8000d80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800079e:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <MX_ADC2_Init+0xc8>)
 80007a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007a2:	2306      	movs	r3, #6
 80007a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007aa:	237f      	movs	r3, #127	@ 0x7f
 80007ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007ae:	2304      	movs	r3, #4
 80007b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007b6:	463b      	mov	r3, r7
 80007b8:	4619      	mov	r1, r3
 80007ba:	4806      	ldr	r0, [pc, #24]	@ (80007d4 <MX_ADC2_Init+0xc0>)
 80007bc:	f002 fc30 	bl	8003020 <HAL_ADC_ConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80007c6:	f000 fadb 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	3720      	adds	r7, #32
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000230 	.word	0x20000230
 80007d8:	50000100 	.word	0x50000100
 80007dc:	19200040 	.word	0x19200040

080007e0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b0a4      	sub	sp, #144	@ 0x90
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007fc:	2254      	movs	r2, #84	@ 0x54
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f009 fc8b 	bl	800a11c <memset>
  if(adcHandle->Instance==ADC1)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800080e:	f040 80a9 	bne.w	8000964 <HAL_ADC_MspInit+0x184>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000812:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000816:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000818:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800081c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800081e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000822:	4618      	mov	r0, r3
 8000824:	f004 ff98 	bl	8005758 <HAL_RCCEx_PeriphCLKConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800082e:	f000 faa7 	bl	8000d80 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000832:	4b82      	ldr	r3, [pc, #520]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	3301      	adds	r3, #1
 8000838:	4a80      	ldr	r2, [pc, #512]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 800083a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800083c:	4b7f      	ldr	r3, [pc, #508]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d10b      	bne.n	800085c <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000844:	4b7e      	ldr	r3, [pc, #504]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 8000846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000848:	4a7d      	ldr	r2, [pc, #500]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 800084a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800084e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000850:	4b7b      	ldr	r3, [pc, #492]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 8000852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000854:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24
 800085a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800085c:	4b78      	ldr	r3, [pc, #480]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 800085e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000860:	4a77      	ldr	r2, [pc, #476]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000868:	4b75      	ldr	r3, [pc, #468]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 800086a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	623b      	str	r3, [r7, #32]
 8000872:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000874:	4b72      	ldr	r3, [pc, #456]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 8000876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000878:	4a71      	ldr	r2, [pc, #452]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000880:	4b6f      	ldr	r3, [pc, #444]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 8000882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	61fb      	str	r3, [r7, #28]
 800088a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088c:	4b6c      	ldr	r3, [pc, #432]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 800088e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000890:	4a6b      	ldr	r2, [pc, #428]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 8000892:	f043 0302 	orr.w	r3, r3, #2
 8000896:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000898:	4b69      	ldr	r3, [pc, #420]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 800089a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089c:	f003 0302 	and.w	r3, r3, #2
 80008a0:	61bb      	str	r3, [r7, #24]
 80008a2:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 80008a4:	2304      	movs	r3, #4
 80008a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a8:	2303      	movs	r3, #3
 80008aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008b8:	4619      	mov	r1, r3
 80008ba:	4862      	ldr	r0, [pc, #392]	@ (8000a44 <HAL_ADC_MspInit+0x264>)
 80008bc:	f003 ff7a 	bl	80047b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80008c0:	2302      	movs	r3, #2
 80008c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c4:	2303      	movs	r3, #3
 80008c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008d4:	4619      	mov	r1, r3
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008da:	f003 ff6b 	bl	80047b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_Imes_Pin|V_Imes_Pin;
 80008de:	2303      	movs	r3, #3
 80008e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e2:	2303      	movs	r3, #3
 80008e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ee:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008f2:	4619      	mov	r1, r3
 80008f4:	4854      	ldr	r0, [pc, #336]	@ (8000a48 <HAL_ADC_MspInit+0x268>)
 80008f6:	f003 ff5d 	bl	80047b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80008fa:	4b54      	ldr	r3, [pc, #336]	@ (8000a4c <HAL_ADC_MspInit+0x26c>)
 80008fc:	4a54      	ldr	r2, [pc, #336]	@ (8000a50 <HAL_ADC_MspInit+0x270>)
 80008fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000900:	4b52      	ldr	r3, [pc, #328]	@ (8000a4c <HAL_ADC_MspInit+0x26c>)
 8000902:	2205      	movs	r2, #5
 8000904:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000906:	4b51      	ldr	r3, [pc, #324]	@ (8000a4c <HAL_ADC_MspInit+0x26c>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800090c:	4b4f      	ldr	r3, [pc, #316]	@ (8000a4c <HAL_ADC_MspInit+0x26c>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000912:	4b4e      	ldr	r3, [pc, #312]	@ (8000a4c <HAL_ADC_MspInit+0x26c>)
 8000914:	2280      	movs	r2, #128	@ 0x80
 8000916:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000918:	4b4c      	ldr	r3, [pc, #304]	@ (8000a4c <HAL_ADC_MspInit+0x26c>)
 800091a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800091e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000920:	4b4a      	ldr	r3, [pc, #296]	@ (8000a4c <HAL_ADC_MspInit+0x26c>)
 8000922:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000926:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000928:	4b48      	ldr	r3, [pc, #288]	@ (8000a4c <HAL_ADC_MspInit+0x26c>)
 800092a:	2220      	movs	r2, #32
 800092c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800092e:	4b47      	ldr	r3, [pc, #284]	@ (8000a4c <HAL_ADC_MspInit+0x26c>)
 8000930:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000934:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000936:	4845      	ldr	r0, [pc, #276]	@ (8000a4c <HAL_ADC_MspInit+0x26c>)
 8000938:	f003 fc0a 	bl	8004150 <HAL_DMA_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_ADC_MspInit+0x166>
    {
      Error_Handler();
 8000942:	f000 fa1d 	bl	8000d80 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a40      	ldr	r2, [pc, #256]	@ (8000a4c <HAL_ADC_MspInit+0x26c>)
 800094a:	655a      	str	r2, [r3, #84]	@ 0x54
 800094c:	4a3f      	ldr	r2, [pc, #252]	@ (8000a4c <HAL_ADC_MspInit+0x26c>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	2012      	movs	r0, #18
 8000958:	f003 fbd2 	bl	8004100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800095c:	2012      	movs	r0, #18
 800095e:	f003 fbe9 	bl	8004134 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000962:	e066      	b.n	8000a32 <HAL_ADC_MspInit+0x252>
  else if(adcHandle->Instance==ADC2)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a3a      	ldr	r2, [pc, #232]	@ (8000a54 <HAL_ADC_MspInit+0x274>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d161      	bne.n	8000a32 <HAL_ADC_MspInit+0x252>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800096e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000974:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000978:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800097a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800097e:	4618      	mov	r0, r3
 8000980:	f004 feea 	bl	8005758 <HAL_RCCEx_PeriphCLKConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_ADC_MspInit+0x1ae>
      Error_Handler();
 800098a:	f000 f9f9 	bl	8000d80 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800098e:	4b2b      	ldr	r3, [pc, #172]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	3301      	adds	r3, #1
 8000994:	4a29      	ldr	r2, [pc, #164]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 8000996:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000998:	4b28      	ldr	r3, [pc, #160]	@ (8000a3c <HAL_ADC_MspInit+0x25c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d10b      	bne.n	80009b8 <HAL_ADC_MspInit+0x1d8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80009a0:	4b27      	ldr	r3, [pc, #156]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 80009a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a4:	4a26      	ldr	r2, [pc, #152]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 80009a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ac:	4b24      	ldr	r3, [pc, #144]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 80009ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009b4:	617b      	str	r3, [r7, #20]
 80009b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b8:	4b21      	ldr	r3, [pc, #132]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 80009ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009bc:	4a20      	ldr	r2, [pc, #128]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 80009be:	f043 0304 	orr.w	r3, r3, #4
 80009c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 80009c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c8:	f003 0304 	and.w	r3, r3, #4
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 80009d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d4:	4a1a      	ldr	r2, [pc, #104]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009dc:	4b18      	ldr	r3, [pc, #96]	@ (8000a40 <HAL_ADC_MspInit+0x260>)
 80009de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 80009e8:	230b      	movs	r3, #11
 80009ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80009fc:	4619      	mov	r1, r3
 80009fe:	4811      	ldr	r0, [pc, #68]	@ (8000a44 <HAL_ADC_MspInit+0x264>)
 8000a00:	f003 fed8 	bl	80047b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000a04:	2301      	movs	r3, #1
 8000a06:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a1e:	f003 fec9 	bl	80047b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	2012      	movs	r0, #18
 8000a28:	f003 fb6a 	bl	8004100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a2c:	2012      	movs	r0, #18
 8000a2e:	f003 fb81 	bl	8004134 <HAL_NVIC_EnableIRQ>
}
 8000a32:	bf00      	nop
 8000a34:	3790      	adds	r7, #144	@ 0x90
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200002fc 	.word	0x200002fc
 8000a40:	40021000 	.word	0x40021000
 8000a44:	48000800 	.word	0x48000800
 8000a48:	48000400 	.word	0x48000400
 8000a4c:	2000029c 	.word	0x2000029c
 8000a50:	40020008 	.word	0x40020008
 8000a54:	50000100 	.word	0x50000100

08000a58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a5e:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <MX_DMA_Init+0x50>)
 8000a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a62:	4a11      	ldr	r2, [pc, #68]	@ (8000aa8 <MX_DMA_Init+0x50>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <MX_DMA_Init+0x50>)
 8000a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a76:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <MX_DMA_Init+0x50>)
 8000a78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000aa8 <MX_DMA_Init+0x50>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a82:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <MX_DMA_Init+0x50>)
 8000a84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2100      	movs	r1, #0
 8000a92:	200b      	movs	r0, #11
 8000a94:	f003 fb34 	bl	8004100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a98:	200b      	movs	r0, #11
 8000a9a:	f003 fb4b 	bl	8004134 <HAL_NVIC_EnableIRQ>

}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40021000 	.word	0x40021000

08000aac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	@ 0x28
 8000ab0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	4b3f      	ldr	r3, [pc, #252]	@ (8000bc0 <MX_GPIO_Init+0x114>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac6:	4a3e      	ldr	r2, [pc, #248]	@ (8000bc0 <MX_GPIO_Init+0x114>)
 8000ac8:	f043 0304 	orr.w	r3, r3, #4
 8000acc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ace:	4b3c      	ldr	r3, [pc, #240]	@ (8000bc0 <MX_GPIO_Init+0x114>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad2:	f003 0304 	and.w	r3, r3, #4
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ada:	4b39      	ldr	r3, [pc, #228]	@ (8000bc0 <MX_GPIO_Init+0x114>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ade:	4a38      	ldr	r2, [pc, #224]	@ (8000bc0 <MX_GPIO_Init+0x114>)
 8000ae0:	f043 0320 	orr.w	r3, r3, #32
 8000ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae6:	4b36      	ldr	r3, [pc, #216]	@ (8000bc0 <MX_GPIO_Init+0x114>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aea:	f003 0320 	and.w	r3, r3, #32
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	4b33      	ldr	r3, [pc, #204]	@ (8000bc0 <MX_GPIO_Init+0x114>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af6:	4a32      	ldr	r2, [pc, #200]	@ (8000bc0 <MX_GPIO_Init+0x114>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afe:	4b30      	ldr	r3, [pc, #192]	@ (8000bc0 <MX_GPIO_Init+0x114>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc0 <MX_GPIO_Init+0x114>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0e:	4a2c      	ldr	r2, [pc, #176]	@ (8000bc0 <MX_GPIO_Init+0x114>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b16:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc0 <MX_GPIO_Init+0x114>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b22:	4b27      	ldr	r3, [pc, #156]	@ (8000bc0 <MX_GPIO_Init+0x114>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b26:	4a26      	ldr	r2, [pc, #152]	@ (8000bc0 <MX_GPIO_Init+0x114>)
 8000b28:	f043 0308 	orr.w	r3, r3, #8
 8000b2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b2e:	4b24      	ldr	r3, [pc, #144]	@ (8000bc0 <MX_GPIO_Init+0x114>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b32:	f003 0308 	and.w	r3, r3, #8
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2120      	movs	r1, #32
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b42:	f003 ffb9 	bl	8004ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2104      	movs	r1, #4
 8000b4a:	481e      	ldr	r0, [pc, #120]	@ (8000bc4 <MX_GPIO_Init+0x118>)
 8000b4c:	f003 ffb4 	bl	8004ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000b50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	4818      	ldr	r0, [pc, #96]	@ (8000bc8 <MX_GPIO_Init+0x11c>)
 8000b68:	f003 fe24 	bl	80047b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000b6c:	2320      	movs	r3, #32
 8000b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b86:	f003 fe15 	bl	80047b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4808      	ldr	r0, [pc, #32]	@ (8000bc4 <MX_GPIO_Init+0x118>)
 8000ba2:	f003 fe07 	bl	80047b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2028      	movs	r0, #40	@ 0x28
 8000bac:	f003 faa8 	bl	8004100 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bb0:	2028      	movs	r0, #40	@ 0x28
 8000bb2:	f003 fabf 	bl	8004134 <HAL_NVIC_EnableIRQ>

}
 8000bb6:	bf00      	nop
 8000bb8:	3728      	adds	r7, #40	@ 0x28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	48000c00 	.word	0x48000c00
 8000bc8:	48000800 	.word	0x48000800

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd0:	f001 fa7b 	bl	80020ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd4:	f000 f83a 	bl	8000c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd8:	f7ff ff68 	bl	8000aac <MX_GPIO_Init>
  MX_DMA_Init();
 8000bdc:	f7ff ff3c 	bl	8000a58 <MX_DMA_Init>
  MX_ADC2_Init();
 8000be0:	f7ff fd98 	bl	8000714 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000be4:	f7ff fcfc 	bl	80005e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000be8:	f000 fad6 	bl	8001198 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000bec:	f000 fbf0 	bl	80013d0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000bf0:	f000 fd62 	bl	80016b8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000bf4:	f000 fdac 	bl	8001750 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000bf8:	f000 fb9c 	bl	8001334 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 8000bfc:	217f      	movs	r1, #127	@ 0x7f
 8000bfe:	480f      	ldr	r0, [pc, #60]	@ (8000c3c <main+0x70>)
 8000c00:	f003 f82a 	bl	8003c58 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1,(uint16_t*)&ADC_VAL,3);
 8000c04:	2203      	movs	r2, #3
 8000c06:	490e      	ldr	r1, [pc, #56]	@ (8000c40 <main+0x74>)
 8000c08:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <main+0x70>)
 8000c0a:	f001 feb7 	bl	800297c <HAL_ADC_Start_DMA>

	Shell_Init();
 8000c0e:	f000 fe93 	bl	8001938 <Shell_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 8000c12:	f000 fed3 	bl	80019bc <Shell_Loop>
		if(isADC){
 8000c16:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <main+0x78>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d0f9      	beq.n	8000c12 <main+0x46>
			printf("Valeur U,V,BUS IMES:\t%lu\t%lu\t%lu\r\n",ADC_VAL[0],ADC_VAL[1],ADC_VAL[2]);
 8000c1e:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <main+0x74>)
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	4619      	mov	r1, r3
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <main+0x74>)
 8000c26:	885b      	ldrh	r3, [r3, #2]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b05      	ldr	r3, [pc, #20]	@ (8000c40 <main+0x74>)
 8000c2c:	889b      	ldrh	r3, [r3, #4]
 8000c2e:	4806      	ldr	r0, [pc, #24]	@ (8000c48 <main+0x7c>)
 8000c30:	f009 fa06 	bl	800a040 <iprintf>
			isADC=0;
 8000c34:	4b03      	ldr	r3, [pc, #12]	@ (8000c44 <main+0x78>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
		Shell_Loop();
 8000c3a:	e7ea      	b.n	8000c12 <main+0x46>
 8000c3c:	200001c4 	.word	0x200001c4
 8000c40:	20000300 	.word	0x20000300
 8000c44:	20000308 	.word	0x20000308
 8000c48:	0800af04 	.word	0x0800af04

08000c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b094      	sub	sp, #80	@ 0x50
 8000c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c52:	f107 0318 	add.w	r3, r7, #24
 8000c56:	2238      	movs	r2, #56	@ 0x38
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f009 fa5e 	bl	800a11c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f003 ff5e 	bl	8004b30 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c74:	2301      	movs	r3, #1
 8000c76:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c7c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c82:	2303      	movs	r3, #3
 8000c84:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000c86:	2306      	movs	r3, #6
 8000c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000c8a:	2355      	movs	r3, #85	@ 0x55
 8000c8c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c92:	2302      	movs	r3, #2
 8000c94:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c96:	2302      	movs	r3, #2
 8000c98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9a:	f107 0318 	add.w	r3, r7, #24
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f003 fffa 	bl	8004c98 <HAL_RCC_OscConfig>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000caa:	f000 f869 	bl	8000d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cae:	230f      	movs	r3, #15
 8000cb0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2104      	movs	r1, #4
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f004 faf8 	bl	80052bc <HAL_RCC_ClockConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000cd2:	f000 f855 	bl	8000d80 <Error_Handler>
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	3750      	adds	r7, #80	@ 0x50
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	uint32_t pulse_1 = htim1.Instance->CCR1 ;
 8000ce8:	4b21      	ldr	r3, [pc, #132]	@ (8000d70 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cee:	617b      	str	r3, [r7, #20]
	uint32_t pulse_2 = htim1.Instance->CCR2;
 8000cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d70 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cf6:	613b      	str	r3, [r7, #16]
	if(htim->Instance== TIM2){
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d00:	d12b      	bne.n	8000d5a <HAL_TIM_PeriodElapsedCallback+0x7a>
		if(pulse_1!= pulseGoal_1){
 8000d02:	4b1c      	ldr	r3, [pc, #112]	@ (8000d74 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	697a      	ldr	r2, [r7, #20]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d010      	beq.n	8000d2e <HAL_TIM_PeriodElapsedCallback+0x4e>
			int8_t sign_1 = pulse_1 > pulseGoal_1?
 8000d0c:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d902      	bls.n	8000d1c <HAL_TIM_PeriodElapsedCallback+0x3c>
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d1a:	e000      	b.n	8000d1e <HAL_TIM_PeriodElapsedCallback+0x3e>
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	73fb      	strb	r3, [r7, #15]
					-1:1;
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse_1 + sign_1);
 8000d20:	f997 100f 	ldrsb.w	r1, [r7, #15]
 8000d24:	4b12      	ldr	r3, [pc, #72]	@ (8000d70 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	440a      	add	r2, r1
 8000d2c:	635a      	str	r2, [r3, #52]	@ 0x34
		}
		if(pulse_2!=pulseGoal_2){
 8000d2e:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d010      	beq.n	8000d5a <HAL_TIM_PeriodElapsedCallback+0x7a>
			int8_t sign_2 = pulse_2 > pulseGoal_2?
 8000d38:	4b0f      	ldr	r3, [pc, #60]	@ (8000d78 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d902      	bls.n	8000d48 <HAL_TIM_PeriodElapsedCallback+0x68>
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d46:	e000      	b.n	8000d4a <HAL_TIM_PeriodElapsedCallback+0x6a>
 8000d48:	2301      	movs	r3, #1
 8000d4a:	73bb      	strb	r3, [r7, #14]
					-1:1;
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_2 + sign_2);
 8000d4c:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	440a      	add	r2, r1
 8000d58:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a07      	ldr	r2, [pc, #28]	@ (8000d7c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d101      	bne.n	8000d68 <HAL_TIM_PeriodElapsedCallback+0x88>
    HAL_IncTick();
 8000d64:	f001 f9ca 	bl	80020fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	2000035c 	.word	0x2000035c
 8000d74:	20000834 	.word	0x20000834
 8000d78:	20000838 	.word	0x20000838
 8000d7c:	40001000 	.word	0x40001000

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <Error_Handler+0x8>

08000d8c <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000d94:	1d39      	adds	r1, r7, #4
 8000d96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	4803      	ldr	r0, [pc, #12]	@ (8000dac <__io_putchar+0x20>)
 8000d9e:	f006 ff0a 	bl	8007bb6 <HAL_UART_Transmit>

	return ch;
 8000da2:	687b      	ldr	r3, [r7, #4]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000440 	.word	0x20000440

08000db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	4b0f      	ldr	r3, [pc, #60]	@ (8000df4 <HAL_MspInit+0x44>)
 8000db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dba:	4a0e      	ldr	r2, [pc, #56]	@ (8000df4 <HAL_MspInit+0x44>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <HAL_MspInit+0x44>)
 8000dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	4b09      	ldr	r3, [pc, #36]	@ (8000df4 <HAL_MspInit+0x44>)
 8000dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dd2:	4a08      	ldr	r2, [pc, #32]	@ (8000df4 <HAL_MspInit+0x44>)
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dda:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <HAL_MspInit+0x44>)
 8000ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000de6:	f003 ff47 	bl	8004c78 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40021000 	.word	0x40021000

08000df8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08c      	sub	sp, #48	@ 0x30
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e08:	4b2c      	ldr	r3, [pc, #176]	@ (8000ebc <HAL_InitTick+0xc4>)
 8000e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e0c:	4a2b      	ldr	r2, [pc, #172]	@ (8000ebc <HAL_InitTick+0xc4>)
 8000e0e:	f043 0310 	orr.w	r3, r3, #16
 8000e12:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e14:	4b29      	ldr	r3, [pc, #164]	@ (8000ebc <HAL_InitTick+0xc4>)
 8000e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e18:	f003 0310 	and.w	r3, r3, #16
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e20:	f107 020c 	add.w	r2, r7, #12
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f004 fc1c 	bl	8005668 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e30:	f004 fbee 	bl	8005610 <HAL_RCC_GetPCLK1Freq>
 8000e34:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e38:	4a21      	ldr	r2, [pc, #132]	@ (8000ec0 <HAL_InitTick+0xc8>)
 8000e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3e:	0c9b      	lsrs	r3, r3, #18
 8000e40:	3b01      	subs	r3, #1
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e44:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec4 <HAL_InitTick+0xcc>)
 8000e46:	4a20      	ldr	r2, [pc, #128]	@ (8000ec8 <HAL_InitTick+0xd0>)
 8000e48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec4 <HAL_InitTick+0xcc>)
 8000e4c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e50:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e52:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec4 <HAL_InitTick+0xcc>)
 8000e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e56:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e58:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <HAL_InitTick+0xcc>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5e:	4b19      	ldr	r3, [pc, #100]	@ (8000ec4 <HAL_InitTick+0xcc>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000e64:	4817      	ldr	r0, [pc, #92]	@ (8000ec4 <HAL_InitTick+0xcc>)
 8000e66:	f004 fec5 	bl	8005bf4 <HAL_TIM_Base_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d11b      	bne.n	8000eb0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e78:	4812      	ldr	r0, [pc, #72]	@ (8000ec4 <HAL_InitTick+0xcc>)
 8000e7a:	f004 ffab 	bl	8005dd4 <HAL_TIM_Base_Start_IT>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d111      	bne.n	8000eb0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e8c:	2036      	movs	r0, #54	@ 0x36
 8000e8e:	f003 f951 	bl	8004134 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b0f      	cmp	r3, #15
 8000e96:	d808      	bhi.n	8000eaa <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	2036      	movs	r0, #54	@ 0x36
 8000e9e:	f003 f92f 	bl	8004100 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <HAL_InitTick+0xd4>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	e002      	b.n	8000eb0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000eb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3730      	adds	r7, #48	@ 0x30
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	431bde83 	.word	0x431bde83
 8000ec4:	2000030c 	.word	0x2000030c
 8000ec8:	40001000 	.word	0x40001000
 8000ecc:	20000144 	.word	0x20000144

08000ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <NMI_Handler+0x4>

08000ed8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <BusFault_Handler+0x4>

08000ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <UsageFault_Handler+0x4>

08000ef8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <DMA1_Channel1_IRQHandler+0x10>)
 8000f36:	f003 faee 	bl	8004516 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000029c 	.word	0x2000029c

08000f44 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f48:	4803      	ldr	r0, [pc, #12]	@ (8000f58 <ADC1_2_IRQHandler+0x14>)
 8000f4a:	f001 fdeb 	bl	8002b24 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000f4e:	4803      	ldr	r0, [pc, #12]	@ (8000f5c <ADC1_2_IRQHandler+0x18>)
 8000f50:	f001 fde8 	bl	8002b24 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200001c4 	.word	0x200001c4
 8000f5c:	20000230 	.word	0x20000230

08000f60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f64:	4802      	ldr	r0, [pc, #8]	@ (8000f70 <TIM2_IRQHandler+0x10>)
 8000f66:	f005 f9bd 	bl	80062e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200003a8 	.word	0x200003a8

08000f74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f78:	4802      	ldr	r0, [pc, #8]	@ (8000f84 <USART2_IRQHandler+0x10>)
 8000f7a:	f006 fef7 	bl	8007d6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000440 	.word	0x20000440

08000f88 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f8c:	4802      	ldr	r0, [pc, #8]	@ (8000f98 <USART3_IRQHandler+0x10>)
 8000f8e:	f006 feed 	bl	8007d6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200004d4 	.word	0x200004d4

08000f9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000fa0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000fa4:	f003 fda0 	bl	8004ae8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fb0:	4802      	ldr	r0, [pc, #8]	@ (8000fbc <TIM6_DAC_IRQHandler+0x10>)
 8000fb2:	f005 f997 	bl	80062e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000030c 	.word	0x2000030c

08000fc0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1){
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fd0:	d102      	bne.n	8000fd8 <HAL_ADC_ConvCpltCallback+0x18>
		isADC = 1;
 8000fd2:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <HAL_ADC_ConvCpltCallback+0x24>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]
	}
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	20000308 	.word	0x20000308

08000fe8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return 1;
 8000fec:	2301      	movs	r3, #1
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <_kill>:

int _kill(int pid, int sig)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001002:	f009 f893 	bl	800a12c <__errno>
 8001006:	4603      	mov	r3, r0
 8001008:	2216      	movs	r2, #22
 800100a:	601a      	str	r2, [r3, #0]
  return -1;
 800100c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <_exit>:

void _exit (int status)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001020:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ffe7 	bl	8000ff8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800102a:	bf00      	nop
 800102c:	e7fd      	b.n	800102a <_exit+0x12>

0800102e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b086      	sub	sp, #24
 8001032:	af00      	add	r7, sp, #0
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	e00a      	b.n	8001056 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001040:	f3af 8000 	nop.w
 8001044:	4601      	mov	r1, r0
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	1c5a      	adds	r2, r3, #1
 800104a:	60ba      	str	r2, [r7, #8]
 800104c:	b2ca      	uxtb	r2, r1
 800104e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	3301      	adds	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	429a      	cmp	r2, r3
 800105c:	dbf0      	blt.n	8001040 <_read+0x12>
  }

  return len;
 800105e:	687b      	ldr	r3, [r7, #4]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	e009      	b.n	800108e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	1c5a      	adds	r2, r3, #1
 800107e:	60ba      	str	r2, [r7, #8]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fe82 	bl	8000d8c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	3301      	adds	r3, #1
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	429a      	cmp	r2, r3
 8001094:	dbf1      	blt.n	800107a <_write+0x12>
  }
  return len;
 8001096:	687b      	ldr	r3, [r7, #4]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_close>:

int _close(int file)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010c8:	605a      	str	r2, [r3, #4]
  return 0;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_isatty>:

int _isatty(int file)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010e0:	2301      	movs	r3, #1
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b085      	sub	sp, #20
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	60f8      	str	r0, [r7, #12]
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001110:	4a14      	ldr	r2, [pc, #80]	@ (8001164 <_sbrk+0x5c>)
 8001112:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <_sbrk+0x60>)
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800111c:	4b13      	ldr	r3, [pc, #76]	@ (800116c <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d102      	bne.n	800112a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001124:	4b11      	ldr	r3, [pc, #68]	@ (800116c <_sbrk+0x64>)
 8001126:	4a12      	ldr	r2, [pc, #72]	@ (8001170 <_sbrk+0x68>)
 8001128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800112a:	4b10      	ldr	r3, [pc, #64]	@ (800116c <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	429a      	cmp	r2, r3
 8001136:	d207      	bcs.n	8001148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001138:	f008 fff8 	bl	800a12c <__errno>
 800113c:	4603      	mov	r3, r0
 800113e:	220c      	movs	r2, #12
 8001140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001146:	e009      	b.n	800115c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001148:	4b08      	ldr	r3, [pc, #32]	@ (800116c <_sbrk+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800114e:	4b07      	ldr	r3, [pc, #28]	@ (800116c <_sbrk+0x64>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	4a05      	ldr	r2, [pc, #20]	@ (800116c <_sbrk+0x64>)
 8001158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800115a:	68fb      	ldr	r3, [r7, #12]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20020000 	.word	0x20020000
 8001168:	00000400 	.word	0x00000400
 800116c:	20000358 	.word	0x20000358
 8001170:	20000a08 	.word	0x20000a08

08001174 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <SystemInit+0x20>)
 800117a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800117e:	4a05      	ldr	r2, [pc, #20]	@ (8001194 <SystemInit+0x20>)
 8001180:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001184:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b09c      	sub	sp, #112	@ 0x70
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
 80011c8:	615a      	str	r2, [r3, #20]
 80011ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2234      	movs	r2, #52	@ 0x34
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f008 ffa2 	bl	800a11c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011d8:	4b54      	ldr	r3, [pc, #336]	@ (800132c <MX_TIM1_Init+0x194>)
 80011da:	4a55      	ldr	r2, [pc, #340]	@ (8001330 <MX_TIM1_Init+0x198>)
 80011dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011de:	4b53      	ldr	r3, [pc, #332]	@ (800132c <MX_TIM1_Init+0x194>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80011e4:	4b51      	ldr	r3, [pc, #324]	@ (800132c <MX_TIM1_Init+0x194>)
 80011e6:	2220      	movs	r2, #32
 80011e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 80011ea:	4b50      	ldr	r3, [pc, #320]	@ (800132c <MX_TIM1_Init+0x194>)
 80011ec:	f242 1233 	movw	r2, #8499	@ 0x2133
 80011f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f2:	4b4e      	ldr	r3, [pc, #312]	@ (800132c <MX_TIM1_Init+0x194>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011f8:	4b4c      	ldr	r3, [pc, #304]	@ (800132c <MX_TIM1_Init+0x194>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011fe:	4b4b      	ldr	r3, [pc, #300]	@ (800132c <MX_TIM1_Init+0x194>)
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001204:	4849      	ldr	r0, [pc, #292]	@ (800132c <MX_TIM1_Init+0x194>)
 8001206:	f004 fcf5 	bl	8005bf4 <HAL_TIM_Base_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001210:	f7ff fdb6 	bl	8000d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001214:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001218:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800121a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800121e:	4619      	mov	r1, r3
 8001220:	4842      	ldr	r0, [pc, #264]	@ (800132c <MX_TIM1_Init+0x194>)
 8001222:	f005 fac3 	bl	80067ac <HAL_TIM_ConfigClockSource>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800122c:	f7ff fda8 	bl	8000d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001230:	483e      	ldr	r0, [pc, #248]	@ (800132c <MX_TIM1_Init+0x194>)
 8001232:	f004 fe47 	bl	8005ec4 <HAL_TIM_PWM_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800123c:	f7ff fda0 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001240:	2320      	movs	r3, #32
 8001242:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8001244:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001248:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800124e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001252:	4619      	mov	r1, r3
 8001254:	4835      	ldr	r0, [pc, #212]	@ (800132c <MX_TIM1_Init+0x194>)
 8001256:	f006 fac9 	bl	80077ec <HAL_TIMEx_MasterConfigSynchronization>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001260:	f7ff fd8e 	bl	8000d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001264:	2360      	movs	r3, #96	@ 0x60
 8001266:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800126c:	2300      	movs	r3, #0
 800126e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001270:	2300      	movs	r3, #0
 8001272:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001278:	2300      	movs	r3, #0
 800127a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800127c:	2300      	movs	r3, #0
 800127e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001280:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001284:	2200      	movs	r2, #0
 8001286:	4619      	mov	r1, r3
 8001288:	4828      	ldr	r0, [pc, #160]	@ (800132c <MX_TIM1_Init+0x194>)
 800128a:	f005 f97b 	bl	8006584 <HAL_TIM_PWM_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001294:	f7ff fd74 	bl	8000d80 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8001298:	4b24      	ldr	r3, [pc, #144]	@ (800132c <MX_TIM1_Init+0x194>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	699a      	ldr	r2, [r3, #24]
 800129e:	4b23      	ldr	r3, [pc, #140]	@ (800132c <MX_TIM1_Init+0x194>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0208 	bic.w	r2, r2, #8
 80012a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012a8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012ac:	2204      	movs	r2, #4
 80012ae:	4619      	mov	r1, r3
 80012b0:	481e      	ldr	r0, [pc, #120]	@ (800132c <MX_TIM1_Init+0x194>)
 80012b2:	f005 f967 	bl	8006584 <HAL_TIM_PWM_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80012bc:	f7ff fd60 	bl	8000d80 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 80012c0:	4b1a      	ldr	r3, [pc, #104]	@ (800132c <MX_TIM1_Init+0x194>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	699a      	ldr	r2, [r3, #24]
 80012c6:	4b19      	ldr	r3, [pc, #100]	@ (800132c <MX_TIM1_Init+0x194>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012ce:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 17;
 80012dc:	2311      	movs	r3, #17
 80012de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001300:	2300      	movs	r3, #0
 8001302:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4619      	mov	r1, r3
 800130c:	4807      	ldr	r0, [pc, #28]	@ (800132c <MX_TIM1_Init+0x194>)
 800130e:	f006 fb03 	bl	8007918 <HAL_TIMEx_ConfigBreakDeadTime>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 8001318:	f7ff fd32 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800131c:	4803      	ldr	r0, [pc, #12]	@ (800132c <MX_TIM1_Init+0x194>)
 800131e:	f000 f963 	bl	80015e8 <HAL_TIM_MspPostInit>

}
 8001322:	bf00      	nop
 8001324:	3770      	adds	r7, #112	@ 0x70
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000035c 	.word	0x2000035c
 8001330:	40012c00 	.word	0x40012c00

08001334 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001352:	4b1d      	ldr	r3, [pc, #116]	@ (80013c8 <MX_TIM2_Init+0x94>)
 8001354:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001358:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800135a:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <MX_TIM2_Init+0x94>)
 800135c:	2200      	movs	r2, #0
 800135e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001360:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <MX_TIM2_Init+0x94>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 169999;
 8001366:	4b18      	ldr	r3, [pc, #96]	@ (80013c8 <MX_TIM2_Init+0x94>)
 8001368:	4a18      	ldr	r2, [pc, #96]	@ (80013cc <MX_TIM2_Init+0x98>)
 800136a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136c:	4b16      	ldr	r3, [pc, #88]	@ (80013c8 <MX_TIM2_Init+0x94>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <MX_TIM2_Init+0x94>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001378:	4813      	ldr	r0, [pc, #76]	@ (80013c8 <MX_TIM2_Init+0x94>)
 800137a:	f004 fc3b 	bl	8005bf4 <HAL_TIM_Base_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001384:	f7ff fcfc 	bl	8000d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001388:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800138c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800138e:	f107 0310 	add.w	r3, r7, #16
 8001392:	4619      	mov	r1, r3
 8001394:	480c      	ldr	r0, [pc, #48]	@ (80013c8 <MX_TIM2_Init+0x94>)
 8001396:	f005 fa09 	bl	80067ac <HAL_TIM_ConfigClockSource>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013a0:	f7ff fcee 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a4:	2300      	movs	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	@ (80013c8 <MX_TIM2_Init+0x94>)
 80013b2:	f006 fa1b 	bl	80077ec <HAL_TIMEx_MasterConfigSynchronization>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013bc:	f7ff fce0 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200003a8 	.word	0x200003a8
 80013cc:	0002980f 	.word	0x0002980f

080013d0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001460 <MX_TIM3_Init+0x90>)
 80013f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001464 <MX_TIM3_Init+0x94>)
 80013f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001460 <MX_TIM3_Init+0x90>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fa:	4b19      	ldr	r3, [pc, #100]	@ (8001460 <MX_TIM3_Init+0x90>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001400:	4b17      	ldr	r3, [pc, #92]	@ (8001460 <MX_TIM3_Init+0x90>)
 8001402:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001406:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001408:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <MX_TIM3_Init+0x90>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140e:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <MX_TIM3_Init+0x90>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001414:	2300      	movs	r3, #0
 8001416:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	4619      	mov	r1, r3
 800142a:	480d      	ldr	r0, [pc, #52]	@ (8001460 <MX_TIM3_Init+0x90>)
 800142c:	f006 f80f 	bl	800744e <HAL_TIMEx_HallSensor_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001436:	f7ff fca3 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800143a:	2350      	movs	r3, #80	@ 0x50
 800143c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	4619      	mov	r1, r3
 8001446:	4806      	ldr	r0, [pc, #24]	@ (8001460 <MX_TIM3_Init+0x90>)
 8001448:	f006 f9d0 	bl	80077ec <HAL_TIMEx_MasterConfigSynchronization>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001452:	f7ff fc95 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	3720      	adds	r7, #32
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200003f4 	.word	0x200003f4
 8001464:	40000400 	.word	0x40000400

08001468 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	@ 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a25      	ldr	r2, [pc, #148]	@ (800151c <HAL_TIM_Base_MspInit+0xb4>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d12a      	bne.n	80014e0 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800148a:	4b25      	ldr	r3, [pc, #148]	@ (8001520 <HAL_TIM_Base_MspInit+0xb8>)
 800148c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800148e:	4a24      	ldr	r2, [pc, #144]	@ (8001520 <HAL_TIM_Base_MspInit+0xb8>)
 8001490:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001494:	6613      	str	r3, [r2, #96]	@ 0x60
 8001496:	4b22      	ldr	r3, [pc, #136]	@ (8001520 <HAL_TIM_Base_MspInit+0xb8>)
 8001498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800149a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001520 <HAL_TIM_Base_MspInit+0xb8>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001520 <HAL_TIM_Base_MspInit+0xb8>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001520 <HAL_TIM_Base_MspInit+0xb8>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = W_PWM_H_Pin;
 80014ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80014cc:	2306      	movs	r3, #6
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_H_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014da:	f003 f96b 	bl	80047b4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80014de:	e018      	b.n	8001512 <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014e8:	d113      	bne.n	8001512 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001520 <HAL_TIM_Base_MspInit+0xb8>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001520 <HAL_TIM_Base_MspInit+0xb8>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80014f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <HAL_TIM_Base_MspInit+0xb8>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	201c      	movs	r0, #28
 8001508:	f002 fdfa 	bl	8004100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800150c:	201c      	movs	r0, #28
 800150e:	f002 fe11 	bl	8004134 <HAL_NVIC_EnableIRQ>
}
 8001512:	bf00      	nop
 8001514:	3728      	adds	r7, #40	@ 0x28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40012c00 	.word	0x40012c00
 8001520:	40021000 	.word	0x40021000

08001524 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	@ 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a26      	ldr	r2, [pc, #152]	@ (80015dc <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d145      	bne.n	80015d2 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001546:	4b26      	ldr	r3, [pc, #152]	@ (80015e0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154a:	4a25      	ldr	r2, [pc, #148]	@ (80015e0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	6593      	str	r3, [r2, #88]	@ 0x58
 8001552:	4b23      	ldr	r3, [pc, #140]	@ (80015e0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001562:	4a1f      	ldr	r2, [pc, #124]	@ (80015e0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156a:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001576:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157a:	4a19      	ldr	r2, [pc, #100]	@ (80015e0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001582:	4b17      	ldr	r3, [pc, #92]	@ (80015e0 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800158e:	2350      	movs	r3, #80	@ 0x50
 8001590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800159e:	2302      	movs	r3, #2
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ac:	f003 f902 	bl	80047b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015c2:	2302      	movs	r3, #2
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	4805      	ldr	r0, [pc, #20]	@ (80015e4 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 80015ce:	f003 f8f1 	bl	80047b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80015d2:	bf00      	nop
 80015d4:	3728      	adds	r7, #40	@ 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40000400 	.word	0x40000400
 80015e0:	40021000 	.word	0x40021000
 80015e4:	48000800 	.word	0x48000800

080015e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	@ 0x28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a29      	ldr	r2, [pc, #164]	@ (80016ac <HAL_TIM_MspPostInit+0xc4>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d14b      	bne.n	80016a2 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	4b29      	ldr	r3, [pc, #164]	@ (80016b0 <HAL_TIM_MspPostInit+0xc8>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160e:	4a28      	ldr	r2, [pc, #160]	@ (80016b0 <HAL_TIM_MspPostInit+0xc8>)
 8001610:	f043 0302 	orr.w	r3, r3, #2
 8001614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001616:	4b26      	ldr	r3, [pc, #152]	@ (80016b0 <HAL_TIM_MspPostInit+0xc8>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	4b23      	ldr	r3, [pc, #140]	@ (80016b0 <HAL_TIM_MspPostInit+0xc8>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001626:	4a22      	ldr	r2, [pc, #136]	@ (80016b0 <HAL_TIM_MspPostInit+0xc8>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800162e:	4b20      	ldr	r3, [pc, #128]	@ (80016b0 <HAL_TIM_MspPostInit+0xc8>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 800163a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800163e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800164c:	2306      	movs	r3, #6
 800164e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4619      	mov	r1, r3
 8001656:	4817      	ldr	r0, [pc, #92]	@ (80016b4 <HAL_TIM_MspPostInit+0xcc>)
 8001658:	f003 f8ac 	bl	80047b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 800165c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800166e:	2304      	movs	r3, #4
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	480e      	ldr	r0, [pc, #56]	@ (80016b4 <HAL_TIM_MspPostInit+0xcc>)
 800167a:	f003 f89b 	bl	80047b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin;
 800167e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001690:	2306      	movs	r3, #6
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800169e:	f003 f889 	bl	80047b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016a2:	bf00      	nop
 80016a4:	3728      	adds	r7, #40	@ 0x28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40012c00 	.word	0x40012c00
 80016b0:	40021000 	.word	0x40021000
 80016b4:	48000400 	.word	0x48000400

080016b8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016bc:	4b22      	ldr	r3, [pc, #136]	@ (8001748 <MX_USART2_UART_Init+0x90>)
 80016be:	4a23      	ldr	r2, [pc, #140]	@ (800174c <MX_USART2_UART_Init+0x94>)
 80016c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016c2:	4b21      	ldr	r3, [pc, #132]	@ (8001748 <MX_USART2_UART_Init+0x90>)
 80016c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001748 <MX_USART2_UART_Init+0x90>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001748 <MX_USART2_UART_Init+0x90>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001748 <MX_USART2_UART_Init+0x90>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001748 <MX_USART2_UART_Init+0x90>)
 80016de:	220c      	movs	r2, #12
 80016e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e2:	4b19      	ldr	r3, [pc, #100]	@ (8001748 <MX_USART2_UART_Init+0x90>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e8:	4b17      	ldr	r3, [pc, #92]	@ (8001748 <MX_USART2_UART_Init+0x90>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ee:	4b16      	ldr	r3, [pc, #88]	@ (8001748 <MX_USART2_UART_Init+0x90>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016f4:	4b14      	ldr	r3, [pc, #80]	@ (8001748 <MX_USART2_UART_Init+0x90>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016fa:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <MX_USART2_UART_Init+0x90>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001700:	4811      	ldr	r0, [pc, #68]	@ (8001748 <MX_USART2_UART_Init+0x90>)
 8001702:	f006 fa08 	bl	8007b16 <HAL_UART_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800170c:	f7ff fb38 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001710:	2100      	movs	r1, #0
 8001712:	480d      	ldr	r0, [pc, #52]	@ (8001748 <MX_USART2_UART_Init+0x90>)
 8001714:	f008 fa7f 	bl	8009c16 <HAL_UARTEx_SetTxFifoThreshold>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800171e:	f7ff fb2f 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001722:	2100      	movs	r1, #0
 8001724:	4808      	ldr	r0, [pc, #32]	@ (8001748 <MX_USART2_UART_Init+0x90>)
 8001726:	f008 fab4 	bl	8009c92 <HAL_UARTEx_SetRxFifoThreshold>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001730:	f7ff fb26 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001734:	4804      	ldr	r0, [pc, #16]	@ (8001748 <MX_USART2_UART_Init+0x90>)
 8001736:	f008 fa35 	bl	8009ba4 <HAL_UARTEx_DisableFifoMode>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001740:	f7ff fb1e 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000440 	.word	0x20000440
 800174c:	40004400 	.word	0x40004400

08001750 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001754:	4b22      	ldr	r3, [pc, #136]	@ (80017e0 <MX_USART3_UART_Init+0x90>)
 8001756:	4a23      	ldr	r2, [pc, #140]	@ (80017e4 <MX_USART3_UART_Init+0x94>)
 8001758:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800175a:	4b21      	ldr	r3, [pc, #132]	@ (80017e0 <MX_USART3_UART_Init+0x90>)
 800175c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001760:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001762:	4b1f      	ldr	r3, [pc, #124]	@ (80017e0 <MX_USART3_UART_Init+0x90>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001768:	4b1d      	ldr	r3, [pc, #116]	@ (80017e0 <MX_USART3_UART_Init+0x90>)
 800176a:	2200      	movs	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800176e:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <MX_USART3_UART_Init+0x90>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001774:	4b1a      	ldr	r3, [pc, #104]	@ (80017e0 <MX_USART3_UART_Init+0x90>)
 8001776:	220c      	movs	r2, #12
 8001778:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177a:	4b19      	ldr	r3, [pc, #100]	@ (80017e0 <MX_USART3_UART_Init+0x90>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001780:	4b17      	ldr	r3, [pc, #92]	@ (80017e0 <MX_USART3_UART_Init+0x90>)
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001786:	4b16      	ldr	r3, [pc, #88]	@ (80017e0 <MX_USART3_UART_Init+0x90>)
 8001788:	2200      	movs	r2, #0
 800178a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800178c:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <MX_USART3_UART_Init+0x90>)
 800178e:	2200      	movs	r2, #0
 8001790:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001792:	4b13      	ldr	r3, [pc, #76]	@ (80017e0 <MX_USART3_UART_Init+0x90>)
 8001794:	2200      	movs	r2, #0
 8001796:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001798:	4811      	ldr	r0, [pc, #68]	@ (80017e0 <MX_USART3_UART_Init+0x90>)
 800179a:	f006 f9bc 	bl	8007b16 <HAL_UART_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80017a4:	f7ff faec 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017a8:	2100      	movs	r1, #0
 80017aa:	480d      	ldr	r0, [pc, #52]	@ (80017e0 <MX_USART3_UART_Init+0x90>)
 80017ac:	f008 fa33 	bl	8009c16 <HAL_UARTEx_SetTxFifoThreshold>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80017b6:	f7ff fae3 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ba:	2100      	movs	r1, #0
 80017bc:	4808      	ldr	r0, [pc, #32]	@ (80017e0 <MX_USART3_UART_Init+0x90>)
 80017be:	f008 fa68 	bl	8009c92 <HAL_UARTEx_SetRxFifoThreshold>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80017c8:	f7ff fada 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80017cc:	4804      	ldr	r0, [pc, #16]	@ (80017e0 <MX_USART3_UART_Init+0x90>)
 80017ce:	f008 f9e9 	bl	8009ba4 <HAL_UARTEx_DisableFifoMode>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80017d8:	f7ff fad2 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	200004d4 	.word	0x200004d4
 80017e4:	40004800 	.word	0x40004800

080017e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b0a0      	sub	sp, #128	@ 0x80
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001800:	f107 0318 	add.w	r3, r7, #24
 8001804:	2254      	movs	r2, #84	@ 0x54
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f008 fc87 	bl	800a11c <memset>
  if(uartHandle->Instance==USART2)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a45      	ldr	r2, [pc, #276]	@ (8001928 <HAL_UART_MspInit+0x140>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d13f      	bne.n	8001898 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001818:	2302      	movs	r3, #2
 800181a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800181c:	2300      	movs	r3, #0
 800181e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001820:	f107 0318 	add.w	r3, r7, #24
 8001824:	4618      	mov	r0, r3
 8001826:	f003 ff97 	bl	8005758 <HAL_RCCEx_PeriphCLKConfig>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001830:	f7ff faa6 	bl	8000d80 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001834:	4b3d      	ldr	r3, [pc, #244]	@ (800192c <HAL_UART_MspInit+0x144>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001838:	4a3c      	ldr	r2, [pc, #240]	@ (800192c <HAL_UART_MspInit+0x144>)
 800183a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800183e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001840:	4b3a      	ldr	r3, [pc, #232]	@ (800192c <HAL_UART_MspInit+0x144>)
 8001842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184c:	4b37      	ldr	r3, [pc, #220]	@ (800192c <HAL_UART_MspInit+0x144>)
 800184e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001850:	4a36      	ldr	r2, [pc, #216]	@ (800192c <HAL_UART_MspInit+0x144>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001858:	4b34      	ldr	r3, [pc, #208]	@ (800192c <HAL_UART_MspInit+0x144>)
 800185a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001864:	230c      	movs	r3, #12
 8001866:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001874:	2307      	movs	r3, #7
 8001876:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001878:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800187c:	4619      	mov	r1, r3
 800187e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001882:	f002 ff97 	bl	80047b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	2026      	movs	r0, #38	@ 0x26
 800188c:	f002 fc38 	bl	8004100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001890:	2026      	movs	r0, #38	@ 0x26
 8001892:	f002 fc4f 	bl	8004134 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001896:	e043      	b.n	8001920 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a24      	ldr	r2, [pc, #144]	@ (8001930 <HAL_UART_MspInit+0x148>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d13e      	bne.n	8001920 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018a2:	2304      	movs	r3, #4
 80018a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018a6:	2300      	movs	r3, #0
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018aa:	f107 0318 	add.w	r3, r7, #24
 80018ae:	4618      	mov	r0, r3
 80018b0:	f003 ff52 	bl	8005758 <HAL_RCCEx_PeriphCLKConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80018ba:	f7ff fa61 	bl	8000d80 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018be:	4b1b      	ldr	r3, [pc, #108]	@ (800192c <HAL_UART_MspInit+0x144>)
 80018c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c2:	4a1a      	ldr	r2, [pc, #104]	@ (800192c <HAL_UART_MspInit+0x144>)
 80018c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80018ca:	4b18      	ldr	r3, [pc, #96]	@ (800192c <HAL_UART_MspInit+0x144>)
 80018cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d6:	4b15      	ldr	r3, [pc, #84]	@ (800192c <HAL_UART_MspInit+0x144>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018da:	4a14      	ldr	r2, [pc, #80]	@ (800192c <HAL_UART_MspInit+0x144>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018e2:	4b12      	ldr	r3, [pc, #72]	@ (800192c <HAL_UART_MspInit+0x144>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018ee:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80018f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001900:	2307      	movs	r3, #7
 8001902:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001904:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001908:	4619      	mov	r1, r3
 800190a:	480a      	ldr	r0, [pc, #40]	@ (8001934 <HAL_UART_MspInit+0x14c>)
 800190c:	f002 ff52 	bl	80047b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001910:	2200      	movs	r2, #0
 8001912:	2100      	movs	r1, #0
 8001914:	2027      	movs	r0, #39	@ 0x27
 8001916:	f002 fbf3 	bl	8004100 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800191a:	2027      	movs	r0, #39	@ 0x27
 800191c:	f002 fc0a 	bl	8004134 <HAL_NVIC_EnableIRQ>
}
 8001920:	bf00      	nop
 8001922:	3780      	adds	r7, #128	@ 0x80
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40004400 	.word	0x40004400
 800192c:	40021000 	.word	0x40021000
 8001930:	40004800 	.word	0x40004800
 8001934:	48000800 	.word	0x48000800

08001938 <Shell_Init>:
		{"stop", "Stop PWM","None",subfunct_stop},
		{"printADC","Défini l'incrément  pour la transition de a consigne moteur","int:dPulse",subfunct_printADC},
};


void Shell_Init(void){
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
	memset(argv, 0, MAX_ARGS*sizeof(char*));
 800193c:	2224      	movs	r2, #36	@ 0x24
 800193e:	2100      	movs	r1, #0
 8001940:	4817      	ldr	r0, [pc, #92]	@ (80019a0 <Shell_Init+0x68>)
 8001942:	f008 fbeb 	bl	800a11c <memset>
	memset(cmdBuffer, 0, CMD_BUFFER_SIZE*sizeof(char));
 8001946:	2240      	movs	r2, #64	@ 0x40
 8001948:	2100      	movs	r1, #0
 800194a:	4816      	ldr	r0, [pc, #88]	@ (80019a4 <Shell_Init+0x6c>)
 800194c:	f008 fbe6 	bl	800a11c <memset>
	memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE*sizeof(char));
 8001950:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <Shell_Init+0x70>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE*sizeof(char));
 8001956:	2240      	movs	r2, #64	@ 0x40
 8001958:	2100      	movs	r1, #0
 800195a:	4814      	ldr	r0, [pc, #80]	@ (80019ac <Shell_Init+0x74>)
 800195c:	f008 fbde 	bl	800a11c <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001960:	2201      	movs	r2, #1
 8001962:	4911      	ldr	r1, [pc, #68]	@ (80019a8 <Shell_Init+0x70>)
 8001964:	4812      	ldr	r0, [pc, #72]	@ (80019b0 <Shell_Init+0x78>)
 8001966:	f006 f9b5 	bl	8007cd4 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 800196a:	4812      	ldr	r0, [pc, #72]	@ (80019b4 <Shell_Init+0x7c>)
 800196c:	f7fe fc58 	bl	8000220 <strlen>
 8001970:	4603      	mov	r3, r0
 8001972:	b29a      	uxth	r2, r3
 8001974:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001978:	490e      	ldr	r1, [pc, #56]	@ (80019b4 <Shell_Init+0x7c>)
 800197a:	480d      	ldr	r0, [pc, #52]	@ (80019b0 <Shell_Init+0x78>)
 800197c:	f006 f91b 	bl	8007bb6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8001980:	480d      	ldr	r0, [pc, #52]	@ (80019b8 <Shell_Init+0x80>)
 8001982:	f7fe fc4d 	bl	8000220 <strlen>
 8001986:	4603      	mov	r3, r0
 8001988:	b29a      	uxth	r2, r3
 800198a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800198e:	490a      	ldr	r1, [pc, #40]	@ (80019b8 <Shell_Init+0x80>)
 8001990:	4807      	ldr	r0, [pc, #28]	@ (80019b0 <Shell_Init+0x78>)
 8001992:	f006 f910 	bl	8007bb6 <HAL_UART_Transmit>
	subfunct_start();
 8001996:	f000 f9e5 	bl	8001d64 <subfunct_start>
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000880 	.word	0x20000880
 80019a4:	2000083c 	.word	0x2000083c
 80019a8:	2000056c 	.word	0x2000056c
 80019ac:	20000570 	.word	0x20000570
 80019b0:	20000440 	.word	0x20000440
 80019b4:	20000020 	.word	0x20000020
 80019b8:	20000004 	.word	0x20000004

080019bc <Shell_Loop>:

void Shell_Loop(void){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0

	if(uartRxReceived==1){
 80019c2:	4b88      	ldr	r3, [pc, #544]	@ (8001be4 <Shell_Loop+0x228>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d17f      	bne.n	8001aca <Shell_Loop+0x10e>
		switch(uartRxBuffer[0]){
 80019ca:	4b87      	ldr	r3, [pc, #540]	@ (8001be8 <Shell_Loop+0x22c>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80019d0:	d051      	beq.n	8001a76 <Shell_Loop+0xba>
 80019d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80019d4:	dc63      	bgt.n	8001a9e <Shell_Loop+0xe2>
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	d04d      	beq.n	8001a76 <Shell_Loop+0xba>
 80019da:	2b0d      	cmp	r3, #13
 80019dc:	d15f      	bne.n	8001a9e <Shell_Loop+0xe2>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80019de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019e2:	2203      	movs	r2, #3
 80019e4:	4981      	ldr	r1, [pc, #516]	@ (8001bec <Shell_Loop+0x230>)
 80019e6:	4882      	ldr	r0, [pc, #520]	@ (8001bf0 <Shell_Loop+0x234>)
 80019e8:	f006 f8e5 	bl	8007bb6 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 80019ec:	4b81      	ldr	r3, [pc, #516]	@ (8001bf4 <Shell_Loop+0x238>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a81      	ldr	r2, [pc, #516]	@ (8001bf8 <Shell_Loop+0x23c>)
 80019f2:	2100      	movs	r1, #0
 80019f4:	54d1      	strb	r1, [r2, r3]
			//On copie la commande dans l'historique
			strcpy(cmdHistory[cmdHistory_index_save % CMD_HISTORY_SIZE], cmdBuffer);
 80019f6:	4b81      	ldr	r3, [pc, #516]	@ (8001bfc <Shell_Loop+0x240>)
 80019f8:	781a      	ldrb	r2, [r3, #0]
 80019fa:	4b81      	ldr	r3, [pc, #516]	@ (8001c00 <Shell_Loop+0x244>)
 80019fc:	fba3 1302 	umull	r1, r3, r3, r2
 8001a00:	08d9      	lsrs	r1, r3, #3
 8001a02:	460b      	mov	r3, r1
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	019b      	lsls	r3, r3, #6
 8001a10:	4a7c      	ldr	r2, [pc, #496]	@ (8001c04 <Shell_Loop+0x248>)
 8001a12:	4413      	add	r3, r2
 8001a14:	4978      	ldr	r1, [pc, #480]	@ (8001bf8 <Shell_Loop+0x23c>)
 8001a16:	4618      	mov	r0, r3
 8001a18:	f008 fbb5 	bl	800a186 <strcpy>
			cmdHistory_index_save++;
 8001a1c:	4b77      	ldr	r3, [pc, #476]	@ (8001bfc <Shell_Loop+0x240>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	3301      	adds	r3, #1
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	4b75      	ldr	r3, [pc, #468]	@ (8001bfc <Shell_Loop+0x240>)
 8001a26:	701a      	strb	r2, [r3, #0]
			argc = 0;
 8001a28:	4b77      	ldr	r3, [pc, #476]	@ (8001c08 <Shell_Loop+0x24c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8001a2e:	4977      	ldr	r1, [pc, #476]	@ (8001c0c <Shell_Loop+0x250>)
 8001a30:	4871      	ldr	r0, [pc, #452]	@ (8001bf8 <Shell_Loop+0x23c>)
 8001a32:	f008 fb17 	bl	800a064 <strtok>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4a75      	ldr	r2, [pc, #468]	@ (8001c10 <Shell_Loop+0x254>)
 8001a3a:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8001a3c:	e010      	b.n	8001a60 <Shell_Loop+0xa4>
				argv[argc++] = token;
 8001a3e:	4b72      	ldr	r3, [pc, #456]	@ (8001c08 <Shell_Loop+0x24c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	4970      	ldr	r1, [pc, #448]	@ (8001c08 <Shell_Loop+0x24c>)
 8001a46:	600a      	str	r2, [r1, #0]
 8001a48:	4a71      	ldr	r2, [pc, #452]	@ (8001c10 <Shell_Loop+0x254>)
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	4971      	ldr	r1, [pc, #452]	@ (8001c14 <Shell_Loop+0x258>)
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8001a52:	496e      	ldr	r1, [pc, #440]	@ (8001c0c <Shell_Loop+0x250>)
 8001a54:	2000      	movs	r0, #0
 8001a56:	f008 fb05 	bl	800a064 <strtok>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4a6c      	ldr	r2, [pc, #432]	@ (8001c10 <Shell_Loop+0x254>)
 8001a5e:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8001a60:	4b6b      	ldr	r3, [pc, #428]	@ (8001c10 <Shell_Loop+0x254>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1ea      	bne.n	8001a3e <Shell_Loop+0x82>
			}
			idx_cmd = 0;
 8001a68:	4b62      	ldr	r3, [pc, #392]	@ (8001bf4 <Shell_Loop+0x238>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8001a6e:	4b6a      	ldr	r3, [pc, #424]	@ (8001c18 <Shell_Loop+0x25c>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
			break;
 8001a74:	e025      	b.n	8001ac2 <Shell_Loop+0x106>
		case ASCII_BACK: case ASCII_BACK_BIS: // Suppression du dernier caractère
			if (idx_cmd==0){break;}
 8001a76:	4b5f      	ldr	r3, [pc, #380]	@ (8001bf4 <Shell_Loop+0x238>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d020      	beq.n	8001ac0 <Shell_Loop+0x104>
			cmdBuffer[idx_cmd--] = '\0';
 8001a7e:	4b5d      	ldr	r3, [pc, #372]	@ (8001bf4 <Shell_Loop+0x238>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	1e5a      	subs	r2, r3, #1
 8001a84:	495b      	ldr	r1, [pc, #364]	@ (8001bf4 <Shell_Loop+0x238>)
 8001a86:	600a      	str	r2, [r1, #0]
 8001a88:	4a5b      	ldr	r2, [pc, #364]	@ (8001bf8 <Shell_Loop+0x23c>)
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a92:	2204      	movs	r2, #4
 8001a94:	4961      	ldr	r1, [pc, #388]	@ (8001c1c <Shell_Loop+0x260>)
 8001a96:	4856      	ldr	r0, [pc, #344]	@ (8001bf0 <Shell_Loop+0x234>)
 8001a98:	f006 f88d 	bl	8007bb6 <HAL_UART_Transmit>
			break;
 8001a9c:	e011      	b.n	8001ac2 <Shell_Loop+0x106>
		default:
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8001a9e:	4b55      	ldr	r3, [pc, #340]	@ (8001bf4 <Shell_Loop+0x238>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	4953      	ldr	r1, [pc, #332]	@ (8001bf4 <Shell_Loop+0x238>)
 8001aa6:	600a      	str	r2, [r1, #0]
 8001aa8:	4a4f      	ldr	r2, [pc, #316]	@ (8001be8 <Shell_Loop+0x22c>)
 8001aaa:	7811      	ldrb	r1, [r2, #0]
 8001aac:	4a52      	ldr	r2, [pc, #328]	@ (8001bf8 <Shell_Loop+0x23c>)
 8001aae:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001ab0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	494c      	ldr	r1, [pc, #304]	@ (8001be8 <Shell_Loop+0x22c>)
 8001ab8:	484d      	ldr	r0, [pc, #308]	@ (8001bf0 <Shell_Loop+0x234>)
 8001aba:	f006 f87c 	bl	8007bb6 <HAL_UART_Transmit>
 8001abe:	e000      	b.n	8001ac2 <Shell_Loop+0x106>
			if (idx_cmd==0){break;}
 8001ac0:	bf00      	nop
		}
		uartRxReceived = 0;
 8001ac2:	4b48      	ldr	r3, [pc, #288]	@ (8001be4 <Shell_Loop+0x228>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	e04b      	b.n	8001b62 <Shell_Loop+0x1a6>
	}


	else if(uartRxReceived==2){
 8001aca:	4b46      	ldr	r3, [pc, #280]	@ (8001be4 <Shell_Loop+0x228>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d147      	bne.n	8001b62 <Shell_Loop+0x1a6>
		uartRxReceived=1;
 8001ad2:	4b44      	ldr	r3, [pc, #272]	@ (8001be4 <Shell_Loop+0x228>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]
		switch (escState) {
 8001ad8:	4b51      	ldr	r3, [pc, #324]	@ (8001c20 <Shell_Loop+0x264>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	d01f      	beq.n	8001b20 <Shell_Loop+0x164>
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d13e      	bne.n	8001b62 <Shell_Loop+0x1a6>

		case ARROW_DOWN:
			if(cmdHistory_index_nav==0){break;}
 8001ae4:	4b4f      	ldr	r3, [pc, #316]	@ (8001c24 <Shell_Loop+0x268>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d037      	beq.n	8001b5c <Shell_Loop+0x1a0>
			strcpy(uartRxBuffer,cmdHistory[cmdHistory_index_nav]);			//On recupere le messsage sauvegarde et on l'associe au buffer actuel
 8001aec:	4b4d      	ldr	r3, [pc, #308]	@ (8001c24 <Shell_Loop+0x268>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	019b      	lsls	r3, r3, #6
 8001af2:	4a44      	ldr	r2, [pc, #272]	@ (8001c04 <Shell_Loop+0x248>)
 8001af4:	4413      	add	r3, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	483b      	ldr	r0, [pc, #236]	@ (8001be8 <Shell_Loop+0x22c>)
 8001afa:	f008 fb44 	bl	800a186 <strcpy>
			idx_cmd = sizeof(cmdHistory[cmdHistory_index_nav])/sizeof(cmdHistory[cmdHistory_index_nav][0]);			//On actualise le idx_cmd pour pouvoir ecrire ou modifier le msg
 8001afe:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf4 <Shell_Loop+0x238>)
 8001b00:	2240      	movs	r2, #64	@ 0x40
 8001b02:	601a      	str	r2, [r3, #0]
			cmdHistory_index_nav--;
 8001b04:	4b47      	ldr	r3, [pc, #284]	@ (8001c24 <Shell_Loop+0x268>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	4b45      	ldr	r3, [pc, #276]	@ (8001c24 <Shell_Loop+0x268>)
 8001b0e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001b10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b14:	2201      	movs	r2, #1
 8001b16:	4934      	ldr	r1, [pc, #208]	@ (8001be8 <Shell_Loop+0x22c>)
 8001b18:	4835      	ldr	r0, [pc, #212]	@ (8001bf0 <Shell_Loop+0x234>)
 8001b1a:	f006 f84c 	bl	8007bb6 <HAL_UART_Transmit>
			break;
 8001b1e:	e020      	b.n	8001b62 <Shell_Loop+0x1a6>
		case ARROW_UP:
			if(cmdHistory_index_nav==CMD_HISTORY_SIZE){break;}
 8001b20:	4b40      	ldr	r3, [pc, #256]	@ (8001c24 <Shell_Loop+0x268>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b0a      	cmp	r3, #10
 8001b26:	d01b      	beq.n	8001b60 <Shell_Loop+0x1a4>
			strcpy(uartRxBuffer,cmdHistory[cmdHistory_index_nav]);			//On recupere le messsage sauvegarde et on l'associe au buffer actuel
 8001b28:	4b3e      	ldr	r3, [pc, #248]	@ (8001c24 <Shell_Loop+0x268>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	019b      	lsls	r3, r3, #6
 8001b2e:	4a35      	ldr	r2, [pc, #212]	@ (8001c04 <Shell_Loop+0x248>)
 8001b30:	4413      	add	r3, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	482c      	ldr	r0, [pc, #176]	@ (8001be8 <Shell_Loop+0x22c>)
 8001b36:	f008 fb26 	bl	800a186 <strcpy>
			idx_cmd = sizeof(cmdHistory[cmdHistory_index_nav])/sizeof(cmdHistory[cmdHistory_index_nav][0]);			//On actualise le idx_cmd pour pouvoir ecrire ou modifier le msg
 8001b3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf4 <Shell_Loop+0x238>)
 8001b3c:	2240      	movs	r2, #64	@ 0x40
 8001b3e:	601a      	str	r2, [r3, #0]
			cmdHistory_index_nav++;
 8001b40:	4b38      	ldr	r3, [pc, #224]	@ (8001c24 <Shell_Loop+0x268>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	3301      	adds	r3, #1
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	4b36      	ldr	r3, [pc, #216]	@ (8001c24 <Shell_Loop+0x268>)
 8001b4a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001b4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b50:	2201      	movs	r2, #1
 8001b52:	4925      	ldr	r1, [pc, #148]	@ (8001be8 <Shell_Loop+0x22c>)
 8001b54:	4826      	ldr	r0, [pc, #152]	@ (8001bf0 <Shell_Loop+0x234>)
 8001b56:	f006 f82e 	bl	8007bb6 <HAL_UART_Transmit>
			break;
 8001b5a:	e002      	b.n	8001b62 <Shell_Loop+0x1a6>
			if(cmdHistory_index_nav==0){break;}
 8001b5c:	bf00      	nop
 8001b5e:	e000      	b.n	8001b62 <Shell_Loop+0x1a6>
			if(cmdHistory_index_nav==CMD_HISTORY_SIZE){break;}
 8001b60:	bf00      	nop
	}




	if(newCmdReady){
 8001b62:	4b2d      	ldr	r3, [pc, #180]	@ (8001c18 <Shell_Loop+0x25c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d038      	beq.n	8001bdc <Shell_Loop+0x220>
		for (int i=0;i<sizeof(mapping) / sizeof(mapping[0]);i++){
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	e01a      	b.n	8001ba6 <Shell_Loop+0x1ea>
			if (strcmp(argv[0],mapping[i].name)==0){
 8001b70:	4b28      	ldr	r3, [pc, #160]	@ (8001c14 <Shell_Loop+0x258>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	492c      	ldr	r1, [pc, #176]	@ (8001c28 <Shell_Loop+0x26c>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	440b      	add	r3, r1
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4610      	mov	r0, r2
 8001b82:	f7fe fb55 	bl	8000230 <strcmp>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d109      	bne.n	8001ba0 <Shell_Loop+0x1e4>
				mapping[i].funct();
 8001b8c:	4a26      	ldr	r2, [pc, #152]	@ (8001c28 <Shell_Loop+0x26c>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	4413      	add	r3, r2
 8001b94:	330c      	adds	r3, #12
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4798      	blx	r3
				isFind=1;
 8001b9a:	4b24      	ldr	r3, [pc, #144]	@ (8001c2c <Shell_Loop+0x270>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]
		for (int i=0;i<sizeof(mapping) / sizeof(mapping[0]);i++){
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b05      	cmp	r3, #5
 8001baa:	d9e1      	bls.n	8001b70 <Shell_Loop+0x1b4>
			}
		}
		if(!isFind){
 8001bac:	4b1f      	ldr	r3, [pc, #124]	@ (8001c2c <Shell_Loop+0x270>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d106      	bne.n	8001bc2 <Shell_Loop+0x206>
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001bb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bb8:	2214      	movs	r2, #20
 8001bba:	491d      	ldr	r1, [pc, #116]	@ (8001c30 <Shell_Loop+0x274>)
 8001bbc:	480c      	ldr	r0, [pc, #48]	@ (8001bf0 <Shell_Loop+0x234>)
 8001bbe:	f005 fffa 	bl	8007bb6 <HAL_UART_Transmit>
		}

		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bc6:	221c      	movs	r2, #28
 8001bc8:	491a      	ldr	r1, [pc, #104]	@ (8001c34 <Shell_Loop+0x278>)
 8001bca:	4809      	ldr	r0, [pc, #36]	@ (8001bf0 <Shell_Loop+0x234>)
 8001bcc:	f005 fff3 	bl	8007bb6 <HAL_UART_Transmit>
		newCmdReady = 0;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <Shell_Loop+0x25c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
		isFind=0;
 8001bd6:	4b15      	ldr	r3, [pc, #84]	@ (8001c2c <Shell_Loop+0x270>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
	}
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000569 	.word	0x20000569
 8001be8:	2000056c 	.word	0x2000056c
 8001bec:	20000088 	.word	0x20000088
 8001bf0:	20000440 	.word	0x20000440
 8001bf4:	2000087c 	.word	0x2000087c
 8001bf8:	2000083c 	.word	0x2000083c
 8001bfc:	20000830 	.word	0x20000830
 8001c00:	cccccccd 	.word	0xcccccccd
 8001c04:	200005b0 	.word	0x200005b0
 8001c08:	200008a4 	.word	0x200008a4
 8001c0c:	0800b194 	.word	0x0800b194
 8001c10:	200008a8 	.word	0x200008a8
 8001c14:	20000880 	.word	0x20000880
 8001c18:	200008ac 	.word	0x200008ac
 8001c1c:	2000008c 	.word	0x2000008c
 8001c20:	20000568 	.word	0x20000568
 8001c24:	20000831 	.word	0x20000831
 8001c28:	200000e4 	.word	0x200000e4
 8001c2c:	200008b0 	.word	0x200008b0
 8001c30:	20000090 	.word	0x20000090
 8001c34:	20000004 	.word	0x20000004

08001c38 <HAL_UART_RxCpltCallback>:
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
}
#endif

#ifdef V1
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

	uartRxReceived=1;
 8001c40:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <HAL_UART_RxCpltCallback+0x20>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001c46:	2201      	movs	r2, #1
 8001c48:	4904      	ldr	r1, [pc, #16]	@ (8001c5c <HAL_UART_RxCpltCallback+0x24>)
 8001c4a:	4805      	ldr	r0, [pc, #20]	@ (8001c60 <HAL_UART_RxCpltCallback+0x28>)
 8001c4c:	f006 f842 	bl	8007cd4 <HAL_UART_Receive_IT>

}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000569 	.word	0x20000569
 8001c5c:	2000056c 	.word	0x2000056c
 8001c60:	20000440 	.word	0x20000440

08001c64 <subfunct_WherisBrian>:
#endif
/************************************************************************************************
 * 										SUBFUNCTIONS
 *************************************************************************************************/
void subfunct_WherisBrian(void){
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
	printf(brian);
 8001c68:	4802      	ldr	r0, [pc, #8]	@ (8001c74 <subfunct_WherisBrian+0x10>)
 8001c6a:	f008 f9e9 	bl	800a040 <iprintf>

}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200000a4 	.word	0x200000a4

08001c78 <subfunct_help>:
void subfunct_help(void){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af04      	add	r7, sp, #16
	printf("%s%-15s | %-10s | %-50s\r\n%s%s", GRAS,"Fonctions", "Params", "Description",RESET,separator);
 8001c7e:	4b19      	ldr	r3, [pc, #100]	@ (8001ce4 <subfunct_help+0x6c>)
 8001c80:	9302      	str	r3, [sp, #8]
 8001c82:	4b19      	ldr	r3, [pc, #100]	@ (8001ce8 <subfunct_help+0x70>)
 8001c84:	9301      	str	r3, [sp, #4]
 8001c86:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <subfunct_help+0x74>)
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	4b19      	ldr	r3, [pc, #100]	@ (8001cf0 <subfunct_help+0x78>)
 8001c8c:	4a19      	ldr	r2, [pc, #100]	@ (8001cf4 <subfunct_help+0x7c>)
 8001c8e:	491a      	ldr	r1, [pc, #104]	@ (8001cf8 <subfunct_help+0x80>)
 8001c90:	481a      	ldr	r0, [pc, #104]	@ (8001cfc <subfunct_help+0x84>)
 8001c92:	f008 f9d5 	bl	800a040 <iprintf>
	for (int i=0;i<sizeof(mapping) / sizeof(mapping[0]);i++){
 8001c96:	2300      	movs	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	e01b      	b.n	8001cd4 <subfunct_help+0x5c>
		printf("%s%-15s%s | %-10s | %-50s\r\n",FUNCTION, mapping[i].name,RESET, mapping[i].params, mapping[i].resume);
 8001c9c:	4a18      	ldr	r2, [pc, #96]	@ (8001d00 <subfunct_help+0x88>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	4413      	add	r3, r2
 8001ca4:	6819      	ldr	r1, [r3, #0]
 8001ca6:	4a16      	ldr	r2, [pc, #88]	@ (8001d00 <subfunct_help+0x88>)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	4413      	add	r3, r2
 8001cae:	3308      	adds	r3, #8
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4813      	ldr	r0, [pc, #76]	@ (8001d00 <subfunct_help+0x88>)
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	0112      	lsls	r2, r2, #4
 8001cb8:	4402      	add	r2, r0
 8001cba:	3204      	adds	r2, #4
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	9201      	str	r2, [sp, #4]
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	4b09      	ldr	r3, [pc, #36]	@ (8001ce8 <subfunct_help+0x70>)
 8001cc4:	460a      	mov	r2, r1
 8001cc6:	490f      	ldr	r1, [pc, #60]	@ (8001d04 <subfunct_help+0x8c>)
 8001cc8:	480f      	ldr	r0, [pc, #60]	@ (8001d08 <subfunct_help+0x90>)
 8001cca:	f008 f9b9 	bl	800a040 <iprintf>
	for (int i=0;i<sizeof(mapping) / sizeof(mapping[0]);i++){
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b05      	cmp	r3, #5
 8001cd8:	d9e0      	bls.n	8001c9c <subfunct_help+0x24>
	}
}
 8001cda:	bf00      	nop
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	0800b1d4 	.word	0x0800b1d4
 8001ce8:	0800b224 	.word	0x0800b224
 8001cec:	0800b22c 	.word	0x0800b22c
 8001cf0:	0800b198 	.word	0x0800b198
 8001cf4:	0800b1a0 	.word	0x0800b1a0
 8001cf8:	0800b1ac 	.word	0x0800b1ac
 8001cfc:	0800b1b4 	.word	0x0800b1b4
 8001d00:	200000e4 	.word	0x200000e4
 8001d04:	0800b238 	.word	0x0800b238
 8001d08:	0800b240 	.word	0x0800b240

08001d0c <subfunct_speed>:
void subfunct_speed(void){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
	uint32_t alpha = atoi(argv[1]);
 8001d12:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <subfunct_speed+0x44>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f008 f848 	bl	8009dac <atoi>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	607b      	str	r3, [r7, #4]

	pulseGoal_1 = alpha * htim1.Instance->ARR /100;
 8001d20:	4b0c      	ldr	r3, [pc, #48]	@ (8001d54 <subfunct_speed+0x48>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	fb02 f303 	mul.w	r3, r2, r3
 8001d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d58 <subfunct_speed+0x4c>)
 8001d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d32:	095b      	lsrs	r3, r3, #5
 8001d34:	4a09      	ldr	r2, [pc, #36]	@ (8001d5c <subfunct_speed+0x50>)
 8001d36:	6013      	str	r3, [r2, #0]
	pulseGoal_2 = htim1.Instance->ARR - pulseGoal_1;
 8001d38:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <subfunct_speed+0x48>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d3e:	4b07      	ldr	r3, [pc, #28]	@ (8001d5c <subfunct_speed+0x50>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	4a06      	ldr	r2, [pc, #24]	@ (8001d60 <subfunct_speed+0x54>)
 8001d46:	6013      	str	r3, [r2, #0]
	/*
	 * htim2 is going to actualise pulses every 1ms: CHECK Interruptions for more details
	 */
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000880 	.word	0x20000880
 8001d54:	2000035c 	.word	0x2000035c
 8001d58:	51eb851f 	.word	0x51eb851f
 8001d5c:	20000834 	.word	0x20000834
 8001d60:	20000838 	.word	0x20000838

08001d64 <subfunct_start>:
void subfunct_start(void){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
	if (isStarted){debug(WARNING,alreadyStarted);return;}
 8001d68:	4b53      	ldr	r3, [pc, #332]	@ (8001eb8 <subfunct_start+0x154>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d006      	beq.n	8001d7e <subfunct_start+0x1a>
 8001d70:	4b52      	ldr	r3, [pc, #328]	@ (8001ebc <subfunct_start+0x158>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4619      	mov	r1, r3
 8001d76:	4852      	ldr	r0, [pc, #328]	@ (8001ec0 <subfunct_start+0x15c>)
 8001d78:	f000 f96a 	bl	8002050 <debug>
 8001d7c:	e09b      	b.n	8001eb6 <subfunct_start+0x152>
	HAL_TIM_Base_Start(&htim1)!=HAL_OK? debug(ERROR,error):debug(START,info_PWMs);
 8001d7e:	4851      	ldr	r0, [pc, #324]	@ (8001ec4 <subfunct_start+0x160>)
 8001d80:	f003 ff90 	bl	8005ca4 <HAL_TIM_Base_Start>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d006      	beq.n	8001d98 <subfunct_start+0x34>
 8001d8a:	4b4f      	ldr	r3, [pc, #316]	@ (8001ec8 <subfunct_start+0x164>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	484e      	ldr	r0, [pc, #312]	@ (8001ecc <subfunct_start+0x168>)
 8001d92:	f000 f95d 	bl	8002050 <debug>
 8001d96:	e005      	b.n	8001da4 <subfunct_start+0x40>
 8001d98:	4b4d      	ldr	r3, [pc, #308]	@ (8001ed0 <subfunct_start+0x16c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	484d      	ldr	r0, [pc, #308]	@ (8001ed4 <subfunct_start+0x170>)
 8001da0:	f000 f956 	bl	8002050 <debug>
	HAL_TIM_Base_Start_IT(&htim2)!=HAL_OK? debug(ERROR,error):debug(START,info_TIMERs);//Timer for smooth transition pulses
 8001da4:	484c      	ldr	r0, [pc, #304]	@ (8001ed8 <subfunct_start+0x174>)
 8001da6:	f004 f815 	bl	8005dd4 <HAL_TIM_Base_Start_IT>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d006      	beq.n	8001dbe <subfunct_start+0x5a>
 8001db0:	4b45      	ldr	r3, [pc, #276]	@ (8001ec8 <subfunct_start+0x164>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4619      	mov	r1, r3
 8001db6:	4845      	ldr	r0, [pc, #276]	@ (8001ecc <subfunct_start+0x168>)
 8001db8:	f000 f94a 	bl	8002050 <debug>
 8001dbc:	e005      	b.n	8001dca <subfunct_start+0x66>
 8001dbe:	4b47      	ldr	r3, [pc, #284]	@ (8001edc <subfunct_start+0x178>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4843      	ldr	r0, [pc, #268]	@ (8001ed4 <subfunct_start+0x170>)
 8001dc6:	f000 f943 	bl	8002050 <debug>

	pulseGoal_1 = htim1.Instance->ARR/2;
 8001dca:	4b3e      	ldr	r3, [pc, #248]	@ (8001ec4 <subfunct_start+0x160>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd0:	085b      	lsrs	r3, r3, #1
 8001dd2:	4a43      	ldr	r2, [pc, #268]	@ (8001ee0 <subfunct_start+0x17c>)
 8001dd4:	6013      	str	r3, [r2, #0]
	pulseGoal_2 = htim1.Instance->ARR/2;
 8001dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec4 <subfunct_start+0x160>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ddc:	085b      	lsrs	r3, r3, #1
 8001dde:	4a41      	ldr	r2, [pc, #260]	@ (8001ee4 <subfunct_start+0x180>)
 8001de0:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulseGoal_1);
 8001de2:	4b38      	ldr	r3, [pc, #224]	@ (8001ec4 <subfunct_start+0x160>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a3e      	ldr	r2, [pc, #248]	@ (8001ee0 <subfunct_start+0x17c>)
 8001de8:	6812      	ldr	r2, [r2, #0]
 8001dea:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulseGoal_2);
 8001dec:	4b35      	ldr	r3, [pc, #212]	@ (8001ec4 <subfunct_start+0x160>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a3c      	ldr	r2, [pc, #240]	@ (8001ee4 <subfunct_start+0x180>)
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	639a      	str	r2, [r3, #56]	@ 0x38
	//Channel 1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1)!=HAL_OK? debug(ERROR,error):debug(START,info_PWM_1);
 8001df6:	2100      	movs	r1, #0
 8001df8:	4832      	ldr	r0, [pc, #200]	@ (8001ec4 <subfunct_start+0x160>)
 8001dfa:	f004 f8c5 	bl	8005f88 <HAL_TIM_PWM_Start>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d006      	beq.n	8001e12 <subfunct_start+0xae>
 8001e04:	4b30      	ldr	r3, [pc, #192]	@ (8001ec8 <subfunct_start+0x164>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4830      	ldr	r0, [pc, #192]	@ (8001ecc <subfunct_start+0x168>)
 8001e0c:	f000 f920 	bl	8002050 <debug>
 8001e10:	e005      	b.n	8001e1e <subfunct_start+0xba>
 8001e12:	4b35      	ldr	r3, [pc, #212]	@ (8001ee8 <subfunct_start+0x184>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4619      	mov	r1, r3
 8001e18:	482e      	ldr	r0, [pc, #184]	@ (8001ed4 <subfunct_start+0x170>)
 8001e1a:	f000 f919 	bl	8002050 <debug>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1)!=HAL_OK? debug(ERROR,error):debug(START,info_PWMN_1);
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4828      	ldr	r0, [pc, #160]	@ (8001ec4 <subfunct_start+0x160>)
 8001e22:	f005 fbc3 	bl	80075ac <HAL_TIMEx_PWMN_Start>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d006      	beq.n	8001e3a <subfunct_start+0xd6>
 8001e2c:	4b26      	ldr	r3, [pc, #152]	@ (8001ec8 <subfunct_start+0x164>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4619      	mov	r1, r3
 8001e32:	4826      	ldr	r0, [pc, #152]	@ (8001ecc <subfunct_start+0x168>)
 8001e34:	f000 f90c 	bl	8002050 <debug>
 8001e38:	e005      	b.n	8001e46 <subfunct_start+0xe2>
 8001e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8001eec <subfunct_start+0x188>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4824      	ldr	r0, [pc, #144]	@ (8001ed4 <subfunct_start+0x170>)
 8001e42:	f000 f905 	bl	8002050 <debug>

	//Channel 2
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2)!=HAL_OK? debug(ERROR,error):debug(START,info_PWM_2);
 8001e46:	2104      	movs	r1, #4
 8001e48:	481e      	ldr	r0, [pc, #120]	@ (8001ec4 <subfunct_start+0x160>)
 8001e4a:	f004 f89d 	bl	8005f88 <HAL_TIM_PWM_Start>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d006      	beq.n	8001e62 <subfunct_start+0xfe>
 8001e54:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec8 <subfunct_start+0x164>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	481c      	ldr	r0, [pc, #112]	@ (8001ecc <subfunct_start+0x168>)
 8001e5c:	f000 f8f8 	bl	8002050 <debug>
 8001e60:	e005      	b.n	8001e6e <subfunct_start+0x10a>
 8001e62:	4b23      	ldr	r3, [pc, #140]	@ (8001ef0 <subfunct_start+0x18c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4619      	mov	r1, r3
 8001e68:	481a      	ldr	r0, [pc, #104]	@ (8001ed4 <subfunct_start+0x170>)
 8001e6a:	f000 f8f1 	bl	8002050 <debug>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2)!=HAL_OK? debug(ERROR,error):debug(START,info_PWMN_2);
 8001e6e:	2104      	movs	r1, #4
 8001e70:	4814      	ldr	r0, [pc, #80]	@ (8001ec4 <subfunct_start+0x160>)
 8001e72:	f005 fb9b 	bl	80075ac <HAL_TIMEx_PWMN_Start>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d006      	beq.n	8001e8a <subfunct_start+0x126>
 8001e7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ec8 <subfunct_start+0x164>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4619      	mov	r1, r3
 8001e82:	4812      	ldr	r0, [pc, #72]	@ (8001ecc <subfunct_start+0x168>)
 8001e84:	f000 f8e4 	bl	8002050 <debug>
 8001e88:	e005      	b.n	8001e96 <subfunct_start+0x132>
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef4 <subfunct_start+0x190>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4810      	ldr	r0, [pc, #64]	@ (8001ed4 <subfunct_start+0x170>)
 8001e92:	f000 f8dd 	bl	8002050 <debug>
	isStarted=1;
 8001e96:	4b08      	ldr	r3, [pc, #32]	@ (8001eb8 <subfunct_start+0x154>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
	pulseGoal_1= htim1.Instance->ARR;
 8001e9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <subfunct_start+0x160>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea2:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee0 <subfunct_start+0x17c>)
 8001ea4:	6013      	str	r3, [r2, #0]
	pulseGoal_2 = htim1.Instance->ARR - pulseGoal_1;
 8001ea6:	4b07      	ldr	r3, [pc, #28]	@ (8001ec4 <subfunct_start+0x160>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee0 <subfunct_start+0x17c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee4 <subfunct_start+0x180>)
 8001eb4:	6013      	str	r3, [r2, #0]
}
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	200008b4 	.word	0x200008b4
 8001ebc:	200000dc 	.word	0x200000dc
 8001ec0:	0800b25c 	.word	0x0800b25c
 8001ec4:	2000035c 	.word	0x2000035c
 8001ec8:	200000c0 	.word	0x200000c0
 8001ecc:	0800b26c 	.word	0x0800b26c
 8001ed0:	200000c4 	.word	0x200000c4
 8001ed4:	0800b278 	.word	0x0800b278
 8001ed8:	200003a8 	.word	0x200003a8
 8001edc:	200000c8 	.word	0x200000c8
 8001ee0:	20000834 	.word	0x20000834
 8001ee4:	20000838 	.word	0x20000838
 8001ee8:	200000cc 	.word	0x200000cc
 8001eec:	200000d0 	.word	0x200000d0
 8001ef0:	200000d8 	.word	0x200000d8
 8001ef4:	200000d4 	.word	0x200000d4

08001ef8 <subfunct_stop>:
void subfunct_stop(void){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
	if (!isStarted){debug(WARNING,alreadyStop);return;}
 8001efc:	4b42      	ldr	r3, [pc, #264]	@ (8002008 <subfunct_stop+0x110>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d106      	bne.n	8001f12 <subfunct_stop+0x1a>
 8001f04:	4b41      	ldr	r3, [pc, #260]	@ (800200c <subfunct_stop+0x114>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4841      	ldr	r0, [pc, #260]	@ (8002010 <subfunct_stop+0x118>)
 8001f0c:	f000 f8a0 	bl	8002050 <debug>
 8001f10:	e078      	b.n	8002004 <subfunct_stop+0x10c>
	HAL_TIM_Base_Stop(&htim1)!=HAL_OK? debug(ERROR,error):debug(STOP,info_PWMs);
 8001f12:	4840      	ldr	r0, [pc, #256]	@ (8002014 <subfunct_stop+0x11c>)
 8001f14:	f003 ff36 	bl	8005d84 <HAL_TIM_Base_Stop>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d006      	beq.n	8001f2c <subfunct_stop+0x34>
 8001f1e:	4b3e      	ldr	r3, [pc, #248]	@ (8002018 <subfunct_stop+0x120>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4619      	mov	r1, r3
 8001f24:	483d      	ldr	r0, [pc, #244]	@ (800201c <subfunct_stop+0x124>)
 8001f26:	f000 f893 	bl	8002050 <debug>
 8001f2a:	e005      	b.n	8001f38 <subfunct_stop+0x40>
 8001f2c:	4b3c      	ldr	r3, [pc, #240]	@ (8002020 <subfunct_stop+0x128>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	483c      	ldr	r0, [pc, #240]	@ (8002024 <subfunct_stop+0x12c>)
 8001f34:	f000 f88c 	bl	8002050 <debug>
	HAL_TIM_Base_Stop(&htim2)!=HAL_OK? debug(ERROR,error):debug(STOP,info_TIMERs);//Timer for smooth transition pulses
 8001f38:	483b      	ldr	r0, [pc, #236]	@ (8002028 <subfunct_stop+0x130>)
 8001f3a:	f003 ff23 	bl	8005d84 <HAL_TIM_Base_Stop>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d006      	beq.n	8001f52 <subfunct_stop+0x5a>
 8001f44:	4b34      	ldr	r3, [pc, #208]	@ (8002018 <subfunct_stop+0x120>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4834      	ldr	r0, [pc, #208]	@ (800201c <subfunct_stop+0x124>)
 8001f4c:	f000 f880 	bl	8002050 <debug>
 8001f50:	e005      	b.n	8001f5e <subfunct_stop+0x66>
 8001f52:	4b36      	ldr	r3, [pc, #216]	@ (800202c <subfunct_stop+0x134>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4619      	mov	r1, r3
 8001f58:	4832      	ldr	r0, [pc, #200]	@ (8002024 <subfunct_stop+0x12c>)
 8001f5a:	f000 f879 	bl	8002050 <debug>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1)!=HAL_OK? debug(ERROR,error):debug(STOP,info_PWM_1);
 8001f5e:	2100      	movs	r1, #0
 8001f60:	482c      	ldr	r0, [pc, #176]	@ (8002014 <subfunct_stop+0x11c>)
 8001f62:	f004 f923 	bl	80061ac <HAL_TIM_PWM_Stop>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <subfunct_stop+0x82>
 8001f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8002018 <subfunct_stop+0x120>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	482a      	ldr	r0, [pc, #168]	@ (800201c <subfunct_stop+0x124>)
 8001f74:	f000 f86c 	bl	8002050 <debug>
 8001f78:	e005      	b.n	8001f86 <subfunct_stop+0x8e>
 8001f7a:	4b2d      	ldr	r3, [pc, #180]	@ (8002030 <subfunct_stop+0x138>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4828      	ldr	r0, [pc, #160]	@ (8002024 <subfunct_stop+0x12c>)
 8001f82:	f000 f865 	bl	8002050 <debug>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1)!=HAL_OK? debug(ERROR,error):debug(STOP,info_PWMN_1);
 8001f86:	2100      	movs	r1, #0
 8001f88:	4822      	ldr	r0, [pc, #136]	@ (8002014 <subfunct_stop+0x11c>)
 8001f8a:	f005 fbd1 	bl	8007730 <HAL_TIMEx_PWMN_Stop>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d006      	beq.n	8001fa2 <subfunct_stop+0xaa>
 8001f94:	4b20      	ldr	r3, [pc, #128]	@ (8002018 <subfunct_stop+0x120>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4820      	ldr	r0, [pc, #128]	@ (800201c <subfunct_stop+0x124>)
 8001f9c:	f000 f858 	bl	8002050 <debug>
 8001fa0:	e005      	b.n	8001fae <subfunct_stop+0xb6>
 8001fa2:	4b24      	ldr	r3, [pc, #144]	@ (8002034 <subfunct_stop+0x13c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	481e      	ldr	r0, [pc, #120]	@ (8002024 <subfunct_stop+0x12c>)
 8001faa:	f000 f851 	bl	8002050 <debug>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2)!=HAL_OK? debug(ERROR,error):debug(STOP,info_PWM_2);
 8001fae:	2104      	movs	r1, #4
 8001fb0:	4818      	ldr	r0, [pc, #96]	@ (8002014 <subfunct_stop+0x11c>)
 8001fb2:	f004 f8fb 	bl	80061ac <HAL_TIM_PWM_Stop>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d006      	beq.n	8001fca <subfunct_stop+0xd2>
 8001fbc:	4b16      	ldr	r3, [pc, #88]	@ (8002018 <subfunct_stop+0x120>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4816      	ldr	r0, [pc, #88]	@ (800201c <subfunct_stop+0x124>)
 8001fc4:	f000 f844 	bl	8002050 <debug>
 8001fc8:	e005      	b.n	8001fd6 <subfunct_stop+0xde>
 8001fca:	4b1b      	ldr	r3, [pc, #108]	@ (8002038 <subfunct_stop+0x140>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4814      	ldr	r0, [pc, #80]	@ (8002024 <subfunct_stop+0x12c>)
 8001fd2:	f000 f83d 	bl	8002050 <debug>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2)!=HAL_OK? debug(ERROR,error):debug(STOP,info_PWMN_2);
 8001fd6:	2104      	movs	r1, #4
 8001fd8:	480e      	ldr	r0, [pc, #56]	@ (8002014 <subfunct_stop+0x11c>)
 8001fda:	f005 fba9 	bl	8007730 <HAL_TIMEx_PWMN_Stop>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d006      	beq.n	8001ff2 <subfunct_stop+0xfa>
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8002018 <subfunct_stop+0x120>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	480c      	ldr	r0, [pc, #48]	@ (800201c <subfunct_stop+0x124>)
 8001fec:	f000 f830 	bl	8002050 <debug>
 8001ff0:	e005      	b.n	8001ffe <subfunct_stop+0x106>
 8001ff2:	4b12      	ldr	r3, [pc, #72]	@ (800203c <subfunct_stop+0x144>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	480a      	ldr	r0, [pc, #40]	@ (8002024 <subfunct_stop+0x12c>)
 8001ffa:	f000 f829 	bl	8002050 <debug>
	isStarted=0;
 8001ffe:	4b02      	ldr	r3, [pc, #8]	@ (8002008 <subfunct_stop+0x110>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
}
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	200008b4 	.word	0x200008b4
 800200c:	200000e0 	.word	0x200000e0
 8002010:	0800b25c 	.word	0x0800b25c
 8002014:	2000035c 	.word	0x2000035c
 8002018:	200000c0 	.word	0x200000c0
 800201c:	0800b26c 	.word	0x0800b26c
 8002020:	200000c4 	.word	0x200000c4
 8002024:	0800b284 	.word	0x0800b284
 8002028:	200003a8 	.word	0x200003a8
 800202c:	200000c8 	.word	0x200000c8
 8002030:	200000cc 	.word	0x200000cc
 8002034:	200000d0 	.word	0x200000d0
 8002038:	200000d8 	.word	0x200000d8
 800203c:	200000d4 	.word	0x200000d4

08002040 <subfunct_printADC>:
void subfunct_printADC(void){
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0

	return;
 8002044:	bf00      	nop
}
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <debug>:
/************************************************************************************************
 * 										DEBUG
 *************************************************************************************************/


void debug(char* debugType,char* message){
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]

	printf("%-15s%s| %s\r\n",debugType,RESET,message);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	4a04      	ldr	r2, [pc, #16]	@ (8002070 <debug+0x20>)
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4804      	ldr	r0, [pc, #16]	@ (8002074 <debug+0x24>)
 8002062:	f007 ffed 	bl	800a040 <iprintf>

}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	0800b224 	.word	0x0800b224
 8002074:	0800b290 	.word	0x0800b290

08002078 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002078:	480d      	ldr	r0, [pc, #52]	@ (80020b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800207a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800207c:	480d      	ldr	r0, [pc, #52]	@ (80020b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800207e:	490e      	ldr	r1, [pc, #56]	@ (80020b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002080:	4a0e      	ldr	r2, [pc, #56]	@ (80020bc <LoopForever+0xe>)
  movs r3, #0
 8002082:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002084:	e002      	b.n	800208c <LoopCopyDataInit>

08002086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800208a:	3304      	adds	r3, #4

0800208c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800208c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800208e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002090:	d3f9      	bcc.n	8002086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002092:	4a0b      	ldr	r2, [pc, #44]	@ (80020c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002094:	4c0b      	ldr	r4, [pc, #44]	@ (80020c4 <LoopForever+0x16>)
  movs r3, #0
 8002096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002098:	e001      	b.n	800209e <LoopFillZerobss>

0800209a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800209a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800209c:	3204      	adds	r2, #4

0800209e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800209e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a0:	d3fb      	bcc.n	800209a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020a2:	f7ff f867 	bl	8001174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020a6:	f008 f847 	bl	800a138 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020aa:	f7fe fd8f 	bl	8000bcc <main>

080020ae <LoopForever>:

LoopForever:
    b LoopForever
 80020ae:	e7fe      	b.n	80020ae <LoopForever>
  ldr   r0, =_estack
 80020b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b8:	200001a8 	.word	0x200001a8
  ldr r2, =_sidata
 80020bc:	0800b4d4 	.word	0x0800b4d4
  ldr r2, =_sbss
 80020c0:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 80020c4:	20000a08 	.word	0x20000a08

080020c8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020c8:	e7fe      	b.n	80020c8 <ADC3_IRQHandler>

080020ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d4:	2003      	movs	r0, #3
 80020d6:	f002 f808 	bl	80040ea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020da:	200f      	movs	r0, #15
 80020dc:	f7fe fe8c 	bl	8000df8 <HAL_InitTick>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	71fb      	strb	r3, [r7, #7]
 80020ea:	e001      	b.n	80020f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020ec:	f7fe fe60 	bl	8000db0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020f0:	79fb      	ldrb	r3, [r7, #7]

}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002100:	4b05      	ldr	r3, [pc, #20]	@ (8002118 <HAL_IncTick+0x1c>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b05      	ldr	r3, [pc, #20]	@ (800211c <HAL_IncTick+0x20>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4413      	add	r3, r2
 800210a:	4a03      	ldr	r2, [pc, #12]	@ (8002118 <HAL_IncTick+0x1c>)
 800210c:	6013      	str	r3, [r2, #0]
}
 800210e:	bf00      	nop
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	200008b8 	.word	0x200008b8
 800211c:	20000148 	.word	0x20000148

08002120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return uwTick;
 8002124:	4b03      	ldr	r3, [pc, #12]	@ (8002134 <HAL_GetTick+0x14>)
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	200008b8 	.word	0x200008b8

08002138 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	609a      	str	r2, [r3, #8]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	609a      	str	r2, [r3, #8]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	3360      	adds	r3, #96	@ 0x60
 80021b2:	461a      	mov	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4b08      	ldr	r3, [pc, #32]	@ (80021e4 <LL_ADC_SetOffset+0x44>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021d8:	bf00      	nop
 80021da:	371c      	adds	r7, #28
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	03fff000 	.word	0x03fff000

080021e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3360      	adds	r3, #96	@ 0x60
 80021f6:	461a      	mov	r2, r3
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002208:	4618      	mov	r0, r3
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	3360      	adds	r3, #96	@ 0x60
 8002224:	461a      	mov	r2, r3
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	431a      	orrs	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800223e:	bf00      	nop
 8002240:	371c      	adds	r7, #28
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800224a:	b480      	push	{r7}
 800224c:	b087      	sub	sp, #28
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	3360      	adds	r3, #96	@ 0x60
 800225a:	461a      	mov	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	431a      	orrs	r2, r3
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002274:	bf00      	nop
 8002276:	371c      	adds	r7, #28
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	3360      	adds	r3, #96	@ 0x60
 8002290:	461a      	mov	r2, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	431a      	orrs	r2, r3
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80022aa:	bf00      	nop
 80022ac:	371c      	adds	r7, #28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	615a      	str	r2, [r3, #20]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002302:	b480      	push	{r7}
 8002304:	b087      	sub	sp, #28
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	3330      	adds	r3, #48	@ 0x30
 8002312:	461a      	mov	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	0a1b      	lsrs	r3, r3, #8
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	4413      	add	r3, r2
 8002320:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f003 031f 	and.w	r3, r3, #31
 800232c:	211f      	movs	r1, #31
 800232e:	fa01 f303 	lsl.w	r3, r1, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	401a      	ands	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	0e9b      	lsrs	r3, r3, #26
 800233a:	f003 011f 	and.w	r1, r3, #31
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	fa01 f303 	lsl.w	r3, r1, r3
 8002348:	431a      	orrs	r2, r3
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800234e:	bf00      	nop
 8002350:	371c      	adds	r7, #28
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002366:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002380:	b480      	push	{r7}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	3314      	adds	r3, #20
 8002390:	461a      	mov	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	0e5b      	lsrs	r3, r3, #25
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	4413      	add	r3, r2
 800239e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	0d1b      	lsrs	r3, r3, #20
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	2107      	movs	r1, #7
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	401a      	ands	r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	0d1b      	lsrs	r3, r3, #20
 80023ba:	f003 031f 	and.w	r3, r3, #31
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	fa01 f303 	lsl.w	r3, r1, r3
 80023c4:	431a      	orrs	r2, r3
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023ca:	bf00      	nop
 80023cc:	371c      	adds	r7, #28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f0:	43db      	mvns	r3, r3
 80023f2:	401a      	ands	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f003 0318 	and.w	r3, r3, #24
 80023fa:	4908      	ldr	r1, [pc, #32]	@ (800241c <LL_ADC_SetChannelSingleDiff+0x44>)
 80023fc:	40d9      	lsrs	r1, r3
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	400b      	ands	r3, r1
 8002402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002406:	431a      	orrs	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800240e:	bf00      	nop
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	0007ffff 	.word	0x0007ffff

08002420 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 031f 	and.w	r3, r3, #31
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002468:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6093      	str	r3, [r2, #8]
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800248c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002490:	d101      	bne.n	8002496 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80024b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024b8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024e0:	d101      	bne.n	80024e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002504:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002508:	f043 0201 	orr.w	r2, r3, #1
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800252c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002530:	f043 0202 	orr.w	r2, r3, #2
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <LL_ADC_IsEnabled+0x18>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <LL_ADC_IsEnabled+0x1a>
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b02      	cmp	r3, #2
 800257c:	d101      	bne.n	8002582 <LL_ADC_IsDisableOngoing+0x18>
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <LL_ADC_IsDisableOngoing+0x1a>
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025a4:	f043 0204 	orr.w	r2, r3, #4
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d101      	bne.n	80025d0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b08      	cmp	r3, #8
 80025f0:	d101      	bne.n	80025f6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002604:	b590      	push	{r4, r7, lr}
 8002606:	b089      	sub	sp, #36	@ 0x24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e1a9      	b.n	8002972 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002628:	2b00      	cmp	r3, #0
 800262a:	d109      	bne.n	8002640 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7fe f8d7 	bl	80007e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff ff19 	bl	800247c <LL_ADC_IsDeepPowerDownEnabled>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d004      	beq.n	800265a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff feff 	bl	8002458 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff ff34 	bl	80024cc <LL_ADC_IsInternalRegulatorEnabled>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d115      	bne.n	8002696 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff ff18 	bl	80024a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002674:	4b9c      	ldr	r3, [pc, #624]	@ (80028e8 <HAL_ADC_Init+0x2e4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	099b      	lsrs	r3, r3, #6
 800267a:	4a9c      	ldr	r2, [pc, #624]	@ (80028ec <HAL_ADC_Init+0x2e8>)
 800267c:	fba2 2303 	umull	r2, r3, r2, r3
 8002680:	099b      	lsrs	r3, r3, #6
 8002682:	3301      	adds	r3, #1
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002688:	e002      	b.n	8002690 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	3b01      	subs	r3, #1
 800268e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f9      	bne.n	800268a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ff16 	bl	80024cc <LL_ADC_IsInternalRegulatorEnabled>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10d      	bne.n	80026c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026aa:	f043 0210 	orr.w	r2, r3, #16
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b6:	f043 0201 	orr.w	r2, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ff76 	bl	80025b8 <LL_ADC_REG_IsConversionOngoing>
 80026cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f040 8142 	bne.w	8002960 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f040 813e 	bne.w	8002960 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80026ec:	f043 0202 	orr.w	r2, r3, #2
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff23 	bl	8002544 <LL_ADC_IsEnabled>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d141      	bne.n	8002788 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800270c:	d004      	beq.n	8002718 <HAL_ADC_Init+0x114>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a77      	ldr	r2, [pc, #476]	@ (80028f0 <HAL_ADC_Init+0x2ec>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d10f      	bne.n	8002738 <HAL_ADC_Init+0x134>
 8002718:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800271c:	f7ff ff12 	bl	8002544 <LL_ADC_IsEnabled>
 8002720:	4604      	mov	r4, r0
 8002722:	4873      	ldr	r0, [pc, #460]	@ (80028f0 <HAL_ADC_Init+0x2ec>)
 8002724:	f7ff ff0e 	bl	8002544 <LL_ADC_IsEnabled>
 8002728:	4603      	mov	r3, r0
 800272a:	4323      	orrs	r3, r4
 800272c:	2b00      	cmp	r3, #0
 800272e:	bf0c      	ite	eq
 8002730:	2301      	moveq	r3, #1
 8002732:	2300      	movne	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	e012      	b.n	800275e <HAL_ADC_Init+0x15a>
 8002738:	486e      	ldr	r0, [pc, #440]	@ (80028f4 <HAL_ADC_Init+0x2f0>)
 800273a:	f7ff ff03 	bl	8002544 <LL_ADC_IsEnabled>
 800273e:	4604      	mov	r4, r0
 8002740:	486d      	ldr	r0, [pc, #436]	@ (80028f8 <HAL_ADC_Init+0x2f4>)
 8002742:	f7ff feff 	bl	8002544 <LL_ADC_IsEnabled>
 8002746:	4603      	mov	r3, r0
 8002748:	431c      	orrs	r4, r3
 800274a:	486c      	ldr	r0, [pc, #432]	@ (80028fc <HAL_ADC_Init+0x2f8>)
 800274c:	f7ff fefa 	bl	8002544 <LL_ADC_IsEnabled>
 8002750:	4603      	mov	r3, r0
 8002752:	4323      	orrs	r3, r4
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf0c      	ite	eq
 8002758:	2301      	moveq	r3, #1
 800275a:	2300      	movne	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d012      	beq.n	8002788 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800276a:	d004      	beq.n	8002776 <HAL_ADC_Init+0x172>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a5f      	ldr	r2, [pc, #380]	@ (80028f0 <HAL_ADC_Init+0x2ec>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d101      	bne.n	800277a <HAL_ADC_Init+0x176>
 8002776:	4a62      	ldr	r2, [pc, #392]	@ (8002900 <HAL_ADC_Init+0x2fc>)
 8002778:	e000      	b.n	800277c <HAL_ADC_Init+0x178>
 800277a:	4a62      	ldr	r2, [pc, #392]	@ (8002904 <HAL_ADC_Init+0x300>)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4619      	mov	r1, r3
 8002782:	4610      	mov	r0, r2
 8002784:	f7ff fcd8 	bl	8002138 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	7f5b      	ldrb	r3, [r3, #29]
 800278c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002792:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002798:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800279e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027a6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d106      	bne.n	80027c4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ba:	3b01      	subs	r3, #1
 80027bc:	045b      	lsls	r3, r3, #17
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d009      	beq.n	80027e0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	4b48      	ldr	r3, [pc, #288]	@ (8002908 <HAL_ADC_Init+0x304>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	69b9      	ldr	r1, [r7, #24]
 80027f0:	430b      	orrs	r3, r1
 80027f2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fee5 	bl	80025de <LL_ADC_INJ_IsConversionOngoing>
 8002814:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d17f      	bne.n	800291c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d17c      	bne.n	800291c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002826:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800282e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800283e:	f023 0302 	bic.w	r3, r3, #2
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6812      	ldr	r2, [r2, #0]
 8002846:	69b9      	ldr	r1, [r7, #24]
 8002848:	430b      	orrs	r3, r1
 800284a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d017      	beq.n	8002884 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002862:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800286c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002870:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6911      	ldr	r1, [r2, #16]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	430b      	orrs	r3, r1
 800287e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002882:	e013      	b.n	80028ac <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691a      	ldr	r2, [r3, #16]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002892:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80028a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028a8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d12a      	bne.n	800290c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80028c0:	f023 0304 	bic.w	r3, r3, #4
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028cc:	4311      	orrs	r1, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80028d2:	4311      	orrs	r1, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028d8:	430a      	orrs	r2, r1
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f042 0201 	orr.w	r2, r2, #1
 80028e4:	611a      	str	r2, [r3, #16]
 80028e6:	e019      	b.n	800291c <HAL_ADC_Init+0x318>
 80028e8:	20000000 	.word	0x20000000
 80028ec:	053e2d63 	.word	0x053e2d63
 80028f0:	50000100 	.word	0x50000100
 80028f4:	50000400 	.word	0x50000400
 80028f8:	50000500 	.word	0x50000500
 80028fc:	50000600 	.word	0x50000600
 8002900:	50000300 	.word	0x50000300
 8002904:	50000700 	.word	0x50000700
 8002908:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0201 	bic.w	r2, r2, #1
 800291a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d10c      	bne.n	800293e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292a:	f023 010f 	bic.w	r1, r3, #15
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	1e5a      	subs	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	631a      	str	r2, [r3, #48]	@ 0x30
 800293c:	e007      	b.n	800294e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 020f 	bic.w	r2, r2, #15
 800294c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002952:	f023 0303 	bic.w	r3, r3, #3
 8002956:	f043 0201 	orr.w	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800295e:	e007      	b.n	8002970 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002964:	f043 0210 	orr.w	r2, r3, #16
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002970:	7ffb      	ldrb	r3, [r7, #31]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3724      	adds	r7, #36	@ 0x24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd90      	pop	{r4, r7, pc}
 800297a:	bf00      	nop

0800297c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002990:	d004      	beq.n	800299c <HAL_ADC_Start_DMA+0x20>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a5a      	ldr	r2, [pc, #360]	@ (8002b00 <HAL_ADC_Start_DMA+0x184>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d101      	bne.n	80029a0 <HAL_ADC_Start_DMA+0x24>
 800299c:	4b59      	ldr	r3, [pc, #356]	@ (8002b04 <HAL_ADC_Start_DMA+0x188>)
 800299e:	e000      	b.n	80029a2 <HAL_ADC_Start_DMA+0x26>
 80029a0:	4b59      	ldr	r3, [pc, #356]	@ (8002b08 <HAL_ADC_Start_DMA+0x18c>)
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fd3c 	bl	8002420 <LL_ADC_GetMultimode>
 80029a8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fe02 	bl	80025b8 <LL_ADC_REG_IsConversionOngoing>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f040 809b 	bne.w	8002af2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_ADC_Start_DMA+0x4e>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e096      	b.n	8002af8 <HAL_ADC_Start_DMA+0x17c>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a4d      	ldr	r2, [pc, #308]	@ (8002b0c <HAL_ADC_Start_DMA+0x190>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d008      	beq.n	80029ee <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d005      	beq.n	80029ee <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	2b05      	cmp	r3, #5
 80029e6:	d002      	beq.n	80029ee <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	2b09      	cmp	r3, #9
 80029ec:	d17a      	bne.n	8002ae4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 ff56 	bl	80038a0 <ADC_Enable>
 80029f4:	4603      	mov	r3, r0
 80029f6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80029f8:	7dfb      	ldrb	r3, [r7, #23]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d16d      	bne.n	8002ada <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a02:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a06:	f023 0301 	bic.w	r3, r3, #1
 8002a0a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a3a      	ldr	r2, [pc, #232]	@ (8002b00 <HAL_ADC_Start_DMA+0x184>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d009      	beq.n	8002a30 <HAL_ADC_Start_DMA+0xb4>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a3b      	ldr	r2, [pc, #236]	@ (8002b10 <HAL_ADC_Start_DMA+0x194>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d002      	beq.n	8002a2c <HAL_ADC_Start_DMA+0xb0>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	e003      	b.n	8002a34 <HAL_ADC_Start_DMA+0xb8>
 8002a2c:	4b39      	ldr	r3, [pc, #228]	@ (8002b14 <HAL_ADC_Start_DMA+0x198>)
 8002a2e:	e001      	b.n	8002a34 <HAL_ADC_Start_DMA+0xb8>
 8002a30:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d002      	beq.n	8002a42 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d105      	bne.n	8002a4e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a46:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d006      	beq.n	8002a68 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a5e:	f023 0206 	bic.w	r2, r3, #6
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	661a      	str	r2, [r3, #96]	@ 0x60
 8002a66:	e002      	b.n	8002a6e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a72:	4a29      	ldr	r2, [pc, #164]	@ (8002b18 <HAL_ADC_Start_DMA+0x19c>)
 8002a74:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a7a:	4a28      	ldr	r2, [pc, #160]	@ (8002b1c <HAL_ADC_Start_DMA+0x1a0>)
 8002a7c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a82:	4a27      	ldr	r2, [pc, #156]	@ (8002b20 <HAL_ADC_Start_DMA+0x1a4>)
 8002a84:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	221c      	movs	r2, #28
 8002a8c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0210 	orr.w	r2, r2, #16
 8002aa4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0201 	orr.w	r2, r2, #1
 8002ab4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	3340      	adds	r3, #64	@ 0x40
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f001 fbeb 	bl	80042a0 <HAL_DMA_Start_IT>
 8002aca:	4603      	mov	r3, r0
 8002acc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fd5c 	bl	8002590 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002ad8:	e00d      	b.n	8002af6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002ae2:	e008      	b.n	8002af6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002af0:	e001      	b.n	8002af6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002af2:	2302      	movs	r3, #2
 8002af4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	50000100 	.word	0x50000100
 8002b04:	50000300 	.word	0x50000300
 8002b08:	50000700 	.word	0x50000700
 8002b0c:	50000600 	.word	0x50000600
 8002b10:	50000500 	.word	0x50000500
 8002b14:	50000400 	.word	0x50000400
 8002b18:	08003a8b 	.word	0x08003a8b
 8002b1c:	08003b63 	.word	0x08003b63
 8002b20:	08003b7f 	.word	0x08003b7f

08002b24 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08a      	sub	sp, #40	@ 0x28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b48:	d004      	beq.n	8002b54 <HAL_ADC_IRQHandler+0x30>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a8e      	ldr	r2, [pc, #568]	@ (8002d88 <HAL_ADC_IRQHandler+0x264>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d101      	bne.n	8002b58 <HAL_ADC_IRQHandler+0x34>
 8002b54:	4b8d      	ldr	r3, [pc, #564]	@ (8002d8c <HAL_ADC_IRQHandler+0x268>)
 8002b56:	e000      	b.n	8002b5a <HAL_ADC_IRQHandler+0x36>
 8002b58:	4b8d      	ldr	r3, [pc, #564]	@ (8002d90 <HAL_ADC_IRQHandler+0x26c>)
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fc60 	bl	8002420 <LL_ADC_GetMultimode>
 8002b60:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d017      	beq.n	8002b9c <HAL_ADC_IRQHandler+0x78>
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d012      	beq.n	8002b9c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d105      	bne.n	8002b8e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b86:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f001 f8ec 	bl	8003d6c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2202      	movs	r2, #2
 8002b9a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d004      	beq.n	8002bb0 <HAL_ADC_IRQHandler+0x8c>
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10b      	bne.n	8002bc8 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 8094 	beq.w	8002ce4 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 808e 	beq.w	8002ce4 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bcc:	f003 0310 	and.w	r3, r3, #16
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d105      	bne.n	8002be0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff fb79 	bl	80022dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d072      	beq.n	8002cd6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a64      	ldr	r2, [pc, #400]	@ (8002d88 <HAL_ADC_IRQHandler+0x264>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d009      	beq.n	8002c0e <HAL_ADC_IRQHandler+0xea>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a65      	ldr	r2, [pc, #404]	@ (8002d94 <HAL_ADC_IRQHandler+0x270>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d002      	beq.n	8002c0a <HAL_ADC_IRQHandler+0xe6>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	e003      	b.n	8002c12 <HAL_ADC_IRQHandler+0xee>
 8002c0a:	4b63      	ldr	r3, [pc, #396]	@ (8002d98 <HAL_ADC_IRQHandler+0x274>)
 8002c0c:	e001      	b.n	8002c12 <HAL_ADC_IRQHandler+0xee>
 8002c0e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d008      	beq.n	8002c2c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2b05      	cmp	r3, #5
 8002c24:	d002      	beq.n	8002c2c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2b09      	cmp	r3, #9
 8002c2a:	d104      	bne.n	8002c36 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	623b      	str	r3, [r7, #32]
 8002c34:	e014      	b.n	8002c60 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a53      	ldr	r2, [pc, #332]	@ (8002d88 <HAL_ADC_IRQHandler+0x264>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d009      	beq.n	8002c54 <HAL_ADC_IRQHandler+0x130>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a53      	ldr	r2, [pc, #332]	@ (8002d94 <HAL_ADC_IRQHandler+0x270>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d002      	beq.n	8002c50 <HAL_ADC_IRQHandler+0x12c>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	e003      	b.n	8002c58 <HAL_ADC_IRQHandler+0x134>
 8002c50:	4b51      	ldr	r3, [pc, #324]	@ (8002d98 <HAL_ADC_IRQHandler+0x274>)
 8002c52:	e001      	b.n	8002c58 <HAL_ADC_IRQHandler+0x134>
 8002c54:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c58:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d135      	bne.n	8002cd6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d12e      	bne.n	8002cd6 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fc9b 	bl	80025b8 <LL_ADC_REG_IsConversionOngoing>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d11a      	bne.n	8002cbe <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 020c 	bic.w	r2, r2, #12
 8002c96:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d112      	bne.n	8002cd6 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb4:	f043 0201 	orr.w	r2, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002cbc:	e00b      	b.n	8002cd6 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc2:	f043 0210 	orr.w	r2, r3, #16
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cce:	f043 0201 	orr.w	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fe f972 	bl	8000fc0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	220c      	movs	r2, #12
 8002ce2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d004      	beq.n	8002cf8 <HAL_ADC_IRQHandler+0x1d4>
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10b      	bne.n	8002d10 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 80b3 	beq.w	8002e6a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 80ad 	beq.w	8002e6a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d14:	f003 0310 	and.w	r3, r3, #16
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d105      	bne.n	8002d28 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d20:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fb14 	bl	800235a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002d32:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff facf 	bl	80022dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d3e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a10      	ldr	r2, [pc, #64]	@ (8002d88 <HAL_ADC_IRQHandler+0x264>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d009      	beq.n	8002d5e <HAL_ADC_IRQHandler+0x23a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a11      	ldr	r2, [pc, #68]	@ (8002d94 <HAL_ADC_IRQHandler+0x270>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d002      	beq.n	8002d5a <HAL_ADC_IRQHandler+0x236>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	e003      	b.n	8002d62 <HAL_ADC_IRQHandler+0x23e>
 8002d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d98 <HAL_ADC_IRQHandler+0x274>)
 8002d5c:	e001      	b.n	8002d62 <HAL_ADC_IRQHandler+0x23e>
 8002d5e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d008      	beq.n	8002d7c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2b06      	cmp	r3, #6
 8002d74:	d002      	beq.n	8002d7c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2b07      	cmp	r3, #7
 8002d7a:	d10f      	bne.n	8002d9c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	623b      	str	r3, [r7, #32]
 8002d84:	e01f      	b.n	8002dc6 <HAL_ADC_IRQHandler+0x2a2>
 8002d86:	bf00      	nop
 8002d88:	50000100 	.word	0x50000100
 8002d8c:	50000300 	.word	0x50000300
 8002d90:	50000700 	.word	0x50000700
 8002d94:	50000500 	.word	0x50000500
 8002d98:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a8b      	ldr	r2, [pc, #556]	@ (8002fd0 <HAL_ADC_IRQHandler+0x4ac>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d009      	beq.n	8002dba <HAL_ADC_IRQHandler+0x296>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a8a      	ldr	r2, [pc, #552]	@ (8002fd4 <HAL_ADC_IRQHandler+0x4b0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d002      	beq.n	8002db6 <HAL_ADC_IRQHandler+0x292>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	e003      	b.n	8002dbe <HAL_ADC_IRQHandler+0x29a>
 8002db6:	4b88      	ldr	r3, [pc, #544]	@ (8002fd8 <HAL_ADC_IRQHandler+0x4b4>)
 8002db8:	e001      	b.n	8002dbe <HAL_ADC_IRQHandler+0x29a>
 8002dba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002dbe:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d047      	beq.n	8002e5c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d007      	beq.n	8002de6 <HAL_ADC_IRQHandler+0x2c2>
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d03f      	beq.n	8002e5c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d13a      	bne.n	8002e5c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002df0:	2b40      	cmp	r3, #64	@ 0x40
 8002df2:	d133      	bne.n	8002e5c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d12e      	bne.n	8002e5c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff fbeb 	bl	80025de <LL_ADC_INJ_IsConversionOngoing>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d11a      	bne.n	8002e44 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e1c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e22:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d112      	bne.n	8002e5c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e3a:	f043 0201 	orr.w	r2, r3, #1
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e42:	e00b      	b.n	8002e5c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e48:	f043 0210 	orr.w	r2, r3, #16
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e54:	f043 0201 	orr.w	r2, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 ff5d 	bl	8003d1c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2260      	movs	r2, #96	@ 0x60
 8002e68:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d011      	beq.n	8002e98 <HAL_ADC_IRQHandler+0x374>
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00c      	beq.n	8002e98 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e82:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f8b4 	bl	8002ff8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2280      	movs	r2, #128	@ 0x80
 8002e96:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d012      	beq.n	8002ec8 <HAL_ADC_IRQHandler+0x3a4>
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00d      	beq.n	8002ec8 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 ff43 	bl	8003d44 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ec6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d012      	beq.n	8002ef8 <HAL_ADC_IRQHandler+0x3d4>
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00d      	beq.n	8002ef8 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 ff35 	bl	8003d58 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ef6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d043      	beq.n	8002f8a <HAL_ADC_IRQHandler+0x466>
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d03e      	beq.n	8002f8a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d102      	bne.n	8002f1a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002f14:	2301      	movs	r3, #1
 8002f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f18:	e021      	b.n	8002f5e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d015      	beq.n	8002f4c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f28:	d004      	beq.n	8002f34 <HAL_ADC_IRQHandler+0x410>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a28      	ldr	r2, [pc, #160]	@ (8002fd0 <HAL_ADC_IRQHandler+0x4ac>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d101      	bne.n	8002f38 <HAL_ADC_IRQHandler+0x414>
 8002f34:	4b29      	ldr	r3, [pc, #164]	@ (8002fdc <HAL_ADC_IRQHandler+0x4b8>)
 8002f36:	e000      	b.n	8002f3a <HAL_ADC_IRQHandler+0x416>
 8002f38:	4b29      	ldr	r3, [pc, #164]	@ (8002fe0 <HAL_ADC_IRQHandler+0x4bc>)
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fa7e 	bl	800243c <LL_ADC_GetMultiDMATransfer>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00b      	beq.n	8002f5e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002f46:	2301      	movs	r3, #1
 8002f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f4a:	e008      	b.n	8002f5e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d10e      	bne.n	8002f82 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f68:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f74:	f043 0202 	orr.w	r2, r3, #2
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f845 	bl	800300c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2210      	movs	r2, #16
 8002f88:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d018      	beq.n	8002fc6 <HAL_ADC_IRQHandler+0x4a2>
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d013      	beq.n	8002fc6 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fae:	f043 0208 	orr.w	r2, r3, #8
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fbe:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 feb5 	bl	8003d30 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002fc6:	bf00      	nop
 8002fc8:	3728      	adds	r7, #40	@ 0x28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	50000100 	.word	0x50000100
 8002fd4:	50000500 	.word	0x50000500
 8002fd8:	50000400 	.word	0x50000400
 8002fdc:	50000300 	.word	0x50000300
 8002fe0:	50000700 	.word	0x50000700

08002fe4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b0b6      	sub	sp, #216	@ 0xd8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003030:	2300      	movs	r3, #0
 8003032:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800303a:	2b01      	cmp	r3, #1
 800303c:	d102      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x24>
 800303e:	2302      	movs	r3, #2
 8003040:	f000 bc13 	b.w	800386a <HAL_ADC_ConfigChannel+0x84a>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff fab1 	bl	80025b8 <LL_ADC_REG_IsConversionOngoing>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	f040 83f3 	bne.w	8003844 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	6859      	ldr	r1, [r3, #4]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	f7ff f949 	bl	8002302 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fa9f 	bl	80025b8 <LL_ADC_REG_IsConversionOngoing>
 800307a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff faab 	bl	80025de <LL_ADC_INJ_IsConversionOngoing>
 8003088:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800308c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003090:	2b00      	cmp	r3, #0
 8003092:	f040 81d9 	bne.w	8003448 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003096:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800309a:	2b00      	cmp	r3, #0
 800309c:	f040 81d4 	bne.w	8003448 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030a8:	d10f      	bne.n	80030ca <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2200      	movs	r2, #0
 80030b4:	4619      	mov	r1, r3
 80030b6:	f7ff f963 	bl	8002380 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff f8f7 	bl	80022b6 <LL_ADC_SetSamplingTimeCommonConfig>
 80030c8:	e00e      	b.n	80030e8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6819      	ldr	r1, [r3, #0]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	461a      	mov	r2, r3
 80030d8:	f7ff f952 	bl	8002380 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2100      	movs	r1, #0
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff f8e7 	bl	80022b6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	08db      	lsrs	r3, r3, #3
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2b04      	cmp	r3, #4
 8003108:	d022      	beq.n	8003150 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	6919      	ldr	r1, [r3, #16]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800311a:	f7ff f841 	bl	80021a0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6919      	ldr	r1, [r3, #16]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	461a      	mov	r2, r3
 800312c:	f7ff f88d 	bl	800224a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800313c:	2b01      	cmp	r3, #1
 800313e:	d102      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x126>
 8003140:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003144:	e000      	b.n	8003148 <HAL_ADC_ConfigChannel+0x128>
 8003146:	2300      	movs	r3, #0
 8003148:	461a      	mov	r2, r3
 800314a:	f7ff f899 	bl	8002280 <LL_ADC_SetOffsetSaturation>
 800314e:	e17b      	b.n	8003448 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2100      	movs	r1, #0
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff f846 	bl	80021e8 <LL_ADC_GetOffsetChannel>
 800315c:	4603      	mov	r3, r0
 800315e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10a      	bne.n	800317c <HAL_ADC_ConfigChannel+0x15c>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2100      	movs	r1, #0
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff f83b 	bl	80021e8 <LL_ADC_GetOffsetChannel>
 8003172:	4603      	mov	r3, r0
 8003174:	0e9b      	lsrs	r3, r3, #26
 8003176:	f003 021f 	and.w	r2, r3, #31
 800317a:	e01e      	b.n	80031ba <HAL_ADC_ConfigChannel+0x19a>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2100      	movs	r1, #0
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff f830 	bl	80021e8 <LL_ADC_GetOffsetChannel>
 8003188:	4603      	mov	r3, r0
 800318a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003192:	fa93 f3a3 	rbit	r3, r3
 8003196:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800319a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800319e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80031a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80031aa:	2320      	movs	r3, #32
 80031ac:	e004      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80031ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d105      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x1b2>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	0e9b      	lsrs	r3, r3, #26
 80031cc:	f003 031f 	and.w	r3, r3, #31
 80031d0:	e018      	b.n	8003204 <HAL_ADC_ConfigChannel+0x1e4>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80031de:	fa93 f3a3 	rbit	r3, r3
 80031e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80031e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80031ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80031f6:	2320      	movs	r3, #32
 80031f8:	e004      	b.n	8003204 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80031fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80031fe:	fab3 f383 	clz	r3, r3
 8003202:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003204:	429a      	cmp	r2, r3
 8003206:	d106      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2200      	movs	r2, #0
 800320e:	2100      	movs	r1, #0
 8003210:	4618      	mov	r0, r3
 8003212:	f7fe ffff 	bl	8002214 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2101      	movs	r1, #1
 800321c:	4618      	mov	r0, r3
 800321e:	f7fe ffe3 	bl	80021e8 <LL_ADC_GetOffsetChannel>
 8003222:	4603      	mov	r3, r0
 8003224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10a      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x222>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2101      	movs	r1, #1
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe ffd8 	bl	80021e8 <LL_ADC_GetOffsetChannel>
 8003238:	4603      	mov	r3, r0
 800323a:	0e9b      	lsrs	r3, r3, #26
 800323c:	f003 021f 	and.w	r2, r3, #31
 8003240:	e01e      	b.n	8003280 <HAL_ADC_ConfigChannel+0x260>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2101      	movs	r1, #1
 8003248:	4618      	mov	r0, r3
 800324a:	f7fe ffcd 	bl	80021e8 <LL_ADC_GetOffsetChannel>
 800324e:	4603      	mov	r3, r0
 8003250:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003258:	fa93 f3a3 	rbit	r3, r3
 800325c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003260:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003264:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003268:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003270:	2320      	movs	r3, #32
 8003272:	e004      	b.n	800327e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003274:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003278:	fab3 f383 	clz	r3, r3
 800327c:	b2db      	uxtb	r3, r3
 800327e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003288:	2b00      	cmp	r3, #0
 800328a:	d105      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x278>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	0e9b      	lsrs	r3, r3, #26
 8003292:	f003 031f 	and.w	r3, r3, #31
 8003296:	e018      	b.n	80032ca <HAL_ADC_ConfigChannel+0x2aa>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032a4:	fa93 f3a3 	rbit	r3, r3
 80032a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80032ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80032b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80032bc:	2320      	movs	r3, #32
 80032be:	e004      	b.n	80032ca <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80032c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032c4:	fab3 f383 	clz	r3, r3
 80032c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d106      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2200      	movs	r2, #0
 80032d4:	2101      	movs	r1, #1
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fe ff9c 	bl	8002214 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2102      	movs	r1, #2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fe ff80 	bl	80021e8 <LL_ADC_GetOffsetChannel>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10a      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x2e8>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2102      	movs	r1, #2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fe ff75 	bl	80021e8 <LL_ADC_GetOffsetChannel>
 80032fe:	4603      	mov	r3, r0
 8003300:	0e9b      	lsrs	r3, r3, #26
 8003302:	f003 021f 	and.w	r2, r3, #31
 8003306:	e01e      	b.n	8003346 <HAL_ADC_ConfigChannel+0x326>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2102      	movs	r1, #2
 800330e:	4618      	mov	r0, r3
 8003310:	f7fe ff6a 	bl	80021e8 <LL_ADC_GetOffsetChannel>
 8003314:	4603      	mov	r3, r0
 8003316:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800331e:	fa93 f3a3 	rbit	r3, r3
 8003322:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003326:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800332a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800332e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003336:	2320      	movs	r3, #32
 8003338:	e004      	b.n	8003344 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800333a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800334e:	2b00      	cmp	r3, #0
 8003350:	d105      	bne.n	800335e <HAL_ADC_ConfigChannel+0x33e>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	0e9b      	lsrs	r3, r3, #26
 8003358:	f003 031f 	and.w	r3, r3, #31
 800335c:	e016      	b.n	800338c <HAL_ADC_ConfigChannel+0x36c>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003366:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003370:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003372:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003376:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800337e:	2320      	movs	r3, #32
 8003380:	e004      	b.n	800338c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003382:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003386:	fab3 f383 	clz	r3, r3
 800338a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800338c:	429a      	cmp	r2, r3
 800338e:	d106      	bne.n	800339e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2200      	movs	r2, #0
 8003396:	2102      	movs	r1, #2
 8003398:	4618      	mov	r0, r3
 800339a:	f7fe ff3b 	bl	8002214 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2103      	movs	r1, #3
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fe ff1f 	bl	80021e8 <LL_ADC_GetOffsetChannel>
 80033aa:	4603      	mov	r3, r0
 80033ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10a      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x3aa>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2103      	movs	r1, #3
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe ff14 	bl	80021e8 <LL_ADC_GetOffsetChannel>
 80033c0:	4603      	mov	r3, r0
 80033c2:	0e9b      	lsrs	r3, r3, #26
 80033c4:	f003 021f 	and.w	r2, r3, #31
 80033c8:	e017      	b.n	80033fa <HAL_ADC_ConfigChannel+0x3da>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2103      	movs	r1, #3
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fe ff09 	bl	80021e8 <LL_ADC_GetOffsetChannel>
 80033d6:	4603      	mov	r3, r0
 80033d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033dc:	fa93 f3a3 	rbit	r3, r3
 80033e0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80033e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033e4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80033e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80033ec:	2320      	movs	r3, #32
 80033ee:	e003      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80033f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033f2:	fab3 f383 	clz	r3, r3
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003402:	2b00      	cmp	r3, #0
 8003404:	d105      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x3f2>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	0e9b      	lsrs	r3, r3, #26
 800340c:	f003 031f 	and.w	r3, r3, #31
 8003410:	e011      	b.n	8003436 <HAL_ADC_ConfigChannel+0x416>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003418:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800341a:	fa93 f3a3 	rbit	r3, r3
 800341e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003420:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003422:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003424:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800342a:	2320      	movs	r3, #32
 800342c:	e003      	b.n	8003436 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800342e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003430:	fab3 f383 	clz	r3, r3
 8003434:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003436:	429a      	cmp	r2, r3
 8003438:	d106      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2200      	movs	r2, #0
 8003440:	2103      	movs	r1, #3
 8003442:	4618      	mov	r0, r3
 8003444:	f7fe fee6 	bl	8002214 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff f879 	bl	8002544 <LL_ADC_IsEnabled>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	f040 813d 	bne.w	80036d4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	6819      	ldr	r1, [r3, #0]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	461a      	mov	r2, r3
 8003468:	f7fe ffb6 	bl	80023d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	4aa2      	ldr	r2, [pc, #648]	@ (80036fc <HAL_ADC_ConfigChannel+0x6dc>)
 8003472:	4293      	cmp	r3, r2
 8003474:	f040 812e 	bne.w	80036d4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10b      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x480>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	0e9b      	lsrs	r3, r3, #26
 800348e:	3301      	adds	r3, #1
 8003490:	f003 031f 	and.w	r3, r3, #31
 8003494:	2b09      	cmp	r3, #9
 8003496:	bf94      	ite	ls
 8003498:	2301      	movls	r3, #1
 800349a:	2300      	movhi	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	e019      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x4b4>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034a8:	fa93 f3a3 	rbit	r3, r3
 80034ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80034ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034b0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80034b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80034b8:	2320      	movs	r3, #32
 80034ba:	e003      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80034bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034be:	fab3 f383 	clz	r3, r3
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	3301      	adds	r3, #1
 80034c6:	f003 031f 	and.w	r3, r3, #31
 80034ca:	2b09      	cmp	r3, #9
 80034cc:	bf94      	ite	ls
 80034ce:	2301      	movls	r3, #1
 80034d0:	2300      	movhi	r3, #0
 80034d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d079      	beq.n	80035cc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d107      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x4d4>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	0e9b      	lsrs	r3, r3, #26
 80034ea:	3301      	adds	r3, #1
 80034ec:	069b      	lsls	r3, r3, #26
 80034ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034f2:	e015      	b.n	8003520 <HAL_ADC_ConfigChannel+0x500>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034fc:	fa93 f3a3 	rbit	r3, r3
 8003500:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003504:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800350c:	2320      	movs	r3, #32
 800350e:	e003      	b.n	8003518 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003512:	fab3 f383 	clz	r3, r3
 8003516:	b2db      	uxtb	r3, r3
 8003518:	3301      	adds	r3, #1
 800351a:	069b      	lsls	r3, r3, #26
 800351c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003528:	2b00      	cmp	r3, #0
 800352a:	d109      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x520>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	0e9b      	lsrs	r3, r3, #26
 8003532:	3301      	adds	r3, #1
 8003534:	f003 031f 	and.w	r3, r3, #31
 8003538:	2101      	movs	r1, #1
 800353a:	fa01 f303 	lsl.w	r3, r1, r3
 800353e:	e017      	b.n	8003570 <HAL_ADC_ConfigChannel+0x550>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003546:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003548:	fa93 f3a3 	rbit	r3, r3
 800354c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800354e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003550:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003558:	2320      	movs	r3, #32
 800355a:	e003      	b.n	8003564 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800355c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800355e:	fab3 f383 	clz	r3, r3
 8003562:	b2db      	uxtb	r3, r3
 8003564:	3301      	adds	r3, #1
 8003566:	f003 031f 	and.w	r3, r3, #31
 800356a:	2101      	movs	r1, #1
 800356c:	fa01 f303 	lsl.w	r3, r1, r3
 8003570:	ea42 0103 	orr.w	r1, r2, r3
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10a      	bne.n	8003596 <HAL_ADC_ConfigChannel+0x576>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	0e9b      	lsrs	r3, r3, #26
 8003586:	3301      	adds	r3, #1
 8003588:	f003 021f 	and.w	r2, r3, #31
 800358c:	4613      	mov	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	4413      	add	r3, r2
 8003592:	051b      	lsls	r3, r3, #20
 8003594:	e018      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x5a8>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800359e:	fa93 f3a3 	rbit	r3, r3
 80035a2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80035a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80035a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80035ae:	2320      	movs	r3, #32
 80035b0:	e003      	b.n	80035ba <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80035b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035b4:	fab3 f383 	clz	r3, r3
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	3301      	adds	r3, #1
 80035bc:	f003 021f 	and.w	r2, r3, #31
 80035c0:	4613      	mov	r3, r2
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	4413      	add	r3, r2
 80035c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035c8:	430b      	orrs	r3, r1
 80035ca:	e07e      	b.n	80036ca <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d107      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x5c8>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	0e9b      	lsrs	r3, r3, #26
 80035de:	3301      	adds	r3, #1
 80035e0:	069b      	lsls	r3, r3, #26
 80035e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035e6:	e015      	b.n	8003614 <HAL_ADC_ConfigChannel+0x5f4>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f0:	fa93 f3a3 	rbit	r3, r3
 80035f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80035f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80035fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003600:	2320      	movs	r3, #32
 8003602:	e003      	b.n	800360c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003606:	fab3 f383 	clz	r3, r3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	3301      	adds	r3, #1
 800360e:	069b      	lsls	r3, r3, #26
 8003610:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800361c:	2b00      	cmp	r3, #0
 800361e:	d109      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x614>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	0e9b      	lsrs	r3, r3, #26
 8003626:	3301      	adds	r3, #1
 8003628:	f003 031f 	and.w	r3, r3, #31
 800362c:	2101      	movs	r1, #1
 800362e:	fa01 f303 	lsl.w	r3, r1, r3
 8003632:	e017      	b.n	8003664 <HAL_ADC_ConfigChannel+0x644>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	fa93 f3a3 	rbit	r3, r3
 8003640:	61fb      	str	r3, [r7, #28]
  return result;
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800364c:	2320      	movs	r3, #32
 800364e:	e003      	b.n	8003658 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003652:	fab3 f383 	clz	r3, r3
 8003656:	b2db      	uxtb	r3, r3
 8003658:	3301      	adds	r3, #1
 800365a:	f003 031f 	and.w	r3, r3, #31
 800365e:	2101      	movs	r1, #1
 8003660:	fa01 f303 	lsl.w	r3, r1, r3
 8003664:	ea42 0103 	orr.w	r1, r2, r3
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10d      	bne.n	8003690 <HAL_ADC_ConfigChannel+0x670>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	0e9b      	lsrs	r3, r3, #26
 800367a:	3301      	adds	r3, #1
 800367c:	f003 021f 	and.w	r2, r3, #31
 8003680:	4613      	mov	r3, r2
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	4413      	add	r3, r2
 8003686:	3b1e      	subs	r3, #30
 8003688:	051b      	lsls	r3, r3, #20
 800368a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800368e:	e01b      	b.n	80036c8 <HAL_ADC_ConfigChannel+0x6a8>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	fa93 f3a3 	rbit	r3, r3
 800369c:	613b      	str	r3, [r7, #16]
  return result;
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80036a8:	2320      	movs	r3, #32
 80036aa:	e003      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	fab3 f383 	clz	r3, r3
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	3301      	adds	r3, #1
 80036b6:	f003 021f 	and.w	r2, r3, #31
 80036ba:	4613      	mov	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	4413      	add	r3, r2
 80036c0:	3b1e      	subs	r3, #30
 80036c2:	051b      	lsls	r3, r3, #20
 80036c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036c8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036ce:	4619      	mov	r1, r3
 80036d0:	f7fe fe56 	bl	8002380 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	4b09      	ldr	r3, [pc, #36]	@ (8003700 <HAL_ADC_ConfigChannel+0x6e0>)
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80be 	beq.w	800385e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036ea:	d004      	beq.n	80036f6 <HAL_ADC_ConfigChannel+0x6d6>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a04      	ldr	r2, [pc, #16]	@ (8003704 <HAL_ADC_ConfigChannel+0x6e4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d10a      	bne.n	800370c <HAL_ADC_ConfigChannel+0x6ec>
 80036f6:	4b04      	ldr	r3, [pc, #16]	@ (8003708 <HAL_ADC_ConfigChannel+0x6e8>)
 80036f8:	e009      	b.n	800370e <HAL_ADC_ConfigChannel+0x6ee>
 80036fa:	bf00      	nop
 80036fc:	407f0000 	.word	0x407f0000
 8003700:	80080000 	.word	0x80080000
 8003704:	50000100 	.word	0x50000100
 8003708:	50000300 	.word	0x50000300
 800370c:	4b59      	ldr	r3, [pc, #356]	@ (8003874 <HAL_ADC_ConfigChannel+0x854>)
 800370e:	4618      	mov	r0, r3
 8003710:	f7fe fd38 	bl	8002184 <LL_ADC_GetCommonPathInternalCh>
 8003714:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a56      	ldr	r2, [pc, #344]	@ (8003878 <HAL_ADC_ConfigChannel+0x858>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d004      	beq.n	800372c <HAL_ADC_ConfigChannel+0x70c>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a55      	ldr	r2, [pc, #340]	@ (800387c <HAL_ADC_ConfigChannel+0x85c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d13a      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800372c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003730:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d134      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003740:	d005      	beq.n	800374e <HAL_ADC_ConfigChannel+0x72e>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a4e      	ldr	r2, [pc, #312]	@ (8003880 <HAL_ADC_ConfigChannel+0x860>)
 8003748:	4293      	cmp	r3, r2
 800374a:	f040 8085 	bne.w	8003858 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003756:	d004      	beq.n	8003762 <HAL_ADC_ConfigChannel+0x742>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a49      	ldr	r2, [pc, #292]	@ (8003884 <HAL_ADC_ConfigChannel+0x864>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d101      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x746>
 8003762:	4a49      	ldr	r2, [pc, #292]	@ (8003888 <HAL_ADC_ConfigChannel+0x868>)
 8003764:	e000      	b.n	8003768 <HAL_ADC_ConfigChannel+0x748>
 8003766:	4a43      	ldr	r2, [pc, #268]	@ (8003874 <HAL_ADC_ConfigChannel+0x854>)
 8003768:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800376c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003770:	4619      	mov	r1, r3
 8003772:	4610      	mov	r0, r2
 8003774:	f7fe fcf3 	bl	800215e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003778:	4b44      	ldr	r3, [pc, #272]	@ (800388c <HAL_ADC_ConfigChannel+0x86c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	099b      	lsrs	r3, r3, #6
 800377e:	4a44      	ldr	r2, [pc, #272]	@ (8003890 <HAL_ADC_ConfigChannel+0x870>)
 8003780:	fba2 2303 	umull	r2, r3, r2, r3
 8003784:	099b      	lsrs	r3, r3, #6
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	4613      	mov	r3, r2
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	4413      	add	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003792:	e002      	b.n	800379a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	3b01      	subs	r3, #1
 8003798:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f9      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037a0:	e05a      	b.n	8003858 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a3b      	ldr	r2, [pc, #236]	@ (8003894 <HAL_ADC_ConfigChannel+0x874>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d125      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d11f      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a31      	ldr	r2, [pc, #196]	@ (8003884 <HAL_ADC_ConfigChannel+0x864>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d104      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x7ac>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a34      	ldr	r2, [pc, #208]	@ (8003898 <HAL_ADC_ConfigChannel+0x878>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d047      	beq.n	800385c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037d4:	d004      	beq.n	80037e0 <HAL_ADC_ConfigChannel+0x7c0>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a2a      	ldr	r2, [pc, #168]	@ (8003884 <HAL_ADC_ConfigChannel+0x864>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d101      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x7c4>
 80037e0:	4a29      	ldr	r2, [pc, #164]	@ (8003888 <HAL_ADC_ConfigChannel+0x868>)
 80037e2:	e000      	b.n	80037e6 <HAL_ADC_ConfigChannel+0x7c6>
 80037e4:	4a23      	ldr	r2, [pc, #140]	@ (8003874 <HAL_ADC_ConfigChannel+0x854>)
 80037e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037ee:	4619      	mov	r1, r3
 80037f0:	4610      	mov	r0, r2
 80037f2:	f7fe fcb4 	bl	800215e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037f6:	e031      	b.n	800385c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a27      	ldr	r2, [pc, #156]	@ (800389c <HAL_ADC_ConfigChannel+0x87c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d12d      	bne.n	800385e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003802:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d127      	bne.n	800385e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1c      	ldr	r2, [pc, #112]	@ (8003884 <HAL_ADC_ConfigChannel+0x864>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d022      	beq.n	800385e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003820:	d004      	beq.n	800382c <HAL_ADC_ConfigChannel+0x80c>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a17      	ldr	r2, [pc, #92]	@ (8003884 <HAL_ADC_ConfigChannel+0x864>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d101      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x810>
 800382c:	4a16      	ldr	r2, [pc, #88]	@ (8003888 <HAL_ADC_ConfigChannel+0x868>)
 800382e:	e000      	b.n	8003832 <HAL_ADC_ConfigChannel+0x812>
 8003830:	4a10      	ldr	r2, [pc, #64]	@ (8003874 <HAL_ADC_ConfigChannel+0x854>)
 8003832:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003836:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800383a:	4619      	mov	r1, r3
 800383c:	4610      	mov	r0, r2
 800383e:	f7fe fc8e 	bl	800215e <LL_ADC_SetCommonPathInternalCh>
 8003842:	e00c      	b.n	800385e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003848:	f043 0220 	orr.w	r2, r3, #32
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003856:	e002      	b.n	800385e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003858:	bf00      	nop
 800385a:	e000      	b.n	800385e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800385c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003866:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800386a:	4618      	mov	r0, r3
 800386c:	37d8      	adds	r7, #216	@ 0xd8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	50000700 	.word	0x50000700
 8003878:	c3210000 	.word	0xc3210000
 800387c:	90c00010 	.word	0x90c00010
 8003880:	50000600 	.word	0x50000600
 8003884:	50000100 	.word	0x50000100
 8003888:	50000300 	.word	0x50000300
 800388c:	20000000 	.word	0x20000000
 8003890:	053e2d63 	.word	0x053e2d63
 8003894:	c7520000 	.word	0xc7520000
 8003898:	50000500 	.word	0x50000500
 800389c:	cb840000 	.word	0xcb840000

080038a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7fe fe47 	bl	8002544 <LL_ADC_IsEnabled>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d176      	bne.n	80039aa <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	4b3c      	ldr	r3, [pc, #240]	@ (80039b4 <ADC_Enable+0x114>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00d      	beq.n	80038e6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ce:	f043 0210 	orr.w	r2, r3, #16
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038da:	f043 0201 	orr.w	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e062      	b.n	80039ac <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fe fe02 	bl	80024f4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038f8:	d004      	beq.n	8003904 <ADC_Enable+0x64>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a2e      	ldr	r2, [pc, #184]	@ (80039b8 <ADC_Enable+0x118>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d101      	bne.n	8003908 <ADC_Enable+0x68>
 8003904:	4b2d      	ldr	r3, [pc, #180]	@ (80039bc <ADC_Enable+0x11c>)
 8003906:	e000      	b.n	800390a <ADC_Enable+0x6a>
 8003908:	4b2d      	ldr	r3, [pc, #180]	@ (80039c0 <ADC_Enable+0x120>)
 800390a:	4618      	mov	r0, r3
 800390c:	f7fe fc3a 	bl	8002184 <LL_ADC_GetCommonPathInternalCh>
 8003910:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003912:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003916:	2b00      	cmp	r3, #0
 8003918:	d013      	beq.n	8003942 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800391a:	4b2a      	ldr	r3, [pc, #168]	@ (80039c4 <ADC_Enable+0x124>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	099b      	lsrs	r3, r3, #6
 8003920:	4a29      	ldr	r2, [pc, #164]	@ (80039c8 <ADC_Enable+0x128>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	099b      	lsrs	r3, r3, #6
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	4613      	mov	r3, r2
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	4413      	add	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003934:	e002      	b.n	800393c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	3b01      	subs	r3, #1
 800393a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f9      	bne.n	8003936 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003942:	f7fe fbed 	bl	8002120 <HAL_GetTick>
 8003946:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003948:	e028      	b.n	800399c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe fdf8 	bl	8002544 <LL_ADC_IsEnabled>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d104      	bne.n	8003964 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f7fe fdc8 	bl	80024f4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003964:	f7fe fbdc 	bl	8002120 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d914      	bls.n	800399c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b01      	cmp	r3, #1
 800397e:	d00d      	beq.n	800399c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003984:	f043 0210 	orr.w	r2, r3, #16
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003990:	f043 0201 	orr.w	r2, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e007      	b.n	80039ac <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d1cf      	bne.n	800394a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	8000003f 	.word	0x8000003f
 80039b8:	50000100 	.word	0x50000100
 80039bc:	50000300 	.word	0x50000300
 80039c0:	50000700 	.word	0x50000700
 80039c4:	20000000 	.word	0x20000000
 80039c8:	053e2d63 	.word	0x053e2d63

080039cc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fe fdc6 	bl	800256a <LL_ADC_IsDisableOngoing>
 80039de:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fe fdad 	bl	8002544 <LL_ADC_IsEnabled>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d047      	beq.n	8003a80 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d144      	bne.n	8003a80 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 030d 	and.w	r3, r3, #13
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d10c      	bne.n	8003a1e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fe fd87 	bl	800251c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2203      	movs	r2, #3
 8003a14:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a16:	f7fe fb83 	bl	8002120 <HAL_GetTick>
 8003a1a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a1c:	e029      	b.n	8003a72 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a22:	f043 0210 	orr.w	r2, r3, #16
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a2e:	f043 0201 	orr.w	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e023      	b.n	8003a82 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a3a:	f7fe fb71 	bl	8002120 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d914      	bls.n	8003a72 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00d      	beq.n	8003a72 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5a:	f043 0210 	orr.w	r2, r3, #16
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a66:	f043 0201 	orr.w	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e007      	b.n	8003a82 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1dc      	bne.n	8003a3a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a9c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d14b      	bne.n	8003b3c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d021      	beq.n	8003b02 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fe fc0a 	bl	80022dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d032      	beq.n	8003b34 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d12b      	bne.n	8003b34 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d11f      	bne.n	8003b34 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af8:	f043 0201 	orr.w	r2, r3, #1
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b00:	e018      	b.n	8003b34 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d111      	bne.n	8003b34 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d105      	bne.n	8003b34 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b2c:	f043 0201 	orr.w	r2, r3, #1
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f7fd fa43 	bl	8000fc0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b3a:	e00e      	b.n	8003b5a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f7ff fa5f 	bl	800300c <HAL_ADC_ErrorCallback>
}
 8003b4e:	e004      	b.n	8003b5a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4798      	blx	r3
}
 8003b5a:	bf00      	nop
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f7ff fa37 	bl	8002fe4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b76:	bf00      	nop
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b084      	sub	sp, #16
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b90:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9c:	f043 0204 	orr.w	r2, r3, #4
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f7ff fa31 	bl	800300c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003baa:	bf00      	nop
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <LL_ADC_IsEnabled>:
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <LL_ADC_IsEnabled+0x18>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <LL_ADC_IsEnabled+0x1a>
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <LL_ADC_StartCalibration>:
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003bea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	609a      	str	r2, [r3, #8]
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <LL_ADC_IsCalibrationOnGoing>:
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c1e:	d101      	bne.n	8003c24 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003c20:	2301      	movs	r3, #1
 8003c22:	e000      	b.n	8003c26 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <LL_ADC_REG_IsConversionOngoing>:
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d101      	bne.n	8003c4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_ADCEx_Calibration_Start+0x1c>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e04d      	b.n	8003d10 <HAL_ADCEx_Calibration_Start+0xb8>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff fea5 	bl	80039cc <ADC_Disable>
 8003c82:	4603      	mov	r3, r0
 8003c84:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d136      	bne.n	8003cfa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c90:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003c94:	f023 0302 	bic.w	r3, r3, #2
 8003c98:	f043 0202 	orr.w	r2, r3, #2
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6839      	ldr	r1, [r7, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff ff96 	bl	8003bd8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003cac:	e014      	b.n	8003cd8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	4a18      	ldr	r2, [pc, #96]	@ (8003d18 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d90d      	bls.n	8003cd8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc0:	f023 0312 	bic.w	r3, r3, #18
 8003cc4:	f043 0210 	orr.w	r2, r3, #16
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e01b      	b.n	8003d10 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff ff94 	bl	8003c0a <LL_ADC_IsCalibrationOnGoing>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1e2      	bne.n	8003cae <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cec:	f023 0303 	bic.w	r3, r3, #3
 8003cf0:	f043 0201 	orr.w	r2, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003cf8:	e005      	b.n	8003d06 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfe:	f043 0210 	orr.w	r2, r3, #16
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	0004de01 	.word	0x0004de01

08003d1c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003d80:	b590      	push	{r4, r7, lr}
 8003d82:	b0a1      	sub	sp, #132	@ 0x84
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e0e7      	b.n	8003f6e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003da6:	2300      	movs	r3, #0
 8003da8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003daa:	2300      	movs	r3, #0
 8003dac:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003db6:	d102      	bne.n	8003dbe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003db8:	4b6f      	ldr	r3, [pc, #444]	@ (8003f78 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	e009      	b.n	8003dd2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a6e      	ldr	r2, [pc, #440]	@ (8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d102      	bne.n	8003dce <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003dc8:	4b6d      	ldr	r3, [pc, #436]	@ (8003f80 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003dca:	60bb      	str	r3, [r7, #8]
 8003dcc:	e001      	b.n	8003dd2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10b      	bne.n	8003df0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ddc:	f043 0220 	orr.w	r2, r3, #32
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0be      	b.n	8003f6e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff ff1d 	bl	8003c32 <LL_ADC_REG_IsConversionOngoing>
 8003df8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff ff17 	bl	8003c32 <LL_ADC_REG_IsConversionOngoing>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f040 80a0 	bne.w	8003f4c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003e0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f040 809c 	bne.w	8003f4c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e1c:	d004      	beq.n	8003e28 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a55      	ldr	r2, [pc, #340]	@ (8003f78 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d101      	bne.n	8003e2c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003e28:	4b56      	ldr	r3, [pc, #344]	@ (8003f84 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003e2a:	e000      	b.n	8003e2e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003e2c:	4b56      	ldr	r3, [pc, #344]	@ (8003f88 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003e2e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d04b      	beq.n	8003ed0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003e38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	6859      	ldr	r1, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003e4a:	035b      	lsls	r3, r3, #13
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e52:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e5c:	d004      	beq.n	8003e68 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a45      	ldr	r2, [pc, #276]	@ (8003f78 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d10f      	bne.n	8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003e68:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003e6c:	f7ff fea1 	bl	8003bb2 <LL_ADC_IsEnabled>
 8003e70:	4604      	mov	r4, r0
 8003e72:	4841      	ldr	r0, [pc, #260]	@ (8003f78 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e74:	f7ff fe9d 	bl	8003bb2 <LL_ADC_IsEnabled>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	4323      	orrs	r3, r4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf0c      	ite	eq
 8003e80:	2301      	moveq	r3, #1
 8003e82:	2300      	movne	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	e012      	b.n	8003eae <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003e88:	483c      	ldr	r0, [pc, #240]	@ (8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003e8a:	f7ff fe92 	bl	8003bb2 <LL_ADC_IsEnabled>
 8003e8e:	4604      	mov	r4, r0
 8003e90:	483b      	ldr	r0, [pc, #236]	@ (8003f80 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003e92:	f7ff fe8e 	bl	8003bb2 <LL_ADC_IsEnabled>
 8003e96:	4603      	mov	r3, r0
 8003e98:	431c      	orrs	r4, r3
 8003e9a:	483c      	ldr	r0, [pc, #240]	@ (8003f8c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003e9c:	f7ff fe89 	bl	8003bb2 <LL_ADC_IsEnabled>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	4323      	orrs	r3, r4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	bf0c      	ite	eq
 8003ea8:	2301      	moveq	r3, #1
 8003eaa:	2300      	movne	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d056      	beq.n	8003f60 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003eb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003eba:	f023 030f 	bic.w	r3, r3, #15
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	6811      	ldr	r1, [r2, #0]
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	6892      	ldr	r2, [r2, #8]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ecc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ece:	e047      	b.n	8003f60 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003ed0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ed8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003eda:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ee4:	d004      	beq.n	8003ef0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a23      	ldr	r2, [pc, #140]	@ (8003f78 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d10f      	bne.n	8003f10 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003ef0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003ef4:	f7ff fe5d 	bl	8003bb2 <LL_ADC_IsEnabled>
 8003ef8:	4604      	mov	r4, r0
 8003efa:	481f      	ldr	r0, [pc, #124]	@ (8003f78 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003efc:	f7ff fe59 	bl	8003bb2 <LL_ADC_IsEnabled>
 8003f00:	4603      	mov	r3, r0
 8003f02:	4323      	orrs	r3, r4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bf0c      	ite	eq
 8003f08:	2301      	moveq	r3, #1
 8003f0a:	2300      	movne	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	e012      	b.n	8003f36 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003f10:	481a      	ldr	r0, [pc, #104]	@ (8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003f12:	f7ff fe4e 	bl	8003bb2 <LL_ADC_IsEnabled>
 8003f16:	4604      	mov	r4, r0
 8003f18:	4819      	ldr	r0, [pc, #100]	@ (8003f80 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003f1a:	f7ff fe4a 	bl	8003bb2 <LL_ADC_IsEnabled>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	431c      	orrs	r4, r3
 8003f22:	481a      	ldr	r0, [pc, #104]	@ (8003f8c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003f24:	f7ff fe45 	bl	8003bb2 <LL_ADC_IsEnabled>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	4323      	orrs	r3, r4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf0c      	ite	eq
 8003f30:	2301      	moveq	r3, #1
 8003f32:	2300      	movne	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d012      	beq.n	8003f60 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003f42:	f023 030f 	bic.w	r3, r3, #15
 8003f46:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003f48:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f4a:	e009      	b.n	8003f60 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f50:	f043 0220 	orr.w	r2, r3, #32
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003f5e:	e000      	b.n	8003f62 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f60:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f6a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3784      	adds	r7, #132	@ 0x84
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd90      	pop	{r4, r7, pc}
 8003f76:	bf00      	nop
 8003f78:	50000100 	.word	0x50000100
 8003f7c:	50000400 	.word	0x50000400
 8003f80:	50000500 	.word	0x50000500
 8003f84:	50000300 	.word	0x50000300
 8003f88:	50000700 	.word	0x50000700
 8003f8c:	50000600 	.word	0x50000600

08003f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fac:	4013      	ands	r3, r2
 8003fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003fbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fc2:	4a04      	ldr	r2, [pc, #16]	@ (8003fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	60d3      	str	r3, [r2, #12]
}
 8003fc8:	bf00      	nop
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	e000ed00 	.word	0xe000ed00

08003fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fdc:	4b04      	ldr	r3, [pc, #16]	@ (8003ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	0a1b      	lsrs	r3, r3, #8
 8003fe2:	f003 0307 	and.w	r3, r3, #7
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	e000ed00 	.word	0xe000ed00

08003ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004002:	2b00      	cmp	r3, #0
 8004004:	db0b      	blt.n	800401e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004006:	79fb      	ldrb	r3, [r7, #7]
 8004008:	f003 021f 	and.w	r2, r3, #31
 800400c:	4907      	ldr	r1, [pc, #28]	@ (800402c <__NVIC_EnableIRQ+0x38>)
 800400e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	2001      	movs	r0, #1
 8004016:	fa00 f202 	lsl.w	r2, r0, r2
 800401a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	e000e100 	.word	0xe000e100

08004030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	6039      	str	r1, [r7, #0]
 800403a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800403c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004040:	2b00      	cmp	r3, #0
 8004042:	db0a      	blt.n	800405a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	b2da      	uxtb	r2, r3
 8004048:	490c      	ldr	r1, [pc, #48]	@ (800407c <__NVIC_SetPriority+0x4c>)
 800404a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404e:	0112      	lsls	r2, r2, #4
 8004050:	b2d2      	uxtb	r2, r2
 8004052:	440b      	add	r3, r1
 8004054:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004058:	e00a      	b.n	8004070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	b2da      	uxtb	r2, r3
 800405e:	4908      	ldr	r1, [pc, #32]	@ (8004080 <__NVIC_SetPriority+0x50>)
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	3b04      	subs	r3, #4
 8004068:	0112      	lsls	r2, r2, #4
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	440b      	add	r3, r1
 800406e:	761a      	strb	r2, [r3, #24]
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	e000e100 	.word	0xe000e100
 8004080:	e000ed00 	.word	0xe000ed00

08004084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004084:	b480      	push	{r7}
 8004086:	b089      	sub	sp, #36	@ 0x24
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f1c3 0307 	rsb	r3, r3, #7
 800409e:	2b04      	cmp	r3, #4
 80040a0:	bf28      	it	cs
 80040a2:	2304      	movcs	r3, #4
 80040a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	3304      	adds	r3, #4
 80040aa:	2b06      	cmp	r3, #6
 80040ac:	d902      	bls.n	80040b4 <NVIC_EncodePriority+0x30>
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	3b03      	subs	r3, #3
 80040b2:	e000      	b.n	80040b6 <NVIC_EncodePriority+0x32>
 80040b4:	2300      	movs	r3, #0
 80040b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	43da      	mvns	r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	401a      	ands	r2, r3
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	fa01 f303 	lsl.w	r3, r1, r3
 80040d6:	43d9      	mvns	r1, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040dc:	4313      	orrs	r3, r2
         );
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3724      	adds	r7, #36	@ 0x24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b082      	sub	sp, #8
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7ff ff4c 	bl	8003f90 <__NVIC_SetPriorityGrouping>
}
 80040f8:	bf00      	nop
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	4603      	mov	r3, r0
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800410e:	f7ff ff63 	bl	8003fd8 <__NVIC_GetPriorityGrouping>
 8004112:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	68b9      	ldr	r1, [r7, #8]
 8004118:	6978      	ldr	r0, [r7, #20]
 800411a:	f7ff ffb3 	bl	8004084 <NVIC_EncodePriority>
 800411e:	4602      	mov	r2, r0
 8004120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004124:	4611      	mov	r1, r2
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff ff82 	bl	8004030 <__NVIC_SetPriority>
}
 800412c:	bf00      	nop
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	4603      	mov	r3, r0
 800413c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800413e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff ff56 	bl	8003ff4 <__NVIC_EnableIRQ>
}
 8004148:	bf00      	nop
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e08d      	b.n	800427e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	461a      	mov	r2, r3
 8004168:	4b47      	ldr	r3, [pc, #284]	@ (8004288 <HAL_DMA_Init+0x138>)
 800416a:	429a      	cmp	r2, r3
 800416c:	d80f      	bhi.n	800418e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	4b45      	ldr	r3, [pc, #276]	@ (800428c <HAL_DMA_Init+0x13c>)
 8004176:	4413      	add	r3, r2
 8004178:	4a45      	ldr	r2, [pc, #276]	@ (8004290 <HAL_DMA_Init+0x140>)
 800417a:	fba2 2303 	umull	r2, r3, r2, r3
 800417e:	091b      	lsrs	r3, r3, #4
 8004180:	009a      	lsls	r2, r3, #2
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a42      	ldr	r2, [pc, #264]	@ (8004294 <HAL_DMA_Init+0x144>)
 800418a:	641a      	str	r2, [r3, #64]	@ 0x40
 800418c:	e00e      	b.n	80041ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	461a      	mov	r2, r3
 8004194:	4b40      	ldr	r3, [pc, #256]	@ (8004298 <HAL_DMA_Init+0x148>)
 8004196:	4413      	add	r3, r2
 8004198:	4a3d      	ldr	r2, [pc, #244]	@ (8004290 <HAL_DMA_Init+0x140>)
 800419a:	fba2 2303 	umull	r2, r3, r2, r3
 800419e:	091b      	lsrs	r3, r3, #4
 80041a0:	009a      	lsls	r2, r3, #2
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a3c      	ldr	r2, [pc, #240]	@ (800429c <HAL_DMA_Init+0x14c>)
 80041aa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80041c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80041d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fa76 	bl	80046f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800420c:	d102      	bne.n	8004214 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004228:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d010      	beq.n	8004254 <HAL_DMA_Init+0x104>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b04      	cmp	r3, #4
 8004238:	d80c      	bhi.n	8004254 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fa96 	bl	800476c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004250:	605a      	str	r2, [r3, #4]
 8004252:	e008      	b.n	8004266 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	40020407 	.word	0x40020407
 800428c:	bffdfff8 	.word	0xbffdfff8
 8004290:	cccccccd 	.word	0xcccccccd
 8004294:	40020000 	.word	0x40020000
 8004298:	bffdfbf8 	.word	0xbffdfbf8
 800429c:	40020400 	.word	0x40020400

080042a0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_DMA_Start_IT+0x20>
 80042bc:	2302      	movs	r3, #2
 80042be:	e066      	b.n	800438e <HAL_DMA_Start_IT+0xee>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d155      	bne.n	8004380 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0201 	bic.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f9bb 	bl	8004674 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004302:	2b00      	cmp	r3, #0
 8004304:	d008      	beq.n	8004318 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f042 020e 	orr.w	r2, r2, #14
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	e00f      	b.n	8004338 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0204 	bic.w	r2, r2, #4
 8004326:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 020a 	orr.w	r2, r2, #10
 8004336:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d007      	beq.n	8004356 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004350:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004354:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435a:	2b00      	cmp	r3, #0
 800435c:	d007      	beq.n	800436e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004368:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800436c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f042 0201 	orr.w	r2, r2, #1
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	e005      	b.n	800438c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004388:	2302      	movs	r3, #2
 800438a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800438c:	7dfb      	ldrb	r3, [r7, #23]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004396:	b480      	push	{r7}
 8004398:	b085      	sub	sp, #20
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d005      	beq.n	80043ba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2204      	movs	r2, #4
 80043b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	73fb      	strb	r3, [r7, #15]
 80043b8:	e037      	b.n	800442a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 020e 	bic.w	r2, r2, #14
 80043c8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043d8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0201 	bic.w	r2, r2, #1
 80043e8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ee:	f003 021f 	and.w	r2, r3, #31
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f6:	2101      	movs	r1, #1
 80043f8:	fa01 f202 	lsl.w	r2, r1, r2
 80043fc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004406:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00c      	beq.n	800442a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800441a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800441e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004428:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800443a:	7bfb      	ldrb	r3, [r7, #15]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d00d      	beq.n	800447c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2204      	movs	r2, #4
 8004464:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	73fb      	strb	r3, [r7, #15]
 800447a:	e047      	b.n	800450c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 020e 	bic.w	r2, r2, #14
 800448a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0201 	bic.w	r2, r2, #1
 800449a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b0:	f003 021f 	and.w	r2, r3, #31
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b8:	2101      	movs	r1, #1
 80044ba:	fa01 f202 	lsl.w	r2, r1, r2
 80044be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80044c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00c      	beq.n	80044ec <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80044ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	4798      	blx	r3
    }
  }
  return status;
 800450c:	7bfb      	ldrb	r3, [r7, #15]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004532:	f003 031f 	and.w	r3, r3, #31
 8004536:	2204      	movs	r2, #4
 8004538:	409a      	lsls	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4013      	ands	r3, r2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d026      	beq.n	8004590 <HAL_DMA_IRQHandler+0x7a>
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d021      	beq.n	8004590 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b00      	cmp	r3, #0
 8004558:	d107      	bne.n	800456a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0204 	bic.w	r2, r2, #4
 8004568:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800456e:	f003 021f 	and.w	r2, r3, #31
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004576:	2104      	movs	r1, #4
 8004578:	fa01 f202 	lsl.w	r2, r1, r2
 800457c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004582:	2b00      	cmp	r3, #0
 8004584:	d071      	beq.n	800466a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800458e:	e06c      	b.n	800466a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004594:	f003 031f 	and.w	r3, r3, #31
 8004598:	2202      	movs	r2, #2
 800459a:	409a      	lsls	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4013      	ands	r3, r2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d02e      	beq.n	8004602 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d029      	beq.n	8004602 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10b      	bne.n	80045d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 020a 	bic.w	r2, r2, #10
 80045ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d8:	f003 021f 	and.w	r2, r3, #31
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e0:	2102      	movs	r1, #2
 80045e2:	fa01 f202 	lsl.w	r2, r1, r2
 80045e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d038      	beq.n	800466a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004600:	e033      	b.n	800466a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004606:	f003 031f 	and.w	r3, r3, #31
 800460a:	2208      	movs	r2, #8
 800460c:	409a      	lsls	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4013      	ands	r3, r2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d02a      	beq.n	800466c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d025      	beq.n	800466c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 020e 	bic.w	r2, r2, #14
 800462e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004634:	f003 021f 	and.w	r2, r3, #31
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463c:	2101      	movs	r1, #1
 800463e:	fa01 f202 	lsl.w	r2, r1, r2
 8004642:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800465e:	2b00      	cmp	r3, #0
 8004660:	d004      	beq.n	800466c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800466a:	bf00      	nop
 800466c:	bf00      	nop
}
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800468a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004690:	2b00      	cmp	r3, #0
 8004692:	d004      	beq.n	800469e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800469c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a2:	f003 021f 	and.w	r2, r3, #31
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046aa:	2101      	movs	r1, #1
 80046ac:	fa01 f202 	lsl.w	r2, r1, r2
 80046b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2b10      	cmp	r3, #16
 80046c0:	d108      	bne.n	80046d4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80046d2:	e007      	b.n	80046e4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	60da      	str	r2, [r3, #12]
}
 80046e4:	bf00      	nop
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	461a      	mov	r2, r3
 80046fe:	4b16      	ldr	r3, [pc, #88]	@ (8004758 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004700:	429a      	cmp	r2, r3
 8004702:	d802      	bhi.n	800470a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004704:	4b15      	ldr	r3, [pc, #84]	@ (800475c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	e001      	b.n	800470e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800470a:	4b15      	ldr	r3, [pc, #84]	@ (8004760 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800470c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	b2db      	uxtb	r3, r3
 8004718:	3b08      	subs	r3, #8
 800471a:	4a12      	ldr	r2, [pc, #72]	@ (8004764 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800471c:	fba2 2303 	umull	r2, r3, r2, r3
 8004720:	091b      	lsrs	r3, r3, #4
 8004722:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004728:	089b      	lsrs	r3, r3, #2
 800472a:	009a      	lsls	r2, r3, #2
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4413      	add	r3, r2
 8004730:	461a      	mov	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a0b      	ldr	r2, [pc, #44]	@ (8004768 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800473a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f003 031f 	and.w	r3, r3, #31
 8004742:	2201      	movs	r2, #1
 8004744:	409a      	lsls	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800474a:	bf00      	nop
 800474c:	371c      	adds	r7, #28
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	40020407 	.word	0x40020407
 800475c:	40020800 	.word	0x40020800
 8004760:	40020820 	.word	0x40020820
 8004764:	cccccccd 	.word	0xcccccccd
 8004768:	40020880 	.word	0x40020880

0800476c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	461a      	mov	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a08      	ldr	r2, [pc, #32]	@ (80047b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800478e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	3b01      	subs	r3, #1
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	2201      	movs	r2, #1
 800479a:	409a      	lsls	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80047a0:	bf00      	nop
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	1000823f 	.word	0x1000823f
 80047b0:	40020940 	.word	0x40020940

080047b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047c2:	e15a      	b.n	8004a7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	2101      	movs	r1, #1
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	fa01 f303 	lsl.w	r3, r1, r3
 80047d0:	4013      	ands	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 814c 	beq.w	8004a74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f003 0303 	and.w	r3, r3, #3
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d005      	beq.n	80047f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d130      	bne.n	8004856 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	2203      	movs	r2, #3
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	43db      	mvns	r3, r3
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4013      	ands	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800482a:	2201      	movs	r2, #1
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	43db      	mvns	r3, r3
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4013      	ands	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	091b      	lsrs	r3, r3, #4
 8004840:	f003 0201 	and.w	r2, r3, #1
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	2b03      	cmp	r3, #3
 8004860:	d017      	beq.n	8004892 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	2203      	movs	r2, #3
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	43db      	mvns	r3, r3
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4013      	ands	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	689a      	ldr	r2, [r3, #8]
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4313      	orrs	r3, r2
 800488a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d123      	bne.n	80048e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	08da      	lsrs	r2, r3, #3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3208      	adds	r2, #8
 80048a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	220f      	movs	r2, #15
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	43db      	mvns	r3, r3
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	4013      	ands	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	691a      	ldr	r2, [r3, #16]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	08da      	lsrs	r2, r3, #3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3208      	adds	r2, #8
 80048e0:	6939      	ldr	r1, [r7, #16]
 80048e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	2203      	movs	r2, #3
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	43db      	mvns	r3, r3
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4013      	ands	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f003 0203 	and.w	r2, r3, #3
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	fa02 f303 	lsl.w	r3, r2, r3
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 80a6 	beq.w	8004a74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004928:	4b5b      	ldr	r3, [pc, #364]	@ (8004a98 <HAL_GPIO_Init+0x2e4>)
 800492a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800492c:	4a5a      	ldr	r2, [pc, #360]	@ (8004a98 <HAL_GPIO_Init+0x2e4>)
 800492e:	f043 0301 	orr.w	r3, r3, #1
 8004932:	6613      	str	r3, [r2, #96]	@ 0x60
 8004934:	4b58      	ldr	r3, [pc, #352]	@ (8004a98 <HAL_GPIO_Init+0x2e4>)
 8004936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	60bb      	str	r3, [r7, #8]
 800493e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004940:	4a56      	ldr	r2, [pc, #344]	@ (8004a9c <HAL_GPIO_Init+0x2e8>)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	089b      	lsrs	r3, r3, #2
 8004946:	3302      	adds	r3, #2
 8004948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800494c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f003 0303 	and.w	r3, r3, #3
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	220f      	movs	r2, #15
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	43db      	mvns	r3, r3
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	4013      	ands	r3, r2
 8004962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800496a:	d01f      	beq.n	80049ac <HAL_GPIO_Init+0x1f8>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a4c      	ldr	r2, [pc, #304]	@ (8004aa0 <HAL_GPIO_Init+0x2ec>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d019      	beq.n	80049a8 <HAL_GPIO_Init+0x1f4>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a4b      	ldr	r2, [pc, #300]	@ (8004aa4 <HAL_GPIO_Init+0x2f0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d013      	beq.n	80049a4 <HAL_GPIO_Init+0x1f0>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a4a      	ldr	r2, [pc, #296]	@ (8004aa8 <HAL_GPIO_Init+0x2f4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00d      	beq.n	80049a0 <HAL_GPIO_Init+0x1ec>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a49      	ldr	r2, [pc, #292]	@ (8004aac <HAL_GPIO_Init+0x2f8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d007      	beq.n	800499c <HAL_GPIO_Init+0x1e8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a48      	ldr	r2, [pc, #288]	@ (8004ab0 <HAL_GPIO_Init+0x2fc>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d101      	bne.n	8004998 <HAL_GPIO_Init+0x1e4>
 8004994:	2305      	movs	r3, #5
 8004996:	e00a      	b.n	80049ae <HAL_GPIO_Init+0x1fa>
 8004998:	2306      	movs	r3, #6
 800499a:	e008      	b.n	80049ae <HAL_GPIO_Init+0x1fa>
 800499c:	2304      	movs	r3, #4
 800499e:	e006      	b.n	80049ae <HAL_GPIO_Init+0x1fa>
 80049a0:	2303      	movs	r3, #3
 80049a2:	e004      	b.n	80049ae <HAL_GPIO_Init+0x1fa>
 80049a4:	2302      	movs	r3, #2
 80049a6:	e002      	b.n	80049ae <HAL_GPIO_Init+0x1fa>
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <HAL_GPIO_Init+0x1fa>
 80049ac:	2300      	movs	r3, #0
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	f002 0203 	and.w	r2, r2, #3
 80049b4:	0092      	lsls	r2, r2, #2
 80049b6:	4093      	lsls	r3, r2
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049be:	4937      	ldr	r1, [pc, #220]	@ (8004a9c <HAL_GPIO_Init+0x2e8>)
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	089b      	lsrs	r3, r3, #2
 80049c4:	3302      	adds	r3, #2
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049cc:	4b39      	ldr	r3, [pc, #228]	@ (8004ab4 <HAL_GPIO_Init+0x300>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	43db      	mvns	r3, r3
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	4013      	ands	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049f0:	4a30      	ldr	r2, [pc, #192]	@ (8004ab4 <HAL_GPIO_Init+0x300>)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80049f6:	4b2f      	ldr	r3, [pc, #188]	@ (8004ab4 <HAL_GPIO_Init+0x300>)
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	43db      	mvns	r3, r3
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	4013      	ands	r3, r2
 8004a04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a1a:	4a26      	ldr	r2, [pc, #152]	@ (8004ab4 <HAL_GPIO_Init+0x300>)
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004a20:	4b24      	ldr	r3, [pc, #144]	@ (8004ab4 <HAL_GPIO_Init+0x300>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a44:	4a1b      	ldr	r2, [pc, #108]	@ (8004ab4 <HAL_GPIO_Init+0x300>)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ab4 <HAL_GPIO_Init+0x300>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	43db      	mvns	r3, r3
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4013      	ands	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a6e:	4a11      	ldr	r2, [pc, #68]	@ (8004ab4 <HAL_GPIO_Init+0x300>)
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	3301      	adds	r3, #1
 8004a78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	fa22 f303 	lsr.w	r3, r2, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f47f ae9d 	bne.w	80047c4 <HAL_GPIO_Init+0x10>
  }
}
 8004a8a:	bf00      	nop
 8004a8c:	bf00      	nop
 8004a8e:	371c      	adds	r7, #28
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	48000400 	.word	0x48000400
 8004aa4:	48000800 	.word	0x48000800
 8004aa8:	48000c00 	.word	0x48000c00
 8004aac:	48001000 	.word	0x48001000
 8004ab0:	48001400 	.word	0x48001400
 8004ab4:	40010400 	.word	0x40010400

08004ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	807b      	strh	r3, [r7, #2]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ac8:	787b      	ldrb	r3, [r7, #1]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ace:	887a      	ldrh	r2, [r7, #2]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ad4:	e002      	b.n	8004adc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ad6:	887a      	ldrh	r2, [r7, #2]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	4603      	mov	r3, r0
 8004af0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004af2:	4b08      	ldr	r3, [pc, #32]	@ (8004b14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004af4:	695a      	ldr	r2, [r3, #20]
 8004af6:	88fb      	ldrh	r3, [r7, #6]
 8004af8:	4013      	ands	r3, r2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d006      	beq.n	8004b0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004afe:	4a05      	ldr	r2, [pc, #20]	@ (8004b14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b00:	88fb      	ldrh	r3, [r7, #6]
 8004b02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b04:	88fb      	ldrh	r3, [r7, #6]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 f806 	bl	8004b18 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b0c:	bf00      	nop
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40010400 	.word	0x40010400

08004b18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
	...

08004b30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d141      	bne.n	8004bc2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b3e:	4b4b      	ldr	r3, [pc, #300]	@ (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b4a:	d131      	bne.n	8004bb0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b4c:	4b47      	ldr	r3, [pc, #284]	@ (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b52:	4a46      	ldr	r2, [pc, #280]	@ (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b5c:	4b43      	ldr	r3, [pc, #268]	@ (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b64:	4a41      	ldr	r2, [pc, #260]	@ (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b6c:	4b40      	ldr	r3, [pc, #256]	@ (8004c70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2232      	movs	r2, #50	@ 0x32
 8004b72:	fb02 f303 	mul.w	r3, r2, r3
 8004b76:	4a3f      	ldr	r2, [pc, #252]	@ (8004c74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b78:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7c:	0c9b      	lsrs	r3, r3, #18
 8004b7e:	3301      	adds	r3, #1
 8004b80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b82:	e002      	b.n	8004b8a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	3b01      	subs	r3, #1
 8004b88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b8a:	4b38      	ldr	r3, [pc, #224]	@ (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b96:	d102      	bne.n	8004b9e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1f2      	bne.n	8004b84 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b9e:	4b33      	ldr	r3, [pc, #204]	@ (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ba6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004baa:	d158      	bne.n	8004c5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e057      	b.n	8004c60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bb0:	4b2e      	ldr	r3, [pc, #184]	@ (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bb6:	4a2d      	ldr	r2, [pc, #180]	@ (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004bc0:	e04d      	b.n	8004c5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bc8:	d141      	bne.n	8004c4e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bca:	4b28      	ldr	r3, [pc, #160]	@ (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004bd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bd6:	d131      	bne.n	8004c3c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bd8:	4b24      	ldr	r3, [pc, #144]	@ (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bde:	4a23      	ldr	r2, [pc, #140]	@ (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004be4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004be8:	4b20      	ldr	r3, [pc, #128]	@ (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004bf0:	4a1e      	ldr	r2, [pc, #120]	@ (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bf6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8004c70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2232      	movs	r2, #50	@ 0x32
 8004bfe:	fb02 f303 	mul.w	r3, r2, r3
 8004c02:	4a1c      	ldr	r2, [pc, #112]	@ (8004c74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c04:	fba2 2303 	umull	r2, r3, r2, r3
 8004c08:	0c9b      	lsrs	r3, r3, #18
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c0e:	e002      	b.n	8004c16 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c16:	4b15      	ldr	r3, [pc, #84]	@ (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c22:	d102      	bne.n	8004c2a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1f2      	bne.n	8004c10 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c2a:	4b10      	ldr	r3, [pc, #64]	@ (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c36:	d112      	bne.n	8004c5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e011      	b.n	8004c60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c42:	4a0a      	ldr	r2, [pc, #40]	@ (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004c4c:	e007      	b.n	8004c5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c4e:	4b07      	ldr	r3, [pc, #28]	@ (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c56:	4a05      	ldr	r2, [pc, #20]	@ (8004c6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c5c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	40007000 	.word	0x40007000
 8004c70:	20000000 	.word	0x20000000
 8004c74:	431bde83 	.word	0x431bde83

08004c78 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004c7c:	4b05      	ldr	r3, [pc, #20]	@ (8004c94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	4a04      	ldr	r2, [pc, #16]	@ (8004c94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c86:	6093      	str	r3, [r2, #8]
}
 8004c88:	bf00      	nop
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40007000 	.word	0x40007000

08004c98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e2fe      	b.n	80052a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d075      	beq.n	8004da2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb6:	4b97      	ldr	r3, [pc, #604]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
 8004cbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cc0:	4b94      	ldr	r3, [pc, #592]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0303 	and.w	r3, r3, #3
 8004cc8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	2b0c      	cmp	r3, #12
 8004cce:	d102      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x3e>
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d002      	beq.n	8004cdc <HAL_RCC_OscConfig+0x44>
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d10b      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cdc:	4b8d      	ldr	r3, [pc, #564]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d05b      	beq.n	8004da0 <HAL_RCC_OscConfig+0x108>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d157      	bne.n	8004da0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e2d9      	b.n	80052a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cfc:	d106      	bne.n	8004d0c <HAL_RCC_OscConfig+0x74>
 8004cfe:	4b85      	ldr	r3, [pc, #532]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a84      	ldr	r2, [pc, #528]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	e01d      	b.n	8004d48 <HAL_RCC_OscConfig+0xb0>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d14:	d10c      	bne.n	8004d30 <HAL_RCC_OscConfig+0x98>
 8004d16:	4b7f      	ldr	r3, [pc, #508]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a7e      	ldr	r2, [pc, #504]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004d1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	4b7c      	ldr	r3, [pc, #496]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a7b      	ldr	r2, [pc, #492]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	e00b      	b.n	8004d48 <HAL_RCC_OscConfig+0xb0>
 8004d30:	4b78      	ldr	r3, [pc, #480]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a77      	ldr	r2, [pc, #476]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004d36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	4b75      	ldr	r3, [pc, #468]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a74      	ldr	r2, [pc, #464]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004d42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d013      	beq.n	8004d78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d50:	f7fd f9e6 	bl	8002120 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d58:	f7fd f9e2 	bl	8002120 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b64      	cmp	r3, #100	@ 0x64
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e29e      	b.n	80052a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d6a:	4b6a      	ldr	r3, [pc, #424]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0f0      	beq.n	8004d58 <HAL_RCC_OscConfig+0xc0>
 8004d76:	e014      	b.n	8004da2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d78:	f7fd f9d2 	bl	8002120 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d80:	f7fd f9ce 	bl	8002120 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b64      	cmp	r3, #100	@ 0x64
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e28a      	b.n	80052a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d92:	4b60      	ldr	r3, [pc, #384]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f0      	bne.n	8004d80 <HAL_RCC_OscConfig+0xe8>
 8004d9e:	e000      	b.n	8004da2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d075      	beq.n	8004e9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dae:	4b59      	ldr	r3, [pc, #356]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 030c 	and.w	r3, r3, #12
 8004db6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004db8:	4b56      	ldr	r3, [pc, #344]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f003 0303 	and.w	r3, r3, #3
 8004dc0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	2b0c      	cmp	r3, #12
 8004dc6:	d102      	bne.n	8004dce <HAL_RCC_OscConfig+0x136>
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d002      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x13c>
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	2b04      	cmp	r3, #4
 8004dd2:	d11f      	bne.n	8004e14 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dd4:	4b4f      	ldr	r3, [pc, #316]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <HAL_RCC_OscConfig+0x154>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e25d      	b.n	80052a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dec:	4b49      	ldr	r3, [pc, #292]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	061b      	lsls	r3, r3, #24
 8004dfa:	4946      	ldr	r1, [pc, #280]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e00:	4b45      	ldr	r3, [pc, #276]	@ (8004f18 <HAL_RCC_OscConfig+0x280>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fb fff7 	bl	8000df8 <HAL_InitTick>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d043      	beq.n	8004e98 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e249      	b.n	80052a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d023      	beq.n	8004e64 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e1c:	4b3d      	ldr	r3, [pc, #244]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a3c      	ldr	r2, [pc, #240]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004e22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e28:	f7fd f97a 	bl	8002120 <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e30:	f7fd f976 	bl	8002120 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e232      	b.n	80052a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e42:	4b34      	ldr	r3, [pc, #208]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0f0      	beq.n	8004e30 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e4e:	4b31      	ldr	r3, [pc, #196]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	061b      	lsls	r3, r3, #24
 8004e5c:	492d      	ldr	r1, [pc, #180]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	604b      	str	r3, [r1, #4]
 8004e62:	e01a      	b.n	8004e9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e64:	4b2b      	ldr	r3, [pc, #172]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a2a      	ldr	r2, [pc, #168]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004e6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e70:	f7fd f956 	bl	8002120 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e78:	f7fd f952 	bl	8002120 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e20e      	b.n	80052a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e8a:	4b22      	ldr	r3, [pc, #136]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1f0      	bne.n	8004e78 <HAL_RCC_OscConfig+0x1e0>
 8004e96:	e000      	b.n	8004e9a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d041      	beq.n	8004f2a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d01c      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eae:	4b19      	ldr	r3, [pc, #100]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004eb4:	4a17      	ldr	r2, [pc, #92]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004eb6:	f043 0301 	orr.w	r3, r3, #1
 8004eba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ebe:	f7fd f92f 	bl	8002120 <HAL_GetTick>
 8004ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ec6:	f7fd f92b 	bl	8002120 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e1e7      	b.n	80052a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0ef      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x22e>
 8004ee6:	e020      	b.n	8004f2a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004eee:	4a09      	ldr	r2, [pc, #36]	@ (8004f14 <HAL_RCC_OscConfig+0x27c>)
 8004ef0:	f023 0301 	bic.w	r3, r3, #1
 8004ef4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef8:	f7fd f912 	bl	8002120 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004efe:	e00d      	b.n	8004f1c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f00:	f7fd f90e 	bl	8002120 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d906      	bls.n	8004f1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e1ca      	b.n	80052a8 <HAL_RCC_OscConfig+0x610>
 8004f12:	bf00      	nop
 8004f14:	40021000 	.word	0x40021000
 8004f18:	20000144 	.word	0x20000144
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f1c:	4b8c      	ldr	r3, [pc, #560]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 8004f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1ea      	bne.n	8004f00 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 80a6 	beq.w	8005084 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f3c:	4b84      	ldr	r3, [pc, #528]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 8004f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_RCC_OscConfig+0x2b4>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e000      	b.n	8004f4e <HAL_RCC_OscConfig+0x2b6>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00d      	beq.n	8004f6e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f52:	4b7f      	ldr	r3, [pc, #508]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 8004f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f56:	4a7e      	ldr	r2, [pc, #504]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 8004f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f5e:	4b7c      	ldr	r3, [pc, #496]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 8004f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f6e:	4b79      	ldr	r3, [pc, #484]	@ (8005154 <HAL_RCC_OscConfig+0x4bc>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d118      	bne.n	8004fac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f7a:	4b76      	ldr	r3, [pc, #472]	@ (8005154 <HAL_RCC_OscConfig+0x4bc>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a75      	ldr	r2, [pc, #468]	@ (8005154 <HAL_RCC_OscConfig+0x4bc>)
 8004f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f86:	f7fd f8cb 	bl	8002120 <HAL_GetTick>
 8004f8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f8c:	e008      	b.n	8004fa0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f8e:	f7fd f8c7 	bl	8002120 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e183      	b.n	80052a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fa0:	4b6c      	ldr	r3, [pc, #432]	@ (8005154 <HAL_RCC_OscConfig+0x4bc>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0f0      	beq.n	8004f8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d108      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x32e>
 8004fb4:	4b66      	ldr	r3, [pc, #408]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 8004fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fba:	4a65      	ldr	r2, [pc, #404]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 8004fbc:	f043 0301 	orr.w	r3, r3, #1
 8004fc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fc4:	e024      	b.n	8005010 <HAL_RCC_OscConfig+0x378>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	2b05      	cmp	r3, #5
 8004fcc:	d110      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x358>
 8004fce:	4b60      	ldr	r3, [pc, #384]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fd4:	4a5e      	ldr	r2, [pc, #376]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 8004fd6:	f043 0304 	orr.w	r3, r3, #4
 8004fda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fde:	4b5c      	ldr	r3, [pc, #368]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 8004fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe4:	4a5a      	ldr	r2, [pc, #360]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 8004fe6:	f043 0301 	orr.w	r3, r3, #1
 8004fea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fee:	e00f      	b.n	8005010 <HAL_RCC_OscConfig+0x378>
 8004ff0:	4b57      	ldr	r3, [pc, #348]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 8004ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff6:	4a56      	ldr	r2, [pc, #344]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 8004ff8:	f023 0301 	bic.w	r3, r3, #1
 8004ffc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005000:	4b53      	ldr	r3, [pc, #332]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 8005002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005006:	4a52      	ldr	r2, [pc, #328]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 8005008:	f023 0304 	bic.w	r3, r3, #4
 800500c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d016      	beq.n	8005046 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005018:	f7fd f882 	bl	8002120 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800501e:	e00a      	b.n	8005036 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005020:	f7fd f87e 	bl	8002120 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800502e:	4293      	cmp	r3, r2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e138      	b.n	80052a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005036:	4b46      	ldr	r3, [pc, #280]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 8005038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0ed      	beq.n	8005020 <HAL_RCC_OscConfig+0x388>
 8005044:	e015      	b.n	8005072 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005046:	f7fd f86b 	bl	8002120 <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800504c:	e00a      	b.n	8005064 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800504e:	f7fd f867 	bl	8002120 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	f241 3288 	movw	r2, #5000	@ 0x1388
 800505c:	4293      	cmp	r3, r2
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e121      	b.n	80052a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005064:	4b3a      	ldr	r3, [pc, #232]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 8005066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1ed      	bne.n	800504e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005072:	7ffb      	ldrb	r3, [r7, #31]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d105      	bne.n	8005084 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005078:	4b35      	ldr	r3, [pc, #212]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 800507a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800507c:	4a34      	ldr	r2, [pc, #208]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 800507e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005082:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0320 	and.w	r3, r3, #32
 800508c:	2b00      	cmp	r3, #0
 800508e:	d03c      	beq.n	800510a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01c      	beq.n	80050d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005098:	4b2d      	ldr	r3, [pc, #180]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 800509a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800509e:	4a2c      	ldr	r2, [pc, #176]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 80050a0:	f043 0301 	orr.w	r3, r3, #1
 80050a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a8:	f7fd f83a 	bl	8002120 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050b0:	f7fd f836 	bl	8002120 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e0f2      	b.n	80052a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050c2:	4b23      	ldr	r3, [pc, #140]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 80050c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0ef      	beq.n	80050b0 <HAL_RCC_OscConfig+0x418>
 80050d0:	e01b      	b.n	800510a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050d2:	4b1f      	ldr	r3, [pc, #124]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 80050d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 80050da:	f023 0301 	bic.w	r3, r3, #1
 80050de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e2:	f7fd f81d 	bl	8002120 <HAL_GetTick>
 80050e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050e8:	e008      	b.n	80050fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050ea:	f7fd f819 	bl	8002120 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d901      	bls.n	80050fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e0d5      	b.n	80052a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050fc:	4b14      	ldr	r3, [pc, #80]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 80050fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1ef      	bne.n	80050ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 80c9 	beq.w	80052a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005114:	4b0e      	ldr	r3, [pc, #56]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f003 030c 	and.w	r3, r3, #12
 800511c:	2b0c      	cmp	r3, #12
 800511e:	f000 8083 	beq.w	8005228 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d15e      	bne.n	80051e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800512a:	4b09      	ldr	r3, [pc, #36]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a08      	ldr	r2, [pc, #32]	@ (8005150 <HAL_RCC_OscConfig+0x4b8>)
 8005130:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005136:	f7fc fff3 	bl	8002120 <HAL_GetTick>
 800513a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800513c:	e00c      	b.n	8005158 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800513e:	f7fc ffef 	bl	8002120 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d905      	bls.n	8005158 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e0ab      	b.n	80052a8 <HAL_RCC_OscConfig+0x610>
 8005150:	40021000 	.word	0x40021000
 8005154:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005158:	4b55      	ldr	r3, [pc, #340]	@ (80052b0 <HAL_RCC_OscConfig+0x618>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1ec      	bne.n	800513e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005164:	4b52      	ldr	r3, [pc, #328]	@ (80052b0 <HAL_RCC_OscConfig+0x618>)
 8005166:	68da      	ldr	r2, [r3, #12]
 8005168:	4b52      	ldr	r3, [pc, #328]	@ (80052b4 <HAL_RCC_OscConfig+0x61c>)
 800516a:	4013      	ands	r3, r2
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6a11      	ldr	r1, [r2, #32]
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005174:	3a01      	subs	r2, #1
 8005176:	0112      	lsls	r2, r2, #4
 8005178:	4311      	orrs	r1, r2
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800517e:	0212      	lsls	r2, r2, #8
 8005180:	4311      	orrs	r1, r2
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005186:	0852      	lsrs	r2, r2, #1
 8005188:	3a01      	subs	r2, #1
 800518a:	0552      	lsls	r2, r2, #21
 800518c:	4311      	orrs	r1, r2
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005192:	0852      	lsrs	r2, r2, #1
 8005194:	3a01      	subs	r2, #1
 8005196:	0652      	lsls	r2, r2, #25
 8005198:	4311      	orrs	r1, r2
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800519e:	06d2      	lsls	r2, r2, #27
 80051a0:	430a      	orrs	r2, r1
 80051a2:	4943      	ldr	r1, [pc, #268]	@ (80052b0 <HAL_RCC_OscConfig+0x618>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051a8:	4b41      	ldr	r3, [pc, #260]	@ (80052b0 <HAL_RCC_OscConfig+0x618>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a40      	ldr	r2, [pc, #256]	@ (80052b0 <HAL_RCC_OscConfig+0x618>)
 80051ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051b4:	4b3e      	ldr	r3, [pc, #248]	@ (80052b0 <HAL_RCC_OscConfig+0x618>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	4a3d      	ldr	r2, [pc, #244]	@ (80052b0 <HAL_RCC_OscConfig+0x618>)
 80051ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c0:	f7fc ffae 	bl	8002120 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c8:	f7fc ffaa 	bl	8002120 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e066      	b.n	80052a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051da:	4b35      	ldr	r3, [pc, #212]	@ (80052b0 <HAL_RCC_OscConfig+0x618>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0f0      	beq.n	80051c8 <HAL_RCC_OscConfig+0x530>
 80051e6:	e05e      	b.n	80052a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e8:	4b31      	ldr	r3, [pc, #196]	@ (80052b0 <HAL_RCC_OscConfig+0x618>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a30      	ldr	r2, [pc, #192]	@ (80052b0 <HAL_RCC_OscConfig+0x618>)
 80051ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f4:	f7fc ff94 	bl	8002120 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051fc:	f7fc ff90 	bl	8002120 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e04c      	b.n	80052a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800520e:	4b28      	ldr	r3, [pc, #160]	@ (80052b0 <HAL_RCC_OscConfig+0x618>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1f0      	bne.n	80051fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800521a:	4b25      	ldr	r3, [pc, #148]	@ (80052b0 <HAL_RCC_OscConfig+0x618>)
 800521c:	68da      	ldr	r2, [r3, #12]
 800521e:	4924      	ldr	r1, [pc, #144]	@ (80052b0 <HAL_RCC_OscConfig+0x618>)
 8005220:	4b25      	ldr	r3, [pc, #148]	@ (80052b8 <HAL_RCC_OscConfig+0x620>)
 8005222:	4013      	ands	r3, r2
 8005224:	60cb      	str	r3, [r1, #12]
 8005226:	e03e      	b.n	80052a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d101      	bne.n	8005234 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e039      	b.n	80052a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005234:	4b1e      	ldr	r3, [pc, #120]	@ (80052b0 <HAL_RCC_OscConfig+0x618>)
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f003 0203 	and.w	r2, r3, #3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	429a      	cmp	r2, r3
 8005246:	d12c      	bne.n	80052a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005252:	3b01      	subs	r3, #1
 8005254:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005256:	429a      	cmp	r2, r3
 8005258:	d123      	bne.n	80052a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005264:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005266:	429a      	cmp	r2, r3
 8005268:	d11b      	bne.n	80052a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005274:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005276:	429a      	cmp	r2, r3
 8005278:	d113      	bne.n	80052a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005284:	085b      	lsrs	r3, r3, #1
 8005286:	3b01      	subs	r3, #1
 8005288:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800528a:	429a      	cmp	r2, r3
 800528c:	d109      	bne.n	80052a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005298:	085b      	lsrs	r3, r3, #1
 800529a:	3b01      	subs	r3, #1
 800529c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800529e:	429a      	cmp	r2, r3
 80052a0:	d001      	beq.n	80052a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3720      	adds	r7, #32
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	40021000 	.word	0x40021000
 80052b4:	019f800c 	.word	0x019f800c
 80052b8:	feeefffc 	.word	0xfeeefffc

080052bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80052c6:	2300      	movs	r3, #0
 80052c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e11e      	b.n	8005512 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052d4:	4b91      	ldr	r3, [pc, #580]	@ (800551c <HAL_RCC_ClockConfig+0x260>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 030f 	and.w	r3, r3, #15
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d910      	bls.n	8005304 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052e2:	4b8e      	ldr	r3, [pc, #568]	@ (800551c <HAL_RCC_ClockConfig+0x260>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f023 020f 	bic.w	r2, r3, #15
 80052ea:	498c      	ldr	r1, [pc, #560]	@ (800551c <HAL_RCC_ClockConfig+0x260>)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052f2:	4b8a      	ldr	r3, [pc, #552]	@ (800551c <HAL_RCC_ClockConfig+0x260>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d001      	beq.n	8005304 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e106      	b.n	8005512 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	d073      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b03      	cmp	r3, #3
 8005316:	d129      	bne.n	800536c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005318:	4b81      	ldr	r3, [pc, #516]	@ (8005520 <HAL_RCC_ClockConfig+0x264>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e0f4      	b.n	8005512 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005328:	f000 f9d0 	bl	80056cc <RCC_GetSysClockFreqFromPLLSource>
 800532c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	4a7c      	ldr	r2, [pc, #496]	@ (8005524 <HAL_RCC_ClockConfig+0x268>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d93f      	bls.n	80053b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005336:	4b7a      	ldr	r3, [pc, #488]	@ (8005520 <HAL_RCC_ClockConfig+0x264>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d009      	beq.n	8005356 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800534a:	2b00      	cmp	r3, #0
 800534c:	d033      	beq.n	80053b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005352:	2b00      	cmp	r3, #0
 8005354:	d12f      	bne.n	80053b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005356:	4b72      	ldr	r3, [pc, #456]	@ (8005520 <HAL_RCC_ClockConfig+0x264>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800535e:	4a70      	ldr	r2, [pc, #448]	@ (8005520 <HAL_RCC_ClockConfig+0x264>)
 8005360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005364:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005366:	2380      	movs	r3, #128	@ 0x80
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	e024      	b.n	80053b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2b02      	cmp	r3, #2
 8005372:	d107      	bne.n	8005384 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005374:	4b6a      	ldr	r3, [pc, #424]	@ (8005520 <HAL_RCC_ClockConfig+0x264>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d109      	bne.n	8005394 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e0c6      	b.n	8005512 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005384:	4b66      	ldr	r3, [pc, #408]	@ (8005520 <HAL_RCC_ClockConfig+0x264>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e0be      	b.n	8005512 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005394:	f000 f8ce 	bl	8005534 <HAL_RCC_GetSysClockFreq>
 8005398:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	4a61      	ldr	r2, [pc, #388]	@ (8005524 <HAL_RCC_ClockConfig+0x268>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d909      	bls.n	80053b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053a2:	4b5f      	ldr	r3, [pc, #380]	@ (8005520 <HAL_RCC_ClockConfig+0x264>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053aa:	4a5d      	ldr	r2, [pc, #372]	@ (8005520 <HAL_RCC_ClockConfig+0x264>)
 80053ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80053b2:	2380      	movs	r3, #128	@ 0x80
 80053b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053b6:	4b5a      	ldr	r3, [pc, #360]	@ (8005520 <HAL_RCC_ClockConfig+0x264>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f023 0203 	bic.w	r2, r3, #3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	4957      	ldr	r1, [pc, #348]	@ (8005520 <HAL_RCC_ClockConfig+0x264>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053c8:	f7fc feaa 	bl	8002120 <HAL_GetTick>
 80053cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ce:	e00a      	b.n	80053e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053d0:	f7fc fea6 	bl	8002120 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053de:	4293      	cmp	r3, r2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e095      	b.n	8005512 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e6:	4b4e      	ldr	r3, [pc, #312]	@ (8005520 <HAL_RCC_ClockConfig+0x264>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 020c 	and.w	r2, r3, #12
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d1eb      	bne.n	80053d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d023      	beq.n	800544c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b00      	cmp	r3, #0
 800540e:	d005      	beq.n	800541c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005410:	4b43      	ldr	r3, [pc, #268]	@ (8005520 <HAL_RCC_ClockConfig+0x264>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	4a42      	ldr	r2, [pc, #264]	@ (8005520 <HAL_RCC_ClockConfig+0x264>)
 8005416:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800541a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0308 	and.w	r3, r3, #8
 8005424:	2b00      	cmp	r3, #0
 8005426:	d007      	beq.n	8005438 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005428:	4b3d      	ldr	r3, [pc, #244]	@ (8005520 <HAL_RCC_ClockConfig+0x264>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005430:	4a3b      	ldr	r2, [pc, #236]	@ (8005520 <HAL_RCC_ClockConfig+0x264>)
 8005432:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005436:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005438:	4b39      	ldr	r3, [pc, #228]	@ (8005520 <HAL_RCC_ClockConfig+0x264>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	4936      	ldr	r1, [pc, #216]	@ (8005520 <HAL_RCC_ClockConfig+0x264>)
 8005446:	4313      	orrs	r3, r2
 8005448:	608b      	str	r3, [r1, #8]
 800544a:	e008      	b.n	800545e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	2b80      	cmp	r3, #128	@ 0x80
 8005450:	d105      	bne.n	800545e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005452:	4b33      	ldr	r3, [pc, #204]	@ (8005520 <HAL_RCC_ClockConfig+0x264>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	4a32      	ldr	r2, [pc, #200]	@ (8005520 <HAL_RCC_ClockConfig+0x264>)
 8005458:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800545c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800545e:	4b2f      	ldr	r3, [pc, #188]	@ (800551c <HAL_RCC_ClockConfig+0x260>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	429a      	cmp	r2, r3
 800546a:	d21d      	bcs.n	80054a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800546c:	4b2b      	ldr	r3, [pc, #172]	@ (800551c <HAL_RCC_ClockConfig+0x260>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f023 020f 	bic.w	r2, r3, #15
 8005474:	4929      	ldr	r1, [pc, #164]	@ (800551c <HAL_RCC_ClockConfig+0x260>)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	4313      	orrs	r3, r2
 800547a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800547c:	f7fc fe50 	bl	8002120 <HAL_GetTick>
 8005480:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005482:	e00a      	b.n	800549a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005484:	f7fc fe4c 	bl	8002120 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005492:	4293      	cmp	r3, r2
 8005494:	d901      	bls.n	800549a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e03b      	b.n	8005512 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800549a:	4b20      	ldr	r3, [pc, #128]	@ (800551c <HAL_RCC_ClockConfig+0x260>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 030f 	and.w	r3, r3, #15
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d1ed      	bne.n	8005484 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0304 	and.w	r3, r3, #4
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d008      	beq.n	80054c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005520 <HAL_RCC_ClockConfig+0x264>)
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	4917      	ldr	r1, [pc, #92]	@ (8005520 <HAL_RCC_ClockConfig+0x264>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0308 	and.w	r3, r3, #8
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d009      	beq.n	80054e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054d2:	4b13      	ldr	r3, [pc, #76]	@ (8005520 <HAL_RCC_ClockConfig+0x264>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	00db      	lsls	r3, r3, #3
 80054e0:	490f      	ldr	r1, [pc, #60]	@ (8005520 <HAL_RCC_ClockConfig+0x264>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054e6:	f000 f825 	bl	8005534 <HAL_RCC_GetSysClockFreq>
 80054ea:	4602      	mov	r2, r0
 80054ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005520 <HAL_RCC_ClockConfig+0x264>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	091b      	lsrs	r3, r3, #4
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	490c      	ldr	r1, [pc, #48]	@ (8005528 <HAL_RCC_ClockConfig+0x26c>)
 80054f8:	5ccb      	ldrb	r3, [r1, r3]
 80054fa:	f003 031f 	and.w	r3, r3, #31
 80054fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005502:	4a0a      	ldr	r2, [pc, #40]	@ (800552c <HAL_RCC_ClockConfig+0x270>)
 8005504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005506:	4b0a      	ldr	r3, [pc, #40]	@ (8005530 <HAL_RCC_ClockConfig+0x274>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f7fb fc74 	bl	8000df8 <HAL_InitTick>
 8005510:	4603      	mov	r3, r0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	40022000 	.word	0x40022000
 8005520:	40021000 	.word	0x40021000
 8005524:	04c4b400 	.word	0x04c4b400
 8005528:	0800b2a0 	.word	0x0800b2a0
 800552c:	20000000 	.word	0x20000000
 8005530:	20000144 	.word	0x20000144

08005534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800553a:	4b2c      	ldr	r3, [pc, #176]	@ (80055ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 030c 	and.w	r3, r3, #12
 8005542:	2b04      	cmp	r3, #4
 8005544:	d102      	bne.n	800554c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005546:	4b2a      	ldr	r3, [pc, #168]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005548:	613b      	str	r3, [r7, #16]
 800554a:	e047      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800554c:	4b27      	ldr	r3, [pc, #156]	@ (80055ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f003 030c 	and.w	r3, r3, #12
 8005554:	2b08      	cmp	r3, #8
 8005556:	d102      	bne.n	800555e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005558:	4b26      	ldr	r3, [pc, #152]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800555a:	613b      	str	r3, [r7, #16]
 800555c:	e03e      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800555e:	4b23      	ldr	r3, [pc, #140]	@ (80055ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 030c 	and.w	r3, r3, #12
 8005566:	2b0c      	cmp	r3, #12
 8005568:	d136      	bne.n	80055d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800556a:	4b20      	ldr	r3, [pc, #128]	@ (80055ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f003 0303 	and.w	r3, r3, #3
 8005572:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005574:	4b1d      	ldr	r3, [pc, #116]	@ (80055ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	091b      	lsrs	r3, r3, #4
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	3301      	adds	r3, #1
 8005580:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2b03      	cmp	r3, #3
 8005586:	d10c      	bne.n	80055a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005588:	4a1a      	ldr	r2, [pc, #104]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005590:	4a16      	ldr	r2, [pc, #88]	@ (80055ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005592:	68d2      	ldr	r2, [r2, #12]
 8005594:	0a12      	lsrs	r2, r2, #8
 8005596:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800559a:	fb02 f303 	mul.w	r3, r2, r3
 800559e:	617b      	str	r3, [r7, #20]
      break;
 80055a0:	e00c      	b.n	80055bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055a2:	4a13      	ldr	r2, [pc, #76]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055aa:	4a10      	ldr	r2, [pc, #64]	@ (80055ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80055ac:	68d2      	ldr	r2, [r2, #12]
 80055ae:	0a12      	lsrs	r2, r2, #8
 80055b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80055b4:	fb02 f303 	mul.w	r3, r2, r3
 80055b8:	617b      	str	r3, [r7, #20]
      break;
 80055ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055bc:	4b0b      	ldr	r3, [pc, #44]	@ (80055ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	0e5b      	lsrs	r3, r3, #25
 80055c2:	f003 0303 	and.w	r3, r3, #3
 80055c6:	3301      	adds	r3, #1
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d4:	613b      	str	r3, [r7, #16]
 80055d6:	e001      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80055dc:	693b      	ldr	r3, [r7, #16]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	371c      	adds	r7, #28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	40021000 	.word	0x40021000
 80055f0:	00f42400 	.word	0x00f42400
 80055f4:	016e3600 	.word	0x016e3600

080055f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055f8:	b480      	push	{r7}
 80055fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055fc:	4b03      	ldr	r3, [pc, #12]	@ (800560c <HAL_RCC_GetHCLKFreq+0x14>)
 80055fe:	681b      	ldr	r3, [r3, #0]
}
 8005600:	4618      	mov	r0, r3
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	20000000 	.word	0x20000000

08005610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005614:	f7ff fff0 	bl	80055f8 <HAL_RCC_GetHCLKFreq>
 8005618:	4602      	mov	r2, r0
 800561a:	4b06      	ldr	r3, [pc, #24]	@ (8005634 <HAL_RCC_GetPCLK1Freq+0x24>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	0a1b      	lsrs	r3, r3, #8
 8005620:	f003 0307 	and.w	r3, r3, #7
 8005624:	4904      	ldr	r1, [pc, #16]	@ (8005638 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005626:	5ccb      	ldrb	r3, [r1, r3]
 8005628:	f003 031f 	and.w	r3, r3, #31
 800562c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005630:	4618      	mov	r0, r3
 8005632:	bd80      	pop	{r7, pc}
 8005634:	40021000 	.word	0x40021000
 8005638:	0800b2b0 	.word	0x0800b2b0

0800563c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005640:	f7ff ffda 	bl	80055f8 <HAL_RCC_GetHCLKFreq>
 8005644:	4602      	mov	r2, r0
 8005646:	4b06      	ldr	r3, [pc, #24]	@ (8005660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	0adb      	lsrs	r3, r3, #11
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	4904      	ldr	r1, [pc, #16]	@ (8005664 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005652:	5ccb      	ldrb	r3, [r1, r3]
 8005654:	f003 031f 	and.w	r3, r3, #31
 8005658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800565c:	4618      	mov	r0, r3
 800565e:	bd80      	pop	{r7, pc}
 8005660:	40021000 	.word	0x40021000
 8005664:	0800b2b0 	.word	0x0800b2b0

08005668 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	220f      	movs	r2, #15
 8005676:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005678:	4b12      	ldr	r3, [pc, #72]	@ (80056c4 <HAL_RCC_GetClockConfig+0x5c>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f003 0203 	and.w	r2, r3, #3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005684:	4b0f      	ldr	r3, [pc, #60]	@ (80056c4 <HAL_RCC_GetClockConfig+0x5c>)
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005690:	4b0c      	ldr	r3, [pc, #48]	@ (80056c4 <HAL_RCC_GetClockConfig+0x5c>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800569c:	4b09      	ldr	r3, [pc, #36]	@ (80056c4 <HAL_RCC_GetClockConfig+0x5c>)
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	08db      	lsrs	r3, r3, #3
 80056a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80056aa:	4b07      	ldr	r3, [pc, #28]	@ (80056c8 <HAL_RCC_GetClockConfig+0x60>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 020f 	and.w	r2, r3, #15
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	601a      	str	r2, [r3, #0]
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40021000 	.word	0x40021000
 80056c8:	40022000 	.word	0x40022000

080056cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b087      	sub	sp, #28
 80056d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056d2:	4b1e      	ldr	r3, [pc, #120]	@ (800574c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f003 0303 	and.w	r3, r3, #3
 80056da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056dc:	4b1b      	ldr	r3, [pc, #108]	@ (800574c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	091b      	lsrs	r3, r3, #4
 80056e2:	f003 030f 	and.w	r3, r3, #15
 80056e6:	3301      	adds	r3, #1
 80056e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d10c      	bne.n	800570a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056f0:	4a17      	ldr	r2, [pc, #92]	@ (8005750 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f8:	4a14      	ldr	r2, [pc, #80]	@ (800574c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056fa:	68d2      	ldr	r2, [r2, #12]
 80056fc:	0a12      	lsrs	r2, r2, #8
 80056fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005702:	fb02 f303 	mul.w	r3, r2, r3
 8005706:	617b      	str	r3, [r7, #20]
    break;
 8005708:	e00c      	b.n	8005724 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800570a:	4a12      	ldr	r2, [pc, #72]	@ (8005754 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005712:	4a0e      	ldr	r2, [pc, #56]	@ (800574c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005714:	68d2      	ldr	r2, [r2, #12]
 8005716:	0a12      	lsrs	r2, r2, #8
 8005718:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800571c:	fb02 f303 	mul.w	r3, r2, r3
 8005720:	617b      	str	r3, [r7, #20]
    break;
 8005722:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005724:	4b09      	ldr	r3, [pc, #36]	@ (800574c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	0e5b      	lsrs	r3, r3, #25
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	3301      	adds	r3, #1
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	fbb2 f3f3 	udiv	r3, r2, r3
 800573c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800573e:	687b      	ldr	r3, [r7, #4]
}
 8005740:	4618      	mov	r0, r3
 8005742:	371c      	adds	r7, #28
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	40021000 	.word	0x40021000
 8005750:	016e3600 	.word	0x016e3600
 8005754:	00f42400 	.word	0x00f42400

08005758 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005760:	2300      	movs	r3, #0
 8005762:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005764:	2300      	movs	r3, #0
 8005766:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 8098 	beq.w	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005776:	2300      	movs	r3, #0
 8005778:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800577a:	4b43      	ldr	r3, [pc, #268]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800577c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800577e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10d      	bne.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005786:	4b40      	ldr	r3, [pc, #256]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800578a:	4a3f      	ldr	r2, [pc, #252]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800578c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005790:	6593      	str	r3, [r2, #88]	@ 0x58
 8005792:	4b3d      	ldr	r3, [pc, #244]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800579a:	60bb      	str	r3, [r7, #8]
 800579c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800579e:	2301      	movs	r3, #1
 80057a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057a2:	4b3a      	ldr	r3, [pc, #232]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a39      	ldr	r2, [pc, #228]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057ae:	f7fc fcb7 	bl	8002120 <HAL_GetTick>
 80057b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057b4:	e009      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057b6:	f7fc fcb3 	bl	8002120 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d902      	bls.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	74fb      	strb	r3, [r7, #19]
        break;
 80057c8:	e005      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057ca:	4b30      	ldr	r3, [pc, #192]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d0ef      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80057d6:	7cfb      	ldrb	r3, [r7, #19]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d159      	bne.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80057dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d01e      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d019      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057f8:	4b23      	ldr	r3, [pc, #140]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005802:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005804:	4b20      	ldr	r3, [pc, #128]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800580a:	4a1f      	ldr	r2, [pc, #124]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800580c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005810:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005814:	4b1c      	ldr	r3, [pc, #112]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800581a:	4a1b      	ldr	r2, [pc, #108]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800581c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005820:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005824:	4a18      	ldr	r2, [pc, #96]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d016      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005836:	f7fc fc73 	bl	8002120 <HAL_GetTick>
 800583a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800583c:	e00b      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800583e:	f7fc fc6f 	bl	8002120 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	f241 3288 	movw	r2, #5000	@ 0x1388
 800584c:	4293      	cmp	r3, r2
 800584e:	d902      	bls.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	74fb      	strb	r3, [r7, #19]
            break;
 8005854:	e006      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005856:	4b0c      	ldr	r3, [pc, #48]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0ec      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005864:	7cfb      	ldrb	r3, [r7, #19]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10b      	bne.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800586a:	4b07      	ldr	r3, [pc, #28]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800586c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005870:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005878:	4903      	ldr	r1, [pc, #12]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800587a:	4313      	orrs	r3, r2
 800587c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005880:	e008      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005882:	7cfb      	ldrb	r3, [r7, #19]
 8005884:	74bb      	strb	r3, [r7, #18]
 8005886:	e005      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005888:	40021000 	.word	0x40021000
 800588c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005890:	7cfb      	ldrb	r3, [r7, #19]
 8005892:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005894:	7c7b      	ldrb	r3, [r7, #17]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d105      	bne.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800589a:	4ba7      	ldr	r3, [pc, #668]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800589c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800589e:	4aa6      	ldr	r2, [pc, #664]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058b2:	4ba1      	ldr	r3, [pc, #644]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b8:	f023 0203 	bic.w	r2, r3, #3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	499d      	ldr	r1, [pc, #628]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058d4:	4b98      	ldr	r3, [pc, #608]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058da:	f023 020c 	bic.w	r2, r3, #12
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	4995      	ldr	r1, [pc, #596]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0304 	and.w	r3, r3, #4
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058f6:	4b90      	ldr	r3, [pc, #576]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	498c      	ldr	r1, [pc, #560]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005906:	4313      	orrs	r3, r2
 8005908:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0308 	and.w	r3, r3, #8
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00a      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005918:	4b87      	ldr	r3, [pc, #540]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800591a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800591e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	4984      	ldr	r1, [pc, #528]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005928:	4313      	orrs	r3, r2
 800592a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0310 	and.w	r3, r3, #16
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800593a:	4b7f      	ldr	r3, [pc, #508]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800593c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005940:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	497b      	ldr	r1, [pc, #492]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800594a:	4313      	orrs	r3, r2
 800594c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0320 	and.w	r3, r3, #32
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00a      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800595c:	4b76      	ldr	r3, [pc, #472]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800595e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005962:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	4973      	ldr	r1, [pc, #460]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800596c:	4313      	orrs	r3, r2
 800596e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00a      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800597e:	4b6e      	ldr	r3, [pc, #440]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005984:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	496a      	ldr	r1, [pc, #424]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800598e:	4313      	orrs	r3, r2
 8005990:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00a      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059a0:	4b65      	ldr	r3, [pc, #404]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	4962      	ldr	r1, [pc, #392]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059c2:	4b5d      	ldr	r3, [pc, #372]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d0:	4959      	ldr	r1, [pc, #356]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00a      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059e4:	4b54      	ldr	r3, [pc, #336]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059ea:	f023 0203 	bic.w	r2, r3, #3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f2:	4951      	ldr	r1, [pc, #324]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00a      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a06:	4b4c      	ldr	r3, [pc, #304]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a0c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a14:	4948      	ldr	r1, [pc, #288]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d015      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a28:	4b43      	ldr	r3, [pc, #268]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a36:	4940      	ldr	r1, [pc, #256]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a46:	d105      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a48:	4b3b      	ldr	r3, [pc, #236]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	4a3a      	ldr	r2, [pc, #232]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a52:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d015      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a60:	4b35      	ldr	r3, [pc, #212]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a66:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a6e:	4932      	ldr	r1, [pc, #200]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a7e:	d105      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a80:	4b2d      	ldr	r3, [pc, #180]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	4a2c      	ldr	r2, [pc, #176]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a8a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d015      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a98:	4b27      	ldr	r3, [pc, #156]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a9e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa6:	4924      	ldr	r1, [pc, #144]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ab6:	d105      	bne.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	4a1e      	ldr	r2, [pc, #120]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005abe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ac2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d015      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ad0:	4b19      	ldr	r3, [pc, #100]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ade:	4916      	ldr	r1, [pc, #88]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005aee:	d105      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005af0:	4b11      	ldr	r3, [pc, #68]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	4a10      	ldr	r2, [pc, #64]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005afa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d019      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b08:	4b0b      	ldr	r3, [pc, #44]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b0e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b16:	4908      	ldr	r1, [pc, #32]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b26:	d109      	bne.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b28:	4b03      	ldr	r3, [pc, #12]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	4a02      	ldr	r2, [pc, #8]	@ (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b32:	60d3      	str	r3, [r2, #12]
 8005b34:	e002      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005b36:	bf00      	nop
 8005b38:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d015      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b48:	4b29      	ldr	r3, [pc, #164]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b4e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b56:	4926      	ldr	r1, [pc, #152]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b66:	d105      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b68:	4b21      	ldr	r3, [pc, #132]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	4a20      	ldr	r2, [pc, #128]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b72:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d015      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005b80:	4b1b      	ldr	r3, [pc, #108]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b86:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b8e:	4918      	ldr	r1, [pc, #96]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b9e:	d105      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ba0:	4b13      	ldr	r3, [pc, #76]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	4a12      	ldr	r2, [pc, #72]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ba6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005baa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d015      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005bbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bc6:	490a      	ldr	r1, [pc, #40]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bd6:	d105      	bne.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bd8:	4b05      	ldr	r3, [pc, #20]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	4a04      	ldr	r2, [pc, #16]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005be2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005be4:	7cbb      	ldrb	r3, [r7, #18]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3718      	adds	r7, #24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	40021000 	.word	0x40021000

08005bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e049      	b.n	8005c9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d106      	bne.n	8005c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7fb fc24 	bl	8001468 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	3304      	adds	r3, #4
 8005c30:	4619      	mov	r1, r3
 8005c32:	4610      	mov	r0, r2
 8005c34:	f000 fef8 	bl	8006a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
	...

08005ca4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d001      	beq.n	8005cbc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e04c      	b.n	8005d56 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a26      	ldr	r2, [pc, #152]	@ (8005d64 <HAL_TIM_Base_Start+0xc0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d022      	beq.n	8005d14 <HAL_TIM_Base_Start+0x70>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cd6:	d01d      	beq.n	8005d14 <HAL_TIM_Base_Start+0x70>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a22      	ldr	r2, [pc, #136]	@ (8005d68 <HAL_TIM_Base_Start+0xc4>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d018      	beq.n	8005d14 <HAL_TIM_Base_Start+0x70>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a21      	ldr	r2, [pc, #132]	@ (8005d6c <HAL_TIM_Base_Start+0xc8>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d013      	beq.n	8005d14 <HAL_TIM_Base_Start+0x70>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a1f      	ldr	r2, [pc, #124]	@ (8005d70 <HAL_TIM_Base_Start+0xcc>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d00e      	beq.n	8005d14 <HAL_TIM_Base_Start+0x70>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8005d74 <HAL_TIM_Base_Start+0xd0>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d009      	beq.n	8005d14 <HAL_TIM_Base_Start+0x70>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a1c      	ldr	r2, [pc, #112]	@ (8005d78 <HAL_TIM_Base_Start+0xd4>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d004      	beq.n	8005d14 <HAL_TIM_Base_Start+0x70>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8005d7c <HAL_TIM_Base_Start+0xd8>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d115      	bne.n	8005d40 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689a      	ldr	r2, [r3, #8]
 8005d1a:	4b19      	ldr	r3, [pc, #100]	@ (8005d80 <HAL_TIM_Base_Start+0xdc>)
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2b06      	cmp	r3, #6
 8005d24:	d015      	beq.n	8005d52 <HAL_TIM_Base_Start+0xae>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d2c:	d011      	beq.n	8005d52 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f042 0201 	orr.w	r2, r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d3e:	e008      	b.n	8005d52 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0201 	orr.w	r2, r2, #1
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	e000      	b.n	8005d54 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	40012c00 	.word	0x40012c00
 8005d68:	40000400 	.word	0x40000400
 8005d6c:	40000800 	.word	0x40000800
 8005d70:	40000c00 	.word	0x40000c00
 8005d74:	40013400 	.word	0x40013400
 8005d78:	40014000 	.word	0x40014000
 8005d7c:	40015000 	.word	0x40015000
 8005d80:	00010007 	.word	0x00010007

08005d84 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6a1a      	ldr	r2, [r3, #32]
 8005d92:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005d96:	4013      	ands	r3, r2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10f      	bne.n	8005dbc <HAL_TIM_Base_Stop+0x38>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6a1a      	ldr	r2, [r3, #32]
 8005da2:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005da6:	4013      	ands	r3, r2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d107      	bne.n	8005dbc <HAL_TIM_Base_Stop+0x38>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0201 	bic.w	r2, r2, #1
 8005dba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
	...

08005dd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d001      	beq.n	8005dec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e054      	b.n	8005e96 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68da      	ldr	r2, [r3, #12]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f042 0201 	orr.w	r2, r2, #1
 8005e02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a26      	ldr	r2, [pc, #152]	@ (8005ea4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d022      	beq.n	8005e54 <HAL_TIM_Base_Start_IT+0x80>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e16:	d01d      	beq.n	8005e54 <HAL_TIM_Base_Start_IT+0x80>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a22      	ldr	r2, [pc, #136]	@ (8005ea8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d018      	beq.n	8005e54 <HAL_TIM_Base_Start_IT+0x80>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a21      	ldr	r2, [pc, #132]	@ (8005eac <HAL_TIM_Base_Start_IT+0xd8>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d013      	beq.n	8005e54 <HAL_TIM_Base_Start_IT+0x80>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a1f      	ldr	r2, [pc, #124]	@ (8005eb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d00e      	beq.n	8005e54 <HAL_TIM_Base_Start_IT+0x80>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8005eb4 <HAL_TIM_Base_Start_IT+0xe0>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d009      	beq.n	8005e54 <HAL_TIM_Base_Start_IT+0x80>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a1c      	ldr	r2, [pc, #112]	@ (8005eb8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d004      	beq.n	8005e54 <HAL_TIM_Base_Start_IT+0x80>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8005ebc <HAL_TIM_Base_Start_IT+0xe8>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d115      	bne.n	8005e80 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689a      	ldr	r2, [r3, #8]
 8005e5a:	4b19      	ldr	r3, [pc, #100]	@ (8005ec0 <HAL_TIM_Base_Start_IT+0xec>)
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2b06      	cmp	r3, #6
 8005e64:	d015      	beq.n	8005e92 <HAL_TIM_Base_Start_IT+0xbe>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e6c:	d011      	beq.n	8005e92 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f042 0201 	orr.w	r2, r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e7e:	e008      	b.n	8005e92 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0201 	orr.w	r2, r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	e000      	b.n	8005e94 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	40012c00 	.word	0x40012c00
 8005ea8:	40000400 	.word	0x40000400
 8005eac:	40000800 	.word	0x40000800
 8005eb0:	40000c00 	.word	0x40000c00
 8005eb4:	40013400 	.word	0x40013400
 8005eb8:	40014000 	.word	0x40014000
 8005ebc:	40015000 	.word	0x40015000
 8005ec0:	00010007 	.word	0x00010007

08005ec4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e049      	b.n	8005f6a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d106      	bne.n	8005ef0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f841 	bl	8005f72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3304      	adds	r3, #4
 8005f00:	4619      	mov	r1, r3
 8005f02:	4610      	mov	r0, r2
 8005f04:	f000 fd90 	bl	8006a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b083      	sub	sp, #12
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f7a:	bf00      	nop
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
	...

08005f88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d109      	bne.n	8005fac <HAL_TIM_PWM_Start+0x24>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	bf14      	ite	ne
 8005fa4:	2301      	movne	r3, #1
 8005fa6:	2300      	moveq	r3, #0
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	e03c      	b.n	8006026 <HAL_TIM_PWM_Start+0x9e>
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	d109      	bne.n	8005fc6 <HAL_TIM_PWM_Start+0x3e>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	bf14      	ite	ne
 8005fbe:	2301      	movne	r3, #1
 8005fc0:	2300      	moveq	r3, #0
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	e02f      	b.n	8006026 <HAL_TIM_PWM_Start+0x9e>
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	2b08      	cmp	r3, #8
 8005fca:	d109      	bne.n	8005fe0 <HAL_TIM_PWM_Start+0x58>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	bf14      	ite	ne
 8005fd8:	2301      	movne	r3, #1
 8005fda:	2300      	moveq	r3, #0
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	e022      	b.n	8006026 <HAL_TIM_PWM_Start+0x9e>
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	2b0c      	cmp	r3, #12
 8005fe4:	d109      	bne.n	8005ffa <HAL_TIM_PWM_Start+0x72>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	bf14      	ite	ne
 8005ff2:	2301      	movne	r3, #1
 8005ff4:	2300      	moveq	r3, #0
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	e015      	b.n	8006026 <HAL_TIM_PWM_Start+0x9e>
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	2b10      	cmp	r3, #16
 8005ffe:	d109      	bne.n	8006014 <HAL_TIM_PWM_Start+0x8c>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b01      	cmp	r3, #1
 800600a:	bf14      	ite	ne
 800600c:	2301      	movne	r3, #1
 800600e:	2300      	moveq	r3, #0
 8006010:	b2db      	uxtb	r3, r3
 8006012:	e008      	b.n	8006026 <HAL_TIM_PWM_Start+0x9e>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b01      	cmp	r3, #1
 800601e:	bf14      	ite	ne
 8006020:	2301      	movne	r3, #1
 8006022:	2300      	moveq	r3, #0
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e0a6      	b.n	800617c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d104      	bne.n	800603e <HAL_TIM_PWM_Start+0xb6>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800603c:	e023      	b.n	8006086 <HAL_TIM_PWM_Start+0xfe>
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b04      	cmp	r3, #4
 8006042:	d104      	bne.n	800604e <HAL_TIM_PWM_Start+0xc6>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800604c:	e01b      	b.n	8006086 <HAL_TIM_PWM_Start+0xfe>
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	2b08      	cmp	r3, #8
 8006052:	d104      	bne.n	800605e <HAL_TIM_PWM_Start+0xd6>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800605c:	e013      	b.n	8006086 <HAL_TIM_PWM_Start+0xfe>
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b0c      	cmp	r3, #12
 8006062:	d104      	bne.n	800606e <HAL_TIM_PWM_Start+0xe6>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800606c:	e00b      	b.n	8006086 <HAL_TIM_PWM_Start+0xfe>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b10      	cmp	r3, #16
 8006072:	d104      	bne.n	800607e <HAL_TIM_PWM_Start+0xf6>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2202      	movs	r2, #2
 8006078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800607c:	e003      	b.n	8006086 <HAL_TIM_PWM_Start+0xfe>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2202      	movs	r2, #2
 8006082:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2201      	movs	r2, #1
 800608c:	6839      	ldr	r1, [r7, #0]
 800608e:	4618      	mov	r0, r3
 8006090:	f001 f9b8 	bl	8007404 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a3a      	ldr	r2, [pc, #232]	@ (8006184 <HAL_TIM_PWM_Start+0x1fc>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d018      	beq.n	80060d0 <HAL_TIM_PWM_Start+0x148>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a39      	ldr	r2, [pc, #228]	@ (8006188 <HAL_TIM_PWM_Start+0x200>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d013      	beq.n	80060d0 <HAL_TIM_PWM_Start+0x148>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a37      	ldr	r2, [pc, #220]	@ (800618c <HAL_TIM_PWM_Start+0x204>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d00e      	beq.n	80060d0 <HAL_TIM_PWM_Start+0x148>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a36      	ldr	r2, [pc, #216]	@ (8006190 <HAL_TIM_PWM_Start+0x208>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d009      	beq.n	80060d0 <HAL_TIM_PWM_Start+0x148>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a34      	ldr	r2, [pc, #208]	@ (8006194 <HAL_TIM_PWM_Start+0x20c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d004      	beq.n	80060d0 <HAL_TIM_PWM_Start+0x148>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a33      	ldr	r2, [pc, #204]	@ (8006198 <HAL_TIM_PWM_Start+0x210>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d101      	bne.n	80060d4 <HAL_TIM_PWM_Start+0x14c>
 80060d0:	2301      	movs	r3, #1
 80060d2:	e000      	b.n	80060d6 <HAL_TIM_PWM_Start+0x14e>
 80060d4:	2300      	movs	r3, #0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d007      	beq.n	80060ea <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a25      	ldr	r2, [pc, #148]	@ (8006184 <HAL_TIM_PWM_Start+0x1fc>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d022      	beq.n	800613a <HAL_TIM_PWM_Start+0x1b2>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060fc:	d01d      	beq.n	800613a <HAL_TIM_PWM_Start+0x1b2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a26      	ldr	r2, [pc, #152]	@ (800619c <HAL_TIM_PWM_Start+0x214>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d018      	beq.n	800613a <HAL_TIM_PWM_Start+0x1b2>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a24      	ldr	r2, [pc, #144]	@ (80061a0 <HAL_TIM_PWM_Start+0x218>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d013      	beq.n	800613a <HAL_TIM_PWM_Start+0x1b2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a23      	ldr	r2, [pc, #140]	@ (80061a4 <HAL_TIM_PWM_Start+0x21c>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d00e      	beq.n	800613a <HAL_TIM_PWM_Start+0x1b2>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a19      	ldr	r2, [pc, #100]	@ (8006188 <HAL_TIM_PWM_Start+0x200>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d009      	beq.n	800613a <HAL_TIM_PWM_Start+0x1b2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a18      	ldr	r2, [pc, #96]	@ (800618c <HAL_TIM_PWM_Start+0x204>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d004      	beq.n	800613a <HAL_TIM_PWM_Start+0x1b2>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a18      	ldr	r2, [pc, #96]	@ (8006198 <HAL_TIM_PWM_Start+0x210>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d115      	bne.n	8006166 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	4b19      	ldr	r3, [pc, #100]	@ (80061a8 <HAL_TIM_PWM_Start+0x220>)
 8006142:	4013      	ands	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2b06      	cmp	r3, #6
 800614a:	d015      	beq.n	8006178 <HAL_TIM_PWM_Start+0x1f0>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006152:	d011      	beq.n	8006178 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f042 0201 	orr.w	r2, r2, #1
 8006162:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006164:	e008      	b.n	8006178 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f042 0201 	orr.w	r2, r2, #1
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	e000      	b.n	800617a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006178:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	40012c00 	.word	0x40012c00
 8006188:	40013400 	.word	0x40013400
 800618c:	40014000 	.word	0x40014000
 8006190:	40014400 	.word	0x40014400
 8006194:	40014800 	.word	0x40014800
 8006198:	40015000 	.word	0x40015000
 800619c:	40000400 	.word	0x40000400
 80061a0:	40000800 	.word	0x40000800
 80061a4:	40000c00 	.word	0x40000c00
 80061a8:	00010007 	.word	0x00010007

080061ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2200      	movs	r2, #0
 80061bc:	6839      	ldr	r1, [r7, #0]
 80061be:	4618      	mov	r0, r3
 80061c0:	f001 f920 	bl	8007404 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a40      	ldr	r2, [pc, #256]	@ (80062cc <HAL_TIM_PWM_Stop+0x120>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d018      	beq.n	8006200 <HAL_TIM_PWM_Stop+0x54>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a3f      	ldr	r2, [pc, #252]	@ (80062d0 <HAL_TIM_PWM_Stop+0x124>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d013      	beq.n	8006200 <HAL_TIM_PWM_Stop+0x54>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a3d      	ldr	r2, [pc, #244]	@ (80062d4 <HAL_TIM_PWM_Stop+0x128>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00e      	beq.n	8006200 <HAL_TIM_PWM_Stop+0x54>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a3c      	ldr	r2, [pc, #240]	@ (80062d8 <HAL_TIM_PWM_Stop+0x12c>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d009      	beq.n	8006200 <HAL_TIM_PWM_Stop+0x54>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a3a      	ldr	r2, [pc, #232]	@ (80062dc <HAL_TIM_PWM_Stop+0x130>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d004      	beq.n	8006200 <HAL_TIM_PWM_Stop+0x54>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a39      	ldr	r2, [pc, #228]	@ (80062e0 <HAL_TIM_PWM_Stop+0x134>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d101      	bne.n	8006204 <HAL_TIM_PWM_Stop+0x58>
 8006200:	2301      	movs	r3, #1
 8006202:	e000      	b.n	8006206 <HAL_TIM_PWM_Stop+0x5a>
 8006204:	2300      	movs	r3, #0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d017      	beq.n	800623a <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6a1a      	ldr	r2, [r3, #32]
 8006210:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006214:	4013      	ands	r3, r2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10f      	bne.n	800623a <HAL_TIM_PWM_Stop+0x8e>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6a1a      	ldr	r2, [r3, #32]
 8006220:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006224:	4013      	ands	r3, r2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d107      	bne.n	800623a <HAL_TIM_PWM_Stop+0x8e>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006238:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6a1a      	ldr	r2, [r3, #32]
 8006240:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006244:	4013      	ands	r3, r2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10f      	bne.n	800626a <HAL_TIM_PWM_Stop+0xbe>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6a1a      	ldr	r2, [r3, #32]
 8006250:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006254:	4013      	ands	r3, r2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d107      	bne.n	800626a <HAL_TIM_PWM_Stop+0xbe>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0201 	bic.w	r2, r2, #1
 8006268:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d104      	bne.n	800627a <HAL_TIM_PWM_Stop+0xce>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006278:	e023      	b.n	80062c2 <HAL_TIM_PWM_Stop+0x116>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b04      	cmp	r3, #4
 800627e:	d104      	bne.n	800628a <HAL_TIM_PWM_Stop+0xde>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006288:	e01b      	b.n	80062c2 <HAL_TIM_PWM_Stop+0x116>
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b08      	cmp	r3, #8
 800628e:	d104      	bne.n	800629a <HAL_TIM_PWM_Stop+0xee>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006298:	e013      	b.n	80062c2 <HAL_TIM_PWM_Stop+0x116>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b0c      	cmp	r3, #12
 800629e:	d104      	bne.n	80062aa <HAL_TIM_PWM_Stop+0xfe>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80062a8:	e00b      	b.n	80062c2 <HAL_TIM_PWM_Stop+0x116>
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2b10      	cmp	r3, #16
 80062ae:	d104      	bne.n	80062ba <HAL_TIM_PWM_Stop+0x10e>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062b8:	e003      	b.n	80062c2 <HAL_TIM_PWM_Stop+0x116>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3708      	adds	r7, #8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	40012c00 	.word	0x40012c00
 80062d0:	40013400 	.word	0x40013400
 80062d4:	40014000 	.word	0x40014000
 80062d8:	40014400 	.word	0x40014400
 80062dc:	40014800 	.word	0x40014800
 80062e0:	40015000 	.word	0x40015000

080062e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d020      	beq.n	8006348 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d01b      	beq.n	8006348 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f06f 0202 	mvn.w	r2, #2
 8006318:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	f003 0303 	and.w	r3, r3, #3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fb5c 	bl	80069ec <HAL_TIM_IC_CaptureCallback>
 8006334:	e005      	b.n	8006342 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fb4e 	bl	80069d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fb5f 	bl	8006a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f003 0304 	and.w	r3, r3, #4
 800634e:	2b00      	cmp	r3, #0
 8006350:	d020      	beq.n	8006394 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b00      	cmp	r3, #0
 800635a:	d01b      	beq.n	8006394 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f06f 0204 	mvn.w	r2, #4
 8006364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2202      	movs	r2, #2
 800636a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006376:	2b00      	cmp	r3, #0
 8006378:	d003      	beq.n	8006382 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fb36 	bl	80069ec <HAL_TIM_IC_CaptureCallback>
 8006380:	e005      	b.n	800638e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fb28 	bl	80069d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fb39 	bl	8006a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	f003 0308 	and.w	r3, r3, #8
 800639a:	2b00      	cmp	r3, #0
 800639c:	d020      	beq.n	80063e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f003 0308 	and.w	r3, r3, #8
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d01b      	beq.n	80063e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f06f 0208 	mvn.w	r2, #8
 80063b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2204      	movs	r2, #4
 80063b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	f003 0303 	and.w	r3, r3, #3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fb10 	bl	80069ec <HAL_TIM_IC_CaptureCallback>
 80063cc:	e005      	b.n	80063da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fb02 	bl	80069d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fb13 	bl	8006a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f003 0310 	and.w	r3, r3, #16
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d020      	beq.n	800642c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f003 0310 	and.w	r3, r3, #16
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d01b      	beq.n	800642c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f06f 0210 	mvn.w	r2, #16
 80063fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2208      	movs	r2, #8
 8006402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 faea 	bl	80069ec <HAL_TIM_IC_CaptureCallback>
 8006418:	e005      	b.n	8006426 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fadc 	bl	80069d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 faed 	bl	8006a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00c      	beq.n	8006450 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b00      	cmp	r3, #0
 800643e:	d007      	beq.n	8006450 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f06f 0201 	mvn.w	r2, #1
 8006448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7fa fc48 	bl	8000ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006456:	2b00      	cmp	r3, #0
 8006458:	d104      	bne.n	8006464 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00c      	beq.n	800647e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800646a:	2b00      	cmp	r3, #0
 800646c:	d007      	beq.n	800647e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f001 faeb 	bl	8007a54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00c      	beq.n	80064a2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800648e:	2b00      	cmp	r3, #0
 8006490:	d007      	beq.n	80064a2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800649a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f001 fae3 	bl	8007a68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00c      	beq.n	80064c6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d007      	beq.n	80064c6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80064be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 faa7 	bl	8006a14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f003 0320 	and.w	r3, r3, #32
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00c      	beq.n	80064ea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f003 0320 	and.w	r3, r3, #32
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d007      	beq.n	80064ea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f06f 0220 	mvn.w	r2, #32
 80064e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f001 faab 	bl	8007a40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00c      	beq.n	800650e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d007      	beq.n	800650e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f001 fab7 	bl	8007a7c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00c      	beq.n	8006532 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d007      	beq.n	8006532 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800652a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f001 faaf 	bl	8007a90 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00c      	beq.n	8006556 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d007      	beq.n	8006556 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800654e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f001 faa7 	bl	8007aa4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00c      	beq.n	800657a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d007      	beq.n	800657a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 fa9f 	bl	8007ab8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800657a:	bf00      	nop
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006590:	2300      	movs	r3, #0
 8006592:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800659a:	2b01      	cmp	r3, #1
 800659c:	d101      	bne.n	80065a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800659e:	2302      	movs	r3, #2
 80065a0:	e0ff      	b.n	80067a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b14      	cmp	r3, #20
 80065ae:	f200 80f0 	bhi.w	8006792 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80065b2:	a201      	add	r2, pc, #4	@ (adr r2, 80065b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b8:	0800660d 	.word	0x0800660d
 80065bc:	08006793 	.word	0x08006793
 80065c0:	08006793 	.word	0x08006793
 80065c4:	08006793 	.word	0x08006793
 80065c8:	0800664d 	.word	0x0800664d
 80065cc:	08006793 	.word	0x08006793
 80065d0:	08006793 	.word	0x08006793
 80065d4:	08006793 	.word	0x08006793
 80065d8:	0800668f 	.word	0x0800668f
 80065dc:	08006793 	.word	0x08006793
 80065e0:	08006793 	.word	0x08006793
 80065e4:	08006793 	.word	0x08006793
 80065e8:	080066cf 	.word	0x080066cf
 80065ec:	08006793 	.word	0x08006793
 80065f0:	08006793 	.word	0x08006793
 80065f4:	08006793 	.word	0x08006793
 80065f8:	08006711 	.word	0x08006711
 80065fc:	08006793 	.word	0x08006793
 8006600:	08006793 	.word	0x08006793
 8006604:	08006793 	.word	0x08006793
 8006608:	08006751 	.word	0x08006751
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fabc 	bl	8006b90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699a      	ldr	r2, [r3, #24]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f042 0208 	orr.w	r2, r2, #8
 8006626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	699a      	ldr	r2, [r3, #24]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 0204 	bic.w	r2, r2, #4
 8006636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6999      	ldr	r1, [r3, #24]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	691a      	ldr	r2, [r3, #16]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	430a      	orrs	r2, r1
 8006648:	619a      	str	r2, [r3, #24]
      break;
 800664a:	e0a5      	b.n	8006798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68b9      	ldr	r1, [r7, #8]
 8006652:	4618      	mov	r0, r3
 8006654:	f000 fb36 	bl	8006cc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	699a      	ldr	r2, [r3, #24]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	699a      	ldr	r2, [r3, #24]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6999      	ldr	r1, [r3, #24]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	021a      	lsls	r2, r3, #8
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	430a      	orrs	r2, r1
 800668a:	619a      	str	r2, [r3, #24]
      break;
 800668c:	e084      	b.n	8006798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68b9      	ldr	r1, [r7, #8]
 8006694:	4618      	mov	r0, r3
 8006696:	f000 fba9 	bl	8006dec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	69da      	ldr	r2, [r3, #28]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f042 0208 	orr.w	r2, r2, #8
 80066a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	69da      	ldr	r2, [r3, #28]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0204 	bic.w	r2, r2, #4
 80066b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	69d9      	ldr	r1, [r3, #28]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	691a      	ldr	r2, [r3, #16]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	430a      	orrs	r2, r1
 80066ca:	61da      	str	r2, [r3, #28]
      break;
 80066cc:	e064      	b.n	8006798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68b9      	ldr	r1, [r7, #8]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 fc1b 	bl	8006f10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	69da      	ldr	r2, [r3, #28]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69da      	ldr	r2, [r3, #28]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69d9      	ldr	r1, [r3, #28]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	021a      	lsls	r2, r3, #8
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	61da      	str	r2, [r3, #28]
      break;
 800670e:	e043      	b.n	8006798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68b9      	ldr	r1, [r7, #8]
 8006716:	4618      	mov	r0, r3
 8006718:	f000 fc8e 	bl	8007038 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f042 0208 	orr.w	r2, r2, #8
 800672a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0204 	bic.w	r2, r2, #4
 800673a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	691a      	ldr	r2, [r3, #16]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800674e:	e023      	b.n	8006798 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68b9      	ldr	r1, [r7, #8]
 8006756:	4618      	mov	r0, r3
 8006758:	f000 fcd8 	bl	800710c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800676a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800677a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	021a      	lsls	r2, r3, #8
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006790:	e002      	b.n	8006798 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	75fb      	strb	r3, [r7, #23]
      break;
 8006796:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3718      	adds	r7, #24
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop

080067ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d101      	bne.n	80067c8 <HAL_TIM_ConfigClockSource+0x1c>
 80067c4:	2302      	movs	r3, #2
 80067c6:	e0f6      	b.n	80069b6 <HAL_TIM_ConfigClockSource+0x20a>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2202      	movs	r2, #2
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80067e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80067ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a6f      	ldr	r2, [pc, #444]	@ (80069c0 <HAL_TIM_ConfigClockSource+0x214>)
 8006802:	4293      	cmp	r3, r2
 8006804:	f000 80c1 	beq.w	800698a <HAL_TIM_ConfigClockSource+0x1de>
 8006808:	4a6d      	ldr	r2, [pc, #436]	@ (80069c0 <HAL_TIM_ConfigClockSource+0x214>)
 800680a:	4293      	cmp	r3, r2
 800680c:	f200 80c6 	bhi.w	800699c <HAL_TIM_ConfigClockSource+0x1f0>
 8006810:	4a6c      	ldr	r2, [pc, #432]	@ (80069c4 <HAL_TIM_ConfigClockSource+0x218>)
 8006812:	4293      	cmp	r3, r2
 8006814:	f000 80b9 	beq.w	800698a <HAL_TIM_ConfigClockSource+0x1de>
 8006818:	4a6a      	ldr	r2, [pc, #424]	@ (80069c4 <HAL_TIM_ConfigClockSource+0x218>)
 800681a:	4293      	cmp	r3, r2
 800681c:	f200 80be 	bhi.w	800699c <HAL_TIM_ConfigClockSource+0x1f0>
 8006820:	4a69      	ldr	r2, [pc, #420]	@ (80069c8 <HAL_TIM_ConfigClockSource+0x21c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	f000 80b1 	beq.w	800698a <HAL_TIM_ConfigClockSource+0x1de>
 8006828:	4a67      	ldr	r2, [pc, #412]	@ (80069c8 <HAL_TIM_ConfigClockSource+0x21c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	f200 80b6 	bhi.w	800699c <HAL_TIM_ConfigClockSource+0x1f0>
 8006830:	4a66      	ldr	r2, [pc, #408]	@ (80069cc <HAL_TIM_ConfigClockSource+0x220>)
 8006832:	4293      	cmp	r3, r2
 8006834:	f000 80a9 	beq.w	800698a <HAL_TIM_ConfigClockSource+0x1de>
 8006838:	4a64      	ldr	r2, [pc, #400]	@ (80069cc <HAL_TIM_ConfigClockSource+0x220>)
 800683a:	4293      	cmp	r3, r2
 800683c:	f200 80ae 	bhi.w	800699c <HAL_TIM_ConfigClockSource+0x1f0>
 8006840:	4a63      	ldr	r2, [pc, #396]	@ (80069d0 <HAL_TIM_ConfigClockSource+0x224>)
 8006842:	4293      	cmp	r3, r2
 8006844:	f000 80a1 	beq.w	800698a <HAL_TIM_ConfigClockSource+0x1de>
 8006848:	4a61      	ldr	r2, [pc, #388]	@ (80069d0 <HAL_TIM_ConfigClockSource+0x224>)
 800684a:	4293      	cmp	r3, r2
 800684c:	f200 80a6 	bhi.w	800699c <HAL_TIM_ConfigClockSource+0x1f0>
 8006850:	4a60      	ldr	r2, [pc, #384]	@ (80069d4 <HAL_TIM_ConfigClockSource+0x228>)
 8006852:	4293      	cmp	r3, r2
 8006854:	f000 8099 	beq.w	800698a <HAL_TIM_ConfigClockSource+0x1de>
 8006858:	4a5e      	ldr	r2, [pc, #376]	@ (80069d4 <HAL_TIM_ConfigClockSource+0x228>)
 800685a:	4293      	cmp	r3, r2
 800685c:	f200 809e 	bhi.w	800699c <HAL_TIM_ConfigClockSource+0x1f0>
 8006860:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006864:	f000 8091 	beq.w	800698a <HAL_TIM_ConfigClockSource+0x1de>
 8006868:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800686c:	f200 8096 	bhi.w	800699c <HAL_TIM_ConfigClockSource+0x1f0>
 8006870:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006874:	f000 8089 	beq.w	800698a <HAL_TIM_ConfigClockSource+0x1de>
 8006878:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800687c:	f200 808e 	bhi.w	800699c <HAL_TIM_ConfigClockSource+0x1f0>
 8006880:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006884:	d03e      	beq.n	8006904 <HAL_TIM_ConfigClockSource+0x158>
 8006886:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800688a:	f200 8087 	bhi.w	800699c <HAL_TIM_ConfigClockSource+0x1f0>
 800688e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006892:	f000 8086 	beq.w	80069a2 <HAL_TIM_ConfigClockSource+0x1f6>
 8006896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800689a:	d87f      	bhi.n	800699c <HAL_TIM_ConfigClockSource+0x1f0>
 800689c:	2b70      	cmp	r3, #112	@ 0x70
 800689e:	d01a      	beq.n	80068d6 <HAL_TIM_ConfigClockSource+0x12a>
 80068a0:	2b70      	cmp	r3, #112	@ 0x70
 80068a2:	d87b      	bhi.n	800699c <HAL_TIM_ConfigClockSource+0x1f0>
 80068a4:	2b60      	cmp	r3, #96	@ 0x60
 80068a6:	d050      	beq.n	800694a <HAL_TIM_ConfigClockSource+0x19e>
 80068a8:	2b60      	cmp	r3, #96	@ 0x60
 80068aa:	d877      	bhi.n	800699c <HAL_TIM_ConfigClockSource+0x1f0>
 80068ac:	2b50      	cmp	r3, #80	@ 0x50
 80068ae:	d03c      	beq.n	800692a <HAL_TIM_ConfigClockSource+0x17e>
 80068b0:	2b50      	cmp	r3, #80	@ 0x50
 80068b2:	d873      	bhi.n	800699c <HAL_TIM_ConfigClockSource+0x1f0>
 80068b4:	2b40      	cmp	r3, #64	@ 0x40
 80068b6:	d058      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x1be>
 80068b8:	2b40      	cmp	r3, #64	@ 0x40
 80068ba:	d86f      	bhi.n	800699c <HAL_TIM_ConfigClockSource+0x1f0>
 80068bc:	2b30      	cmp	r3, #48	@ 0x30
 80068be:	d064      	beq.n	800698a <HAL_TIM_ConfigClockSource+0x1de>
 80068c0:	2b30      	cmp	r3, #48	@ 0x30
 80068c2:	d86b      	bhi.n	800699c <HAL_TIM_ConfigClockSource+0x1f0>
 80068c4:	2b20      	cmp	r3, #32
 80068c6:	d060      	beq.n	800698a <HAL_TIM_ConfigClockSource+0x1de>
 80068c8:	2b20      	cmp	r3, #32
 80068ca:	d867      	bhi.n	800699c <HAL_TIM_ConfigClockSource+0x1f0>
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d05c      	beq.n	800698a <HAL_TIM_ConfigClockSource+0x1de>
 80068d0:	2b10      	cmp	r3, #16
 80068d2:	d05a      	beq.n	800698a <HAL_TIM_ConfigClockSource+0x1de>
 80068d4:	e062      	b.n	800699c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068e6:	f000 fd6d 	bl	80073c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80068f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	609a      	str	r2, [r3, #8]
      break;
 8006902:	e04f      	b.n	80069a4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006914:	f000 fd56 	bl	80073c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689a      	ldr	r2, [r3, #8]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006926:	609a      	str	r2, [r3, #8]
      break;
 8006928:	e03c      	b.n	80069a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006936:	461a      	mov	r2, r3
 8006938:	f000 fcc8 	bl	80072cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2150      	movs	r1, #80	@ 0x50
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fd21 	bl	800738a <TIM_ITRx_SetConfig>
      break;
 8006948:	e02c      	b.n	80069a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006956:	461a      	mov	r2, r3
 8006958:	f000 fce7 	bl	800732a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2160      	movs	r1, #96	@ 0x60
 8006962:	4618      	mov	r0, r3
 8006964:	f000 fd11 	bl	800738a <TIM_ITRx_SetConfig>
      break;
 8006968:	e01c      	b.n	80069a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006976:	461a      	mov	r2, r3
 8006978:	f000 fca8 	bl	80072cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2140      	movs	r1, #64	@ 0x40
 8006982:	4618      	mov	r0, r3
 8006984:	f000 fd01 	bl	800738a <TIM_ITRx_SetConfig>
      break;
 8006988:	e00c      	b.n	80069a4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4619      	mov	r1, r3
 8006994:	4610      	mov	r0, r2
 8006996:	f000 fcf8 	bl	800738a <TIM_ITRx_SetConfig>
      break;
 800699a:	e003      	b.n	80069a4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	73fb      	strb	r3, [r7, #15]
      break;
 80069a0:	e000      	b.n	80069a4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80069a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	00100070 	.word	0x00100070
 80069c4:	00100060 	.word	0x00100060
 80069c8:	00100050 	.word	0x00100050
 80069cc:	00100040 	.word	0x00100040
 80069d0:	00100030 	.word	0x00100030
 80069d4:	00100020 	.word	0x00100020

080069d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a4c      	ldr	r2, [pc, #304]	@ (8006b6c <TIM_Base_SetConfig+0x144>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d017      	beq.n	8006a70 <TIM_Base_SetConfig+0x48>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a46:	d013      	beq.n	8006a70 <TIM_Base_SetConfig+0x48>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a49      	ldr	r2, [pc, #292]	@ (8006b70 <TIM_Base_SetConfig+0x148>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d00f      	beq.n	8006a70 <TIM_Base_SetConfig+0x48>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a48      	ldr	r2, [pc, #288]	@ (8006b74 <TIM_Base_SetConfig+0x14c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d00b      	beq.n	8006a70 <TIM_Base_SetConfig+0x48>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a47      	ldr	r2, [pc, #284]	@ (8006b78 <TIM_Base_SetConfig+0x150>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d007      	beq.n	8006a70 <TIM_Base_SetConfig+0x48>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a46      	ldr	r2, [pc, #280]	@ (8006b7c <TIM_Base_SetConfig+0x154>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d003      	beq.n	8006a70 <TIM_Base_SetConfig+0x48>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a45      	ldr	r2, [pc, #276]	@ (8006b80 <TIM_Base_SetConfig+0x158>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d108      	bne.n	8006a82 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a39      	ldr	r2, [pc, #228]	@ (8006b6c <TIM_Base_SetConfig+0x144>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d023      	beq.n	8006ad2 <TIM_Base_SetConfig+0xaa>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a90:	d01f      	beq.n	8006ad2 <TIM_Base_SetConfig+0xaa>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a36      	ldr	r2, [pc, #216]	@ (8006b70 <TIM_Base_SetConfig+0x148>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d01b      	beq.n	8006ad2 <TIM_Base_SetConfig+0xaa>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a35      	ldr	r2, [pc, #212]	@ (8006b74 <TIM_Base_SetConfig+0x14c>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d017      	beq.n	8006ad2 <TIM_Base_SetConfig+0xaa>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a34      	ldr	r2, [pc, #208]	@ (8006b78 <TIM_Base_SetConfig+0x150>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d013      	beq.n	8006ad2 <TIM_Base_SetConfig+0xaa>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a33      	ldr	r2, [pc, #204]	@ (8006b7c <TIM_Base_SetConfig+0x154>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d00f      	beq.n	8006ad2 <TIM_Base_SetConfig+0xaa>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a33      	ldr	r2, [pc, #204]	@ (8006b84 <TIM_Base_SetConfig+0x15c>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d00b      	beq.n	8006ad2 <TIM_Base_SetConfig+0xaa>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a32      	ldr	r2, [pc, #200]	@ (8006b88 <TIM_Base_SetConfig+0x160>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d007      	beq.n	8006ad2 <TIM_Base_SetConfig+0xaa>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a31      	ldr	r2, [pc, #196]	@ (8006b8c <TIM_Base_SetConfig+0x164>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d003      	beq.n	8006ad2 <TIM_Base_SetConfig+0xaa>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a2c      	ldr	r2, [pc, #176]	@ (8006b80 <TIM_Base_SetConfig+0x158>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d108      	bne.n	8006ae4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a18      	ldr	r2, [pc, #96]	@ (8006b6c <TIM_Base_SetConfig+0x144>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d013      	beq.n	8006b38 <TIM_Base_SetConfig+0x110>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a1a      	ldr	r2, [pc, #104]	@ (8006b7c <TIM_Base_SetConfig+0x154>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d00f      	beq.n	8006b38 <TIM_Base_SetConfig+0x110>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8006b84 <TIM_Base_SetConfig+0x15c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d00b      	beq.n	8006b38 <TIM_Base_SetConfig+0x110>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a19      	ldr	r2, [pc, #100]	@ (8006b88 <TIM_Base_SetConfig+0x160>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d007      	beq.n	8006b38 <TIM_Base_SetConfig+0x110>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a18      	ldr	r2, [pc, #96]	@ (8006b8c <TIM_Base_SetConfig+0x164>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d003      	beq.n	8006b38 <TIM_Base_SetConfig+0x110>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a13      	ldr	r2, [pc, #76]	@ (8006b80 <TIM_Base_SetConfig+0x158>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d103      	bne.n	8006b40 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	691a      	ldr	r2, [r3, #16]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d105      	bne.n	8006b5e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	f023 0201 	bic.w	r2, r3, #1
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	611a      	str	r2, [r3, #16]
  }
}
 8006b5e:	bf00      	nop
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	40012c00 	.word	0x40012c00
 8006b70:	40000400 	.word	0x40000400
 8006b74:	40000800 	.word	0x40000800
 8006b78:	40000c00 	.word	0x40000c00
 8006b7c:	40013400 	.word	0x40013400
 8006b80:	40015000 	.word	0x40015000
 8006b84:	40014000 	.word	0x40014000
 8006b88:	40014400 	.word	0x40014400
 8006b8c:	40014800 	.word	0x40014800

08006b90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	f023 0201 	bic.w	r2, r3, #1
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0303 	bic.w	r3, r3, #3
 8006bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f023 0302 	bic.w	r3, r3, #2
 8006bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a30      	ldr	r2, [pc, #192]	@ (8006cac <TIM_OC1_SetConfig+0x11c>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d013      	beq.n	8006c18 <TIM_OC1_SetConfig+0x88>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a2f      	ldr	r2, [pc, #188]	@ (8006cb0 <TIM_OC1_SetConfig+0x120>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d00f      	beq.n	8006c18 <TIM_OC1_SetConfig+0x88>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a2e      	ldr	r2, [pc, #184]	@ (8006cb4 <TIM_OC1_SetConfig+0x124>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d00b      	beq.n	8006c18 <TIM_OC1_SetConfig+0x88>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a2d      	ldr	r2, [pc, #180]	@ (8006cb8 <TIM_OC1_SetConfig+0x128>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d007      	beq.n	8006c18 <TIM_OC1_SetConfig+0x88>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a2c      	ldr	r2, [pc, #176]	@ (8006cbc <TIM_OC1_SetConfig+0x12c>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d003      	beq.n	8006c18 <TIM_OC1_SetConfig+0x88>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a2b      	ldr	r2, [pc, #172]	@ (8006cc0 <TIM_OC1_SetConfig+0x130>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d10c      	bne.n	8006c32 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f023 0308 	bic.w	r3, r3, #8
 8006c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	f023 0304 	bic.w	r3, r3, #4
 8006c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a1d      	ldr	r2, [pc, #116]	@ (8006cac <TIM_OC1_SetConfig+0x11c>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d013      	beq.n	8006c62 <TIM_OC1_SetConfig+0xd2>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8006cb0 <TIM_OC1_SetConfig+0x120>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d00f      	beq.n	8006c62 <TIM_OC1_SetConfig+0xd2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a1b      	ldr	r2, [pc, #108]	@ (8006cb4 <TIM_OC1_SetConfig+0x124>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d00b      	beq.n	8006c62 <TIM_OC1_SetConfig+0xd2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a1a      	ldr	r2, [pc, #104]	@ (8006cb8 <TIM_OC1_SetConfig+0x128>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d007      	beq.n	8006c62 <TIM_OC1_SetConfig+0xd2>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a19      	ldr	r2, [pc, #100]	@ (8006cbc <TIM_OC1_SetConfig+0x12c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d003      	beq.n	8006c62 <TIM_OC1_SetConfig+0xd2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a18      	ldr	r2, [pc, #96]	@ (8006cc0 <TIM_OC1_SetConfig+0x130>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d111      	bne.n	8006c86 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	621a      	str	r2, [r3, #32]
}
 8006ca0:	bf00      	nop
 8006ca2:	371c      	adds	r7, #28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	40012c00 	.word	0x40012c00
 8006cb0:	40013400 	.word	0x40013400
 8006cb4:	40014000 	.word	0x40014000
 8006cb8:	40014400 	.word	0x40014400
 8006cbc:	40014800 	.word	0x40014800
 8006cc0:	40015000 	.word	0x40015000

08006cc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	f023 0210 	bic.w	r2, r3, #16
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	021b      	lsls	r3, r3, #8
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	f023 0320 	bic.w	r3, r3, #32
 8006d12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	011b      	lsls	r3, r3, #4
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a2c      	ldr	r2, [pc, #176]	@ (8006dd4 <TIM_OC2_SetConfig+0x110>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d007      	beq.n	8006d38 <TIM_OC2_SetConfig+0x74>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a2b      	ldr	r2, [pc, #172]	@ (8006dd8 <TIM_OC2_SetConfig+0x114>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d003      	beq.n	8006d38 <TIM_OC2_SetConfig+0x74>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a2a      	ldr	r2, [pc, #168]	@ (8006ddc <TIM_OC2_SetConfig+0x118>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d10d      	bne.n	8006d54 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	011b      	lsls	r3, r3, #4
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a1f      	ldr	r2, [pc, #124]	@ (8006dd4 <TIM_OC2_SetConfig+0x110>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d013      	beq.n	8006d84 <TIM_OC2_SetConfig+0xc0>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8006dd8 <TIM_OC2_SetConfig+0x114>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d00f      	beq.n	8006d84 <TIM_OC2_SetConfig+0xc0>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a1e      	ldr	r2, [pc, #120]	@ (8006de0 <TIM_OC2_SetConfig+0x11c>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d00b      	beq.n	8006d84 <TIM_OC2_SetConfig+0xc0>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a1d      	ldr	r2, [pc, #116]	@ (8006de4 <TIM_OC2_SetConfig+0x120>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d007      	beq.n	8006d84 <TIM_OC2_SetConfig+0xc0>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a1c      	ldr	r2, [pc, #112]	@ (8006de8 <TIM_OC2_SetConfig+0x124>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d003      	beq.n	8006d84 <TIM_OC2_SetConfig+0xc0>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a17      	ldr	r2, [pc, #92]	@ (8006ddc <TIM_OC2_SetConfig+0x118>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d113      	bne.n	8006dac <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	621a      	str	r2, [r3, #32]
}
 8006dc6:	bf00      	nop
 8006dc8:	371c      	adds	r7, #28
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	40012c00 	.word	0x40012c00
 8006dd8:	40013400 	.word	0x40013400
 8006ddc:	40015000 	.word	0x40015000
 8006de0:	40014000 	.word	0x40014000
 8006de4:	40014400 	.word	0x40014400
 8006de8:	40014800 	.word	0x40014800

08006dec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f023 0303 	bic.w	r3, r3, #3
 8006e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	021b      	lsls	r3, r3, #8
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a2b      	ldr	r2, [pc, #172]	@ (8006ef8 <TIM_OC3_SetConfig+0x10c>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d007      	beq.n	8006e5e <TIM_OC3_SetConfig+0x72>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a2a      	ldr	r2, [pc, #168]	@ (8006efc <TIM_OC3_SetConfig+0x110>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d003      	beq.n	8006e5e <TIM_OC3_SetConfig+0x72>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a29      	ldr	r2, [pc, #164]	@ (8006f00 <TIM_OC3_SetConfig+0x114>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d10d      	bne.n	8006e7a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	021b      	lsls	r3, r3, #8
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a1e      	ldr	r2, [pc, #120]	@ (8006ef8 <TIM_OC3_SetConfig+0x10c>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d013      	beq.n	8006eaa <TIM_OC3_SetConfig+0xbe>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a1d      	ldr	r2, [pc, #116]	@ (8006efc <TIM_OC3_SetConfig+0x110>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d00f      	beq.n	8006eaa <TIM_OC3_SetConfig+0xbe>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8006f04 <TIM_OC3_SetConfig+0x118>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d00b      	beq.n	8006eaa <TIM_OC3_SetConfig+0xbe>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a1c      	ldr	r2, [pc, #112]	@ (8006f08 <TIM_OC3_SetConfig+0x11c>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d007      	beq.n	8006eaa <TIM_OC3_SetConfig+0xbe>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8006f0c <TIM_OC3_SetConfig+0x120>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d003      	beq.n	8006eaa <TIM_OC3_SetConfig+0xbe>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a16      	ldr	r2, [pc, #88]	@ (8006f00 <TIM_OC3_SetConfig+0x114>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d113      	bne.n	8006ed2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006eb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	011b      	lsls	r3, r3, #4
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	011b      	lsls	r3, r3, #4
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	621a      	str	r2, [r3, #32]
}
 8006eec:	bf00      	nop
 8006eee:	371c      	adds	r7, #28
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr
 8006ef8:	40012c00 	.word	0x40012c00
 8006efc:	40013400 	.word	0x40013400
 8006f00:	40015000 	.word	0x40015000
 8006f04:	40014000 	.word	0x40014000
 8006f08:	40014400 	.word	0x40014400
 8006f0c:	40014800 	.word	0x40014800

08006f10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b087      	sub	sp, #28
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a1b      	ldr	r3, [r3, #32]
 8006f24:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	021b      	lsls	r3, r3, #8
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	031b      	lsls	r3, r3, #12
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a2c      	ldr	r2, [pc, #176]	@ (8007020 <TIM_OC4_SetConfig+0x110>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d007      	beq.n	8006f84 <TIM_OC4_SetConfig+0x74>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a2b      	ldr	r2, [pc, #172]	@ (8007024 <TIM_OC4_SetConfig+0x114>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d003      	beq.n	8006f84 <TIM_OC4_SetConfig+0x74>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a2a      	ldr	r2, [pc, #168]	@ (8007028 <TIM_OC4_SetConfig+0x118>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d10d      	bne.n	8006fa0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	031b      	lsls	r3, r3, #12
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8007020 <TIM_OC4_SetConfig+0x110>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d013      	beq.n	8006fd0 <TIM_OC4_SetConfig+0xc0>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a1e      	ldr	r2, [pc, #120]	@ (8007024 <TIM_OC4_SetConfig+0x114>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d00f      	beq.n	8006fd0 <TIM_OC4_SetConfig+0xc0>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a1e      	ldr	r2, [pc, #120]	@ (800702c <TIM_OC4_SetConfig+0x11c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d00b      	beq.n	8006fd0 <TIM_OC4_SetConfig+0xc0>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a1d      	ldr	r2, [pc, #116]	@ (8007030 <TIM_OC4_SetConfig+0x120>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d007      	beq.n	8006fd0 <TIM_OC4_SetConfig+0xc0>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8007034 <TIM_OC4_SetConfig+0x124>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d003      	beq.n	8006fd0 <TIM_OC4_SetConfig+0xc0>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a17      	ldr	r2, [pc, #92]	@ (8007028 <TIM_OC4_SetConfig+0x118>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d113      	bne.n	8006ff8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fd6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006fde:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	019b      	lsls	r3, r3, #6
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	019b      	lsls	r3, r3, #6
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	685a      	ldr	r2, [r3, #4]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	621a      	str	r2, [r3, #32]
}
 8007012:	bf00      	nop
 8007014:	371c      	adds	r7, #28
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	40012c00 	.word	0x40012c00
 8007024:	40013400 	.word	0x40013400
 8007028:	40015000 	.word	0x40015000
 800702c:	40014000 	.word	0x40014000
 8007030:	40014400 	.word	0x40014400
 8007034:	40014800 	.word	0x40014800

08007038 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007038:	b480      	push	{r7}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a1b      	ldr	r3, [r3, #32]
 800704c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800705e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800706a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	4313      	orrs	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800707c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	041b      	lsls	r3, r3, #16
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	4313      	orrs	r3, r2
 8007088:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a19      	ldr	r2, [pc, #100]	@ (80070f4 <TIM_OC5_SetConfig+0xbc>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d013      	beq.n	80070ba <TIM_OC5_SetConfig+0x82>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a18      	ldr	r2, [pc, #96]	@ (80070f8 <TIM_OC5_SetConfig+0xc0>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d00f      	beq.n	80070ba <TIM_OC5_SetConfig+0x82>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a17      	ldr	r2, [pc, #92]	@ (80070fc <TIM_OC5_SetConfig+0xc4>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d00b      	beq.n	80070ba <TIM_OC5_SetConfig+0x82>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a16      	ldr	r2, [pc, #88]	@ (8007100 <TIM_OC5_SetConfig+0xc8>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d007      	beq.n	80070ba <TIM_OC5_SetConfig+0x82>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a15      	ldr	r2, [pc, #84]	@ (8007104 <TIM_OC5_SetConfig+0xcc>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d003      	beq.n	80070ba <TIM_OC5_SetConfig+0x82>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a14      	ldr	r2, [pc, #80]	@ (8007108 <TIM_OC5_SetConfig+0xd0>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d109      	bne.n	80070ce <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	021b      	lsls	r3, r3, #8
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	697a      	ldr	r2, [r7, #20]
 80070d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	621a      	str	r2, [r3, #32]
}
 80070e8:	bf00      	nop
 80070ea:	371c      	adds	r7, #28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	40012c00 	.word	0x40012c00
 80070f8:	40013400 	.word	0x40013400
 80070fc:	40014000 	.word	0x40014000
 8007100:	40014400 	.word	0x40014400
 8007104:	40014800 	.word	0x40014800
 8007108:	40015000 	.word	0x40015000

0800710c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800710c:	b480      	push	{r7}
 800710e:	b087      	sub	sp, #28
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a1b      	ldr	r3, [r3, #32]
 8007120:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800713a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800713e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	021b      	lsls	r3, r3, #8
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	4313      	orrs	r3, r2
 800714a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007152:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	051b      	lsls	r3, r3, #20
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	4313      	orrs	r3, r2
 800715e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a1a      	ldr	r2, [pc, #104]	@ (80071cc <TIM_OC6_SetConfig+0xc0>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d013      	beq.n	8007190 <TIM_OC6_SetConfig+0x84>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a19      	ldr	r2, [pc, #100]	@ (80071d0 <TIM_OC6_SetConfig+0xc4>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d00f      	beq.n	8007190 <TIM_OC6_SetConfig+0x84>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a18      	ldr	r2, [pc, #96]	@ (80071d4 <TIM_OC6_SetConfig+0xc8>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d00b      	beq.n	8007190 <TIM_OC6_SetConfig+0x84>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a17      	ldr	r2, [pc, #92]	@ (80071d8 <TIM_OC6_SetConfig+0xcc>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d007      	beq.n	8007190 <TIM_OC6_SetConfig+0x84>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a16      	ldr	r2, [pc, #88]	@ (80071dc <TIM_OC6_SetConfig+0xd0>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d003      	beq.n	8007190 <TIM_OC6_SetConfig+0x84>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a15      	ldr	r2, [pc, #84]	@ (80071e0 <TIM_OC6_SetConfig+0xd4>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d109      	bne.n	80071a4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007196:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	029b      	lsls	r3, r3, #10
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	621a      	str	r2, [r3, #32]
}
 80071be:	bf00      	nop
 80071c0:	371c      	adds	r7, #28
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	40012c00 	.word	0x40012c00
 80071d0:	40013400 	.word	0x40013400
 80071d4:	40014000 	.word	0x40014000
 80071d8:	40014400 	.word	0x40014400
 80071dc:	40014800 	.word	0x40014800
 80071e0:	40015000 	.word	0x40015000

080071e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b087      	sub	sp, #28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
 80071f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6a1b      	ldr	r3, [r3, #32]
 80071fc:	f023 0201 	bic.w	r2, r3, #1
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	4a28      	ldr	r2, [pc, #160]	@ (80072b0 <TIM_TI1_SetConfig+0xcc>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d01b      	beq.n	800724a <TIM_TI1_SetConfig+0x66>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007218:	d017      	beq.n	800724a <TIM_TI1_SetConfig+0x66>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	4a25      	ldr	r2, [pc, #148]	@ (80072b4 <TIM_TI1_SetConfig+0xd0>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d013      	beq.n	800724a <TIM_TI1_SetConfig+0x66>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	4a24      	ldr	r2, [pc, #144]	@ (80072b8 <TIM_TI1_SetConfig+0xd4>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d00f      	beq.n	800724a <TIM_TI1_SetConfig+0x66>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	4a23      	ldr	r2, [pc, #140]	@ (80072bc <TIM_TI1_SetConfig+0xd8>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d00b      	beq.n	800724a <TIM_TI1_SetConfig+0x66>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	4a22      	ldr	r2, [pc, #136]	@ (80072c0 <TIM_TI1_SetConfig+0xdc>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d007      	beq.n	800724a <TIM_TI1_SetConfig+0x66>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	4a21      	ldr	r2, [pc, #132]	@ (80072c4 <TIM_TI1_SetConfig+0xe0>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d003      	beq.n	800724a <TIM_TI1_SetConfig+0x66>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	4a20      	ldr	r2, [pc, #128]	@ (80072c8 <TIM_TI1_SetConfig+0xe4>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d101      	bne.n	800724e <TIM_TI1_SetConfig+0x6a>
 800724a:	2301      	movs	r3, #1
 800724c:	e000      	b.n	8007250 <TIM_TI1_SetConfig+0x6c>
 800724e:	2300      	movs	r3, #0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d008      	beq.n	8007266 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f023 0303 	bic.w	r3, r3, #3
 800725a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4313      	orrs	r3, r2
 8007262:	617b      	str	r3, [r7, #20]
 8007264:	e003      	b.n	800726e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f043 0301 	orr.w	r3, r3, #1
 800726c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007274:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	011b      	lsls	r3, r3, #4
 800727a:	b2db      	uxtb	r3, r3
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	4313      	orrs	r3, r2
 8007280:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	f023 030a 	bic.w	r3, r3, #10
 8007288:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	f003 030a 	and.w	r3, r3, #10
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	4313      	orrs	r3, r2
 8007294:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	621a      	str	r2, [r3, #32]
}
 80072a2:	bf00      	nop
 80072a4:	371c      	adds	r7, #28
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	40012c00 	.word	0x40012c00
 80072b4:	40000400 	.word	0x40000400
 80072b8:	40000800 	.word	0x40000800
 80072bc:	40000c00 	.word	0x40000c00
 80072c0:	40013400 	.word	0x40013400
 80072c4:	40014000 	.word	0x40014000
 80072c8:	40015000 	.word	0x40015000

080072cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6a1b      	ldr	r3, [r3, #32]
 80072dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	f023 0201 	bic.w	r2, r3, #1
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	011b      	lsls	r3, r3, #4
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	4313      	orrs	r3, r2
 8007300:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f023 030a 	bic.w	r3, r3, #10
 8007308:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	4313      	orrs	r3, r2
 8007310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	697a      	ldr	r2, [r7, #20]
 800731c:	621a      	str	r2, [r3, #32]
}
 800731e:	bf00      	nop
 8007320:	371c      	adds	r7, #28
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800732a:	b480      	push	{r7}
 800732c:	b087      	sub	sp, #28
 800732e:	af00      	add	r7, sp, #0
 8007330:	60f8      	str	r0, [r7, #12]
 8007332:	60b9      	str	r1, [r7, #8]
 8007334:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6a1b      	ldr	r3, [r3, #32]
 8007340:	f023 0210 	bic.w	r2, r3, #16
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007354:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	031b      	lsls	r3, r3, #12
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	4313      	orrs	r3, r2
 800735e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007366:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	011b      	lsls	r3, r3, #4
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	4313      	orrs	r3, r2
 8007370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	621a      	str	r2, [r3, #32]
}
 800737e:	bf00      	nop
 8007380:	371c      	adds	r7, #28
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800738a:	b480      	push	{r7}
 800738c:	b085      	sub	sp, #20
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80073a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	f043 0307 	orr.w	r3, r3, #7
 80073b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	609a      	str	r2, [r3, #8]
}
 80073b8:	bf00      	nop
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b087      	sub	sp, #28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
 80073d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	021a      	lsls	r2, r3, #8
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	431a      	orrs	r2, r3
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	609a      	str	r2, [r3, #8]
}
 80073f8:	bf00      	nop
 80073fa:	371c      	adds	r7, #28
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007404:	b480      	push	{r7}
 8007406:	b087      	sub	sp, #28
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	f003 031f 	and.w	r3, r3, #31
 8007416:	2201      	movs	r2, #1
 8007418:	fa02 f303 	lsl.w	r3, r2, r3
 800741c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6a1a      	ldr	r2, [r3, #32]
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	43db      	mvns	r3, r3
 8007426:	401a      	ands	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6a1a      	ldr	r2, [r3, #32]
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	f003 031f 	and.w	r3, r3, #31
 8007436:	6879      	ldr	r1, [r7, #4]
 8007438:	fa01 f303 	lsl.w	r3, r1, r3
 800743c:	431a      	orrs	r2, r3
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	621a      	str	r2, [r3, #32]
}
 8007442:	bf00      	nop
 8007444:	371c      	adds	r7, #28
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr

0800744e <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b08a      	sub	sp, #40	@ 0x28
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e0a0      	b.n	80075a4 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d106      	bne.n	800747c <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7fa f854 	bl	8001524 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2202      	movs	r2, #2
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3304      	adds	r3, #4
 800748c:	4619      	mov	r1, r3
 800748e:	4610      	mov	r0, r2
 8007490:	f7ff faca 	bl	8006a28 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6818      	ldr	r0, [r3, #0]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	6819      	ldr	r1, [r3, #0]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	2203      	movs	r2, #3
 80074a2:	f7ff fe9f 	bl	80071e4 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	699a      	ldr	r2, [r3, #24]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f022 020c 	bic.w	r2, r2, #12
 80074b4:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6999      	ldr	r1, [r3, #24]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	430a      	orrs	r2, r1
 80074c6:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	685a      	ldr	r2, [r3, #4]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80074d6:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6812      	ldr	r2, [r2, #0]
 80074e2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80074e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ea:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	689a      	ldr	r2, [r3, #8]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074fa:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	6812      	ldr	r2, [r2, #0]
 8007506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800750a:	f023 0307 	bic.w	r3, r3, #7
 800750e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	689a      	ldr	r2, [r3, #8]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f042 0204 	orr.w	r2, r2, #4
 800751e:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8007520:	2300      	movs	r3, #0
 8007522:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007524:	2300      	movs	r3, #0
 8007526:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8007528:	2370      	movs	r3, #112	@ 0x70
 800752a:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800752c:	2300      	movs	r3, #0
 800752e:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007530:	2300      	movs	r3, #0
 8007532:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007534:	2300      	movs	r3, #0
 8007536:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f107 020c 	add.w	r2, r7, #12
 8007546:	4611      	mov	r1, r2
 8007548:	4618      	mov	r0, r3
 800754a:	f7ff fbbb 	bl	8006cc4 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	6812      	ldr	r2, [r2, #0]
 8007558:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800755c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007560:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8007570:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3728      	adds	r7, #40	@ 0x28
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d109      	bne.n	80075d0 <HAL_TIMEx_PWMN_Start+0x24>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	bf14      	ite	ne
 80075c8:	2301      	movne	r3, #1
 80075ca:	2300      	moveq	r3, #0
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	e022      	b.n	8007616 <HAL_TIMEx_PWMN_Start+0x6a>
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	2b04      	cmp	r3, #4
 80075d4:	d109      	bne.n	80075ea <HAL_TIMEx_PWMN_Start+0x3e>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b01      	cmp	r3, #1
 80075e0:	bf14      	ite	ne
 80075e2:	2301      	movne	r3, #1
 80075e4:	2300      	moveq	r3, #0
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	e015      	b.n	8007616 <HAL_TIMEx_PWMN_Start+0x6a>
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	2b08      	cmp	r3, #8
 80075ee:	d109      	bne.n	8007604 <HAL_TIMEx_PWMN_Start+0x58>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	bf14      	ite	ne
 80075fc:	2301      	movne	r3, #1
 80075fe:	2300      	moveq	r3, #0
 8007600:	b2db      	uxtb	r3, r3
 8007602:	e008      	b.n	8007616 <HAL_TIMEx_PWMN_Start+0x6a>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800760a:	b2db      	uxtb	r3, r3
 800760c:	2b01      	cmp	r3, #1
 800760e:	bf14      	ite	ne
 8007610:	2301      	movne	r3, #1
 8007612:	2300      	moveq	r3, #0
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e073      	b.n	8007706 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d104      	bne.n	800762e <HAL_TIMEx_PWMN_Start+0x82>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2202      	movs	r2, #2
 8007628:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800762c:	e013      	b.n	8007656 <HAL_TIMEx_PWMN_Start+0xaa>
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2b04      	cmp	r3, #4
 8007632:	d104      	bne.n	800763e <HAL_TIMEx_PWMN_Start+0x92>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2202      	movs	r2, #2
 8007638:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800763c:	e00b      	b.n	8007656 <HAL_TIMEx_PWMN_Start+0xaa>
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b08      	cmp	r3, #8
 8007642:	d104      	bne.n	800764e <HAL_TIMEx_PWMN_Start+0xa2>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800764c:	e003      	b.n	8007656 <HAL_TIMEx_PWMN_Start+0xaa>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2202      	movs	r2, #2
 8007652:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2204      	movs	r2, #4
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	4618      	mov	r0, r3
 8007660:	f000 fa34 	bl	8007acc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007672:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a25      	ldr	r2, [pc, #148]	@ (8007710 <HAL_TIMEx_PWMN_Start+0x164>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d022      	beq.n	80076c4 <HAL_TIMEx_PWMN_Start+0x118>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007686:	d01d      	beq.n	80076c4 <HAL_TIMEx_PWMN_Start+0x118>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a21      	ldr	r2, [pc, #132]	@ (8007714 <HAL_TIMEx_PWMN_Start+0x168>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d018      	beq.n	80076c4 <HAL_TIMEx_PWMN_Start+0x118>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a20      	ldr	r2, [pc, #128]	@ (8007718 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d013      	beq.n	80076c4 <HAL_TIMEx_PWMN_Start+0x118>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a1e      	ldr	r2, [pc, #120]	@ (800771c <HAL_TIMEx_PWMN_Start+0x170>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d00e      	beq.n	80076c4 <HAL_TIMEx_PWMN_Start+0x118>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a1d      	ldr	r2, [pc, #116]	@ (8007720 <HAL_TIMEx_PWMN_Start+0x174>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d009      	beq.n	80076c4 <HAL_TIMEx_PWMN_Start+0x118>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a1b      	ldr	r2, [pc, #108]	@ (8007724 <HAL_TIMEx_PWMN_Start+0x178>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d004      	beq.n	80076c4 <HAL_TIMEx_PWMN_Start+0x118>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a1a      	ldr	r2, [pc, #104]	@ (8007728 <HAL_TIMEx_PWMN_Start+0x17c>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d115      	bne.n	80076f0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689a      	ldr	r2, [r3, #8]
 80076ca:	4b18      	ldr	r3, [pc, #96]	@ (800772c <HAL_TIMEx_PWMN_Start+0x180>)
 80076cc:	4013      	ands	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2b06      	cmp	r3, #6
 80076d4:	d015      	beq.n	8007702 <HAL_TIMEx_PWMN_Start+0x156>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076dc:	d011      	beq.n	8007702 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f042 0201 	orr.w	r2, r2, #1
 80076ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ee:	e008      	b.n	8007702 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f042 0201 	orr.w	r2, r2, #1
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	e000      	b.n	8007704 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007702:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	40012c00 	.word	0x40012c00
 8007714:	40000400 	.word	0x40000400
 8007718:	40000800 	.word	0x40000800
 800771c:	40000c00 	.word	0x40000c00
 8007720:	40013400 	.word	0x40013400
 8007724:	40014000 	.word	0x40014000
 8007728:	40015000 	.word	0x40015000
 800772c:	00010007 	.word	0x00010007

08007730 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2200      	movs	r2, #0
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	4618      	mov	r0, r3
 8007744:	f000 f9c2 	bl	8007acc <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6a1a      	ldr	r2, [r3, #32]
 800774e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007752:	4013      	ands	r3, r2
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10f      	bne.n	8007778 <HAL_TIMEx_PWMN_Stop+0x48>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6a1a      	ldr	r2, [r3, #32]
 800775e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007762:	4013      	ands	r3, r2
 8007764:	2b00      	cmp	r3, #0
 8007766:	d107      	bne.n	8007778 <HAL_TIMEx_PWMN_Stop+0x48>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007776:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6a1a      	ldr	r2, [r3, #32]
 800777e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007782:	4013      	ands	r3, r2
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10f      	bne.n	80077a8 <HAL_TIMEx_PWMN_Stop+0x78>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6a1a      	ldr	r2, [r3, #32]
 800778e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007792:	4013      	ands	r3, r2
 8007794:	2b00      	cmp	r3, #0
 8007796:	d107      	bne.n	80077a8 <HAL_TIMEx_PWMN_Stop+0x78>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f022 0201 	bic.w	r2, r2, #1
 80077a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d104      	bne.n	80077b8 <HAL_TIMEx_PWMN_Stop+0x88>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077b6:	e013      	b.n	80077e0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	2b04      	cmp	r3, #4
 80077bc:	d104      	bne.n	80077c8 <HAL_TIMEx_PWMN_Stop+0x98>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077c6:	e00b      	b.n	80077e0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	2b08      	cmp	r3, #8
 80077cc:	d104      	bne.n	80077d8 <HAL_TIMEx_PWMN_Stop+0xa8>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2201      	movs	r2, #1
 80077d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80077d6:	e003      	b.n	80077e0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
	...

080077ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d101      	bne.n	8007804 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007800:	2302      	movs	r3, #2
 8007802:	e074      	b.n	80078ee <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a34      	ldr	r2, [pc, #208]	@ (80078fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d009      	beq.n	8007842 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a33      	ldr	r2, [pc, #204]	@ (8007900 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d004      	beq.n	8007842 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a31      	ldr	r2, [pc, #196]	@ (8007904 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d108      	bne.n	8007854 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007848:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	4313      	orrs	r3, r2
 8007852:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800785a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800785e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	4313      	orrs	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a21      	ldr	r2, [pc, #132]	@ (80078fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d022      	beq.n	80078c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007884:	d01d      	beq.n	80078c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a1f      	ldr	r2, [pc, #124]	@ (8007908 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d018      	beq.n	80078c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a1d      	ldr	r2, [pc, #116]	@ (800790c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d013      	beq.n	80078c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a1c      	ldr	r2, [pc, #112]	@ (8007910 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d00e      	beq.n	80078c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a15      	ldr	r2, [pc, #84]	@ (8007900 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d009      	beq.n	80078c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a18      	ldr	r2, [pc, #96]	@ (8007914 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d004      	beq.n	80078c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a11      	ldr	r2, [pc, #68]	@ (8007904 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d10c      	bne.n	80078dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	40012c00 	.word	0x40012c00
 8007900:	40013400 	.word	0x40013400
 8007904:	40015000 	.word	0x40015000
 8007908:	40000400 	.word	0x40000400
 800790c:	40000800 	.word	0x40000800
 8007910:	40000c00 	.word	0x40000c00
 8007914:	40014000 	.word	0x40014000

08007918 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007922:	2300      	movs	r3, #0
 8007924:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800792c:	2b01      	cmp	r3, #1
 800792e:	d101      	bne.n	8007934 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007930:	2302      	movs	r3, #2
 8007932:	e078      	b.n	8007a26 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	4313      	orrs	r3, r2
 8007948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	4313      	orrs	r3, r2
 8007956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	4313      	orrs	r3, r2
 8007964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4313      	orrs	r3, r2
 8007972:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	4313      	orrs	r3, r2
 8007980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	695b      	ldr	r3, [r3, #20]
 800798c:	4313      	orrs	r3, r2
 800798e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800799a:	4313      	orrs	r3, r2
 800799c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	041b      	lsls	r3, r3, #16
 80079aa:	4313      	orrs	r3, r2
 80079ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	69db      	ldr	r3, [r3, #28]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a1c      	ldr	r2, [pc, #112]	@ (8007a34 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d009      	beq.n	80079da <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a1b      	ldr	r2, [pc, #108]	@ (8007a38 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d004      	beq.n	80079da <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a19      	ldr	r2, [pc, #100]	@ (8007a3c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d11c      	bne.n	8007a14 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e4:	051b      	lsls	r3, r3, #20
 80079e6:	4313      	orrs	r3, r2
 80079e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	6a1b      	ldr	r3, [r3, #32]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a02:	4313      	orrs	r3, r2
 8007a04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a10:	4313      	orrs	r3, r2
 8007a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	40012c00 	.word	0x40012c00
 8007a38:	40013400 	.word	0x40013400
 8007a3c:	40015000 	.word	0x40015000

08007a40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b087      	sub	sp, #28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	f003 030f 	and.w	r3, r3, #15
 8007ade:	2204      	movs	r2, #4
 8007ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6a1a      	ldr	r2, [r3, #32]
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	43db      	mvns	r3, r3
 8007aee:	401a      	ands	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6a1a      	ldr	r2, [r3, #32]
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	f003 030f 	and.w	r3, r3, #15
 8007afe:	6879      	ldr	r1, [r7, #4]
 8007b00:	fa01 f303 	lsl.w	r3, r1, r3
 8007b04:	431a      	orrs	r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	621a      	str	r2, [r3, #32]
}
 8007b0a:	bf00      	nop
 8007b0c:	371c      	adds	r7, #28
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b082      	sub	sp, #8
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e042      	b.n	8007bae <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d106      	bne.n	8007b40 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7f9 fe54 	bl	80017e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2224      	movs	r2, #36	@ 0x24
 8007b44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f022 0201 	bic.w	r2, r2, #1
 8007b56:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 ff61 	bl	8008a28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fc62 	bl	8008430 <UART_SetConfig>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d101      	bne.n	8007b76 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e01b      	b.n	8007bae <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b84:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	689a      	ldr	r2, [r3, #8]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b94:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f042 0201 	orr.w	r2, r2, #1
 8007ba4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 ffe0 	bl	8008b6c <UART_CheckIdleState>
 8007bac:	4603      	mov	r3, r0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b08a      	sub	sp, #40	@ 0x28
 8007bba:	af02      	add	r7, sp, #8
 8007bbc:	60f8      	str	r0, [r7, #12]
 8007bbe:	60b9      	str	r1, [r7, #8]
 8007bc0:	603b      	str	r3, [r7, #0]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bcc:	2b20      	cmp	r3, #32
 8007bce:	d17b      	bne.n	8007cc8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d002      	beq.n	8007bdc <HAL_UART_Transmit+0x26>
 8007bd6:	88fb      	ldrh	r3, [r7, #6]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d101      	bne.n	8007be0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e074      	b.n	8007cca <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2221      	movs	r2, #33	@ 0x21
 8007bec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bf0:	f7fa fa96 	bl	8002120 <HAL_GetTick>
 8007bf4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	88fa      	ldrh	r2, [r7, #6]
 8007bfa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	88fa      	ldrh	r2, [r7, #6]
 8007c02:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c0e:	d108      	bne.n	8007c22 <HAL_UART_Transmit+0x6c>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d104      	bne.n	8007c22 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	61bb      	str	r3, [r7, #24]
 8007c20:	e003      	b.n	8007c2a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c26:	2300      	movs	r3, #0
 8007c28:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007c2a:	e030      	b.n	8007c8e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	2200      	movs	r2, #0
 8007c34:	2180      	movs	r1, #128	@ 0x80
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f001 f842 	bl	8008cc0 <UART_WaitOnFlagUntilTimeout>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d005      	beq.n	8007c4e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2220      	movs	r2, #32
 8007c46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e03d      	b.n	8007cca <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10b      	bne.n	8007c6c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	881b      	ldrh	r3, [r3, #0]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c62:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	3302      	adds	r3, #2
 8007c68:	61bb      	str	r3, [r7, #24]
 8007c6a:	e007      	b.n	8007c7c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	781a      	ldrb	r2, [r3, #0]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	3b01      	subs	r3, #1
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1c8      	bne.n	8007c2c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2140      	movs	r1, #64	@ 0x40
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f001 f80b 	bl	8008cc0 <UART_WaitOnFlagUntilTimeout>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d005      	beq.n	8007cbc <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e006      	b.n	8007cca <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2220      	movs	r2, #32
 8007cc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	e000      	b.n	8007cca <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007cc8:	2302      	movs	r3, #2
  }
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3720      	adds	r7, #32
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
	...

08007cd4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b08a      	sub	sp, #40	@ 0x28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ce8:	2b20      	cmp	r3, #32
 8007cea:	d137      	bne.n	8007d5c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <HAL_UART_Receive_IT+0x24>
 8007cf2:	88fb      	ldrh	r3, [r7, #6]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d101      	bne.n	8007cfc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e030      	b.n	8007d5e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a18      	ldr	r2, [pc, #96]	@ (8007d68 <HAL_UART_Receive_IT+0x94>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d01f      	beq.n	8007d4c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d018      	beq.n	8007d4c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	e853 3f00 	ldrex	r3, [r3]
 8007d26:	613b      	str	r3, [r7, #16]
   return(result);
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007d2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	461a      	mov	r2, r3
 8007d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d38:	623b      	str	r3, [r7, #32]
 8007d3a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3c:	69f9      	ldr	r1, [r7, #28]
 8007d3e:	6a3a      	ldr	r2, [r7, #32]
 8007d40:	e841 2300 	strex	r3, r2, [r1]
 8007d44:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1e6      	bne.n	8007d1a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007d4c:	88fb      	ldrh	r3, [r7, #6]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	68b9      	ldr	r1, [r7, #8]
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f001 f822 	bl	8008d9c <UART_Start_Receive_IT>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	e000      	b.n	8007d5e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d5c:	2302      	movs	r3, #2
  }
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3728      	adds	r7, #40	@ 0x28
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	40008000 	.word	0x40008000

08007d6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b0ba      	sub	sp, #232	@ 0xe8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	69db      	ldr	r3, [r3, #28]
 8007d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007d92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007d96:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007da0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d11b      	bne.n	8007de0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dac:	f003 0320 	and.w	r3, r3, #32
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d015      	beq.n	8007de0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007db8:	f003 0320 	and.w	r3, r3, #32
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d105      	bne.n	8007dcc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d009      	beq.n	8007de0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 8300 	beq.w	80083d6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	4798      	blx	r3
      }
      return;
 8007dde:	e2fa      	b.n	80083d6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007de0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 8123 	beq.w	8008030 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007dea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007dee:	4b8d      	ldr	r3, [pc, #564]	@ (8008024 <HAL_UART_IRQHandler+0x2b8>)
 8007df0:	4013      	ands	r3, r2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d106      	bne.n	8007e04 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007df6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007dfa:	4b8b      	ldr	r3, [pc, #556]	@ (8008028 <HAL_UART_IRQHandler+0x2bc>)
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f000 8116 	beq.w	8008030 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d011      	beq.n	8007e34 <HAL_UART_IRQHandler+0xc8>
 8007e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00b      	beq.n	8007e34 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2201      	movs	r2, #1
 8007e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e2a:	f043 0201 	orr.w	r2, r3, #1
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e38:	f003 0302 	and.w	r3, r3, #2
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d011      	beq.n	8007e64 <HAL_UART_IRQHandler+0xf8>
 8007e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00b      	beq.n	8007e64 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2202      	movs	r2, #2
 8007e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e5a:	f043 0204 	orr.w	r2, r3, #4
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e68:	f003 0304 	and.w	r3, r3, #4
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d011      	beq.n	8007e94 <HAL_UART_IRQHandler+0x128>
 8007e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00b      	beq.n	8007e94 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2204      	movs	r2, #4
 8007e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e8a:	f043 0202 	orr.w	r2, r3, #2
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e98:	f003 0308 	and.w	r3, r3, #8
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d017      	beq.n	8007ed0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ea4:	f003 0320 	and.w	r3, r3, #32
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d105      	bne.n	8007eb8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007eac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007eb0:	4b5c      	ldr	r3, [pc, #368]	@ (8008024 <HAL_UART_IRQHandler+0x2b8>)
 8007eb2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00b      	beq.n	8007ed0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2208      	movs	r2, #8
 8007ebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ec6:	f043 0208 	orr.w	r2, r3, #8
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ed4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d012      	beq.n	8007f02 <HAL_UART_IRQHandler+0x196>
 8007edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ee0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00c      	beq.n	8007f02 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ef8:	f043 0220 	orr.w	r2, r3, #32
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 8266 	beq.w	80083da <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f12:	f003 0320 	and.w	r3, r3, #32
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d013      	beq.n	8007f42 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f1e:	f003 0320 	and.w	r3, r3, #32
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d105      	bne.n	8007f32 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d007      	beq.n	8007f42 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d003      	beq.n	8007f42 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f48:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f56:	2b40      	cmp	r3, #64	@ 0x40
 8007f58:	d005      	beq.n	8007f66 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f5e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d054      	beq.n	8008010 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f001 f83a 	bl	8008fe0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f76:	2b40      	cmp	r3, #64	@ 0x40
 8007f78:	d146      	bne.n	8008008 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	3308      	adds	r3, #8
 8007f80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f88:	e853 3f00 	ldrex	r3, [r3]
 8007f8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007f90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3308      	adds	r3, #8
 8007fa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007fa6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007faa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007fb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007fb6:	e841 2300 	strex	r3, r2, [r1]
 8007fba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007fbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1d9      	bne.n	8007f7a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d017      	beq.n	8008000 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fd6:	4a15      	ldr	r2, [pc, #84]	@ (800802c <HAL_UART_IRQHandler+0x2c0>)
 8007fd8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7fc fa31 	bl	8004448 <HAL_DMA_Abort_IT>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d019      	beq.n	8008020 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007ffa:	4610      	mov	r0, r2
 8007ffc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ffe:	e00f      	b.n	8008020 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f9ff 	bl	8008404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008006:	e00b      	b.n	8008020 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f9fb 	bl	8008404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800800e:	e007      	b.n	8008020 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 f9f7 	bl	8008404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800801e:	e1dc      	b.n	80083da <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008020:	bf00      	nop
    return;
 8008022:	e1da      	b.n	80083da <HAL_UART_IRQHandler+0x66e>
 8008024:	10000001 	.word	0x10000001
 8008028:	04000120 	.word	0x04000120
 800802c:	080090ad 	.word	0x080090ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008034:	2b01      	cmp	r3, #1
 8008036:	f040 8170 	bne.w	800831a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800803a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800803e:	f003 0310 	and.w	r3, r3, #16
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 8169 	beq.w	800831a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800804c:	f003 0310 	and.w	r3, r3, #16
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 8162 	beq.w	800831a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2210      	movs	r2, #16
 800805c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008068:	2b40      	cmp	r3, #64	@ 0x40
 800806a:	f040 80d8 	bne.w	800821e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800807c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 80af 	beq.w	80081e4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800808c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008090:	429a      	cmp	r2, r3
 8008092:	f080 80a7 	bcs.w	80081e4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800809c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 0320 	and.w	r3, r3, #32
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f040 8087 	bne.w	80081c2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80080c0:	e853 3f00 	ldrex	r3, [r3]
 80080c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80080c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80080cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	461a      	mov	r2, r3
 80080da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80080de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80080e2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80080ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80080ee:	e841 2300 	strex	r3, r2, [r1]
 80080f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80080f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1da      	bne.n	80080b4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3308      	adds	r3, #8
 8008104:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008106:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008108:	e853 3f00 	ldrex	r3, [r3]
 800810c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800810e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008110:	f023 0301 	bic.w	r3, r3, #1
 8008114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	3308      	adds	r3, #8
 800811e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008122:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008126:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008128:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800812a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800812e:	e841 2300 	strex	r3, r2, [r1]
 8008132:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008134:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1e1      	bne.n	80080fe <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	3308      	adds	r3, #8
 8008140:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008142:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008144:	e853 3f00 	ldrex	r3, [r3]
 8008148:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800814a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800814c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008150:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	3308      	adds	r3, #8
 800815a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800815e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008160:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008162:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008164:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008166:	e841 2300 	strex	r3, r2, [r1]
 800816a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800816c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1e3      	bne.n	800813a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2220      	movs	r2, #32
 8008176:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008188:	e853 3f00 	ldrex	r3, [r3]
 800818c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800818e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008190:	f023 0310 	bic.w	r3, r3, #16
 8008194:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	461a      	mov	r2, r3
 800819e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80081a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80081a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80081a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80081aa:	e841 2300 	strex	r3, r2, [r1]
 80081ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80081b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1e4      	bne.n	8008180 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081bc:	4618      	mov	r0, r3
 80081be:	f7fc f8ea 	bl	8004396 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2202      	movs	r2, #2
 80081c6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	b29b      	uxth	r3, r3
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f91b 	bl	8008418 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80081e2:	e0fc      	b.n	80083de <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80081ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80081ee:	429a      	cmp	r2, r3
 80081f0:	f040 80f5 	bne.w	80083de <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 0320 	and.w	r3, r3, #32
 8008202:	2b20      	cmp	r3, #32
 8008204:	f040 80eb 	bne.w	80083de <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2202      	movs	r2, #2
 800820c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008214:	4619      	mov	r1, r3
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f8fe 	bl	8008418 <HAL_UARTEx_RxEventCallback>
      return;
 800821c:	e0df      	b.n	80083de <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800822a:	b29b      	uxth	r3, r3
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008238:	b29b      	uxth	r3, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	f000 80d1 	beq.w	80083e2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8008240:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008244:	2b00      	cmp	r3, #0
 8008246:	f000 80cc 	beq.w	80083e2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008252:	e853 3f00 	ldrex	r3, [r3]
 8008256:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800825a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800825e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	461a      	mov	r2, r3
 8008268:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800826c:	647b      	str	r3, [r7, #68]	@ 0x44
 800826e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008270:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008272:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008274:	e841 2300 	strex	r3, r2, [r1]
 8008278:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800827a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1e4      	bne.n	800824a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	3308      	adds	r3, #8
 8008286:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828a:	e853 3f00 	ldrex	r3, [r3]
 800828e:	623b      	str	r3, [r7, #32]
   return(result);
 8008290:	6a3b      	ldr	r3, [r7, #32]
 8008292:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008296:	f023 0301 	bic.w	r3, r3, #1
 800829a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	3308      	adds	r3, #8
 80082a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80082a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80082aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082b0:	e841 2300 	strex	r3, r2, [r1]
 80082b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80082b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1e1      	bne.n	8008280 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2220      	movs	r2, #32
 80082c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	e853 3f00 	ldrex	r3, [r3]
 80082dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f023 0310 	bic.w	r3, r3, #16
 80082e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	461a      	mov	r2, r3
 80082ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80082f2:	61fb      	str	r3, [r7, #28]
 80082f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f6:	69b9      	ldr	r1, [r7, #24]
 80082f8:	69fa      	ldr	r2, [r7, #28]
 80082fa:	e841 2300 	strex	r3, r2, [r1]
 80082fe:	617b      	str	r3, [r7, #20]
   return(result);
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1e4      	bne.n	80082d0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2202      	movs	r2, #2
 800830a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800830c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f880 	bl	8008418 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008318:	e063      	b.n	80083e2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800831a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800831e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00e      	beq.n	8008344 <HAL_UART_IRQHandler+0x5d8>
 8008326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800832a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d008      	beq.n	8008344 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800833a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f001 fc13 	bl	8009b68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008342:	e051      	b.n	80083e8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800834c:	2b00      	cmp	r3, #0
 800834e:	d014      	beq.n	800837a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008358:	2b00      	cmp	r3, #0
 800835a:	d105      	bne.n	8008368 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800835c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008360:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d008      	beq.n	800837a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800836c:	2b00      	cmp	r3, #0
 800836e:	d03a      	beq.n	80083e6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	4798      	blx	r3
    }
    return;
 8008378:	e035      	b.n	80083e6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800837a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800837e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008382:	2b00      	cmp	r3, #0
 8008384:	d009      	beq.n	800839a <HAL_UART_IRQHandler+0x62e>
 8008386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800838a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800838e:	2b00      	cmp	r3, #0
 8008390:	d003      	beq.n	800839a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fe9c 	bl	80090d0 <UART_EndTransmit_IT>
    return;
 8008398:	e026      	b.n	80083e8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800839a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800839e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d009      	beq.n	80083ba <HAL_UART_IRQHandler+0x64e>
 80083a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083aa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f001 fbec 	bl	8009b90 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083b8:	e016      	b.n	80083e8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80083ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d010      	beq.n	80083e8 <HAL_UART_IRQHandler+0x67c>
 80083c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	da0c      	bge.n	80083e8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f001 fbd4 	bl	8009b7c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083d4:	e008      	b.n	80083e8 <HAL_UART_IRQHandler+0x67c>
      return;
 80083d6:	bf00      	nop
 80083d8:	e006      	b.n	80083e8 <HAL_UART_IRQHandler+0x67c>
    return;
 80083da:	bf00      	nop
 80083dc:	e004      	b.n	80083e8 <HAL_UART_IRQHandler+0x67c>
      return;
 80083de:	bf00      	nop
 80083e0:	e002      	b.n	80083e8 <HAL_UART_IRQHandler+0x67c>
      return;
 80083e2:	bf00      	nop
 80083e4:	e000      	b.n	80083e8 <HAL_UART_IRQHandler+0x67c>
    return;
 80083e6:	bf00      	nop
  }
}
 80083e8:	37e8      	adds	r7, #232	@ 0xe8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop

080083f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80083f8:	bf00      	nop
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	460b      	mov	r3, r1
 8008422:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008424:	bf00      	nop
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008434:	b08c      	sub	sp, #48	@ 0x30
 8008436:	af00      	add	r7, sp, #0
 8008438:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	689a      	ldr	r2, [r3, #8]
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	431a      	orrs	r2, r3
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	431a      	orrs	r2, r3
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	69db      	ldr	r3, [r3, #28]
 8008454:	4313      	orrs	r3, r2
 8008456:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	4baa      	ldr	r3, [pc, #680]	@ (8008708 <UART_SetConfig+0x2d8>)
 8008460:	4013      	ands	r3, r2
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	6812      	ldr	r2, [r2, #0]
 8008466:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008468:	430b      	orrs	r3, r1
 800846a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	68da      	ldr	r2, [r3, #12]
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	430a      	orrs	r2, r1
 8008480:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a9f      	ldr	r2, [pc, #636]	@ (800870c <UART_SetConfig+0x2dc>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d004      	beq.n	800849c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008498:	4313      	orrs	r3, r2
 800849a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80084a6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	6812      	ldr	r2, [r2, #0]
 80084ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084b0:	430b      	orrs	r3, r1
 80084b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ba:	f023 010f 	bic.w	r1, r3, #15
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a90      	ldr	r2, [pc, #576]	@ (8008710 <UART_SetConfig+0x2e0>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d125      	bne.n	8008520 <UART_SetConfig+0xf0>
 80084d4:	4b8f      	ldr	r3, [pc, #572]	@ (8008714 <UART_SetConfig+0x2e4>)
 80084d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084da:	f003 0303 	and.w	r3, r3, #3
 80084de:	2b03      	cmp	r3, #3
 80084e0:	d81a      	bhi.n	8008518 <UART_SetConfig+0xe8>
 80084e2:	a201      	add	r2, pc, #4	@ (adr r2, 80084e8 <UART_SetConfig+0xb8>)
 80084e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e8:	080084f9 	.word	0x080084f9
 80084ec:	08008509 	.word	0x08008509
 80084f0:	08008501 	.word	0x08008501
 80084f4:	08008511 	.word	0x08008511
 80084f8:	2301      	movs	r3, #1
 80084fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084fe:	e116      	b.n	800872e <UART_SetConfig+0x2fe>
 8008500:	2302      	movs	r3, #2
 8008502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008506:	e112      	b.n	800872e <UART_SetConfig+0x2fe>
 8008508:	2304      	movs	r3, #4
 800850a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800850e:	e10e      	b.n	800872e <UART_SetConfig+0x2fe>
 8008510:	2308      	movs	r3, #8
 8008512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008516:	e10a      	b.n	800872e <UART_SetConfig+0x2fe>
 8008518:	2310      	movs	r3, #16
 800851a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800851e:	e106      	b.n	800872e <UART_SetConfig+0x2fe>
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a7c      	ldr	r2, [pc, #496]	@ (8008718 <UART_SetConfig+0x2e8>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d138      	bne.n	800859c <UART_SetConfig+0x16c>
 800852a:	4b7a      	ldr	r3, [pc, #488]	@ (8008714 <UART_SetConfig+0x2e4>)
 800852c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008530:	f003 030c 	and.w	r3, r3, #12
 8008534:	2b0c      	cmp	r3, #12
 8008536:	d82d      	bhi.n	8008594 <UART_SetConfig+0x164>
 8008538:	a201      	add	r2, pc, #4	@ (adr r2, 8008540 <UART_SetConfig+0x110>)
 800853a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853e:	bf00      	nop
 8008540:	08008575 	.word	0x08008575
 8008544:	08008595 	.word	0x08008595
 8008548:	08008595 	.word	0x08008595
 800854c:	08008595 	.word	0x08008595
 8008550:	08008585 	.word	0x08008585
 8008554:	08008595 	.word	0x08008595
 8008558:	08008595 	.word	0x08008595
 800855c:	08008595 	.word	0x08008595
 8008560:	0800857d 	.word	0x0800857d
 8008564:	08008595 	.word	0x08008595
 8008568:	08008595 	.word	0x08008595
 800856c:	08008595 	.word	0x08008595
 8008570:	0800858d 	.word	0x0800858d
 8008574:	2300      	movs	r3, #0
 8008576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800857a:	e0d8      	b.n	800872e <UART_SetConfig+0x2fe>
 800857c:	2302      	movs	r3, #2
 800857e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008582:	e0d4      	b.n	800872e <UART_SetConfig+0x2fe>
 8008584:	2304      	movs	r3, #4
 8008586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800858a:	e0d0      	b.n	800872e <UART_SetConfig+0x2fe>
 800858c:	2308      	movs	r3, #8
 800858e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008592:	e0cc      	b.n	800872e <UART_SetConfig+0x2fe>
 8008594:	2310      	movs	r3, #16
 8008596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800859a:	e0c8      	b.n	800872e <UART_SetConfig+0x2fe>
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a5e      	ldr	r2, [pc, #376]	@ (800871c <UART_SetConfig+0x2ec>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d125      	bne.n	80085f2 <UART_SetConfig+0x1c2>
 80085a6:	4b5b      	ldr	r3, [pc, #364]	@ (8008714 <UART_SetConfig+0x2e4>)
 80085a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80085b0:	2b30      	cmp	r3, #48	@ 0x30
 80085b2:	d016      	beq.n	80085e2 <UART_SetConfig+0x1b2>
 80085b4:	2b30      	cmp	r3, #48	@ 0x30
 80085b6:	d818      	bhi.n	80085ea <UART_SetConfig+0x1ba>
 80085b8:	2b20      	cmp	r3, #32
 80085ba:	d00a      	beq.n	80085d2 <UART_SetConfig+0x1a2>
 80085bc:	2b20      	cmp	r3, #32
 80085be:	d814      	bhi.n	80085ea <UART_SetConfig+0x1ba>
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d002      	beq.n	80085ca <UART_SetConfig+0x19a>
 80085c4:	2b10      	cmp	r3, #16
 80085c6:	d008      	beq.n	80085da <UART_SetConfig+0x1aa>
 80085c8:	e00f      	b.n	80085ea <UART_SetConfig+0x1ba>
 80085ca:	2300      	movs	r3, #0
 80085cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085d0:	e0ad      	b.n	800872e <UART_SetConfig+0x2fe>
 80085d2:	2302      	movs	r3, #2
 80085d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085d8:	e0a9      	b.n	800872e <UART_SetConfig+0x2fe>
 80085da:	2304      	movs	r3, #4
 80085dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085e0:	e0a5      	b.n	800872e <UART_SetConfig+0x2fe>
 80085e2:	2308      	movs	r3, #8
 80085e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085e8:	e0a1      	b.n	800872e <UART_SetConfig+0x2fe>
 80085ea:	2310      	movs	r3, #16
 80085ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085f0:	e09d      	b.n	800872e <UART_SetConfig+0x2fe>
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a4a      	ldr	r2, [pc, #296]	@ (8008720 <UART_SetConfig+0x2f0>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d125      	bne.n	8008648 <UART_SetConfig+0x218>
 80085fc:	4b45      	ldr	r3, [pc, #276]	@ (8008714 <UART_SetConfig+0x2e4>)
 80085fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008602:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008606:	2bc0      	cmp	r3, #192	@ 0xc0
 8008608:	d016      	beq.n	8008638 <UART_SetConfig+0x208>
 800860a:	2bc0      	cmp	r3, #192	@ 0xc0
 800860c:	d818      	bhi.n	8008640 <UART_SetConfig+0x210>
 800860e:	2b80      	cmp	r3, #128	@ 0x80
 8008610:	d00a      	beq.n	8008628 <UART_SetConfig+0x1f8>
 8008612:	2b80      	cmp	r3, #128	@ 0x80
 8008614:	d814      	bhi.n	8008640 <UART_SetConfig+0x210>
 8008616:	2b00      	cmp	r3, #0
 8008618:	d002      	beq.n	8008620 <UART_SetConfig+0x1f0>
 800861a:	2b40      	cmp	r3, #64	@ 0x40
 800861c:	d008      	beq.n	8008630 <UART_SetConfig+0x200>
 800861e:	e00f      	b.n	8008640 <UART_SetConfig+0x210>
 8008620:	2300      	movs	r3, #0
 8008622:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008626:	e082      	b.n	800872e <UART_SetConfig+0x2fe>
 8008628:	2302      	movs	r3, #2
 800862a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800862e:	e07e      	b.n	800872e <UART_SetConfig+0x2fe>
 8008630:	2304      	movs	r3, #4
 8008632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008636:	e07a      	b.n	800872e <UART_SetConfig+0x2fe>
 8008638:	2308      	movs	r3, #8
 800863a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800863e:	e076      	b.n	800872e <UART_SetConfig+0x2fe>
 8008640:	2310      	movs	r3, #16
 8008642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008646:	e072      	b.n	800872e <UART_SetConfig+0x2fe>
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a35      	ldr	r2, [pc, #212]	@ (8008724 <UART_SetConfig+0x2f4>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d12a      	bne.n	80086a8 <UART_SetConfig+0x278>
 8008652:	4b30      	ldr	r3, [pc, #192]	@ (8008714 <UART_SetConfig+0x2e4>)
 8008654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008658:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800865c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008660:	d01a      	beq.n	8008698 <UART_SetConfig+0x268>
 8008662:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008666:	d81b      	bhi.n	80086a0 <UART_SetConfig+0x270>
 8008668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800866c:	d00c      	beq.n	8008688 <UART_SetConfig+0x258>
 800866e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008672:	d815      	bhi.n	80086a0 <UART_SetConfig+0x270>
 8008674:	2b00      	cmp	r3, #0
 8008676:	d003      	beq.n	8008680 <UART_SetConfig+0x250>
 8008678:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800867c:	d008      	beq.n	8008690 <UART_SetConfig+0x260>
 800867e:	e00f      	b.n	80086a0 <UART_SetConfig+0x270>
 8008680:	2300      	movs	r3, #0
 8008682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008686:	e052      	b.n	800872e <UART_SetConfig+0x2fe>
 8008688:	2302      	movs	r3, #2
 800868a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800868e:	e04e      	b.n	800872e <UART_SetConfig+0x2fe>
 8008690:	2304      	movs	r3, #4
 8008692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008696:	e04a      	b.n	800872e <UART_SetConfig+0x2fe>
 8008698:	2308      	movs	r3, #8
 800869a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800869e:	e046      	b.n	800872e <UART_SetConfig+0x2fe>
 80086a0:	2310      	movs	r3, #16
 80086a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086a6:	e042      	b.n	800872e <UART_SetConfig+0x2fe>
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a17      	ldr	r2, [pc, #92]	@ (800870c <UART_SetConfig+0x2dc>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d13a      	bne.n	8008728 <UART_SetConfig+0x2f8>
 80086b2:	4b18      	ldr	r3, [pc, #96]	@ (8008714 <UART_SetConfig+0x2e4>)
 80086b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80086bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80086c0:	d01a      	beq.n	80086f8 <UART_SetConfig+0x2c8>
 80086c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80086c6:	d81b      	bhi.n	8008700 <UART_SetConfig+0x2d0>
 80086c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086cc:	d00c      	beq.n	80086e8 <UART_SetConfig+0x2b8>
 80086ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086d2:	d815      	bhi.n	8008700 <UART_SetConfig+0x2d0>
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d003      	beq.n	80086e0 <UART_SetConfig+0x2b0>
 80086d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086dc:	d008      	beq.n	80086f0 <UART_SetConfig+0x2c0>
 80086de:	e00f      	b.n	8008700 <UART_SetConfig+0x2d0>
 80086e0:	2300      	movs	r3, #0
 80086e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086e6:	e022      	b.n	800872e <UART_SetConfig+0x2fe>
 80086e8:	2302      	movs	r3, #2
 80086ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086ee:	e01e      	b.n	800872e <UART_SetConfig+0x2fe>
 80086f0:	2304      	movs	r3, #4
 80086f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086f6:	e01a      	b.n	800872e <UART_SetConfig+0x2fe>
 80086f8:	2308      	movs	r3, #8
 80086fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086fe:	e016      	b.n	800872e <UART_SetConfig+0x2fe>
 8008700:	2310      	movs	r3, #16
 8008702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008706:	e012      	b.n	800872e <UART_SetConfig+0x2fe>
 8008708:	cfff69f3 	.word	0xcfff69f3
 800870c:	40008000 	.word	0x40008000
 8008710:	40013800 	.word	0x40013800
 8008714:	40021000 	.word	0x40021000
 8008718:	40004400 	.word	0x40004400
 800871c:	40004800 	.word	0x40004800
 8008720:	40004c00 	.word	0x40004c00
 8008724:	40005000 	.word	0x40005000
 8008728:	2310      	movs	r3, #16
 800872a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4aae      	ldr	r2, [pc, #696]	@ (80089ec <UART_SetConfig+0x5bc>)
 8008734:	4293      	cmp	r3, r2
 8008736:	f040 8097 	bne.w	8008868 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800873a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800873e:	2b08      	cmp	r3, #8
 8008740:	d823      	bhi.n	800878a <UART_SetConfig+0x35a>
 8008742:	a201      	add	r2, pc, #4	@ (adr r2, 8008748 <UART_SetConfig+0x318>)
 8008744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008748:	0800876d 	.word	0x0800876d
 800874c:	0800878b 	.word	0x0800878b
 8008750:	08008775 	.word	0x08008775
 8008754:	0800878b 	.word	0x0800878b
 8008758:	0800877b 	.word	0x0800877b
 800875c:	0800878b 	.word	0x0800878b
 8008760:	0800878b 	.word	0x0800878b
 8008764:	0800878b 	.word	0x0800878b
 8008768:	08008783 	.word	0x08008783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800876c:	f7fc ff50 	bl	8005610 <HAL_RCC_GetPCLK1Freq>
 8008770:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008772:	e010      	b.n	8008796 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008774:	4b9e      	ldr	r3, [pc, #632]	@ (80089f0 <UART_SetConfig+0x5c0>)
 8008776:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008778:	e00d      	b.n	8008796 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800877a:	f7fc fedb 	bl	8005534 <HAL_RCC_GetSysClockFreq>
 800877e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008780:	e009      	b.n	8008796 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008782:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008786:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008788:	e005      	b.n	8008796 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800878a:	2300      	movs	r3, #0
 800878c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008794:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008798:	2b00      	cmp	r3, #0
 800879a:	f000 8130 	beq.w	80089fe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087a2:	4a94      	ldr	r2, [pc, #592]	@ (80089f4 <UART_SetConfig+0x5c4>)
 80087a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087a8:	461a      	mov	r2, r3
 80087aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80087b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	4613      	mov	r3, r2
 80087b8:	005b      	lsls	r3, r3, #1
 80087ba:	4413      	add	r3, r2
 80087bc:	69ba      	ldr	r2, [r7, #24]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d305      	bcc.n	80087ce <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087c8:	69ba      	ldr	r2, [r7, #24]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d903      	bls.n	80087d6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80087d4:	e113      	b.n	80089fe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d8:	2200      	movs	r2, #0
 80087da:	60bb      	str	r3, [r7, #8]
 80087dc:	60fa      	str	r2, [r7, #12]
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e2:	4a84      	ldr	r2, [pc, #528]	@ (80089f4 <UART_SetConfig+0x5c4>)
 80087e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	2200      	movs	r2, #0
 80087ec:	603b      	str	r3, [r7, #0]
 80087ee:	607a      	str	r2, [r7, #4]
 80087f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80087f8:	f7f7 fd7a 	bl	80002f0 <__aeabi_uldivmod>
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	4610      	mov	r0, r2
 8008802:	4619      	mov	r1, r3
 8008804:	f04f 0200 	mov.w	r2, #0
 8008808:	f04f 0300 	mov.w	r3, #0
 800880c:	020b      	lsls	r3, r1, #8
 800880e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008812:	0202      	lsls	r2, r0, #8
 8008814:	6979      	ldr	r1, [r7, #20]
 8008816:	6849      	ldr	r1, [r1, #4]
 8008818:	0849      	lsrs	r1, r1, #1
 800881a:	2000      	movs	r0, #0
 800881c:	460c      	mov	r4, r1
 800881e:	4605      	mov	r5, r0
 8008820:	eb12 0804 	adds.w	r8, r2, r4
 8008824:	eb43 0905 	adc.w	r9, r3, r5
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	469a      	mov	sl, r3
 8008830:	4693      	mov	fp, r2
 8008832:	4652      	mov	r2, sl
 8008834:	465b      	mov	r3, fp
 8008836:	4640      	mov	r0, r8
 8008838:	4649      	mov	r1, r9
 800883a:	f7f7 fd59 	bl	80002f0 <__aeabi_uldivmod>
 800883e:	4602      	mov	r2, r0
 8008840:	460b      	mov	r3, r1
 8008842:	4613      	mov	r3, r2
 8008844:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800884c:	d308      	bcc.n	8008860 <UART_SetConfig+0x430>
 800884e:	6a3b      	ldr	r3, [r7, #32]
 8008850:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008854:	d204      	bcs.n	8008860 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	6a3a      	ldr	r2, [r7, #32]
 800885c:	60da      	str	r2, [r3, #12]
 800885e:	e0ce      	b.n	80089fe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008866:	e0ca      	b.n	80089fe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	69db      	ldr	r3, [r3, #28]
 800886c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008870:	d166      	bne.n	8008940 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008872:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008876:	2b08      	cmp	r3, #8
 8008878:	d827      	bhi.n	80088ca <UART_SetConfig+0x49a>
 800887a:	a201      	add	r2, pc, #4	@ (adr r2, 8008880 <UART_SetConfig+0x450>)
 800887c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008880:	080088a5 	.word	0x080088a5
 8008884:	080088ad 	.word	0x080088ad
 8008888:	080088b5 	.word	0x080088b5
 800888c:	080088cb 	.word	0x080088cb
 8008890:	080088bb 	.word	0x080088bb
 8008894:	080088cb 	.word	0x080088cb
 8008898:	080088cb 	.word	0x080088cb
 800889c:	080088cb 	.word	0x080088cb
 80088a0:	080088c3 	.word	0x080088c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088a4:	f7fc feb4 	bl	8005610 <HAL_RCC_GetPCLK1Freq>
 80088a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80088aa:	e014      	b.n	80088d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088ac:	f7fc fec6 	bl	800563c <HAL_RCC_GetPCLK2Freq>
 80088b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80088b2:	e010      	b.n	80088d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088b4:	4b4e      	ldr	r3, [pc, #312]	@ (80089f0 <UART_SetConfig+0x5c0>)
 80088b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80088b8:	e00d      	b.n	80088d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088ba:	f7fc fe3b 	bl	8005534 <HAL_RCC_GetSysClockFreq>
 80088be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80088c0:	e009      	b.n	80088d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80088c8:	e005      	b.n	80088d6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80088ca:	2300      	movs	r3, #0
 80088cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80088d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 8090 	beq.w	80089fe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088e2:	4a44      	ldr	r2, [pc, #272]	@ (80089f4 <UART_SetConfig+0x5c4>)
 80088e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088e8:	461a      	mov	r2, r3
 80088ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80088f0:	005a      	lsls	r2, r3, #1
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	085b      	lsrs	r3, r3, #1
 80088f8:	441a      	add	r2, r3
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008902:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008904:	6a3b      	ldr	r3, [r7, #32]
 8008906:	2b0f      	cmp	r3, #15
 8008908:	d916      	bls.n	8008938 <UART_SetConfig+0x508>
 800890a:	6a3b      	ldr	r3, [r7, #32]
 800890c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008910:	d212      	bcs.n	8008938 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008912:	6a3b      	ldr	r3, [r7, #32]
 8008914:	b29b      	uxth	r3, r3
 8008916:	f023 030f 	bic.w	r3, r3, #15
 800891a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800891c:	6a3b      	ldr	r3, [r7, #32]
 800891e:	085b      	lsrs	r3, r3, #1
 8008920:	b29b      	uxth	r3, r3
 8008922:	f003 0307 	and.w	r3, r3, #7
 8008926:	b29a      	uxth	r2, r3
 8008928:	8bfb      	ldrh	r3, [r7, #30]
 800892a:	4313      	orrs	r3, r2
 800892c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	8bfa      	ldrh	r2, [r7, #30]
 8008934:	60da      	str	r2, [r3, #12]
 8008936:	e062      	b.n	80089fe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800893e:	e05e      	b.n	80089fe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008940:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008944:	2b08      	cmp	r3, #8
 8008946:	d828      	bhi.n	800899a <UART_SetConfig+0x56a>
 8008948:	a201      	add	r2, pc, #4	@ (adr r2, 8008950 <UART_SetConfig+0x520>)
 800894a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894e:	bf00      	nop
 8008950:	08008975 	.word	0x08008975
 8008954:	0800897d 	.word	0x0800897d
 8008958:	08008985 	.word	0x08008985
 800895c:	0800899b 	.word	0x0800899b
 8008960:	0800898b 	.word	0x0800898b
 8008964:	0800899b 	.word	0x0800899b
 8008968:	0800899b 	.word	0x0800899b
 800896c:	0800899b 	.word	0x0800899b
 8008970:	08008993 	.word	0x08008993
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008974:	f7fc fe4c 	bl	8005610 <HAL_RCC_GetPCLK1Freq>
 8008978:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800897a:	e014      	b.n	80089a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800897c:	f7fc fe5e 	bl	800563c <HAL_RCC_GetPCLK2Freq>
 8008980:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008982:	e010      	b.n	80089a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008984:	4b1a      	ldr	r3, [pc, #104]	@ (80089f0 <UART_SetConfig+0x5c0>)
 8008986:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008988:	e00d      	b.n	80089a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800898a:	f7fc fdd3 	bl	8005534 <HAL_RCC_GetSysClockFreq>
 800898e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008990:	e009      	b.n	80089a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008992:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008996:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008998:	e005      	b.n	80089a6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800899a:	2300      	movs	r3, #0
 800899c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80089a4:	bf00      	nop
    }

    if (pclk != 0U)
 80089a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d028      	beq.n	80089fe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b0:	4a10      	ldr	r2, [pc, #64]	@ (80089f4 <UART_SetConfig+0x5c4>)
 80089b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089b6:	461a      	mov	r2, r3
 80089b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	085b      	lsrs	r3, r3, #1
 80089c4:	441a      	add	r2, r3
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089d0:	6a3b      	ldr	r3, [r7, #32]
 80089d2:	2b0f      	cmp	r3, #15
 80089d4:	d910      	bls.n	80089f8 <UART_SetConfig+0x5c8>
 80089d6:	6a3b      	ldr	r3, [r7, #32]
 80089d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089dc:	d20c      	bcs.n	80089f8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80089de:	6a3b      	ldr	r3, [r7, #32]
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	60da      	str	r2, [r3, #12]
 80089e8:	e009      	b.n	80089fe <UART_SetConfig+0x5ce>
 80089ea:	bf00      	nop
 80089ec:	40008000 	.word	0x40008000
 80089f0:	00f42400 	.word	0x00f42400
 80089f4:	0800b2b8 	.word	0x0800b2b8
      }
      else
      {
        ret = HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	2200      	movs	r2, #0
 8008a12:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	2200      	movs	r2, #0
 8008a18:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008a1a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3730      	adds	r7, #48	@ 0x30
 8008a22:	46bd      	mov	sp, r7
 8008a24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008a28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a34:	f003 0308 	and.w	r3, r3, #8
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00a      	beq.n	8008a52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00a      	beq.n	8008a74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	430a      	orrs	r2, r1
 8008a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a78:	f003 0302 	and.w	r3, r3, #2
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00a      	beq.n	8008a96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	430a      	orrs	r2, r1
 8008a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a9a:	f003 0304 	and.w	r3, r3, #4
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00a      	beq.n	8008ab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	430a      	orrs	r2, r1
 8008ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008abc:	f003 0310 	and.w	r3, r3, #16
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00a      	beq.n	8008ada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	430a      	orrs	r2, r1
 8008ad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ade:	f003 0320 	and.w	r3, r3, #32
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00a      	beq.n	8008afc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	430a      	orrs	r2, r1
 8008afa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d01a      	beq.n	8008b3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	430a      	orrs	r2, r1
 8008b1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b26:	d10a      	bne.n	8008b3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	430a      	orrs	r2, r1
 8008b3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00a      	beq.n	8008b60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	430a      	orrs	r2, r1
 8008b5e:	605a      	str	r2, [r3, #4]
  }
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b098      	sub	sp, #96	@ 0x60
 8008b70:	af02      	add	r7, sp, #8
 8008b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b7c:	f7f9 fad0 	bl	8002120 <HAL_GetTick>
 8008b80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 0308 	and.w	r3, r3, #8
 8008b8c:	2b08      	cmp	r3, #8
 8008b8e:	d12f      	bne.n	8008bf0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f88e 	bl	8008cc0 <UART_WaitOnFlagUntilTimeout>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d022      	beq.n	8008bf0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb2:	e853 3f00 	ldrex	r3, [r3]
 8008bb6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bcc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008bce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bd0:	e841 2300 	strex	r3, r2, [r1]
 8008bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1e6      	bne.n	8008baa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2220      	movs	r2, #32
 8008be0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bec:	2303      	movs	r3, #3
 8008bee:	e063      	b.n	8008cb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 0304 	and.w	r3, r3, #4
 8008bfa:	2b04      	cmp	r3, #4
 8008bfc:	d149      	bne.n	8008c92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bfe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c06:	2200      	movs	r2, #0
 8008c08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 f857 	bl	8008cc0 <UART_WaitOnFlagUntilTimeout>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d03c      	beq.n	8008c92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c20:	e853 3f00 	ldrex	r3, [r3]
 8008c24:	623b      	str	r3, [r7, #32]
   return(result);
 8008c26:	6a3b      	ldr	r3, [r7, #32]
 8008c28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	461a      	mov	r2, r3
 8008c34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c36:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c38:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c3e:	e841 2300 	strex	r3, r2, [r1]
 8008c42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1e6      	bne.n	8008c18 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	3308      	adds	r3, #8
 8008c50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	e853 3f00 	ldrex	r3, [r3]
 8008c58:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f023 0301 	bic.w	r3, r3, #1
 8008c60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	3308      	adds	r3, #8
 8008c68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c6a:	61fa      	str	r2, [r7, #28]
 8008c6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6e:	69b9      	ldr	r1, [r7, #24]
 8008c70:	69fa      	ldr	r2, [r7, #28]
 8008c72:	e841 2300 	strex	r3, r2, [r1]
 8008c76:	617b      	str	r3, [r7, #20]
   return(result);
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1e5      	bne.n	8008c4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2220      	movs	r2, #32
 8008c82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e012      	b.n	8008cb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2220      	movs	r2, #32
 8008c96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2220      	movs	r2, #32
 8008c9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3758      	adds	r7, #88	@ 0x58
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	603b      	str	r3, [r7, #0]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cd0:	e04f      	b.n	8008d72 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008cd8:	d04b      	beq.n	8008d72 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cda:	f7f9 fa21 	bl	8002120 <HAL_GetTick>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	1ad3      	subs	r3, r2, r3
 8008ce4:	69ba      	ldr	r2, [r7, #24]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d302      	bcc.n	8008cf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d101      	bne.n	8008cf4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008cf0:	2303      	movs	r3, #3
 8008cf2:	e04e      	b.n	8008d92 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 0304 	and.w	r3, r3, #4
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d037      	beq.n	8008d72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	2b80      	cmp	r3, #128	@ 0x80
 8008d06:	d034      	beq.n	8008d72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	2b40      	cmp	r3, #64	@ 0x40
 8008d0c:	d031      	beq.n	8008d72 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	69db      	ldr	r3, [r3, #28]
 8008d14:	f003 0308 	and.w	r3, r3, #8
 8008d18:	2b08      	cmp	r3, #8
 8008d1a:	d110      	bne.n	8008d3e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2208      	movs	r2, #8
 8008d22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f000 f95b 	bl	8008fe0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2208      	movs	r2, #8
 8008d2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e029      	b.n	8008d92 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	69db      	ldr	r3, [r3, #28]
 8008d44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d4c:	d111      	bne.n	8008d72 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f000 f941 	bl	8008fe0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2220      	movs	r2, #32
 8008d62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	e00f      	b.n	8008d92 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	69da      	ldr	r2, [r3, #28]
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	68ba      	ldr	r2, [r7, #8]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	bf0c      	ite	eq
 8008d82:	2301      	moveq	r3, #1
 8008d84:	2300      	movne	r3, #0
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	461a      	mov	r2, r3
 8008d8a:	79fb      	ldrb	r3, [r7, #7]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d0a0      	beq.n	8008cd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
	...

08008d9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b0a3      	sub	sp, #140	@ 0x8c
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	4613      	mov	r3, r2
 8008da8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	88fa      	ldrh	r2, [r7, #6]
 8008db4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	88fa      	ldrh	r2, [r7, #6]
 8008dbc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dce:	d10e      	bne.n	8008dee <UART_Start_Receive_IT+0x52>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d105      	bne.n	8008de4 <UART_Start_Receive_IT+0x48>
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008dde:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008de2:	e02d      	b.n	8008e40 <UART_Start_Receive_IT+0xa4>
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	22ff      	movs	r2, #255	@ 0xff
 8008de8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008dec:	e028      	b.n	8008e40 <UART_Start_Receive_IT+0xa4>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10d      	bne.n	8008e12 <UART_Start_Receive_IT+0x76>
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d104      	bne.n	8008e08 <UART_Start_Receive_IT+0x6c>
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	22ff      	movs	r2, #255	@ 0xff
 8008e02:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008e06:	e01b      	b.n	8008e40 <UART_Start_Receive_IT+0xa4>
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	227f      	movs	r2, #127	@ 0x7f
 8008e0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008e10:	e016      	b.n	8008e40 <UART_Start_Receive_IT+0xa4>
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e1a:	d10d      	bne.n	8008e38 <UART_Start_Receive_IT+0x9c>
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d104      	bne.n	8008e2e <UART_Start_Receive_IT+0x92>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	227f      	movs	r2, #127	@ 0x7f
 8008e28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008e2c:	e008      	b.n	8008e40 <UART_Start_Receive_IT+0xa4>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	223f      	movs	r2, #63	@ 0x3f
 8008e32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008e36:	e003      	b.n	8008e40 <UART_Start_Receive_IT+0xa4>
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2222      	movs	r2, #34	@ 0x22
 8008e4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	3308      	adds	r3, #8
 8008e56:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e5a:	e853 3f00 	ldrex	r3, [r3]
 8008e5e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008e60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e62:	f043 0301 	orr.w	r3, r3, #1
 8008e66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	3308      	adds	r3, #8
 8008e70:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008e74:	673a      	str	r2, [r7, #112]	@ 0x70
 8008e76:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e78:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008e7a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008e7c:	e841 2300 	strex	r3, r2, [r1]
 8008e80:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008e82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1e3      	bne.n	8008e50 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e90:	d14f      	bne.n	8008f32 <UART_Start_Receive_IT+0x196>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e98:	88fa      	ldrh	r2, [r7, #6]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d349      	bcc.n	8008f32 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ea6:	d107      	bne.n	8008eb8 <UART_Start_Receive_IT+0x11c>
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d103      	bne.n	8008eb8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	4a47      	ldr	r2, [pc, #284]	@ (8008fd0 <UART_Start_Receive_IT+0x234>)
 8008eb4:	675a      	str	r2, [r3, #116]	@ 0x74
 8008eb6:	e002      	b.n	8008ebe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4a46      	ldr	r2, [pc, #280]	@ (8008fd4 <UART_Start_Receive_IT+0x238>)
 8008ebc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d01a      	beq.n	8008efc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ecc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ece:	e853 3f00 	ldrex	r3, [r3]
 8008ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008ed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008eda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008ee8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008eea:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008eee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008ef0:	e841 2300 	strex	r3, r2, [r1]
 8008ef4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1e4      	bne.n	8008ec6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3308      	adds	r3, #8
 8008f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f06:	e853 3f00 	ldrex	r3, [r3]
 8008f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f12:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	3308      	adds	r3, #8
 8008f1a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008f1c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008f1e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f20:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008f22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f24:	e841 2300 	strex	r3, r2, [r1]
 8008f28:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008f2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d1e5      	bne.n	8008efc <UART_Start_Receive_IT+0x160>
 8008f30:	e046      	b.n	8008fc0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f3a:	d107      	bne.n	8008f4c <UART_Start_Receive_IT+0x1b0>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d103      	bne.n	8008f4c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	4a24      	ldr	r2, [pc, #144]	@ (8008fd8 <UART_Start_Receive_IT+0x23c>)
 8008f48:	675a      	str	r2, [r3, #116]	@ 0x74
 8008f4a:	e002      	b.n	8008f52 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	4a23      	ldr	r2, [pc, #140]	@ (8008fdc <UART_Start_Receive_IT+0x240>)
 8008f50:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d019      	beq.n	8008f8e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f62:	e853 3f00 	ldrex	r3, [r3]
 8008f66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f6a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008f6e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	461a      	mov	r2, r3
 8008f76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f7a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f80:	e841 2300 	strex	r3, r2, [r1]
 8008f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1e6      	bne.n	8008f5a <UART_Start_Receive_IT+0x1be>
 8008f8c:	e018      	b.n	8008fc0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	e853 3f00 	ldrex	r3, [r3]
 8008f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	f043 0320 	orr.w	r3, r3, #32
 8008fa2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	461a      	mov	r2, r3
 8008faa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fac:	623b      	str	r3, [r7, #32]
 8008fae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb0:	69f9      	ldr	r1, [r7, #28]
 8008fb2:	6a3a      	ldr	r2, [r7, #32]
 8008fb4:	e841 2300 	strex	r3, r2, [r1]
 8008fb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1e6      	bne.n	8008f8e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	378c      	adds	r7, #140	@ 0x8c
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	080097fd 	.word	0x080097fd
 8008fd4:	08009499 	.word	0x08009499
 8008fd8:	080092e1 	.word	0x080092e1
 8008fdc:	08009129 	.word	0x08009129

08008fe0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b095      	sub	sp, #84	@ 0x54
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ff0:	e853 3f00 	ldrex	r3, [r3]
 8008ff4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	461a      	mov	r2, r3
 8009004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009006:	643b      	str	r3, [r7, #64]	@ 0x40
 8009008:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800900c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800900e:	e841 2300 	strex	r3, r2, [r1]
 8009012:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1e6      	bne.n	8008fe8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	3308      	adds	r3, #8
 8009020:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009022:	6a3b      	ldr	r3, [r7, #32]
 8009024:	e853 3f00 	ldrex	r3, [r3]
 8009028:	61fb      	str	r3, [r7, #28]
   return(result);
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009030:	f023 0301 	bic.w	r3, r3, #1
 8009034:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	3308      	adds	r3, #8
 800903c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800903e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009040:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009042:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009044:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009046:	e841 2300 	strex	r3, r2, [r1]
 800904a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800904c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1e3      	bne.n	800901a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009056:	2b01      	cmp	r3, #1
 8009058:	d118      	bne.n	800908c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	e853 3f00 	ldrex	r3, [r3]
 8009066:	60bb      	str	r3, [r7, #8]
   return(result);
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	f023 0310 	bic.w	r3, r3, #16
 800906e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	461a      	mov	r2, r3
 8009076:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009078:	61bb      	str	r3, [r7, #24]
 800907a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907c:	6979      	ldr	r1, [r7, #20]
 800907e:	69ba      	ldr	r2, [r7, #24]
 8009080:	e841 2300 	strex	r3, r2, [r1]
 8009084:	613b      	str	r3, [r7, #16]
   return(result);
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1e6      	bne.n	800905a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2220      	movs	r2, #32
 8009090:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80090a0:	bf00      	nop
 80090a2:	3754      	adds	r7, #84	@ 0x54
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	f7ff f99e 	bl	8008404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090c8:	bf00      	nop
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b088      	sub	sp, #32
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	e853 3f00 	ldrex	r3, [r3]
 80090e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090ec:	61fb      	str	r3, [r7, #28]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	461a      	mov	r2, r3
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	61bb      	str	r3, [r7, #24]
 80090f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fa:	6979      	ldr	r1, [r7, #20]
 80090fc:	69ba      	ldr	r2, [r7, #24]
 80090fe:	e841 2300 	strex	r3, r2, [r1]
 8009102:	613b      	str	r3, [r7, #16]
   return(result);
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1e6      	bne.n	80090d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2220      	movs	r2, #32
 800910e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f7ff f969 	bl	80083f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800911e:	bf00      	nop
 8009120:	3720      	adds	r7, #32
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
	...

08009128 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b09c      	sub	sp, #112	@ 0x70
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009136:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009140:	2b22      	cmp	r3, #34	@ 0x22
 8009142:	f040 80be 	bne.w	80092c2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800914c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009150:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009154:	b2d9      	uxtb	r1, r3
 8009156:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800915a:	b2da      	uxtb	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009160:	400a      	ands	r2, r1
 8009162:	b2d2      	uxtb	r2, r2
 8009164:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800916a:	1c5a      	adds	r2, r3, #1
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009176:	b29b      	uxth	r3, r3
 8009178:	3b01      	subs	r3, #1
 800917a:	b29a      	uxth	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009188:	b29b      	uxth	r3, r3
 800918a:	2b00      	cmp	r3, #0
 800918c:	f040 80a1 	bne.w	80092d2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009196:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009198:	e853 3f00 	ldrex	r3, [r3]
 800919c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800919e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	461a      	mov	r2, r3
 80091ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80091ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80091b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091b6:	e841 2300 	strex	r3, r2, [r1]
 80091ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80091bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d1e6      	bne.n	8009190 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	3308      	adds	r3, #8
 80091c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091cc:	e853 3f00 	ldrex	r3, [r3]
 80091d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091d4:	f023 0301 	bic.w	r3, r3, #1
 80091d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	3308      	adds	r3, #8
 80091e0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80091e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80091e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091ea:	e841 2300 	strex	r3, r2, [r1]
 80091ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1e5      	bne.n	80091c2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2220      	movs	r2, #32
 80091fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a33      	ldr	r2, [pc, #204]	@ (80092dc <UART_RxISR_8BIT+0x1b4>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d01f      	beq.n	8009254 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d018      	beq.n	8009254 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922a:	e853 3f00 	ldrex	r3, [r3]
 800922e:	623b      	str	r3, [r7, #32]
   return(result);
 8009230:	6a3b      	ldr	r3, [r7, #32]
 8009232:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009236:	663b      	str	r3, [r7, #96]	@ 0x60
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	461a      	mov	r2, r3
 800923e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009240:	633b      	str	r3, [r7, #48]	@ 0x30
 8009242:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009244:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009246:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009248:	e841 2300 	strex	r3, r2, [r1]
 800924c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800924e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009250:	2b00      	cmp	r3, #0
 8009252:	d1e6      	bne.n	8009222 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009258:	2b01      	cmp	r3, #1
 800925a:	d12e      	bne.n	80092ba <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	e853 3f00 	ldrex	r3, [r3]
 800926e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f023 0310 	bic.w	r3, r3, #16
 8009276:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	461a      	mov	r2, r3
 800927e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009280:	61fb      	str	r3, [r7, #28]
 8009282:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009284:	69b9      	ldr	r1, [r7, #24]
 8009286:	69fa      	ldr	r2, [r7, #28]
 8009288:	e841 2300 	strex	r3, r2, [r1]
 800928c:	617b      	str	r3, [r7, #20]
   return(result);
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1e6      	bne.n	8009262 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	69db      	ldr	r3, [r3, #28]
 800929a:	f003 0310 	and.w	r3, r3, #16
 800929e:	2b10      	cmp	r3, #16
 80092a0:	d103      	bne.n	80092aa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2210      	movs	r2, #16
 80092a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80092b0:	4619      	mov	r1, r3
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f7ff f8b0 	bl	8008418 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092b8:	e00b      	b.n	80092d2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7f8 fcbc 	bl	8001c38 <HAL_UART_RxCpltCallback>
}
 80092c0:	e007      	b.n	80092d2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	699a      	ldr	r2, [r3, #24]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f042 0208 	orr.w	r2, r2, #8
 80092d0:	619a      	str	r2, [r3, #24]
}
 80092d2:	bf00      	nop
 80092d4:	3770      	adds	r7, #112	@ 0x70
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	40008000 	.word	0x40008000

080092e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b09c      	sub	sp, #112	@ 0x70
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80092ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092f8:	2b22      	cmp	r3, #34	@ 0x22
 80092fa:	f040 80be 	bne.w	800947a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009304:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800930c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800930e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009312:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009316:	4013      	ands	r3, r2
 8009318:	b29a      	uxth	r2, r3
 800931a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800931c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009322:	1c9a      	adds	r2, r3, #2
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800932e:	b29b      	uxth	r3, r3
 8009330:	3b01      	subs	r3, #1
 8009332:	b29a      	uxth	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009340:	b29b      	uxth	r3, r3
 8009342:	2b00      	cmp	r3, #0
 8009344:	f040 80a1 	bne.w	800948a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009350:	e853 3f00 	ldrex	r3, [r3]
 8009354:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009356:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009358:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800935c:	667b      	str	r3, [r7, #100]	@ 0x64
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	461a      	mov	r2, r3
 8009364:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009366:	657b      	str	r3, [r7, #84]	@ 0x54
 8009368:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800936c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800936e:	e841 2300 	strex	r3, r2, [r1]
 8009372:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009374:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1e6      	bne.n	8009348 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	3308      	adds	r3, #8
 8009380:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009384:	e853 3f00 	ldrex	r3, [r3]
 8009388:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800938a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938c:	f023 0301 	bic.w	r3, r3, #1
 8009390:	663b      	str	r3, [r7, #96]	@ 0x60
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	3308      	adds	r3, #8
 8009398:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800939a:	643a      	str	r2, [r7, #64]	@ 0x40
 800939c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80093a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80093a2:	e841 2300 	strex	r3, r2, [r1]
 80093a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80093a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d1e5      	bne.n	800937a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2220      	movs	r2, #32
 80093b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a33      	ldr	r2, [pc, #204]	@ (8009494 <UART_RxISR_16BIT+0x1b4>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d01f      	beq.n	800940c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d018      	beq.n	800940c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e0:	6a3b      	ldr	r3, [r7, #32]
 80093e2:	e853 3f00 	ldrex	r3, [r3]
 80093e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80093ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	461a      	mov	r2, r3
 80093f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093fa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009400:	e841 2300 	strex	r3, r2, [r1]
 8009404:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1e6      	bne.n	80093da <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009410:	2b01      	cmp	r3, #1
 8009412:	d12e      	bne.n	8009472 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	e853 3f00 	ldrex	r3, [r3]
 8009426:	60bb      	str	r3, [r7, #8]
   return(result);
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	f023 0310 	bic.w	r3, r3, #16
 800942e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	461a      	mov	r2, r3
 8009436:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009438:	61bb      	str	r3, [r7, #24]
 800943a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943c:	6979      	ldr	r1, [r7, #20]
 800943e:	69ba      	ldr	r2, [r7, #24]
 8009440:	e841 2300 	strex	r3, r2, [r1]
 8009444:	613b      	str	r3, [r7, #16]
   return(result);
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1e6      	bne.n	800941a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	69db      	ldr	r3, [r3, #28]
 8009452:	f003 0310 	and.w	r3, r3, #16
 8009456:	2b10      	cmp	r3, #16
 8009458:	d103      	bne.n	8009462 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2210      	movs	r2, #16
 8009460:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009468:	4619      	mov	r1, r3
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f7fe ffd4 	bl	8008418 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009470:	e00b      	b.n	800948a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f7f8 fbe0 	bl	8001c38 <HAL_UART_RxCpltCallback>
}
 8009478:	e007      	b.n	800948a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	699a      	ldr	r2, [r3, #24]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f042 0208 	orr.w	r2, r2, #8
 8009488:	619a      	str	r2, [r3, #24]
}
 800948a:	bf00      	nop
 800948c:	3770      	adds	r7, #112	@ 0x70
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	40008000 	.word	0x40008000

08009498 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b0ac      	sub	sp, #176	@ 0xb0
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80094a6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	69db      	ldr	r3, [r3, #28]
 80094b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094ce:	2b22      	cmp	r3, #34	@ 0x22
 80094d0:	f040 8183 	bne.w	80097da <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80094da:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094de:	e126      	b.n	800972e <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094e6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80094ea:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80094ee:	b2d9      	uxtb	r1, r3
 80094f0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80094f4:	b2da      	uxtb	r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094fa:	400a      	ands	r2, r1
 80094fc:	b2d2      	uxtb	r2, r2
 80094fe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009504:	1c5a      	adds	r2, r3, #1
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009510:	b29b      	uxth	r3, r3
 8009512:	3b01      	subs	r3, #1
 8009514:	b29a      	uxth	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	69db      	ldr	r3, [r3, #28]
 8009522:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800952a:	f003 0307 	and.w	r3, r3, #7
 800952e:	2b00      	cmp	r3, #0
 8009530:	d053      	beq.n	80095da <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009536:	f003 0301 	and.w	r3, r3, #1
 800953a:	2b00      	cmp	r3, #0
 800953c:	d011      	beq.n	8009562 <UART_RxISR_8BIT_FIFOEN+0xca>
 800953e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00b      	beq.n	8009562 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	2201      	movs	r2, #1
 8009550:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009558:	f043 0201 	orr.w	r2, r3, #1
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009566:	f003 0302 	and.w	r3, r3, #2
 800956a:	2b00      	cmp	r3, #0
 800956c:	d011      	beq.n	8009592 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800956e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009572:	f003 0301 	and.w	r3, r3, #1
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00b      	beq.n	8009592 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2202      	movs	r2, #2
 8009580:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009588:	f043 0204 	orr.w	r2, r3, #4
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009596:	f003 0304 	and.w	r3, r3, #4
 800959a:	2b00      	cmp	r3, #0
 800959c:	d011      	beq.n	80095c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800959e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80095a2:	f003 0301 	and.w	r3, r3, #1
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00b      	beq.n	80095c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2204      	movs	r2, #4
 80095b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095b8:	f043 0202 	orr.w	r2, r3, #2
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d006      	beq.n	80095da <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f7fe ff19 	bl	8008404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f040 80a3 	bne.w	800972e <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80095f0:	e853 3f00 	ldrex	r3, [r3]
 80095f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80095f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	461a      	mov	r2, r3
 8009606:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800960a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800960c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009610:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009612:	e841 2300 	strex	r3, r2, [r1]
 8009616:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009618:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1e4      	bne.n	80095e8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	3308      	adds	r3, #8
 8009624:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009626:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009628:	e853 3f00 	ldrex	r3, [r3]
 800962c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800962e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009630:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009634:	f023 0301 	bic.w	r3, r3, #1
 8009638:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	3308      	adds	r3, #8
 8009642:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009646:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009648:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800964c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800964e:	e841 2300 	strex	r3, r2, [r1]
 8009652:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009654:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1e1      	bne.n	800961e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2220      	movs	r2, #32
 800965e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a60      	ldr	r2, [pc, #384]	@ (80097f4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d021      	beq.n	80096bc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009682:	2b00      	cmp	r3, #0
 8009684:	d01a      	beq.n	80096bc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800968e:	e853 3f00 	ldrex	r3, [r3]
 8009692:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009694:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009696:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800969a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	461a      	mov	r2, r3
 80096a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80096a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80096aa:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80096ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80096b0:	e841 2300 	strex	r3, r2, [r1]
 80096b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80096b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1e4      	bne.n	8009686 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d130      	bne.n	8009726 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096d2:	e853 3f00 	ldrex	r3, [r3]
 80096d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096da:	f023 0310 	bic.w	r3, r3, #16
 80096de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	461a      	mov	r2, r3
 80096e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80096ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80096ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096f4:	e841 2300 	strex	r3, r2, [r1]
 80096f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d1e4      	bne.n	80096ca <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	69db      	ldr	r3, [r3, #28]
 8009706:	f003 0310 	and.w	r3, r3, #16
 800970a:	2b10      	cmp	r3, #16
 800970c:	d103      	bne.n	8009716 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2210      	movs	r2, #16
 8009714:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800971c:	4619      	mov	r1, r3
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f7fe fe7a 	bl	8008418 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009724:	e00e      	b.n	8009744 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f7f8 fa86 	bl	8001c38 <HAL_UART_RxCpltCallback>
        break;
 800972c:	e00a      	b.n	8009744 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800972e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009732:	2b00      	cmp	r3, #0
 8009734:	d006      	beq.n	8009744 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8009736:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800973a:	f003 0320 	and.w	r3, r3, #32
 800973e:	2b00      	cmp	r3, #0
 8009740:	f47f aece 	bne.w	80094e0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800974a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800974e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009752:	2b00      	cmp	r3, #0
 8009754:	d049      	beq.n	80097ea <UART_RxISR_8BIT_FIFOEN+0x352>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800975c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009760:	429a      	cmp	r2, r3
 8009762:	d242      	bcs.n	80097ea <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3308      	adds	r3, #8
 800976a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976c:	6a3b      	ldr	r3, [r7, #32]
 800976e:	e853 3f00 	ldrex	r3, [r3]
 8009772:	61fb      	str	r3, [r7, #28]
   return(result);
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800977a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	3308      	adds	r3, #8
 8009784:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009788:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800978a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800978e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009790:	e841 2300 	strex	r3, r2, [r1]
 8009794:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1e3      	bne.n	8009764 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4a16      	ldr	r2, [pc, #88]	@ (80097f8 <UART_RxISR_8BIT_FIFOEN+0x360>)
 80097a0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	e853 3f00 	ldrex	r3, [r3]
 80097ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	f043 0320 	orr.w	r3, r3, #32
 80097b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	461a      	mov	r2, r3
 80097c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80097c4:	61bb      	str	r3, [r7, #24]
 80097c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c8:	6979      	ldr	r1, [r7, #20]
 80097ca:	69ba      	ldr	r2, [r7, #24]
 80097cc:	e841 2300 	strex	r3, r2, [r1]
 80097d0:	613b      	str	r3, [r7, #16]
   return(result);
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1e4      	bne.n	80097a2 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097d8:	e007      	b.n	80097ea <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	699a      	ldr	r2, [r3, #24]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f042 0208 	orr.w	r2, r2, #8
 80097e8:	619a      	str	r2, [r3, #24]
}
 80097ea:	bf00      	nop
 80097ec:	37b0      	adds	r7, #176	@ 0xb0
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	40008000 	.word	0x40008000
 80097f8:	08009129 	.word	0x08009129

080097fc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b0ae      	sub	sp, #184	@ 0xb8
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800980a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	69db      	ldr	r3, [r3, #28]
 8009814:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009832:	2b22      	cmp	r3, #34	@ 0x22
 8009834:	f040 8187 	bne.w	8009b46 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800983e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009842:	e12a      	b.n	8009a9a <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800984a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009852:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009856:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800985a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800985e:	4013      	ands	r3, r2
 8009860:	b29a      	uxth	r2, r3
 8009862:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009866:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800986c:	1c9a      	adds	r2, r3, #2
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009878:	b29b      	uxth	r3, r3
 800987a:	3b01      	subs	r3, #1
 800987c:	b29a      	uxth	r2, r3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	69db      	ldr	r3, [r3, #28]
 800988a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800988e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009892:	f003 0307 	and.w	r3, r3, #7
 8009896:	2b00      	cmp	r3, #0
 8009898:	d053      	beq.n	8009942 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800989a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800989e:	f003 0301 	and.w	r3, r3, #1
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d011      	beq.n	80098ca <UART_RxISR_16BIT_FIFOEN+0xce>
 80098a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00b      	beq.n	80098ca <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2201      	movs	r2, #1
 80098b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098c0:	f043 0201 	orr.w	r2, r3, #1
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80098ce:	f003 0302 	and.w	r3, r3, #2
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d011      	beq.n	80098fa <UART_RxISR_16BIT_FIFOEN+0xfe>
 80098d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80098da:	f003 0301 	and.w	r3, r3, #1
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00b      	beq.n	80098fa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2202      	movs	r2, #2
 80098e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098f0:	f043 0204 	orr.w	r2, r3, #4
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80098fe:	f003 0304 	and.w	r3, r3, #4
 8009902:	2b00      	cmp	r3, #0
 8009904:	d011      	beq.n	800992a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009906:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800990a:	f003 0301 	and.w	r3, r3, #1
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00b      	beq.n	800992a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2204      	movs	r2, #4
 8009918:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009920:	f043 0202 	orr.w	r2, r3, #2
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009930:	2b00      	cmp	r3, #0
 8009932:	d006      	beq.n	8009942 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f7fe fd65 	bl	8008404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009948:	b29b      	uxth	r3, r3
 800994a:	2b00      	cmp	r3, #0
 800994c:	f040 80a5 	bne.w	8009a9a <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009956:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009958:	e853 3f00 	ldrex	r3, [r3]
 800995c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800995e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009960:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009964:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	461a      	mov	r2, r3
 800996e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009972:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009976:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009978:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800997a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800997e:	e841 2300 	strex	r3, r2, [r1]
 8009982:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009984:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009986:	2b00      	cmp	r3, #0
 8009988:	d1e2      	bne.n	8009950 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	3308      	adds	r3, #8
 8009990:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009992:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009994:	e853 3f00 	ldrex	r3, [r3]
 8009998:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800999a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800999c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80099a0:	f023 0301 	bic.w	r3, r3, #1
 80099a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	3308      	adds	r3, #8
 80099ae:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80099b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80099b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80099b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80099ba:	e841 2300 	strex	r3, r2, [r1]
 80099be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80099c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d1e1      	bne.n	800998a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2220      	movs	r2, #32
 80099ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a60      	ldr	r2, [pc, #384]	@ (8009b60 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d021      	beq.n	8009a28 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d01a      	beq.n	8009a28 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099fa:	e853 3f00 	ldrex	r3, [r3]
 80099fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a02:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009a06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	461a      	mov	r2, r3
 8009a10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009a14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a16:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a1c:	e841 2300 	strex	r3, r2, [r1]
 8009a20:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d1e4      	bne.n	80099f2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d130      	bne.n	8009a92 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a3e:	e853 3f00 	ldrex	r3, [r3]
 8009a42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a46:	f023 0310 	bic.w	r3, r3, #16
 8009a4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	461a      	mov	r2, r3
 8009a54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a58:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a5a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a60:	e841 2300 	strex	r3, r2, [r1]
 8009a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1e4      	bne.n	8009a36 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	69db      	ldr	r3, [r3, #28]
 8009a72:	f003 0310 	and.w	r3, r3, #16
 8009a76:	2b10      	cmp	r3, #16
 8009a78:	d103      	bne.n	8009a82 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2210      	movs	r2, #16
 8009a80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a88:	4619      	mov	r1, r3
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7fe fcc4 	bl	8008418 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009a90:	e00e      	b.n	8009ab0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f7f8 f8d0 	bl	8001c38 <HAL_UART_RxCpltCallback>
        break;
 8009a98:	e00a      	b.n	8009ab0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a9a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d006      	beq.n	8009ab0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8009aa2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009aa6:	f003 0320 	and.w	r3, r3, #32
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	f47f aeca 	bne.w	8009844 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ab6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009aba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d049      	beq.n	8009b56 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009ac8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d242      	bcs.n	8009b56 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	3308      	adds	r3, #8
 8009ad6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ada:	e853 3f00 	ldrex	r3, [r3]
 8009ade:	623b      	str	r3, [r7, #32]
   return(result);
 8009ae0:	6a3b      	ldr	r3, [r7, #32]
 8009ae2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ae6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	3308      	adds	r3, #8
 8009af0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009af4:	633a      	str	r2, [r7, #48]	@ 0x30
 8009af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009afa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009afc:	e841 2300 	strex	r3, r2, [r1]
 8009b00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1e3      	bne.n	8009ad0 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	4a16      	ldr	r2, [pc, #88]	@ (8009b64 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8009b0c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	e853 3f00 	ldrex	r3, [r3]
 8009b1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f043 0320 	orr.w	r3, r3, #32
 8009b22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b30:	61fb      	str	r3, [r7, #28]
 8009b32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b34:	69b9      	ldr	r1, [r7, #24]
 8009b36:	69fa      	ldr	r2, [r7, #28]
 8009b38:	e841 2300 	strex	r3, r2, [r1]
 8009b3c:	617b      	str	r3, [r7, #20]
   return(result);
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1e4      	bne.n	8009b0e <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b44:	e007      	b.n	8009b56 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	699a      	ldr	r2, [r3, #24]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f042 0208 	orr.w	r2, r2, #8
 8009b54:	619a      	str	r2, [r3, #24]
}
 8009b56:	bf00      	nop
 8009b58:	37b8      	adds	r7, #184	@ 0xb8
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	40008000 	.word	0x40008000
 8009b64:	080092e1 	.word	0x080092e1

08009b68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b70:	bf00      	nop
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009b84:	bf00      	nop
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009b98:	bf00      	nop
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d101      	bne.n	8009bba <HAL_UARTEx_DisableFifoMode+0x16>
 8009bb6:	2302      	movs	r3, #2
 8009bb8:	e027      	b.n	8009c0a <HAL_UARTEx_DisableFifoMode+0x66>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2224      	movs	r2, #36	@ 0x24
 8009bc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f022 0201 	bic.w	r2, r2, #1
 8009be0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009be8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2220      	movs	r2, #32
 8009bfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c08:	2300      	movs	r3, #0
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3714      	adds	r7, #20
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr

08009c16 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b084      	sub	sp, #16
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
 8009c1e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d101      	bne.n	8009c2e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009c2a:	2302      	movs	r3, #2
 8009c2c:	e02d      	b.n	8009c8a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2224      	movs	r2, #36	@ 0x24
 8009c3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f022 0201 	bic.w	r2, r2, #1
 8009c54:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	683a      	ldr	r2, [r7, #0]
 8009c66:	430a      	orrs	r2, r1
 8009c68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 f850 	bl	8009d10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68fa      	ldr	r2, [r7, #12]
 8009c76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2220      	movs	r2, #32
 8009c7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b084      	sub	sp, #16
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d101      	bne.n	8009caa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ca6:	2302      	movs	r3, #2
 8009ca8:	e02d      	b.n	8009d06 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2201      	movs	r2, #1
 8009cae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2224      	movs	r2, #36	@ 0x24
 8009cb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f022 0201 	bic.w	r2, r2, #1
 8009cd0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	683a      	ldr	r2, [r7, #0]
 8009ce2:	430a      	orrs	r2, r1
 8009ce4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 f812 	bl	8009d10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2220      	movs	r2, #32
 8009cf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
	...

08009d10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d108      	bne.n	8009d32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d30:	e031      	b.n	8009d96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d32:	2308      	movs	r3, #8
 8009d34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d36:	2308      	movs	r3, #8
 8009d38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	0e5b      	lsrs	r3, r3, #25
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	f003 0307 	and.w	r3, r3, #7
 8009d48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	0f5b      	lsrs	r3, r3, #29
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	f003 0307 	and.w	r3, r3, #7
 8009d58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d5a:	7bbb      	ldrb	r3, [r7, #14]
 8009d5c:	7b3a      	ldrb	r2, [r7, #12]
 8009d5e:	4911      	ldr	r1, [pc, #68]	@ (8009da4 <UARTEx_SetNbDataToProcess+0x94>)
 8009d60:	5c8a      	ldrb	r2, [r1, r2]
 8009d62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009d66:	7b3a      	ldrb	r2, [r7, #12]
 8009d68:	490f      	ldr	r1, [pc, #60]	@ (8009da8 <UARTEx_SetNbDataToProcess+0x98>)
 8009d6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d78:	7bfb      	ldrb	r3, [r7, #15]
 8009d7a:	7b7a      	ldrb	r2, [r7, #13]
 8009d7c:	4909      	ldr	r1, [pc, #36]	@ (8009da4 <UARTEx_SetNbDataToProcess+0x94>)
 8009d7e:	5c8a      	ldrb	r2, [r1, r2]
 8009d80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d84:	7b7a      	ldrb	r2, [r7, #13]
 8009d86:	4908      	ldr	r1, [pc, #32]	@ (8009da8 <UARTEx_SetNbDataToProcess+0x98>)
 8009d88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009d96:	bf00      	nop
 8009d98:	3714      	adds	r7, #20
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop
 8009da4:	0800b2d0 	.word	0x0800b2d0
 8009da8:	0800b2d8 	.word	0x0800b2d8

08009dac <atoi>:
 8009dac:	220a      	movs	r2, #10
 8009dae:	2100      	movs	r1, #0
 8009db0:	f000 b91e 	b.w	8009ff0 <strtol>

08009db4 <std>:
 8009db4:	2300      	movs	r3, #0
 8009db6:	b510      	push	{r4, lr}
 8009db8:	4604      	mov	r4, r0
 8009dba:	e9c0 3300 	strd	r3, r3, [r0]
 8009dbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009dc2:	6083      	str	r3, [r0, #8]
 8009dc4:	8181      	strh	r1, [r0, #12]
 8009dc6:	6643      	str	r3, [r0, #100]	@ 0x64
 8009dc8:	81c2      	strh	r2, [r0, #14]
 8009dca:	6183      	str	r3, [r0, #24]
 8009dcc:	4619      	mov	r1, r3
 8009dce:	2208      	movs	r2, #8
 8009dd0:	305c      	adds	r0, #92	@ 0x5c
 8009dd2:	f000 f9a3 	bl	800a11c <memset>
 8009dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8009e0c <std+0x58>)
 8009dd8:	6263      	str	r3, [r4, #36]	@ 0x24
 8009dda:	4b0d      	ldr	r3, [pc, #52]	@ (8009e10 <std+0x5c>)
 8009ddc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009dde:	4b0d      	ldr	r3, [pc, #52]	@ (8009e14 <std+0x60>)
 8009de0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009de2:	4b0d      	ldr	r3, [pc, #52]	@ (8009e18 <std+0x64>)
 8009de4:	6323      	str	r3, [r4, #48]	@ 0x30
 8009de6:	4b0d      	ldr	r3, [pc, #52]	@ (8009e1c <std+0x68>)
 8009de8:	6224      	str	r4, [r4, #32]
 8009dea:	429c      	cmp	r4, r3
 8009dec:	d006      	beq.n	8009dfc <std+0x48>
 8009dee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009df2:	4294      	cmp	r4, r2
 8009df4:	d002      	beq.n	8009dfc <std+0x48>
 8009df6:	33d0      	adds	r3, #208	@ 0xd0
 8009df8:	429c      	cmp	r4, r3
 8009dfa:	d105      	bne.n	8009e08 <std+0x54>
 8009dfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e04:	f000 b9bc 	b.w	800a180 <__retarget_lock_init_recursive>
 8009e08:	bd10      	pop	{r4, pc}
 8009e0a:	bf00      	nop
 8009e0c:	0800aa39 	.word	0x0800aa39
 8009e10:	0800aa5b 	.word	0x0800aa5b
 8009e14:	0800aa93 	.word	0x0800aa93
 8009e18:	0800aab7 	.word	0x0800aab7
 8009e1c:	200008bc 	.word	0x200008bc

08009e20 <stdio_exit_handler>:
 8009e20:	4a02      	ldr	r2, [pc, #8]	@ (8009e2c <stdio_exit_handler+0xc>)
 8009e22:	4903      	ldr	r1, [pc, #12]	@ (8009e30 <stdio_exit_handler+0x10>)
 8009e24:	4803      	ldr	r0, [pc, #12]	@ (8009e34 <stdio_exit_handler+0x14>)
 8009e26:	f000 b8ed 	b.w	800a004 <_fwalk_sglue>
 8009e2a:	bf00      	nop
 8009e2c:	2000014c 	.word	0x2000014c
 8009e30:	0800a9d1 	.word	0x0800a9d1
 8009e34:	2000015c 	.word	0x2000015c

08009e38 <cleanup_stdio>:
 8009e38:	6841      	ldr	r1, [r0, #4]
 8009e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8009e6c <cleanup_stdio+0x34>)
 8009e3c:	4299      	cmp	r1, r3
 8009e3e:	b510      	push	{r4, lr}
 8009e40:	4604      	mov	r4, r0
 8009e42:	d001      	beq.n	8009e48 <cleanup_stdio+0x10>
 8009e44:	f000 fdc4 	bl	800a9d0 <_fflush_r>
 8009e48:	68a1      	ldr	r1, [r4, #8]
 8009e4a:	4b09      	ldr	r3, [pc, #36]	@ (8009e70 <cleanup_stdio+0x38>)
 8009e4c:	4299      	cmp	r1, r3
 8009e4e:	d002      	beq.n	8009e56 <cleanup_stdio+0x1e>
 8009e50:	4620      	mov	r0, r4
 8009e52:	f000 fdbd 	bl	800a9d0 <_fflush_r>
 8009e56:	68e1      	ldr	r1, [r4, #12]
 8009e58:	4b06      	ldr	r3, [pc, #24]	@ (8009e74 <cleanup_stdio+0x3c>)
 8009e5a:	4299      	cmp	r1, r3
 8009e5c:	d004      	beq.n	8009e68 <cleanup_stdio+0x30>
 8009e5e:	4620      	mov	r0, r4
 8009e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e64:	f000 bdb4 	b.w	800a9d0 <_fflush_r>
 8009e68:	bd10      	pop	{r4, pc}
 8009e6a:	bf00      	nop
 8009e6c:	200008bc 	.word	0x200008bc
 8009e70:	20000924 	.word	0x20000924
 8009e74:	2000098c 	.word	0x2000098c

08009e78 <global_stdio_init.part.0>:
 8009e78:	b510      	push	{r4, lr}
 8009e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8009ea8 <global_stdio_init.part.0+0x30>)
 8009e7c:	4c0b      	ldr	r4, [pc, #44]	@ (8009eac <global_stdio_init.part.0+0x34>)
 8009e7e:	4a0c      	ldr	r2, [pc, #48]	@ (8009eb0 <global_stdio_init.part.0+0x38>)
 8009e80:	601a      	str	r2, [r3, #0]
 8009e82:	4620      	mov	r0, r4
 8009e84:	2200      	movs	r2, #0
 8009e86:	2104      	movs	r1, #4
 8009e88:	f7ff ff94 	bl	8009db4 <std>
 8009e8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009e90:	2201      	movs	r2, #1
 8009e92:	2109      	movs	r1, #9
 8009e94:	f7ff ff8e 	bl	8009db4 <std>
 8009e98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009e9c:	2202      	movs	r2, #2
 8009e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ea2:	2112      	movs	r1, #18
 8009ea4:	f7ff bf86 	b.w	8009db4 <std>
 8009ea8:	200009f4 	.word	0x200009f4
 8009eac:	200008bc 	.word	0x200008bc
 8009eb0:	08009e21 	.word	0x08009e21

08009eb4 <__sfp_lock_acquire>:
 8009eb4:	4801      	ldr	r0, [pc, #4]	@ (8009ebc <__sfp_lock_acquire+0x8>)
 8009eb6:	f000 b964 	b.w	800a182 <__retarget_lock_acquire_recursive>
 8009eba:	bf00      	nop
 8009ebc:	200009f9 	.word	0x200009f9

08009ec0 <__sfp_lock_release>:
 8009ec0:	4801      	ldr	r0, [pc, #4]	@ (8009ec8 <__sfp_lock_release+0x8>)
 8009ec2:	f000 b95f 	b.w	800a184 <__retarget_lock_release_recursive>
 8009ec6:	bf00      	nop
 8009ec8:	200009f9 	.word	0x200009f9

08009ecc <__sinit>:
 8009ecc:	b510      	push	{r4, lr}
 8009ece:	4604      	mov	r4, r0
 8009ed0:	f7ff fff0 	bl	8009eb4 <__sfp_lock_acquire>
 8009ed4:	6a23      	ldr	r3, [r4, #32]
 8009ed6:	b11b      	cbz	r3, 8009ee0 <__sinit+0x14>
 8009ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009edc:	f7ff bff0 	b.w	8009ec0 <__sfp_lock_release>
 8009ee0:	4b04      	ldr	r3, [pc, #16]	@ (8009ef4 <__sinit+0x28>)
 8009ee2:	6223      	str	r3, [r4, #32]
 8009ee4:	4b04      	ldr	r3, [pc, #16]	@ (8009ef8 <__sinit+0x2c>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1f5      	bne.n	8009ed8 <__sinit+0xc>
 8009eec:	f7ff ffc4 	bl	8009e78 <global_stdio_init.part.0>
 8009ef0:	e7f2      	b.n	8009ed8 <__sinit+0xc>
 8009ef2:	bf00      	nop
 8009ef4:	08009e39 	.word	0x08009e39
 8009ef8:	200009f4 	.word	0x200009f4

08009efc <_strtol_l.constprop.0>:
 8009efc:	2b24      	cmp	r3, #36	@ 0x24
 8009efe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f02:	4686      	mov	lr, r0
 8009f04:	4690      	mov	r8, r2
 8009f06:	d801      	bhi.n	8009f0c <_strtol_l.constprop.0+0x10>
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d106      	bne.n	8009f1a <_strtol_l.constprop.0+0x1e>
 8009f0c:	f000 f90e 	bl	800a12c <__errno>
 8009f10:	2316      	movs	r3, #22
 8009f12:	6003      	str	r3, [r0, #0]
 8009f14:	2000      	movs	r0, #0
 8009f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f1a:	4834      	ldr	r0, [pc, #208]	@ (8009fec <_strtol_l.constprop.0+0xf0>)
 8009f1c:	460d      	mov	r5, r1
 8009f1e:	462a      	mov	r2, r5
 8009f20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f24:	5d06      	ldrb	r6, [r0, r4]
 8009f26:	f016 0608 	ands.w	r6, r6, #8
 8009f2a:	d1f8      	bne.n	8009f1e <_strtol_l.constprop.0+0x22>
 8009f2c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009f2e:	d12d      	bne.n	8009f8c <_strtol_l.constprop.0+0x90>
 8009f30:	782c      	ldrb	r4, [r5, #0]
 8009f32:	2601      	movs	r6, #1
 8009f34:	1c95      	adds	r5, r2, #2
 8009f36:	f033 0210 	bics.w	r2, r3, #16
 8009f3a:	d109      	bne.n	8009f50 <_strtol_l.constprop.0+0x54>
 8009f3c:	2c30      	cmp	r4, #48	@ 0x30
 8009f3e:	d12a      	bne.n	8009f96 <_strtol_l.constprop.0+0x9a>
 8009f40:	782a      	ldrb	r2, [r5, #0]
 8009f42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009f46:	2a58      	cmp	r2, #88	@ 0x58
 8009f48:	d125      	bne.n	8009f96 <_strtol_l.constprop.0+0x9a>
 8009f4a:	786c      	ldrb	r4, [r5, #1]
 8009f4c:	2310      	movs	r3, #16
 8009f4e:	3502      	adds	r5, #2
 8009f50:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009f54:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8009f58:	2200      	movs	r2, #0
 8009f5a:	fbbc f9f3 	udiv	r9, ip, r3
 8009f5e:	4610      	mov	r0, r2
 8009f60:	fb03 ca19 	mls	sl, r3, r9, ip
 8009f64:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009f68:	2f09      	cmp	r7, #9
 8009f6a:	d81b      	bhi.n	8009fa4 <_strtol_l.constprop.0+0xa8>
 8009f6c:	463c      	mov	r4, r7
 8009f6e:	42a3      	cmp	r3, r4
 8009f70:	dd27      	ble.n	8009fc2 <_strtol_l.constprop.0+0xc6>
 8009f72:	1c57      	adds	r7, r2, #1
 8009f74:	d007      	beq.n	8009f86 <_strtol_l.constprop.0+0x8a>
 8009f76:	4581      	cmp	r9, r0
 8009f78:	d320      	bcc.n	8009fbc <_strtol_l.constprop.0+0xc0>
 8009f7a:	d101      	bne.n	8009f80 <_strtol_l.constprop.0+0x84>
 8009f7c:	45a2      	cmp	sl, r4
 8009f7e:	db1d      	blt.n	8009fbc <_strtol_l.constprop.0+0xc0>
 8009f80:	fb00 4003 	mla	r0, r0, r3, r4
 8009f84:	2201      	movs	r2, #1
 8009f86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f8a:	e7eb      	b.n	8009f64 <_strtol_l.constprop.0+0x68>
 8009f8c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009f8e:	bf04      	itt	eq
 8009f90:	782c      	ldrbeq	r4, [r5, #0]
 8009f92:	1c95      	addeq	r5, r2, #2
 8009f94:	e7cf      	b.n	8009f36 <_strtol_l.constprop.0+0x3a>
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1da      	bne.n	8009f50 <_strtol_l.constprop.0+0x54>
 8009f9a:	2c30      	cmp	r4, #48	@ 0x30
 8009f9c:	bf0c      	ite	eq
 8009f9e:	2308      	moveq	r3, #8
 8009fa0:	230a      	movne	r3, #10
 8009fa2:	e7d5      	b.n	8009f50 <_strtol_l.constprop.0+0x54>
 8009fa4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009fa8:	2f19      	cmp	r7, #25
 8009faa:	d801      	bhi.n	8009fb0 <_strtol_l.constprop.0+0xb4>
 8009fac:	3c37      	subs	r4, #55	@ 0x37
 8009fae:	e7de      	b.n	8009f6e <_strtol_l.constprop.0+0x72>
 8009fb0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009fb4:	2f19      	cmp	r7, #25
 8009fb6:	d804      	bhi.n	8009fc2 <_strtol_l.constprop.0+0xc6>
 8009fb8:	3c57      	subs	r4, #87	@ 0x57
 8009fba:	e7d8      	b.n	8009f6e <_strtol_l.constprop.0+0x72>
 8009fbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009fc0:	e7e1      	b.n	8009f86 <_strtol_l.constprop.0+0x8a>
 8009fc2:	1c53      	adds	r3, r2, #1
 8009fc4:	d108      	bne.n	8009fd8 <_strtol_l.constprop.0+0xdc>
 8009fc6:	2322      	movs	r3, #34	@ 0x22
 8009fc8:	f8ce 3000 	str.w	r3, [lr]
 8009fcc:	4660      	mov	r0, ip
 8009fce:	f1b8 0f00 	cmp.w	r8, #0
 8009fd2:	d0a0      	beq.n	8009f16 <_strtol_l.constprop.0+0x1a>
 8009fd4:	1e69      	subs	r1, r5, #1
 8009fd6:	e006      	b.n	8009fe6 <_strtol_l.constprop.0+0xea>
 8009fd8:	b106      	cbz	r6, 8009fdc <_strtol_l.constprop.0+0xe0>
 8009fda:	4240      	negs	r0, r0
 8009fdc:	f1b8 0f00 	cmp.w	r8, #0
 8009fe0:	d099      	beq.n	8009f16 <_strtol_l.constprop.0+0x1a>
 8009fe2:	2a00      	cmp	r2, #0
 8009fe4:	d1f6      	bne.n	8009fd4 <_strtol_l.constprop.0+0xd8>
 8009fe6:	f8c8 1000 	str.w	r1, [r8]
 8009fea:	e794      	b.n	8009f16 <_strtol_l.constprop.0+0x1a>
 8009fec:	0800b352 	.word	0x0800b352

08009ff0 <strtol>:
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	460a      	mov	r2, r1
 8009ff4:	4601      	mov	r1, r0
 8009ff6:	4802      	ldr	r0, [pc, #8]	@ (800a000 <strtol+0x10>)
 8009ff8:	6800      	ldr	r0, [r0, #0]
 8009ffa:	f7ff bf7f 	b.w	8009efc <_strtol_l.constprop.0>
 8009ffe:	bf00      	nop
 800a000:	20000158 	.word	0x20000158

0800a004 <_fwalk_sglue>:
 800a004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a008:	4607      	mov	r7, r0
 800a00a:	4688      	mov	r8, r1
 800a00c:	4614      	mov	r4, r2
 800a00e:	2600      	movs	r6, #0
 800a010:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a014:	f1b9 0901 	subs.w	r9, r9, #1
 800a018:	d505      	bpl.n	800a026 <_fwalk_sglue+0x22>
 800a01a:	6824      	ldr	r4, [r4, #0]
 800a01c:	2c00      	cmp	r4, #0
 800a01e:	d1f7      	bne.n	800a010 <_fwalk_sglue+0xc>
 800a020:	4630      	mov	r0, r6
 800a022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a026:	89ab      	ldrh	r3, [r5, #12]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d907      	bls.n	800a03c <_fwalk_sglue+0x38>
 800a02c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a030:	3301      	adds	r3, #1
 800a032:	d003      	beq.n	800a03c <_fwalk_sglue+0x38>
 800a034:	4629      	mov	r1, r5
 800a036:	4638      	mov	r0, r7
 800a038:	47c0      	blx	r8
 800a03a:	4306      	orrs	r6, r0
 800a03c:	3568      	adds	r5, #104	@ 0x68
 800a03e:	e7e9      	b.n	800a014 <_fwalk_sglue+0x10>

0800a040 <iprintf>:
 800a040:	b40f      	push	{r0, r1, r2, r3}
 800a042:	b507      	push	{r0, r1, r2, lr}
 800a044:	4906      	ldr	r1, [pc, #24]	@ (800a060 <iprintf+0x20>)
 800a046:	ab04      	add	r3, sp, #16
 800a048:	6808      	ldr	r0, [r1, #0]
 800a04a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a04e:	6881      	ldr	r1, [r0, #8]
 800a050:	9301      	str	r3, [sp, #4]
 800a052:	f000 f8e9 	bl	800a228 <_vfiprintf_r>
 800a056:	b003      	add	sp, #12
 800a058:	f85d eb04 	ldr.w	lr, [sp], #4
 800a05c:	b004      	add	sp, #16
 800a05e:	4770      	bx	lr
 800a060:	20000158 	.word	0x20000158

0800a064 <strtok>:
 800a064:	4b16      	ldr	r3, [pc, #88]	@ (800a0c0 <strtok+0x5c>)
 800a066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a06a:	681f      	ldr	r7, [r3, #0]
 800a06c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800a06e:	4605      	mov	r5, r0
 800a070:	460e      	mov	r6, r1
 800a072:	b9ec      	cbnz	r4, 800a0b0 <strtok+0x4c>
 800a074:	2050      	movs	r0, #80	@ 0x50
 800a076:	f000 f9ef 	bl	800a458 <malloc>
 800a07a:	4602      	mov	r2, r0
 800a07c:	6478      	str	r0, [r7, #68]	@ 0x44
 800a07e:	b920      	cbnz	r0, 800a08a <strtok+0x26>
 800a080:	4b10      	ldr	r3, [pc, #64]	@ (800a0c4 <strtok+0x60>)
 800a082:	4811      	ldr	r0, [pc, #68]	@ (800a0c8 <strtok+0x64>)
 800a084:	215b      	movs	r1, #91	@ 0x5b
 800a086:	f000 f887 	bl	800a198 <__assert_func>
 800a08a:	e9c0 4400 	strd	r4, r4, [r0]
 800a08e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a092:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a096:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800a09a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800a09e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800a0a2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800a0a6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800a0aa:	6184      	str	r4, [r0, #24]
 800a0ac:	7704      	strb	r4, [r0, #28]
 800a0ae:	6244      	str	r4, [r0, #36]	@ 0x24
 800a0b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0b2:	4631      	mov	r1, r6
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0bc:	f000 b806 	b.w	800a0cc <__strtok_r>
 800a0c0:	20000158 	.word	0x20000158
 800a0c4:	0800b2e0 	.word	0x0800b2e0
 800a0c8:	0800b2f7 	.word	0x0800b2f7

0800a0cc <__strtok_r>:
 800a0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	b908      	cbnz	r0, 800a0d6 <__strtok_r+0xa>
 800a0d2:	6814      	ldr	r4, [r2, #0]
 800a0d4:	b144      	cbz	r4, 800a0e8 <__strtok_r+0x1c>
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a0dc:	460f      	mov	r7, r1
 800a0de:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a0e2:	b91e      	cbnz	r6, 800a0ec <__strtok_r+0x20>
 800a0e4:	b965      	cbnz	r5, 800a100 <__strtok_r+0x34>
 800a0e6:	6015      	str	r5, [r2, #0]
 800a0e8:	2000      	movs	r0, #0
 800a0ea:	e005      	b.n	800a0f8 <__strtok_r+0x2c>
 800a0ec:	42b5      	cmp	r5, r6
 800a0ee:	d1f6      	bne.n	800a0de <__strtok_r+0x12>
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1f0      	bne.n	800a0d6 <__strtok_r+0xa>
 800a0f4:	6014      	str	r4, [r2, #0]
 800a0f6:	7003      	strb	r3, [r0, #0]
 800a0f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0fa:	461c      	mov	r4, r3
 800a0fc:	e00c      	b.n	800a118 <__strtok_r+0x4c>
 800a0fe:	b915      	cbnz	r5, 800a106 <__strtok_r+0x3a>
 800a100:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a104:	460e      	mov	r6, r1
 800a106:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a10a:	42ab      	cmp	r3, r5
 800a10c:	d1f7      	bne.n	800a0fe <__strtok_r+0x32>
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d0f3      	beq.n	800a0fa <__strtok_r+0x2e>
 800a112:	2300      	movs	r3, #0
 800a114:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a118:	6014      	str	r4, [r2, #0]
 800a11a:	e7ed      	b.n	800a0f8 <__strtok_r+0x2c>

0800a11c <memset>:
 800a11c:	4402      	add	r2, r0
 800a11e:	4603      	mov	r3, r0
 800a120:	4293      	cmp	r3, r2
 800a122:	d100      	bne.n	800a126 <memset+0xa>
 800a124:	4770      	bx	lr
 800a126:	f803 1b01 	strb.w	r1, [r3], #1
 800a12a:	e7f9      	b.n	800a120 <memset+0x4>

0800a12c <__errno>:
 800a12c:	4b01      	ldr	r3, [pc, #4]	@ (800a134 <__errno+0x8>)
 800a12e:	6818      	ldr	r0, [r3, #0]
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	20000158 	.word	0x20000158

0800a138 <__libc_init_array>:
 800a138:	b570      	push	{r4, r5, r6, lr}
 800a13a:	4d0d      	ldr	r5, [pc, #52]	@ (800a170 <__libc_init_array+0x38>)
 800a13c:	4c0d      	ldr	r4, [pc, #52]	@ (800a174 <__libc_init_array+0x3c>)
 800a13e:	1b64      	subs	r4, r4, r5
 800a140:	10a4      	asrs	r4, r4, #2
 800a142:	2600      	movs	r6, #0
 800a144:	42a6      	cmp	r6, r4
 800a146:	d109      	bne.n	800a15c <__libc_init_array+0x24>
 800a148:	4d0b      	ldr	r5, [pc, #44]	@ (800a178 <__libc_init_array+0x40>)
 800a14a:	4c0c      	ldr	r4, [pc, #48]	@ (800a17c <__libc_init_array+0x44>)
 800a14c:	f000 fece 	bl	800aeec <_init>
 800a150:	1b64      	subs	r4, r4, r5
 800a152:	10a4      	asrs	r4, r4, #2
 800a154:	2600      	movs	r6, #0
 800a156:	42a6      	cmp	r6, r4
 800a158:	d105      	bne.n	800a166 <__libc_init_array+0x2e>
 800a15a:	bd70      	pop	{r4, r5, r6, pc}
 800a15c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a160:	4798      	blx	r3
 800a162:	3601      	adds	r6, #1
 800a164:	e7ee      	b.n	800a144 <__libc_init_array+0xc>
 800a166:	f855 3b04 	ldr.w	r3, [r5], #4
 800a16a:	4798      	blx	r3
 800a16c:	3601      	adds	r6, #1
 800a16e:	e7f2      	b.n	800a156 <__libc_init_array+0x1e>
 800a170:	0800b4cc 	.word	0x0800b4cc
 800a174:	0800b4cc 	.word	0x0800b4cc
 800a178:	0800b4cc 	.word	0x0800b4cc
 800a17c:	0800b4d0 	.word	0x0800b4d0

0800a180 <__retarget_lock_init_recursive>:
 800a180:	4770      	bx	lr

0800a182 <__retarget_lock_acquire_recursive>:
 800a182:	4770      	bx	lr

0800a184 <__retarget_lock_release_recursive>:
 800a184:	4770      	bx	lr

0800a186 <strcpy>:
 800a186:	4603      	mov	r3, r0
 800a188:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a18c:	f803 2b01 	strb.w	r2, [r3], #1
 800a190:	2a00      	cmp	r2, #0
 800a192:	d1f9      	bne.n	800a188 <strcpy+0x2>
 800a194:	4770      	bx	lr
	...

0800a198 <__assert_func>:
 800a198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a19a:	4614      	mov	r4, r2
 800a19c:	461a      	mov	r2, r3
 800a19e:	4b09      	ldr	r3, [pc, #36]	@ (800a1c4 <__assert_func+0x2c>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4605      	mov	r5, r0
 800a1a4:	68d8      	ldr	r0, [r3, #12]
 800a1a6:	b954      	cbnz	r4, 800a1be <__assert_func+0x26>
 800a1a8:	4b07      	ldr	r3, [pc, #28]	@ (800a1c8 <__assert_func+0x30>)
 800a1aa:	461c      	mov	r4, r3
 800a1ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1b0:	9100      	str	r1, [sp, #0]
 800a1b2:	462b      	mov	r3, r5
 800a1b4:	4905      	ldr	r1, [pc, #20]	@ (800a1cc <__assert_func+0x34>)
 800a1b6:	f000 fc83 	bl	800aac0 <fiprintf>
 800a1ba:	f000 fe01 	bl	800adc0 <abort>
 800a1be:	4b04      	ldr	r3, [pc, #16]	@ (800a1d0 <__assert_func+0x38>)
 800a1c0:	e7f4      	b.n	800a1ac <__assert_func+0x14>
 800a1c2:	bf00      	nop
 800a1c4:	20000158 	.word	0x20000158
 800a1c8:	0800b48d 	.word	0x0800b48d
 800a1cc:	0800b45f 	.word	0x0800b45f
 800a1d0:	0800b452 	.word	0x0800b452

0800a1d4 <__sfputc_r>:
 800a1d4:	6893      	ldr	r3, [r2, #8]
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	b410      	push	{r4}
 800a1dc:	6093      	str	r3, [r2, #8]
 800a1de:	da08      	bge.n	800a1f2 <__sfputc_r+0x1e>
 800a1e0:	6994      	ldr	r4, [r2, #24]
 800a1e2:	42a3      	cmp	r3, r4
 800a1e4:	db01      	blt.n	800a1ea <__sfputc_r+0x16>
 800a1e6:	290a      	cmp	r1, #10
 800a1e8:	d103      	bne.n	800a1f2 <__sfputc_r+0x1e>
 800a1ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1ee:	f000 bc79 	b.w	800aae4 <__swbuf_r>
 800a1f2:	6813      	ldr	r3, [r2, #0]
 800a1f4:	1c58      	adds	r0, r3, #1
 800a1f6:	6010      	str	r0, [r2, #0]
 800a1f8:	7019      	strb	r1, [r3, #0]
 800a1fa:	4608      	mov	r0, r1
 800a1fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <__sfputs_r>:
 800a202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a204:	4606      	mov	r6, r0
 800a206:	460f      	mov	r7, r1
 800a208:	4614      	mov	r4, r2
 800a20a:	18d5      	adds	r5, r2, r3
 800a20c:	42ac      	cmp	r4, r5
 800a20e:	d101      	bne.n	800a214 <__sfputs_r+0x12>
 800a210:	2000      	movs	r0, #0
 800a212:	e007      	b.n	800a224 <__sfputs_r+0x22>
 800a214:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a218:	463a      	mov	r2, r7
 800a21a:	4630      	mov	r0, r6
 800a21c:	f7ff ffda 	bl	800a1d4 <__sfputc_r>
 800a220:	1c43      	adds	r3, r0, #1
 800a222:	d1f3      	bne.n	800a20c <__sfputs_r+0xa>
 800a224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a228 <_vfiprintf_r>:
 800a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	460d      	mov	r5, r1
 800a22e:	b09d      	sub	sp, #116	@ 0x74
 800a230:	4614      	mov	r4, r2
 800a232:	4698      	mov	r8, r3
 800a234:	4606      	mov	r6, r0
 800a236:	b118      	cbz	r0, 800a240 <_vfiprintf_r+0x18>
 800a238:	6a03      	ldr	r3, [r0, #32]
 800a23a:	b90b      	cbnz	r3, 800a240 <_vfiprintf_r+0x18>
 800a23c:	f7ff fe46 	bl	8009ecc <__sinit>
 800a240:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a242:	07d9      	lsls	r1, r3, #31
 800a244:	d405      	bmi.n	800a252 <_vfiprintf_r+0x2a>
 800a246:	89ab      	ldrh	r3, [r5, #12]
 800a248:	059a      	lsls	r2, r3, #22
 800a24a:	d402      	bmi.n	800a252 <_vfiprintf_r+0x2a>
 800a24c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a24e:	f7ff ff98 	bl	800a182 <__retarget_lock_acquire_recursive>
 800a252:	89ab      	ldrh	r3, [r5, #12]
 800a254:	071b      	lsls	r3, r3, #28
 800a256:	d501      	bpl.n	800a25c <_vfiprintf_r+0x34>
 800a258:	692b      	ldr	r3, [r5, #16]
 800a25a:	b99b      	cbnz	r3, 800a284 <_vfiprintf_r+0x5c>
 800a25c:	4629      	mov	r1, r5
 800a25e:	4630      	mov	r0, r6
 800a260:	f000 fc7e 	bl	800ab60 <__swsetup_r>
 800a264:	b170      	cbz	r0, 800a284 <_vfiprintf_r+0x5c>
 800a266:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a268:	07dc      	lsls	r4, r3, #31
 800a26a:	d504      	bpl.n	800a276 <_vfiprintf_r+0x4e>
 800a26c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a270:	b01d      	add	sp, #116	@ 0x74
 800a272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a276:	89ab      	ldrh	r3, [r5, #12]
 800a278:	0598      	lsls	r0, r3, #22
 800a27a:	d4f7      	bmi.n	800a26c <_vfiprintf_r+0x44>
 800a27c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a27e:	f7ff ff81 	bl	800a184 <__retarget_lock_release_recursive>
 800a282:	e7f3      	b.n	800a26c <_vfiprintf_r+0x44>
 800a284:	2300      	movs	r3, #0
 800a286:	9309      	str	r3, [sp, #36]	@ 0x24
 800a288:	2320      	movs	r3, #32
 800a28a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a28e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a292:	2330      	movs	r3, #48	@ 0x30
 800a294:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a444 <_vfiprintf_r+0x21c>
 800a298:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a29c:	f04f 0901 	mov.w	r9, #1
 800a2a0:	4623      	mov	r3, r4
 800a2a2:	469a      	mov	sl, r3
 800a2a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2a8:	b10a      	cbz	r2, 800a2ae <_vfiprintf_r+0x86>
 800a2aa:	2a25      	cmp	r2, #37	@ 0x25
 800a2ac:	d1f9      	bne.n	800a2a2 <_vfiprintf_r+0x7a>
 800a2ae:	ebba 0b04 	subs.w	fp, sl, r4
 800a2b2:	d00b      	beq.n	800a2cc <_vfiprintf_r+0xa4>
 800a2b4:	465b      	mov	r3, fp
 800a2b6:	4622      	mov	r2, r4
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	f7ff ffa1 	bl	800a202 <__sfputs_r>
 800a2c0:	3001      	adds	r0, #1
 800a2c2:	f000 80a7 	beq.w	800a414 <_vfiprintf_r+0x1ec>
 800a2c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2c8:	445a      	add	r2, fp
 800a2ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f000 809f 	beq.w	800a414 <_vfiprintf_r+0x1ec>
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a2dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2e0:	f10a 0a01 	add.w	sl, sl, #1
 800a2e4:	9304      	str	r3, [sp, #16]
 800a2e6:	9307      	str	r3, [sp, #28]
 800a2e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2ee:	4654      	mov	r4, sl
 800a2f0:	2205      	movs	r2, #5
 800a2f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2f6:	4853      	ldr	r0, [pc, #332]	@ (800a444 <_vfiprintf_r+0x21c>)
 800a2f8:	f7f5 ffaa 	bl	8000250 <memchr>
 800a2fc:	9a04      	ldr	r2, [sp, #16]
 800a2fe:	b9d8      	cbnz	r0, 800a338 <_vfiprintf_r+0x110>
 800a300:	06d1      	lsls	r1, r2, #27
 800a302:	bf44      	itt	mi
 800a304:	2320      	movmi	r3, #32
 800a306:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a30a:	0713      	lsls	r3, r2, #28
 800a30c:	bf44      	itt	mi
 800a30e:	232b      	movmi	r3, #43	@ 0x2b
 800a310:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a314:	f89a 3000 	ldrb.w	r3, [sl]
 800a318:	2b2a      	cmp	r3, #42	@ 0x2a
 800a31a:	d015      	beq.n	800a348 <_vfiprintf_r+0x120>
 800a31c:	9a07      	ldr	r2, [sp, #28]
 800a31e:	4654      	mov	r4, sl
 800a320:	2000      	movs	r0, #0
 800a322:	f04f 0c0a 	mov.w	ip, #10
 800a326:	4621      	mov	r1, r4
 800a328:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a32c:	3b30      	subs	r3, #48	@ 0x30
 800a32e:	2b09      	cmp	r3, #9
 800a330:	d94b      	bls.n	800a3ca <_vfiprintf_r+0x1a2>
 800a332:	b1b0      	cbz	r0, 800a362 <_vfiprintf_r+0x13a>
 800a334:	9207      	str	r2, [sp, #28]
 800a336:	e014      	b.n	800a362 <_vfiprintf_r+0x13a>
 800a338:	eba0 0308 	sub.w	r3, r0, r8
 800a33c:	fa09 f303 	lsl.w	r3, r9, r3
 800a340:	4313      	orrs	r3, r2
 800a342:	9304      	str	r3, [sp, #16]
 800a344:	46a2      	mov	sl, r4
 800a346:	e7d2      	b.n	800a2ee <_vfiprintf_r+0xc6>
 800a348:	9b03      	ldr	r3, [sp, #12]
 800a34a:	1d19      	adds	r1, r3, #4
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	9103      	str	r1, [sp, #12]
 800a350:	2b00      	cmp	r3, #0
 800a352:	bfbb      	ittet	lt
 800a354:	425b      	neglt	r3, r3
 800a356:	f042 0202 	orrlt.w	r2, r2, #2
 800a35a:	9307      	strge	r3, [sp, #28]
 800a35c:	9307      	strlt	r3, [sp, #28]
 800a35e:	bfb8      	it	lt
 800a360:	9204      	strlt	r2, [sp, #16]
 800a362:	7823      	ldrb	r3, [r4, #0]
 800a364:	2b2e      	cmp	r3, #46	@ 0x2e
 800a366:	d10a      	bne.n	800a37e <_vfiprintf_r+0x156>
 800a368:	7863      	ldrb	r3, [r4, #1]
 800a36a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a36c:	d132      	bne.n	800a3d4 <_vfiprintf_r+0x1ac>
 800a36e:	9b03      	ldr	r3, [sp, #12]
 800a370:	1d1a      	adds	r2, r3, #4
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	9203      	str	r2, [sp, #12]
 800a376:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a37a:	3402      	adds	r4, #2
 800a37c:	9305      	str	r3, [sp, #20]
 800a37e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a454 <_vfiprintf_r+0x22c>
 800a382:	7821      	ldrb	r1, [r4, #0]
 800a384:	2203      	movs	r2, #3
 800a386:	4650      	mov	r0, sl
 800a388:	f7f5 ff62 	bl	8000250 <memchr>
 800a38c:	b138      	cbz	r0, 800a39e <_vfiprintf_r+0x176>
 800a38e:	9b04      	ldr	r3, [sp, #16]
 800a390:	eba0 000a 	sub.w	r0, r0, sl
 800a394:	2240      	movs	r2, #64	@ 0x40
 800a396:	4082      	lsls	r2, r0
 800a398:	4313      	orrs	r3, r2
 800a39a:	3401      	adds	r4, #1
 800a39c:	9304      	str	r3, [sp, #16]
 800a39e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3a2:	4829      	ldr	r0, [pc, #164]	@ (800a448 <_vfiprintf_r+0x220>)
 800a3a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a3a8:	2206      	movs	r2, #6
 800a3aa:	f7f5 ff51 	bl	8000250 <memchr>
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	d03f      	beq.n	800a432 <_vfiprintf_r+0x20a>
 800a3b2:	4b26      	ldr	r3, [pc, #152]	@ (800a44c <_vfiprintf_r+0x224>)
 800a3b4:	bb1b      	cbnz	r3, 800a3fe <_vfiprintf_r+0x1d6>
 800a3b6:	9b03      	ldr	r3, [sp, #12]
 800a3b8:	3307      	adds	r3, #7
 800a3ba:	f023 0307 	bic.w	r3, r3, #7
 800a3be:	3308      	adds	r3, #8
 800a3c0:	9303      	str	r3, [sp, #12]
 800a3c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3c4:	443b      	add	r3, r7
 800a3c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3c8:	e76a      	b.n	800a2a0 <_vfiprintf_r+0x78>
 800a3ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3ce:	460c      	mov	r4, r1
 800a3d0:	2001      	movs	r0, #1
 800a3d2:	e7a8      	b.n	800a326 <_vfiprintf_r+0xfe>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	3401      	adds	r4, #1
 800a3d8:	9305      	str	r3, [sp, #20]
 800a3da:	4619      	mov	r1, r3
 800a3dc:	f04f 0c0a 	mov.w	ip, #10
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3e6:	3a30      	subs	r2, #48	@ 0x30
 800a3e8:	2a09      	cmp	r2, #9
 800a3ea:	d903      	bls.n	800a3f4 <_vfiprintf_r+0x1cc>
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d0c6      	beq.n	800a37e <_vfiprintf_r+0x156>
 800a3f0:	9105      	str	r1, [sp, #20]
 800a3f2:	e7c4      	b.n	800a37e <_vfiprintf_r+0x156>
 800a3f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3f8:	4604      	mov	r4, r0
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e7f0      	b.n	800a3e0 <_vfiprintf_r+0x1b8>
 800a3fe:	ab03      	add	r3, sp, #12
 800a400:	9300      	str	r3, [sp, #0]
 800a402:	462a      	mov	r2, r5
 800a404:	4b12      	ldr	r3, [pc, #72]	@ (800a450 <_vfiprintf_r+0x228>)
 800a406:	a904      	add	r1, sp, #16
 800a408:	4630      	mov	r0, r6
 800a40a:	f3af 8000 	nop.w
 800a40e:	4607      	mov	r7, r0
 800a410:	1c78      	adds	r0, r7, #1
 800a412:	d1d6      	bne.n	800a3c2 <_vfiprintf_r+0x19a>
 800a414:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a416:	07d9      	lsls	r1, r3, #31
 800a418:	d405      	bmi.n	800a426 <_vfiprintf_r+0x1fe>
 800a41a:	89ab      	ldrh	r3, [r5, #12]
 800a41c:	059a      	lsls	r2, r3, #22
 800a41e:	d402      	bmi.n	800a426 <_vfiprintf_r+0x1fe>
 800a420:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a422:	f7ff feaf 	bl	800a184 <__retarget_lock_release_recursive>
 800a426:	89ab      	ldrh	r3, [r5, #12]
 800a428:	065b      	lsls	r3, r3, #25
 800a42a:	f53f af1f 	bmi.w	800a26c <_vfiprintf_r+0x44>
 800a42e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a430:	e71e      	b.n	800a270 <_vfiprintf_r+0x48>
 800a432:	ab03      	add	r3, sp, #12
 800a434:	9300      	str	r3, [sp, #0]
 800a436:	462a      	mov	r2, r5
 800a438:	4b05      	ldr	r3, [pc, #20]	@ (800a450 <_vfiprintf_r+0x228>)
 800a43a:	a904      	add	r1, sp, #16
 800a43c:	4630      	mov	r0, r6
 800a43e:	f000 f923 	bl	800a688 <_printf_i>
 800a442:	e7e4      	b.n	800a40e <_vfiprintf_r+0x1e6>
 800a444:	0800b48e 	.word	0x0800b48e
 800a448:	0800b498 	.word	0x0800b498
 800a44c:	00000000 	.word	0x00000000
 800a450:	0800a203 	.word	0x0800a203
 800a454:	0800b494 	.word	0x0800b494

0800a458 <malloc>:
 800a458:	4b02      	ldr	r3, [pc, #8]	@ (800a464 <malloc+0xc>)
 800a45a:	4601      	mov	r1, r0
 800a45c:	6818      	ldr	r0, [r3, #0]
 800a45e:	f000 b825 	b.w	800a4ac <_malloc_r>
 800a462:	bf00      	nop
 800a464:	20000158 	.word	0x20000158

0800a468 <sbrk_aligned>:
 800a468:	b570      	push	{r4, r5, r6, lr}
 800a46a:	4e0f      	ldr	r6, [pc, #60]	@ (800a4a8 <sbrk_aligned+0x40>)
 800a46c:	460c      	mov	r4, r1
 800a46e:	6831      	ldr	r1, [r6, #0]
 800a470:	4605      	mov	r5, r0
 800a472:	b911      	cbnz	r1, 800a47a <sbrk_aligned+0x12>
 800a474:	f000 fc82 	bl	800ad7c <_sbrk_r>
 800a478:	6030      	str	r0, [r6, #0]
 800a47a:	4621      	mov	r1, r4
 800a47c:	4628      	mov	r0, r5
 800a47e:	f000 fc7d 	bl	800ad7c <_sbrk_r>
 800a482:	1c43      	adds	r3, r0, #1
 800a484:	d103      	bne.n	800a48e <sbrk_aligned+0x26>
 800a486:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a48a:	4620      	mov	r0, r4
 800a48c:	bd70      	pop	{r4, r5, r6, pc}
 800a48e:	1cc4      	adds	r4, r0, #3
 800a490:	f024 0403 	bic.w	r4, r4, #3
 800a494:	42a0      	cmp	r0, r4
 800a496:	d0f8      	beq.n	800a48a <sbrk_aligned+0x22>
 800a498:	1a21      	subs	r1, r4, r0
 800a49a:	4628      	mov	r0, r5
 800a49c:	f000 fc6e 	bl	800ad7c <_sbrk_r>
 800a4a0:	3001      	adds	r0, #1
 800a4a2:	d1f2      	bne.n	800a48a <sbrk_aligned+0x22>
 800a4a4:	e7ef      	b.n	800a486 <sbrk_aligned+0x1e>
 800a4a6:	bf00      	nop
 800a4a8:	200009fc 	.word	0x200009fc

0800a4ac <_malloc_r>:
 800a4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4b0:	1ccd      	adds	r5, r1, #3
 800a4b2:	f025 0503 	bic.w	r5, r5, #3
 800a4b6:	3508      	adds	r5, #8
 800a4b8:	2d0c      	cmp	r5, #12
 800a4ba:	bf38      	it	cc
 800a4bc:	250c      	movcc	r5, #12
 800a4be:	2d00      	cmp	r5, #0
 800a4c0:	4606      	mov	r6, r0
 800a4c2:	db01      	blt.n	800a4c8 <_malloc_r+0x1c>
 800a4c4:	42a9      	cmp	r1, r5
 800a4c6:	d904      	bls.n	800a4d2 <_malloc_r+0x26>
 800a4c8:	230c      	movs	r3, #12
 800a4ca:	6033      	str	r3, [r6, #0]
 800a4cc:	2000      	movs	r0, #0
 800a4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a5a8 <_malloc_r+0xfc>
 800a4d6:	f000 faa3 	bl	800aa20 <__malloc_lock>
 800a4da:	f8d8 3000 	ldr.w	r3, [r8]
 800a4de:	461c      	mov	r4, r3
 800a4e0:	bb44      	cbnz	r4, 800a534 <_malloc_r+0x88>
 800a4e2:	4629      	mov	r1, r5
 800a4e4:	4630      	mov	r0, r6
 800a4e6:	f7ff ffbf 	bl	800a468 <sbrk_aligned>
 800a4ea:	1c43      	adds	r3, r0, #1
 800a4ec:	4604      	mov	r4, r0
 800a4ee:	d158      	bne.n	800a5a2 <_malloc_r+0xf6>
 800a4f0:	f8d8 4000 	ldr.w	r4, [r8]
 800a4f4:	4627      	mov	r7, r4
 800a4f6:	2f00      	cmp	r7, #0
 800a4f8:	d143      	bne.n	800a582 <_malloc_r+0xd6>
 800a4fa:	2c00      	cmp	r4, #0
 800a4fc:	d04b      	beq.n	800a596 <_malloc_r+0xea>
 800a4fe:	6823      	ldr	r3, [r4, #0]
 800a500:	4639      	mov	r1, r7
 800a502:	4630      	mov	r0, r6
 800a504:	eb04 0903 	add.w	r9, r4, r3
 800a508:	f000 fc38 	bl	800ad7c <_sbrk_r>
 800a50c:	4581      	cmp	r9, r0
 800a50e:	d142      	bne.n	800a596 <_malloc_r+0xea>
 800a510:	6821      	ldr	r1, [r4, #0]
 800a512:	1a6d      	subs	r5, r5, r1
 800a514:	4629      	mov	r1, r5
 800a516:	4630      	mov	r0, r6
 800a518:	f7ff ffa6 	bl	800a468 <sbrk_aligned>
 800a51c:	3001      	adds	r0, #1
 800a51e:	d03a      	beq.n	800a596 <_malloc_r+0xea>
 800a520:	6823      	ldr	r3, [r4, #0]
 800a522:	442b      	add	r3, r5
 800a524:	6023      	str	r3, [r4, #0]
 800a526:	f8d8 3000 	ldr.w	r3, [r8]
 800a52a:	685a      	ldr	r2, [r3, #4]
 800a52c:	bb62      	cbnz	r2, 800a588 <_malloc_r+0xdc>
 800a52e:	f8c8 7000 	str.w	r7, [r8]
 800a532:	e00f      	b.n	800a554 <_malloc_r+0xa8>
 800a534:	6822      	ldr	r2, [r4, #0]
 800a536:	1b52      	subs	r2, r2, r5
 800a538:	d420      	bmi.n	800a57c <_malloc_r+0xd0>
 800a53a:	2a0b      	cmp	r2, #11
 800a53c:	d917      	bls.n	800a56e <_malloc_r+0xc2>
 800a53e:	1961      	adds	r1, r4, r5
 800a540:	42a3      	cmp	r3, r4
 800a542:	6025      	str	r5, [r4, #0]
 800a544:	bf18      	it	ne
 800a546:	6059      	strne	r1, [r3, #4]
 800a548:	6863      	ldr	r3, [r4, #4]
 800a54a:	bf08      	it	eq
 800a54c:	f8c8 1000 	streq.w	r1, [r8]
 800a550:	5162      	str	r2, [r4, r5]
 800a552:	604b      	str	r3, [r1, #4]
 800a554:	4630      	mov	r0, r6
 800a556:	f000 fa69 	bl	800aa2c <__malloc_unlock>
 800a55a:	f104 000b 	add.w	r0, r4, #11
 800a55e:	1d23      	adds	r3, r4, #4
 800a560:	f020 0007 	bic.w	r0, r0, #7
 800a564:	1ac2      	subs	r2, r0, r3
 800a566:	bf1c      	itt	ne
 800a568:	1a1b      	subne	r3, r3, r0
 800a56a:	50a3      	strne	r3, [r4, r2]
 800a56c:	e7af      	b.n	800a4ce <_malloc_r+0x22>
 800a56e:	6862      	ldr	r2, [r4, #4]
 800a570:	42a3      	cmp	r3, r4
 800a572:	bf0c      	ite	eq
 800a574:	f8c8 2000 	streq.w	r2, [r8]
 800a578:	605a      	strne	r2, [r3, #4]
 800a57a:	e7eb      	b.n	800a554 <_malloc_r+0xa8>
 800a57c:	4623      	mov	r3, r4
 800a57e:	6864      	ldr	r4, [r4, #4]
 800a580:	e7ae      	b.n	800a4e0 <_malloc_r+0x34>
 800a582:	463c      	mov	r4, r7
 800a584:	687f      	ldr	r7, [r7, #4]
 800a586:	e7b6      	b.n	800a4f6 <_malloc_r+0x4a>
 800a588:	461a      	mov	r2, r3
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	42a3      	cmp	r3, r4
 800a58e:	d1fb      	bne.n	800a588 <_malloc_r+0xdc>
 800a590:	2300      	movs	r3, #0
 800a592:	6053      	str	r3, [r2, #4]
 800a594:	e7de      	b.n	800a554 <_malloc_r+0xa8>
 800a596:	230c      	movs	r3, #12
 800a598:	6033      	str	r3, [r6, #0]
 800a59a:	4630      	mov	r0, r6
 800a59c:	f000 fa46 	bl	800aa2c <__malloc_unlock>
 800a5a0:	e794      	b.n	800a4cc <_malloc_r+0x20>
 800a5a2:	6005      	str	r5, [r0, #0]
 800a5a4:	e7d6      	b.n	800a554 <_malloc_r+0xa8>
 800a5a6:	bf00      	nop
 800a5a8:	20000a00 	.word	0x20000a00

0800a5ac <_printf_common>:
 800a5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5b0:	4616      	mov	r6, r2
 800a5b2:	4698      	mov	r8, r3
 800a5b4:	688a      	ldr	r2, [r1, #8]
 800a5b6:	690b      	ldr	r3, [r1, #16]
 800a5b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	bfb8      	it	lt
 800a5c0:	4613      	movlt	r3, r2
 800a5c2:	6033      	str	r3, [r6, #0]
 800a5c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a5c8:	4607      	mov	r7, r0
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	b10a      	cbz	r2, 800a5d2 <_printf_common+0x26>
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	6033      	str	r3, [r6, #0]
 800a5d2:	6823      	ldr	r3, [r4, #0]
 800a5d4:	0699      	lsls	r1, r3, #26
 800a5d6:	bf42      	ittt	mi
 800a5d8:	6833      	ldrmi	r3, [r6, #0]
 800a5da:	3302      	addmi	r3, #2
 800a5dc:	6033      	strmi	r3, [r6, #0]
 800a5de:	6825      	ldr	r5, [r4, #0]
 800a5e0:	f015 0506 	ands.w	r5, r5, #6
 800a5e4:	d106      	bne.n	800a5f4 <_printf_common+0x48>
 800a5e6:	f104 0a19 	add.w	sl, r4, #25
 800a5ea:	68e3      	ldr	r3, [r4, #12]
 800a5ec:	6832      	ldr	r2, [r6, #0]
 800a5ee:	1a9b      	subs	r3, r3, r2
 800a5f0:	42ab      	cmp	r3, r5
 800a5f2:	dc26      	bgt.n	800a642 <_printf_common+0x96>
 800a5f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a5f8:	6822      	ldr	r2, [r4, #0]
 800a5fa:	3b00      	subs	r3, #0
 800a5fc:	bf18      	it	ne
 800a5fe:	2301      	movne	r3, #1
 800a600:	0692      	lsls	r2, r2, #26
 800a602:	d42b      	bmi.n	800a65c <_printf_common+0xb0>
 800a604:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a608:	4641      	mov	r1, r8
 800a60a:	4638      	mov	r0, r7
 800a60c:	47c8      	blx	r9
 800a60e:	3001      	adds	r0, #1
 800a610:	d01e      	beq.n	800a650 <_printf_common+0xa4>
 800a612:	6823      	ldr	r3, [r4, #0]
 800a614:	6922      	ldr	r2, [r4, #16]
 800a616:	f003 0306 	and.w	r3, r3, #6
 800a61a:	2b04      	cmp	r3, #4
 800a61c:	bf02      	ittt	eq
 800a61e:	68e5      	ldreq	r5, [r4, #12]
 800a620:	6833      	ldreq	r3, [r6, #0]
 800a622:	1aed      	subeq	r5, r5, r3
 800a624:	68a3      	ldr	r3, [r4, #8]
 800a626:	bf0c      	ite	eq
 800a628:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a62c:	2500      	movne	r5, #0
 800a62e:	4293      	cmp	r3, r2
 800a630:	bfc4      	itt	gt
 800a632:	1a9b      	subgt	r3, r3, r2
 800a634:	18ed      	addgt	r5, r5, r3
 800a636:	2600      	movs	r6, #0
 800a638:	341a      	adds	r4, #26
 800a63a:	42b5      	cmp	r5, r6
 800a63c:	d11a      	bne.n	800a674 <_printf_common+0xc8>
 800a63e:	2000      	movs	r0, #0
 800a640:	e008      	b.n	800a654 <_printf_common+0xa8>
 800a642:	2301      	movs	r3, #1
 800a644:	4652      	mov	r2, sl
 800a646:	4641      	mov	r1, r8
 800a648:	4638      	mov	r0, r7
 800a64a:	47c8      	blx	r9
 800a64c:	3001      	adds	r0, #1
 800a64e:	d103      	bne.n	800a658 <_printf_common+0xac>
 800a650:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a658:	3501      	adds	r5, #1
 800a65a:	e7c6      	b.n	800a5ea <_printf_common+0x3e>
 800a65c:	18e1      	adds	r1, r4, r3
 800a65e:	1c5a      	adds	r2, r3, #1
 800a660:	2030      	movs	r0, #48	@ 0x30
 800a662:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a666:	4422      	add	r2, r4
 800a668:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a66c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a670:	3302      	adds	r3, #2
 800a672:	e7c7      	b.n	800a604 <_printf_common+0x58>
 800a674:	2301      	movs	r3, #1
 800a676:	4622      	mov	r2, r4
 800a678:	4641      	mov	r1, r8
 800a67a:	4638      	mov	r0, r7
 800a67c:	47c8      	blx	r9
 800a67e:	3001      	adds	r0, #1
 800a680:	d0e6      	beq.n	800a650 <_printf_common+0xa4>
 800a682:	3601      	adds	r6, #1
 800a684:	e7d9      	b.n	800a63a <_printf_common+0x8e>
	...

0800a688 <_printf_i>:
 800a688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a68c:	7e0f      	ldrb	r7, [r1, #24]
 800a68e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a690:	2f78      	cmp	r7, #120	@ 0x78
 800a692:	4691      	mov	r9, r2
 800a694:	4680      	mov	r8, r0
 800a696:	460c      	mov	r4, r1
 800a698:	469a      	mov	sl, r3
 800a69a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a69e:	d807      	bhi.n	800a6b0 <_printf_i+0x28>
 800a6a0:	2f62      	cmp	r7, #98	@ 0x62
 800a6a2:	d80a      	bhi.n	800a6ba <_printf_i+0x32>
 800a6a4:	2f00      	cmp	r7, #0
 800a6a6:	f000 80d2 	beq.w	800a84e <_printf_i+0x1c6>
 800a6aa:	2f58      	cmp	r7, #88	@ 0x58
 800a6ac:	f000 80b9 	beq.w	800a822 <_printf_i+0x19a>
 800a6b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a6b8:	e03a      	b.n	800a730 <_printf_i+0xa8>
 800a6ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a6be:	2b15      	cmp	r3, #21
 800a6c0:	d8f6      	bhi.n	800a6b0 <_printf_i+0x28>
 800a6c2:	a101      	add	r1, pc, #4	@ (adr r1, 800a6c8 <_printf_i+0x40>)
 800a6c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6c8:	0800a721 	.word	0x0800a721
 800a6cc:	0800a735 	.word	0x0800a735
 800a6d0:	0800a6b1 	.word	0x0800a6b1
 800a6d4:	0800a6b1 	.word	0x0800a6b1
 800a6d8:	0800a6b1 	.word	0x0800a6b1
 800a6dc:	0800a6b1 	.word	0x0800a6b1
 800a6e0:	0800a735 	.word	0x0800a735
 800a6e4:	0800a6b1 	.word	0x0800a6b1
 800a6e8:	0800a6b1 	.word	0x0800a6b1
 800a6ec:	0800a6b1 	.word	0x0800a6b1
 800a6f0:	0800a6b1 	.word	0x0800a6b1
 800a6f4:	0800a835 	.word	0x0800a835
 800a6f8:	0800a75f 	.word	0x0800a75f
 800a6fc:	0800a7ef 	.word	0x0800a7ef
 800a700:	0800a6b1 	.word	0x0800a6b1
 800a704:	0800a6b1 	.word	0x0800a6b1
 800a708:	0800a857 	.word	0x0800a857
 800a70c:	0800a6b1 	.word	0x0800a6b1
 800a710:	0800a75f 	.word	0x0800a75f
 800a714:	0800a6b1 	.word	0x0800a6b1
 800a718:	0800a6b1 	.word	0x0800a6b1
 800a71c:	0800a7f7 	.word	0x0800a7f7
 800a720:	6833      	ldr	r3, [r6, #0]
 800a722:	1d1a      	adds	r2, r3, #4
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	6032      	str	r2, [r6, #0]
 800a728:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a72c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a730:	2301      	movs	r3, #1
 800a732:	e09d      	b.n	800a870 <_printf_i+0x1e8>
 800a734:	6833      	ldr	r3, [r6, #0]
 800a736:	6820      	ldr	r0, [r4, #0]
 800a738:	1d19      	adds	r1, r3, #4
 800a73a:	6031      	str	r1, [r6, #0]
 800a73c:	0606      	lsls	r6, r0, #24
 800a73e:	d501      	bpl.n	800a744 <_printf_i+0xbc>
 800a740:	681d      	ldr	r5, [r3, #0]
 800a742:	e003      	b.n	800a74c <_printf_i+0xc4>
 800a744:	0645      	lsls	r5, r0, #25
 800a746:	d5fb      	bpl.n	800a740 <_printf_i+0xb8>
 800a748:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a74c:	2d00      	cmp	r5, #0
 800a74e:	da03      	bge.n	800a758 <_printf_i+0xd0>
 800a750:	232d      	movs	r3, #45	@ 0x2d
 800a752:	426d      	negs	r5, r5
 800a754:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a758:	4859      	ldr	r0, [pc, #356]	@ (800a8c0 <_printf_i+0x238>)
 800a75a:	230a      	movs	r3, #10
 800a75c:	e011      	b.n	800a782 <_printf_i+0xfa>
 800a75e:	6821      	ldr	r1, [r4, #0]
 800a760:	6833      	ldr	r3, [r6, #0]
 800a762:	0608      	lsls	r0, r1, #24
 800a764:	f853 5b04 	ldr.w	r5, [r3], #4
 800a768:	d402      	bmi.n	800a770 <_printf_i+0xe8>
 800a76a:	0649      	lsls	r1, r1, #25
 800a76c:	bf48      	it	mi
 800a76e:	b2ad      	uxthmi	r5, r5
 800a770:	2f6f      	cmp	r7, #111	@ 0x6f
 800a772:	4853      	ldr	r0, [pc, #332]	@ (800a8c0 <_printf_i+0x238>)
 800a774:	6033      	str	r3, [r6, #0]
 800a776:	bf14      	ite	ne
 800a778:	230a      	movne	r3, #10
 800a77a:	2308      	moveq	r3, #8
 800a77c:	2100      	movs	r1, #0
 800a77e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a782:	6866      	ldr	r6, [r4, #4]
 800a784:	60a6      	str	r6, [r4, #8]
 800a786:	2e00      	cmp	r6, #0
 800a788:	bfa2      	ittt	ge
 800a78a:	6821      	ldrge	r1, [r4, #0]
 800a78c:	f021 0104 	bicge.w	r1, r1, #4
 800a790:	6021      	strge	r1, [r4, #0]
 800a792:	b90d      	cbnz	r5, 800a798 <_printf_i+0x110>
 800a794:	2e00      	cmp	r6, #0
 800a796:	d04b      	beq.n	800a830 <_printf_i+0x1a8>
 800a798:	4616      	mov	r6, r2
 800a79a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a79e:	fb03 5711 	mls	r7, r3, r1, r5
 800a7a2:	5dc7      	ldrb	r7, [r0, r7]
 800a7a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a7a8:	462f      	mov	r7, r5
 800a7aa:	42bb      	cmp	r3, r7
 800a7ac:	460d      	mov	r5, r1
 800a7ae:	d9f4      	bls.n	800a79a <_printf_i+0x112>
 800a7b0:	2b08      	cmp	r3, #8
 800a7b2:	d10b      	bne.n	800a7cc <_printf_i+0x144>
 800a7b4:	6823      	ldr	r3, [r4, #0]
 800a7b6:	07df      	lsls	r7, r3, #31
 800a7b8:	d508      	bpl.n	800a7cc <_printf_i+0x144>
 800a7ba:	6923      	ldr	r3, [r4, #16]
 800a7bc:	6861      	ldr	r1, [r4, #4]
 800a7be:	4299      	cmp	r1, r3
 800a7c0:	bfde      	ittt	le
 800a7c2:	2330      	movle	r3, #48	@ 0x30
 800a7c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a7c8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a7cc:	1b92      	subs	r2, r2, r6
 800a7ce:	6122      	str	r2, [r4, #16]
 800a7d0:	f8cd a000 	str.w	sl, [sp]
 800a7d4:	464b      	mov	r3, r9
 800a7d6:	aa03      	add	r2, sp, #12
 800a7d8:	4621      	mov	r1, r4
 800a7da:	4640      	mov	r0, r8
 800a7dc:	f7ff fee6 	bl	800a5ac <_printf_common>
 800a7e0:	3001      	adds	r0, #1
 800a7e2:	d14a      	bne.n	800a87a <_printf_i+0x1f2>
 800a7e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7e8:	b004      	add	sp, #16
 800a7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ee:	6823      	ldr	r3, [r4, #0]
 800a7f0:	f043 0320 	orr.w	r3, r3, #32
 800a7f4:	6023      	str	r3, [r4, #0]
 800a7f6:	4833      	ldr	r0, [pc, #204]	@ (800a8c4 <_printf_i+0x23c>)
 800a7f8:	2778      	movs	r7, #120	@ 0x78
 800a7fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	6831      	ldr	r1, [r6, #0]
 800a802:	061f      	lsls	r7, r3, #24
 800a804:	f851 5b04 	ldr.w	r5, [r1], #4
 800a808:	d402      	bmi.n	800a810 <_printf_i+0x188>
 800a80a:	065f      	lsls	r7, r3, #25
 800a80c:	bf48      	it	mi
 800a80e:	b2ad      	uxthmi	r5, r5
 800a810:	6031      	str	r1, [r6, #0]
 800a812:	07d9      	lsls	r1, r3, #31
 800a814:	bf44      	itt	mi
 800a816:	f043 0320 	orrmi.w	r3, r3, #32
 800a81a:	6023      	strmi	r3, [r4, #0]
 800a81c:	b11d      	cbz	r5, 800a826 <_printf_i+0x19e>
 800a81e:	2310      	movs	r3, #16
 800a820:	e7ac      	b.n	800a77c <_printf_i+0xf4>
 800a822:	4827      	ldr	r0, [pc, #156]	@ (800a8c0 <_printf_i+0x238>)
 800a824:	e7e9      	b.n	800a7fa <_printf_i+0x172>
 800a826:	6823      	ldr	r3, [r4, #0]
 800a828:	f023 0320 	bic.w	r3, r3, #32
 800a82c:	6023      	str	r3, [r4, #0]
 800a82e:	e7f6      	b.n	800a81e <_printf_i+0x196>
 800a830:	4616      	mov	r6, r2
 800a832:	e7bd      	b.n	800a7b0 <_printf_i+0x128>
 800a834:	6833      	ldr	r3, [r6, #0]
 800a836:	6825      	ldr	r5, [r4, #0]
 800a838:	6961      	ldr	r1, [r4, #20]
 800a83a:	1d18      	adds	r0, r3, #4
 800a83c:	6030      	str	r0, [r6, #0]
 800a83e:	062e      	lsls	r6, r5, #24
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	d501      	bpl.n	800a848 <_printf_i+0x1c0>
 800a844:	6019      	str	r1, [r3, #0]
 800a846:	e002      	b.n	800a84e <_printf_i+0x1c6>
 800a848:	0668      	lsls	r0, r5, #25
 800a84a:	d5fb      	bpl.n	800a844 <_printf_i+0x1bc>
 800a84c:	8019      	strh	r1, [r3, #0]
 800a84e:	2300      	movs	r3, #0
 800a850:	6123      	str	r3, [r4, #16]
 800a852:	4616      	mov	r6, r2
 800a854:	e7bc      	b.n	800a7d0 <_printf_i+0x148>
 800a856:	6833      	ldr	r3, [r6, #0]
 800a858:	1d1a      	adds	r2, r3, #4
 800a85a:	6032      	str	r2, [r6, #0]
 800a85c:	681e      	ldr	r6, [r3, #0]
 800a85e:	6862      	ldr	r2, [r4, #4]
 800a860:	2100      	movs	r1, #0
 800a862:	4630      	mov	r0, r6
 800a864:	f7f5 fcf4 	bl	8000250 <memchr>
 800a868:	b108      	cbz	r0, 800a86e <_printf_i+0x1e6>
 800a86a:	1b80      	subs	r0, r0, r6
 800a86c:	6060      	str	r0, [r4, #4]
 800a86e:	6863      	ldr	r3, [r4, #4]
 800a870:	6123      	str	r3, [r4, #16]
 800a872:	2300      	movs	r3, #0
 800a874:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a878:	e7aa      	b.n	800a7d0 <_printf_i+0x148>
 800a87a:	6923      	ldr	r3, [r4, #16]
 800a87c:	4632      	mov	r2, r6
 800a87e:	4649      	mov	r1, r9
 800a880:	4640      	mov	r0, r8
 800a882:	47d0      	blx	sl
 800a884:	3001      	adds	r0, #1
 800a886:	d0ad      	beq.n	800a7e4 <_printf_i+0x15c>
 800a888:	6823      	ldr	r3, [r4, #0]
 800a88a:	079b      	lsls	r3, r3, #30
 800a88c:	d413      	bmi.n	800a8b6 <_printf_i+0x22e>
 800a88e:	68e0      	ldr	r0, [r4, #12]
 800a890:	9b03      	ldr	r3, [sp, #12]
 800a892:	4298      	cmp	r0, r3
 800a894:	bfb8      	it	lt
 800a896:	4618      	movlt	r0, r3
 800a898:	e7a6      	b.n	800a7e8 <_printf_i+0x160>
 800a89a:	2301      	movs	r3, #1
 800a89c:	4632      	mov	r2, r6
 800a89e:	4649      	mov	r1, r9
 800a8a0:	4640      	mov	r0, r8
 800a8a2:	47d0      	blx	sl
 800a8a4:	3001      	adds	r0, #1
 800a8a6:	d09d      	beq.n	800a7e4 <_printf_i+0x15c>
 800a8a8:	3501      	adds	r5, #1
 800a8aa:	68e3      	ldr	r3, [r4, #12]
 800a8ac:	9903      	ldr	r1, [sp, #12]
 800a8ae:	1a5b      	subs	r3, r3, r1
 800a8b0:	42ab      	cmp	r3, r5
 800a8b2:	dcf2      	bgt.n	800a89a <_printf_i+0x212>
 800a8b4:	e7eb      	b.n	800a88e <_printf_i+0x206>
 800a8b6:	2500      	movs	r5, #0
 800a8b8:	f104 0619 	add.w	r6, r4, #25
 800a8bc:	e7f5      	b.n	800a8aa <_printf_i+0x222>
 800a8be:	bf00      	nop
 800a8c0:	0800b49f 	.word	0x0800b49f
 800a8c4:	0800b4b0 	.word	0x0800b4b0

0800a8c8 <__sflush_r>:
 800a8c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d0:	0716      	lsls	r6, r2, #28
 800a8d2:	4605      	mov	r5, r0
 800a8d4:	460c      	mov	r4, r1
 800a8d6:	d454      	bmi.n	800a982 <__sflush_r+0xba>
 800a8d8:	684b      	ldr	r3, [r1, #4]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	dc02      	bgt.n	800a8e4 <__sflush_r+0x1c>
 800a8de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	dd48      	ble.n	800a976 <__sflush_r+0xae>
 800a8e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8e6:	2e00      	cmp	r6, #0
 800a8e8:	d045      	beq.n	800a976 <__sflush_r+0xae>
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a8f0:	682f      	ldr	r7, [r5, #0]
 800a8f2:	6a21      	ldr	r1, [r4, #32]
 800a8f4:	602b      	str	r3, [r5, #0]
 800a8f6:	d030      	beq.n	800a95a <__sflush_r+0x92>
 800a8f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a8fa:	89a3      	ldrh	r3, [r4, #12]
 800a8fc:	0759      	lsls	r1, r3, #29
 800a8fe:	d505      	bpl.n	800a90c <__sflush_r+0x44>
 800a900:	6863      	ldr	r3, [r4, #4]
 800a902:	1ad2      	subs	r2, r2, r3
 800a904:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a906:	b10b      	cbz	r3, 800a90c <__sflush_r+0x44>
 800a908:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a90a:	1ad2      	subs	r2, r2, r3
 800a90c:	2300      	movs	r3, #0
 800a90e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a910:	6a21      	ldr	r1, [r4, #32]
 800a912:	4628      	mov	r0, r5
 800a914:	47b0      	blx	r6
 800a916:	1c43      	adds	r3, r0, #1
 800a918:	89a3      	ldrh	r3, [r4, #12]
 800a91a:	d106      	bne.n	800a92a <__sflush_r+0x62>
 800a91c:	6829      	ldr	r1, [r5, #0]
 800a91e:	291d      	cmp	r1, #29
 800a920:	d82b      	bhi.n	800a97a <__sflush_r+0xb2>
 800a922:	4a2a      	ldr	r2, [pc, #168]	@ (800a9cc <__sflush_r+0x104>)
 800a924:	410a      	asrs	r2, r1
 800a926:	07d6      	lsls	r6, r2, #31
 800a928:	d427      	bmi.n	800a97a <__sflush_r+0xb2>
 800a92a:	2200      	movs	r2, #0
 800a92c:	6062      	str	r2, [r4, #4]
 800a92e:	04d9      	lsls	r1, r3, #19
 800a930:	6922      	ldr	r2, [r4, #16]
 800a932:	6022      	str	r2, [r4, #0]
 800a934:	d504      	bpl.n	800a940 <__sflush_r+0x78>
 800a936:	1c42      	adds	r2, r0, #1
 800a938:	d101      	bne.n	800a93e <__sflush_r+0x76>
 800a93a:	682b      	ldr	r3, [r5, #0]
 800a93c:	b903      	cbnz	r3, 800a940 <__sflush_r+0x78>
 800a93e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a940:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a942:	602f      	str	r7, [r5, #0]
 800a944:	b1b9      	cbz	r1, 800a976 <__sflush_r+0xae>
 800a946:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a94a:	4299      	cmp	r1, r3
 800a94c:	d002      	beq.n	800a954 <__sflush_r+0x8c>
 800a94e:	4628      	mov	r0, r5
 800a950:	f000 fa3e 	bl	800add0 <_free_r>
 800a954:	2300      	movs	r3, #0
 800a956:	6363      	str	r3, [r4, #52]	@ 0x34
 800a958:	e00d      	b.n	800a976 <__sflush_r+0xae>
 800a95a:	2301      	movs	r3, #1
 800a95c:	4628      	mov	r0, r5
 800a95e:	47b0      	blx	r6
 800a960:	4602      	mov	r2, r0
 800a962:	1c50      	adds	r0, r2, #1
 800a964:	d1c9      	bne.n	800a8fa <__sflush_r+0x32>
 800a966:	682b      	ldr	r3, [r5, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d0c6      	beq.n	800a8fa <__sflush_r+0x32>
 800a96c:	2b1d      	cmp	r3, #29
 800a96e:	d001      	beq.n	800a974 <__sflush_r+0xac>
 800a970:	2b16      	cmp	r3, #22
 800a972:	d11e      	bne.n	800a9b2 <__sflush_r+0xea>
 800a974:	602f      	str	r7, [r5, #0]
 800a976:	2000      	movs	r0, #0
 800a978:	e022      	b.n	800a9c0 <__sflush_r+0xf8>
 800a97a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a97e:	b21b      	sxth	r3, r3
 800a980:	e01b      	b.n	800a9ba <__sflush_r+0xf2>
 800a982:	690f      	ldr	r7, [r1, #16]
 800a984:	2f00      	cmp	r7, #0
 800a986:	d0f6      	beq.n	800a976 <__sflush_r+0xae>
 800a988:	0793      	lsls	r3, r2, #30
 800a98a:	680e      	ldr	r6, [r1, #0]
 800a98c:	bf08      	it	eq
 800a98e:	694b      	ldreq	r3, [r1, #20]
 800a990:	600f      	str	r7, [r1, #0]
 800a992:	bf18      	it	ne
 800a994:	2300      	movne	r3, #0
 800a996:	eba6 0807 	sub.w	r8, r6, r7
 800a99a:	608b      	str	r3, [r1, #8]
 800a99c:	f1b8 0f00 	cmp.w	r8, #0
 800a9a0:	dde9      	ble.n	800a976 <__sflush_r+0xae>
 800a9a2:	6a21      	ldr	r1, [r4, #32]
 800a9a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a9a6:	4643      	mov	r3, r8
 800a9a8:	463a      	mov	r2, r7
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	47b0      	blx	r6
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	dc08      	bgt.n	800a9c4 <__sflush_r+0xfc>
 800a9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9ba:	81a3      	strh	r3, [r4, #12]
 800a9bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9c4:	4407      	add	r7, r0
 800a9c6:	eba8 0800 	sub.w	r8, r8, r0
 800a9ca:	e7e7      	b.n	800a99c <__sflush_r+0xd4>
 800a9cc:	dfbffffe 	.word	0xdfbffffe

0800a9d0 <_fflush_r>:
 800a9d0:	b538      	push	{r3, r4, r5, lr}
 800a9d2:	690b      	ldr	r3, [r1, #16]
 800a9d4:	4605      	mov	r5, r0
 800a9d6:	460c      	mov	r4, r1
 800a9d8:	b913      	cbnz	r3, 800a9e0 <_fflush_r+0x10>
 800a9da:	2500      	movs	r5, #0
 800a9dc:	4628      	mov	r0, r5
 800a9de:	bd38      	pop	{r3, r4, r5, pc}
 800a9e0:	b118      	cbz	r0, 800a9ea <_fflush_r+0x1a>
 800a9e2:	6a03      	ldr	r3, [r0, #32]
 800a9e4:	b90b      	cbnz	r3, 800a9ea <_fflush_r+0x1a>
 800a9e6:	f7ff fa71 	bl	8009ecc <__sinit>
 800a9ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d0f3      	beq.n	800a9da <_fflush_r+0xa>
 800a9f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a9f4:	07d0      	lsls	r0, r2, #31
 800a9f6:	d404      	bmi.n	800aa02 <_fflush_r+0x32>
 800a9f8:	0599      	lsls	r1, r3, #22
 800a9fa:	d402      	bmi.n	800aa02 <_fflush_r+0x32>
 800a9fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9fe:	f7ff fbc0 	bl	800a182 <__retarget_lock_acquire_recursive>
 800aa02:	4628      	mov	r0, r5
 800aa04:	4621      	mov	r1, r4
 800aa06:	f7ff ff5f 	bl	800a8c8 <__sflush_r>
 800aa0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa0c:	07da      	lsls	r2, r3, #31
 800aa0e:	4605      	mov	r5, r0
 800aa10:	d4e4      	bmi.n	800a9dc <_fflush_r+0xc>
 800aa12:	89a3      	ldrh	r3, [r4, #12]
 800aa14:	059b      	lsls	r3, r3, #22
 800aa16:	d4e1      	bmi.n	800a9dc <_fflush_r+0xc>
 800aa18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa1a:	f7ff fbb3 	bl	800a184 <__retarget_lock_release_recursive>
 800aa1e:	e7dd      	b.n	800a9dc <_fflush_r+0xc>

0800aa20 <__malloc_lock>:
 800aa20:	4801      	ldr	r0, [pc, #4]	@ (800aa28 <__malloc_lock+0x8>)
 800aa22:	f7ff bbae 	b.w	800a182 <__retarget_lock_acquire_recursive>
 800aa26:	bf00      	nop
 800aa28:	200009f8 	.word	0x200009f8

0800aa2c <__malloc_unlock>:
 800aa2c:	4801      	ldr	r0, [pc, #4]	@ (800aa34 <__malloc_unlock+0x8>)
 800aa2e:	f7ff bba9 	b.w	800a184 <__retarget_lock_release_recursive>
 800aa32:	bf00      	nop
 800aa34:	200009f8 	.word	0x200009f8

0800aa38 <__sread>:
 800aa38:	b510      	push	{r4, lr}
 800aa3a:	460c      	mov	r4, r1
 800aa3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa40:	f000 f98a 	bl	800ad58 <_read_r>
 800aa44:	2800      	cmp	r0, #0
 800aa46:	bfab      	itete	ge
 800aa48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aa4a:	89a3      	ldrhlt	r3, [r4, #12]
 800aa4c:	181b      	addge	r3, r3, r0
 800aa4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aa52:	bfac      	ite	ge
 800aa54:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aa56:	81a3      	strhlt	r3, [r4, #12]
 800aa58:	bd10      	pop	{r4, pc}

0800aa5a <__swrite>:
 800aa5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa5e:	461f      	mov	r7, r3
 800aa60:	898b      	ldrh	r3, [r1, #12]
 800aa62:	05db      	lsls	r3, r3, #23
 800aa64:	4605      	mov	r5, r0
 800aa66:	460c      	mov	r4, r1
 800aa68:	4616      	mov	r6, r2
 800aa6a:	d505      	bpl.n	800aa78 <__swrite+0x1e>
 800aa6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa70:	2302      	movs	r3, #2
 800aa72:	2200      	movs	r2, #0
 800aa74:	f000 f95e 	bl	800ad34 <_lseek_r>
 800aa78:	89a3      	ldrh	r3, [r4, #12]
 800aa7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aa82:	81a3      	strh	r3, [r4, #12]
 800aa84:	4632      	mov	r2, r6
 800aa86:	463b      	mov	r3, r7
 800aa88:	4628      	mov	r0, r5
 800aa8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa8e:	f000 b985 	b.w	800ad9c <_write_r>

0800aa92 <__sseek>:
 800aa92:	b510      	push	{r4, lr}
 800aa94:	460c      	mov	r4, r1
 800aa96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa9a:	f000 f94b 	bl	800ad34 <_lseek_r>
 800aa9e:	1c43      	adds	r3, r0, #1
 800aaa0:	89a3      	ldrh	r3, [r4, #12]
 800aaa2:	bf15      	itete	ne
 800aaa4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aaa6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aaaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aaae:	81a3      	strheq	r3, [r4, #12]
 800aab0:	bf18      	it	ne
 800aab2:	81a3      	strhne	r3, [r4, #12]
 800aab4:	bd10      	pop	{r4, pc}

0800aab6 <__sclose>:
 800aab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaba:	f000 b909 	b.w	800acd0 <_close_r>
	...

0800aac0 <fiprintf>:
 800aac0:	b40e      	push	{r1, r2, r3}
 800aac2:	b503      	push	{r0, r1, lr}
 800aac4:	4601      	mov	r1, r0
 800aac6:	ab03      	add	r3, sp, #12
 800aac8:	4805      	ldr	r0, [pc, #20]	@ (800aae0 <fiprintf+0x20>)
 800aaca:	f853 2b04 	ldr.w	r2, [r3], #4
 800aace:	6800      	ldr	r0, [r0, #0]
 800aad0:	9301      	str	r3, [sp, #4]
 800aad2:	f7ff fba9 	bl	800a228 <_vfiprintf_r>
 800aad6:	b002      	add	sp, #8
 800aad8:	f85d eb04 	ldr.w	lr, [sp], #4
 800aadc:	b003      	add	sp, #12
 800aade:	4770      	bx	lr
 800aae0:	20000158 	.word	0x20000158

0800aae4 <__swbuf_r>:
 800aae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae6:	460e      	mov	r6, r1
 800aae8:	4614      	mov	r4, r2
 800aaea:	4605      	mov	r5, r0
 800aaec:	b118      	cbz	r0, 800aaf6 <__swbuf_r+0x12>
 800aaee:	6a03      	ldr	r3, [r0, #32]
 800aaf0:	b90b      	cbnz	r3, 800aaf6 <__swbuf_r+0x12>
 800aaf2:	f7ff f9eb 	bl	8009ecc <__sinit>
 800aaf6:	69a3      	ldr	r3, [r4, #24]
 800aaf8:	60a3      	str	r3, [r4, #8]
 800aafa:	89a3      	ldrh	r3, [r4, #12]
 800aafc:	071a      	lsls	r2, r3, #28
 800aafe:	d501      	bpl.n	800ab04 <__swbuf_r+0x20>
 800ab00:	6923      	ldr	r3, [r4, #16]
 800ab02:	b943      	cbnz	r3, 800ab16 <__swbuf_r+0x32>
 800ab04:	4621      	mov	r1, r4
 800ab06:	4628      	mov	r0, r5
 800ab08:	f000 f82a 	bl	800ab60 <__swsetup_r>
 800ab0c:	b118      	cbz	r0, 800ab16 <__swbuf_r+0x32>
 800ab0e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ab12:	4638      	mov	r0, r7
 800ab14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab16:	6823      	ldr	r3, [r4, #0]
 800ab18:	6922      	ldr	r2, [r4, #16]
 800ab1a:	1a98      	subs	r0, r3, r2
 800ab1c:	6963      	ldr	r3, [r4, #20]
 800ab1e:	b2f6      	uxtb	r6, r6
 800ab20:	4283      	cmp	r3, r0
 800ab22:	4637      	mov	r7, r6
 800ab24:	dc05      	bgt.n	800ab32 <__swbuf_r+0x4e>
 800ab26:	4621      	mov	r1, r4
 800ab28:	4628      	mov	r0, r5
 800ab2a:	f7ff ff51 	bl	800a9d0 <_fflush_r>
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	d1ed      	bne.n	800ab0e <__swbuf_r+0x2a>
 800ab32:	68a3      	ldr	r3, [r4, #8]
 800ab34:	3b01      	subs	r3, #1
 800ab36:	60a3      	str	r3, [r4, #8]
 800ab38:	6823      	ldr	r3, [r4, #0]
 800ab3a:	1c5a      	adds	r2, r3, #1
 800ab3c:	6022      	str	r2, [r4, #0]
 800ab3e:	701e      	strb	r6, [r3, #0]
 800ab40:	6962      	ldr	r2, [r4, #20]
 800ab42:	1c43      	adds	r3, r0, #1
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d004      	beq.n	800ab52 <__swbuf_r+0x6e>
 800ab48:	89a3      	ldrh	r3, [r4, #12]
 800ab4a:	07db      	lsls	r3, r3, #31
 800ab4c:	d5e1      	bpl.n	800ab12 <__swbuf_r+0x2e>
 800ab4e:	2e0a      	cmp	r6, #10
 800ab50:	d1df      	bne.n	800ab12 <__swbuf_r+0x2e>
 800ab52:	4621      	mov	r1, r4
 800ab54:	4628      	mov	r0, r5
 800ab56:	f7ff ff3b 	bl	800a9d0 <_fflush_r>
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	d0d9      	beq.n	800ab12 <__swbuf_r+0x2e>
 800ab5e:	e7d6      	b.n	800ab0e <__swbuf_r+0x2a>

0800ab60 <__swsetup_r>:
 800ab60:	b538      	push	{r3, r4, r5, lr}
 800ab62:	4b29      	ldr	r3, [pc, #164]	@ (800ac08 <__swsetup_r+0xa8>)
 800ab64:	4605      	mov	r5, r0
 800ab66:	6818      	ldr	r0, [r3, #0]
 800ab68:	460c      	mov	r4, r1
 800ab6a:	b118      	cbz	r0, 800ab74 <__swsetup_r+0x14>
 800ab6c:	6a03      	ldr	r3, [r0, #32]
 800ab6e:	b90b      	cbnz	r3, 800ab74 <__swsetup_r+0x14>
 800ab70:	f7ff f9ac 	bl	8009ecc <__sinit>
 800ab74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab78:	0719      	lsls	r1, r3, #28
 800ab7a:	d422      	bmi.n	800abc2 <__swsetup_r+0x62>
 800ab7c:	06da      	lsls	r2, r3, #27
 800ab7e:	d407      	bmi.n	800ab90 <__swsetup_r+0x30>
 800ab80:	2209      	movs	r2, #9
 800ab82:	602a      	str	r2, [r5, #0]
 800ab84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab88:	81a3      	strh	r3, [r4, #12]
 800ab8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab8e:	e033      	b.n	800abf8 <__swsetup_r+0x98>
 800ab90:	0758      	lsls	r0, r3, #29
 800ab92:	d512      	bpl.n	800abba <__swsetup_r+0x5a>
 800ab94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab96:	b141      	cbz	r1, 800abaa <__swsetup_r+0x4a>
 800ab98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab9c:	4299      	cmp	r1, r3
 800ab9e:	d002      	beq.n	800aba6 <__swsetup_r+0x46>
 800aba0:	4628      	mov	r0, r5
 800aba2:	f000 f915 	bl	800add0 <_free_r>
 800aba6:	2300      	movs	r3, #0
 800aba8:	6363      	str	r3, [r4, #52]	@ 0x34
 800abaa:	89a3      	ldrh	r3, [r4, #12]
 800abac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800abb0:	81a3      	strh	r3, [r4, #12]
 800abb2:	2300      	movs	r3, #0
 800abb4:	6063      	str	r3, [r4, #4]
 800abb6:	6923      	ldr	r3, [r4, #16]
 800abb8:	6023      	str	r3, [r4, #0]
 800abba:	89a3      	ldrh	r3, [r4, #12]
 800abbc:	f043 0308 	orr.w	r3, r3, #8
 800abc0:	81a3      	strh	r3, [r4, #12]
 800abc2:	6923      	ldr	r3, [r4, #16]
 800abc4:	b94b      	cbnz	r3, 800abda <__swsetup_r+0x7a>
 800abc6:	89a3      	ldrh	r3, [r4, #12]
 800abc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800abcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abd0:	d003      	beq.n	800abda <__swsetup_r+0x7a>
 800abd2:	4621      	mov	r1, r4
 800abd4:	4628      	mov	r0, r5
 800abd6:	f000 f83f 	bl	800ac58 <__smakebuf_r>
 800abda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abde:	f013 0201 	ands.w	r2, r3, #1
 800abe2:	d00a      	beq.n	800abfa <__swsetup_r+0x9a>
 800abe4:	2200      	movs	r2, #0
 800abe6:	60a2      	str	r2, [r4, #8]
 800abe8:	6962      	ldr	r2, [r4, #20]
 800abea:	4252      	negs	r2, r2
 800abec:	61a2      	str	r2, [r4, #24]
 800abee:	6922      	ldr	r2, [r4, #16]
 800abf0:	b942      	cbnz	r2, 800ac04 <__swsetup_r+0xa4>
 800abf2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800abf6:	d1c5      	bne.n	800ab84 <__swsetup_r+0x24>
 800abf8:	bd38      	pop	{r3, r4, r5, pc}
 800abfa:	0799      	lsls	r1, r3, #30
 800abfc:	bf58      	it	pl
 800abfe:	6962      	ldrpl	r2, [r4, #20]
 800ac00:	60a2      	str	r2, [r4, #8]
 800ac02:	e7f4      	b.n	800abee <__swsetup_r+0x8e>
 800ac04:	2000      	movs	r0, #0
 800ac06:	e7f7      	b.n	800abf8 <__swsetup_r+0x98>
 800ac08:	20000158 	.word	0x20000158

0800ac0c <__swhatbuf_r>:
 800ac0c:	b570      	push	{r4, r5, r6, lr}
 800ac0e:	460c      	mov	r4, r1
 800ac10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac14:	2900      	cmp	r1, #0
 800ac16:	b096      	sub	sp, #88	@ 0x58
 800ac18:	4615      	mov	r5, r2
 800ac1a:	461e      	mov	r6, r3
 800ac1c:	da0d      	bge.n	800ac3a <__swhatbuf_r+0x2e>
 800ac1e:	89a3      	ldrh	r3, [r4, #12]
 800ac20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ac24:	f04f 0100 	mov.w	r1, #0
 800ac28:	bf14      	ite	ne
 800ac2a:	2340      	movne	r3, #64	@ 0x40
 800ac2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ac30:	2000      	movs	r0, #0
 800ac32:	6031      	str	r1, [r6, #0]
 800ac34:	602b      	str	r3, [r5, #0]
 800ac36:	b016      	add	sp, #88	@ 0x58
 800ac38:	bd70      	pop	{r4, r5, r6, pc}
 800ac3a:	466a      	mov	r2, sp
 800ac3c:	f000 f858 	bl	800acf0 <_fstat_r>
 800ac40:	2800      	cmp	r0, #0
 800ac42:	dbec      	blt.n	800ac1e <__swhatbuf_r+0x12>
 800ac44:	9901      	ldr	r1, [sp, #4]
 800ac46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac4e:	4259      	negs	r1, r3
 800ac50:	4159      	adcs	r1, r3
 800ac52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac56:	e7eb      	b.n	800ac30 <__swhatbuf_r+0x24>

0800ac58 <__smakebuf_r>:
 800ac58:	898b      	ldrh	r3, [r1, #12]
 800ac5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac5c:	079d      	lsls	r5, r3, #30
 800ac5e:	4606      	mov	r6, r0
 800ac60:	460c      	mov	r4, r1
 800ac62:	d507      	bpl.n	800ac74 <__smakebuf_r+0x1c>
 800ac64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ac68:	6023      	str	r3, [r4, #0]
 800ac6a:	6123      	str	r3, [r4, #16]
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	6163      	str	r3, [r4, #20]
 800ac70:	b003      	add	sp, #12
 800ac72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac74:	ab01      	add	r3, sp, #4
 800ac76:	466a      	mov	r2, sp
 800ac78:	f7ff ffc8 	bl	800ac0c <__swhatbuf_r>
 800ac7c:	9f00      	ldr	r7, [sp, #0]
 800ac7e:	4605      	mov	r5, r0
 800ac80:	4639      	mov	r1, r7
 800ac82:	4630      	mov	r0, r6
 800ac84:	f7ff fc12 	bl	800a4ac <_malloc_r>
 800ac88:	b948      	cbnz	r0, 800ac9e <__smakebuf_r+0x46>
 800ac8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac8e:	059a      	lsls	r2, r3, #22
 800ac90:	d4ee      	bmi.n	800ac70 <__smakebuf_r+0x18>
 800ac92:	f023 0303 	bic.w	r3, r3, #3
 800ac96:	f043 0302 	orr.w	r3, r3, #2
 800ac9a:	81a3      	strh	r3, [r4, #12]
 800ac9c:	e7e2      	b.n	800ac64 <__smakebuf_r+0xc>
 800ac9e:	89a3      	ldrh	r3, [r4, #12]
 800aca0:	6020      	str	r0, [r4, #0]
 800aca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aca6:	81a3      	strh	r3, [r4, #12]
 800aca8:	9b01      	ldr	r3, [sp, #4]
 800acaa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800acae:	b15b      	cbz	r3, 800acc8 <__smakebuf_r+0x70>
 800acb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acb4:	4630      	mov	r0, r6
 800acb6:	f000 f82d 	bl	800ad14 <_isatty_r>
 800acba:	b128      	cbz	r0, 800acc8 <__smakebuf_r+0x70>
 800acbc:	89a3      	ldrh	r3, [r4, #12]
 800acbe:	f023 0303 	bic.w	r3, r3, #3
 800acc2:	f043 0301 	orr.w	r3, r3, #1
 800acc6:	81a3      	strh	r3, [r4, #12]
 800acc8:	89a3      	ldrh	r3, [r4, #12]
 800acca:	431d      	orrs	r5, r3
 800accc:	81a5      	strh	r5, [r4, #12]
 800acce:	e7cf      	b.n	800ac70 <__smakebuf_r+0x18>

0800acd0 <_close_r>:
 800acd0:	b538      	push	{r3, r4, r5, lr}
 800acd2:	4d06      	ldr	r5, [pc, #24]	@ (800acec <_close_r+0x1c>)
 800acd4:	2300      	movs	r3, #0
 800acd6:	4604      	mov	r4, r0
 800acd8:	4608      	mov	r0, r1
 800acda:	602b      	str	r3, [r5, #0]
 800acdc:	f7f6 f9e0 	bl	80010a0 <_close>
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	d102      	bne.n	800acea <_close_r+0x1a>
 800ace4:	682b      	ldr	r3, [r5, #0]
 800ace6:	b103      	cbz	r3, 800acea <_close_r+0x1a>
 800ace8:	6023      	str	r3, [r4, #0]
 800acea:	bd38      	pop	{r3, r4, r5, pc}
 800acec:	20000a04 	.word	0x20000a04

0800acf0 <_fstat_r>:
 800acf0:	b538      	push	{r3, r4, r5, lr}
 800acf2:	4d07      	ldr	r5, [pc, #28]	@ (800ad10 <_fstat_r+0x20>)
 800acf4:	2300      	movs	r3, #0
 800acf6:	4604      	mov	r4, r0
 800acf8:	4608      	mov	r0, r1
 800acfa:	4611      	mov	r1, r2
 800acfc:	602b      	str	r3, [r5, #0]
 800acfe:	f7f6 f9db 	bl	80010b8 <_fstat>
 800ad02:	1c43      	adds	r3, r0, #1
 800ad04:	d102      	bne.n	800ad0c <_fstat_r+0x1c>
 800ad06:	682b      	ldr	r3, [r5, #0]
 800ad08:	b103      	cbz	r3, 800ad0c <_fstat_r+0x1c>
 800ad0a:	6023      	str	r3, [r4, #0]
 800ad0c:	bd38      	pop	{r3, r4, r5, pc}
 800ad0e:	bf00      	nop
 800ad10:	20000a04 	.word	0x20000a04

0800ad14 <_isatty_r>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	4d06      	ldr	r5, [pc, #24]	@ (800ad30 <_isatty_r+0x1c>)
 800ad18:	2300      	movs	r3, #0
 800ad1a:	4604      	mov	r4, r0
 800ad1c:	4608      	mov	r0, r1
 800ad1e:	602b      	str	r3, [r5, #0]
 800ad20:	f7f6 f9da 	bl	80010d8 <_isatty>
 800ad24:	1c43      	adds	r3, r0, #1
 800ad26:	d102      	bne.n	800ad2e <_isatty_r+0x1a>
 800ad28:	682b      	ldr	r3, [r5, #0]
 800ad2a:	b103      	cbz	r3, 800ad2e <_isatty_r+0x1a>
 800ad2c:	6023      	str	r3, [r4, #0]
 800ad2e:	bd38      	pop	{r3, r4, r5, pc}
 800ad30:	20000a04 	.word	0x20000a04

0800ad34 <_lseek_r>:
 800ad34:	b538      	push	{r3, r4, r5, lr}
 800ad36:	4d07      	ldr	r5, [pc, #28]	@ (800ad54 <_lseek_r+0x20>)
 800ad38:	4604      	mov	r4, r0
 800ad3a:	4608      	mov	r0, r1
 800ad3c:	4611      	mov	r1, r2
 800ad3e:	2200      	movs	r2, #0
 800ad40:	602a      	str	r2, [r5, #0]
 800ad42:	461a      	mov	r2, r3
 800ad44:	f7f6 f9d3 	bl	80010ee <_lseek>
 800ad48:	1c43      	adds	r3, r0, #1
 800ad4a:	d102      	bne.n	800ad52 <_lseek_r+0x1e>
 800ad4c:	682b      	ldr	r3, [r5, #0]
 800ad4e:	b103      	cbz	r3, 800ad52 <_lseek_r+0x1e>
 800ad50:	6023      	str	r3, [r4, #0]
 800ad52:	bd38      	pop	{r3, r4, r5, pc}
 800ad54:	20000a04 	.word	0x20000a04

0800ad58 <_read_r>:
 800ad58:	b538      	push	{r3, r4, r5, lr}
 800ad5a:	4d07      	ldr	r5, [pc, #28]	@ (800ad78 <_read_r+0x20>)
 800ad5c:	4604      	mov	r4, r0
 800ad5e:	4608      	mov	r0, r1
 800ad60:	4611      	mov	r1, r2
 800ad62:	2200      	movs	r2, #0
 800ad64:	602a      	str	r2, [r5, #0]
 800ad66:	461a      	mov	r2, r3
 800ad68:	f7f6 f961 	bl	800102e <_read>
 800ad6c:	1c43      	adds	r3, r0, #1
 800ad6e:	d102      	bne.n	800ad76 <_read_r+0x1e>
 800ad70:	682b      	ldr	r3, [r5, #0]
 800ad72:	b103      	cbz	r3, 800ad76 <_read_r+0x1e>
 800ad74:	6023      	str	r3, [r4, #0]
 800ad76:	bd38      	pop	{r3, r4, r5, pc}
 800ad78:	20000a04 	.word	0x20000a04

0800ad7c <_sbrk_r>:
 800ad7c:	b538      	push	{r3, r4, r5, lr}
 800ad7e:	4d06      	ldr	r5, [pc, #24]	@ (800ad98 <_sbrk_r+0x1c>)
 800ad80:	2300      	movs	r3, #0
 800ad82:	4604      	mov	r4, r0
 800ad84:	4608      	mov	r0, r1
 800ad86:	602b      	str	r3, [r5, #0]
 800ad88:	f7f6 f9be 	bl	8001108 <_sbrk>
 800ad8c:	1c43      	adds	r3, r0, #1
 800ad8e:	d102      	bne.n	800ad96 <_sbrk_r+0x1a>
 800ad90:	682b      	ldr	r3, [r5, #0]
 800ad92:	b103      	cbz	r3, 800ad96 <_sbrk_r+0x1a>
 800ad94:	6023      	str	r3, [r4, #0]
 800ad96:	bd38      	pop	{r3, r4, r5, pc}
 800ad98:	20000a04 	.word	0x20000a04

0800ad9c <_write_r>:
 800ad9c:	b538      	push	{r3, r4, r5, lr}
 800ad9e:	4d07      	ldr	r5, [pc, #28]	@ (800adbc <_write_r+0x20>)
 800ada0:	4604      	mov	r4, r0
 800ada2:	4608      	mov	r0, r1
 800ada4:	4611      	mov	r1, r2
 800ada6:	2200      	movs	r2, #0
 800ada8:	602a      	str	r2, [r5, #0]
 800adaa:	461a      	mov	r2, r3
 800adac:	f7f6 f95c 	bl	8001068 <_write>
 800adb0:	1c43      	adds	r3, r0, #1
 800adb2:	d102      	bne.n	800adba <_write_r+0x1e>
 800adb4:	682b      	ldr	r3, [r5, #0]
 800adb6:	b103      	cbz	r3, 800adba <_write_r+0x1e>
 800adb8:	6023      	str	r3, [r4, #0]
 800adba:	bd38      	pop	{r3, r4, r5, pc}
 800adbc:	20000a04 	.word	0x20000a04

0800adc0 <abort>:
 800adc0:	b508      	push	{r3, lr}
 800adc2:	2006      	movs	r0, #6
 800adc4:	f000 f876 	bl	800aeb4 <raise>
 800adc8:	2001      	movs	r0, #1
 800adca:	f7f6 f925 	bl	8001018 <_exit>
	...

0800add0 <_free_r>:
 800add0:	b538      	push	{r3, r4, r5, lr}
 800add2:	4605      	mov	r5, r0
 800add4:	2900      	cmp	r1, #0
 800add6:	d041      	beq.n	800ae5c <_free_r+0x8c>
 800add8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800addc:	1f0c      	subs	r4, r1, #4
 800adde:	2b00      	cmp	r3, #0
 800ade0:	bfb8      	it	lt
 800ade2:	18e4      	addlt	r4, r4, r3
 800ade4:	f7ff fe1c 	bl	800aa20 <__malloc_lock>
 800ade8:	4a1d      	ldr	r2, [pc, #116]	@ (800ae60 <_free_r+0x90>)
 800adea:	6813      	ldr	r3, [r2, #0]
 800adec:	b933      	cbnz	r3, 800adfc <_free_r+0x2c>
 800adee:	6063      	str	r3, [r4, #4]
 800adf0:	6014      	str	r4, [r2, #0]
 800adf2:	4628      	mov	r0, r5
 800adf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adf8:	f7ff be18 	b.w	800aa2c <__malloc_unlock>
 800adfc:	42a3      	cmp	r3, r4
 800adfe:	d908      	bls.n	800ae12 <_free_r+0x42>
 800ae00:	6820      	ldr	r0, [r4, #0]
 800ae02:	1821      	adds	r1, r4, r0
 800ae04:	428b      	cmp	r3, r1
 800ae06:	bf01      	itttt	eq
 800ae08:	6819      	ldreq	r1, [r3, #0]
 800ae0a:	685b      	ldreq	r3, [r3, #4]
 800ae0c:	1809      	addeq	r1, r1, r0
 800ae0e:	6021      	streq	r1, [r4, #0]
 800ae10:	e7ed      	b.n	800adee <_free_r+0x1e>
 800ae12:	461a      	mov	r2, r3
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	b10b      	cbz	r3, 800ae1c <_free_r+0x4c>
 800ae18:	42a3      	cmp	r3, r4
 800ae1a:	d9fa      	bls.n	800ae12 <_free_r+0x42>
 800ae1c:	6811      	ldr	r1, [r2, #0]
 800ae1e:	1850      	adds	r0, r2, r1
 800ae20:	42a0      	cmp	r0, r4
 800ae22:	d10b      	bne.n	800ae3c <_free_r+0x6c>
 800ae24:	6820      	ldr	r0, [r4, #0]
 800ae26:	4401      	add	r1, r0
 800ae28:	1850      	adds	r0, r2, r1
 800ae2a:	4283      	cmp	r3, r0
 800ae2c:	6011      	str	r1, [r2, #0]
 800ae2e:	d1e0      	bne.n	800adf2 <_free_r+0x22>
 800ae30:	6818      	ldr	r0, [r3, #0]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	6053      	str	r3, [r2, #4]
 800ae36:	4408      	add	r0, r1
 800ae38:	6010      	str	r0, [r2, #0]
 800ae3a:	e7da      	b.n	800adf2 <_free_r+0x22>
 800ae3c:	d902      	bls.n	800ae44 <_free_r+0x74>
 800ae3e:	230c      	movs	r3, #12
 800ae40:	602b      	str	r3, [r5, #0]
 800ae42:	e7d6      	b.n	800adf2 <_free_r+0x22>
 800ae44:	6820      	ldr	r0, [r4, #0]
 800ae46:	1821      	adds	r1, r4, r0
 800ae48:	428b      	cmp	r3, r1
 800ae4a:	bf04      	itt	eq
 800ae4c:	6819      	ldreq	r1, [r3, #0]
 800ae4e:	685b      	ldreq	r3, [r3, #4]
 800ae50:	6063      	str	r3, [r4, #4]
 800ae52:	bf04      	itt	eq
 800ae54:	1809      	addeq	r1, r1, r0
 800ae56:	6021      	streq	r1, [r4, #0]
 800ae58:	6054      	str	r4, [r2, #4]
 800ae5a:	e7ca      	b.n	800adf2 <_free_r+0x22>
 800ae5c:	bd38      	pop	{r3, r4, r5, pc}
 800ae5e:	bf00      	nop
 800ae60:	20000a00 	.word	0x20000a00

0800ae64 <_raise_r>:
 800ae64:	291f      	cmp	r1, #31
 800ae66:	b538      	push	{r3, r4, r5, lr}
 800ae68:	4605      	mov	r5, r0
 800ae6a:	460c      	mov	r4, r1
 800ae6c:	d904      	bls.n	800ae78 <_raise_r+0x14>
 800ae6e:	2316      	movs	r3, #22
 800ae70:	6003      	str	r3, [r0, #0]
 800ae72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae76:	bd38      	pop	{r3, r4, r5, pc}
 800ae78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ae7a:	b112      	cbz	r2, 800ae82 <_raise_r+0x1e>
 800ae7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae80:	b94b      	cbnz	r3, 800ae96 <_raise_r+0x32>
 800ae82:	4628      	mov	r0, r5
 800ae84:	f000 f830 	bl	800aee8 <_getpid_r>
 800ae88:	4622      	mov	r2, r4
 800ae8a:	4601      	mov	r1, r0
 800ae8c:	4628      	mov	r0, r5
 800ae8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae92:	f000 b817 	b.w	800aec4 <_kill_r>
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d00a      	beq.n	800aeb0 <_raise_r+0x4c>
 800ae9a:	1c59      	adds	r1, r3, #1
 800ae9c:	d103      	bne.n	800aea6 <_raise_r+0x42>
 800ae9e:	2316      	movs	r3, #22
 800aea0:	6003      	str	r3, [r0, #0]
 800aea2:	2001      	movs	r0, #1
 800aea4:	e7e7      	b.n	800ae76 <_raise_r+0x12>
 800aea6:	2100      	movs	r1, #0
 800aea8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aeac:	4620      	mov	r0, r4
 800aeae:	4798      	blx	r3
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	e7e0      	b.n	800ae76 <_raise_r+0x12>

0800aeb4 <raise>:
 800aeb4:	4b02      	ldr	r3, [pc, #8]	@ (800aec0 <raise+0xc>)
 800aeb6:	4601      	mov	r1, r0
 800aeb8:	6818      	ldr	r0, [r3, #0]
 800aeba:	f7ff bfd3 	b.w	800ae64 <_raise_r>
 800aebe:	bf00      	nop
 800aec0:	20000158 	.word	0x20000158

0800aec4 <_kill_r>:
 800aec4:	b538      	push	{r3, r4, r5, lr}
 800aec6:	4d07      	ldr	r5, [pc, #28]	@ (800aee4 <_kill_r+0x20>)
 800aec8:	2300      	movs	r3, #0
 800aeca:	4604      	mov	r4, r0
 800aecc:	4608      	mov	r0, r1
 800aece:	4611      	mov	r1, r2
 800aed0:	602b      	str	r3, [r5, #0]
 800aed2:	f7f6 f891 	bl	8000ff8 <_kill>
 800aed6:	1c43      	adds	r3, r0, #1
 800aed8:	d102      	bne.n	800aee0 <_kill_r+0x1c>
 800aeda:	682b      	ldr	r3, [r5, #0]
 800aedc:	b103      	cbz	r3, 800aee0 <_kill_r+0x1c>
 800aede:	6023      	str	r3, [r4, #0]
 800aee0:	bd38      	pop	{r3, r4, r5, pc}
 800aee2:	bf00      	nop
 800aee4:	20000a04 	.word	0x20000a04

0800aee8 <_getpid_r>:
 800aee8:	f7f6 b87e 	b.w	8000fe8 <_getpid>

0800aeec <_init>:
 800aeec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeee:	bf00      	nop
 800aef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aef2:	bc08      	pop	{r3}
 800aef4:	469e      	mov	lr, r3
 800aef6:	4770      	bx	lr

0800aef8 <_fini>:
 800aef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aefa:	bf00      	nop
 800aefc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aefe:	bc08      	pop	{r3}
 800af00:	469e      	mov	lr, r3
 800af02:	4770      	bx	lr
